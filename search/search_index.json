{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"AWS Prototyping SDK (PDK) The PDK contains a set of useful CDK and Projen constructs, vended in multiple languages. All stable constructs live in the following respective package: TS JAVA PYTHON aws-prototpying-sdk software.aws.awsprototypingsdk/aws-prototyping-sdk aws_prototyping_sdk For packages marked experimental , please refer to the usage instruction contained within the respective package documentation. API Reference Developer Guide","title":"AWS Prototyping SDK (PDK)"},{"location":"index.html#aws-prototyping-sdk-pdk","text":"The PDK contains a set of useful CDK and Projen constructs, vended in multiple languages. All stable constructs live in the following respective package: TS JAVA PYTHON aws-prototpying-sdk software.aws.awsprototypingsdk/aws-prototyping-sdk aws_prototyping_sdk For packages marked experimental , please refer to the usage instruction contained within the respective package documentation. API Reference Developer Guide","title":"AWS Prototyping SDK (PDK)"},{"location":"java/aws-arch/index.html","text":"Experimental Warning This is packaged in a separate module while the API is being stabilized. This package is subject to non-backward compatible changes or removal in any future version. Breaking changes will be announced in the release notes. Whilst you may use this package, you may need to update your source code when upgrading to a newer version. Once we stabilize the module, it will be included into the stable aws-prototyping-sdk library. Experimental Usage To use this package, add a dependency on: software.aws.awsprototypingsdk/aws-arch aws-arch (AWS Architecture) Library to provide metadata for AWS Services and AWS Resources. This package generates mappings between @aws-cdk/cfnspec and AWS Architecture Icons , and resolves resource metadata between these systems to infer a normalized definition of an AwsService and AwsResource . The primary aim of this package is to provide a consistent mechanism for other libraries to retrieve naming and assets associated with CloudFormation resources, and by extension CDK resources. Get Started yarn add '@aws-prototyping-sdk/aws-arch' // Example automatically generated from non-compiling source. May contain errors. import aws.prototyping.sdk.aws.arch.AwsArchitecture ; Object s3Bucket = AwsArchitecture . getResource ( \"AWS::S3::Bucket\" ); Object s3Service = AwsArchitecture . getService ( s3Bucket . getService ()); System . out . println ( s3Bucket ); System . out . println ( s3Service ); // => console.log(s3Bucket); { \"name\" : \"Amazon Simple Storage Service Bucket\" , \"cfnType\" : \"AWS::S3::Bucket\" , \"awsAssetName\" : \"Amazon-Simple-Storage-Service_Bucket\" , \"awsAssetIcon\" : \"resources/Amazon-Simple-Storage-Service_Bucket.png\" , \"service\" : \"S3\" } // => console.log(s3Service); { \"provider\" : \"AWS\" , \"name\" : \"Amazon Simple Storage Service\" , \"cfnName\" : \"S3\" , \"awsAssetIcon\" : \"services/Amazon-Simple-Storage-Service.png\" , \"awsAssetName\" : \"Amazon-Simple-Storage-Service\" } Aws Achritecture Icons Retrieve category , service , and resource AWS Architecture Icons . Icon methods return relative asset key paths, as most frameworks have the concept of a base path (imagepaths). Use AwsArchitecture.resolveAssetPath(...) to get absolute path. Retrieve icon based on CloudFormation Resource Type Resource Icon // Example automatically generated from non-compiling source. May contain errors. Object s3Bucket = AwsArchitecture . getResource ( \"AWS::S3::Bucket\" ); Object s3BucketPng = s3Bucket . icon ( \"png\" ); // => \"storage/s3/bucket.png\" Object s3BucketSvg = s3Bucket . icon ( \"svg\" ); // => \"storage/s3/bucket.svg\" // Resolve absolute path for icons AwsArchitecture . resolveAssetPath ( s3BucketPng ); Service Icon // Example automatically generated from non-compiling source. May contain errors. Object s3Service = AwsArchitecture . getResource ( \"AWS::S3::Bucket\" ). getService (); // equivalent to: `AwsArchitecture.getService(\"S3\")` Object s3ServicePng = s3Service . icon ( \"png\" ); // => \"storage/s3/service_icon.png\" Object s3ServiceSvg = s3Service . icon ( \"svg\" ); // => \"storage/s3/service_icon.svg\" // Resolve absolute path for icons AwsArchitecture . resolveAssetPath ( s3ServicePng ); Category Icon // Example automatically generated from non-compiling source. May contain errors. Object storageCategory = AwsArchitecture . getResource ( \"AWS::S3::Bucket\" ). getService (). getCategory (); // equivalent to: `AwsArchitecture.getCategory(\"storage\")` Object storageCategoryPng = storageCategory . icon ( \"png\" ); // => \"storage/category_icon.png\" Object storageCategorySvg = storageCategory . icon ( \"svg\" ); // => \"storage/category_icon.svg\" // Resolve absolute path for icons AwsArchitecture . resolveAssetPath ( storageCategoryPng ); Development This package auto-generates many types and asset files from external sources, which are then auto mapped based on common patterns and explict mappings for edge-cases. The auto-generation is handled by /scripts files which can be run via corresponding package scripts (eg: npx projen generate:assets => /scripts/generate-assets.ts ). There is an implicit sequential order the scripts must be called in due to dependencies, which is handled by npx projen generate script. The generate script is also invoked prior to npx projen build if generated asset directory does not exist. For local development of packages that depend on aws-arch package, you will need to call npx projen generate && npx projen compile (or npx projen build ) prior to locally importing this package. To update AWS Architecture Icons , change the url in ASSET_PACKAGE_ZIP_URL . API Reference Structs ArrowFormat Theme arrow format definition. Initializer import software.aws.awsprototypingsdk.awsarch.aws_arch.ArrowFormat ; ArrowFormat . builder () . color ( java . lang . String ) . color ( java . lang . Boolean ) . head ( java . lang . String ) . style ( java . lang . String ) . tail ( java . lang . String ) . width ( java . lang . Number ) . build (); Properties Name Type Description color java.lang.String OR java.lang.Boolean No description. head java.lang.String No description. style java.lang.String No description. tail java.lang.String No description. width java.lang.Number No description. color Required public java . lang . Object getColor (); Type: java.lang.String OR java.lang.Boolean head Required public java . lang . String getHead (); Type: java.lang.String style Required public java . lang . String getStyle (); Type: java.lang.String tail Required public java . lang . String getTail (); Type: java.lang.String width Required public java . lang . Number getWidth (); Type: java.lang.Number AwsCategoryDefinition Category definition. Initializer import software.aws.awsprototypingsdk.awsarch.aws_arch.AwsCategoryDefinition ; AwsCategoryDefinition . builder () . fillColor ( java . lang . String ) . gradientColor ( java . lang . String ) . id ( java . lang . String ) . name ( java . lang . String ) // .fontColor(java.lang.String) // .variants(java.util.List<java.lang.String>) . build (); Properties Name Type Description fillColor java.lang.String No description. gradientColor java.lang.String No description. id java.lang.String No description. name java.lang.String No description. fontColor java.lang.String No description. variants java.util.List No description. fillColor Required public java . lang . String getFillColor (); Type: java.lang.String gradientColor Required public java . lang . String getGradientColor (); Type: java.lang.String id Required public java . lang . String getId (); Type: java.lang.String name Required public java . lang . String getName (); Type: java.lang.String fontColor Optional public java . lang . String getFontColor (); Type: java.lang.String variants Optional public java . util . List < java . lang . String > getVariants (); Type: java.util.List AwsDrawioResourceIconStyle Drawio resource icon style definition for AWS Resources. Initializer import software.aws.awsprototypingsdk.awsarch.AwsDrawioResourceIconStyle ; AwsDrawioResourceIconStyle . builder () . align ( java . lang . String ) . aspect ( java . lang . String ) . dashed ( java . lang . Number ) . fontSize ( java . lang . Number ) . fontStyle ( java . lang . String ) . fontStyle ( java . lang . Number ) . gradientDirection ( java . lang . String ) . html ( java . lang . Number ) . outlineConnect ( java . lang . Number ) . strokeColor ( java . lang . String ) . verticalAlign ( java . lang . String ) . verticalLabelPosition ( java . lang . String ) // .pointerEvent(java.lang.Number) . fillColor ( java . lang . String ) . fontColor ( java . lang . String ) . gradientColor ( java . lang . String ) . resIcon ( ShapeNames ) . shape ( DrawioAws4ParentShapes ) . build (); Properties Name Type Description align java.lang.String No description. aspect java.lang.String No description. dashed java.lang.Number No description. fontSize java.lang.Number No description. fontStyle java.lang.String OR java.lang.Number No description. gradientDirection java.lang.String No description. html java.lang.Number No description. outlineConnect java.lang.Number No description. strokeColor java.lang.String No description. verticalAlign java.lang.String No description. verticalLabelPosition java.lang.String No description. pointerEvent java.lang.Number No description. fillColor java.lang.String No description. fontColor java.lang.String No description. gradientColor java.lang.String No description. resIcon software.aws.awsprototypingsdk.awsarch.aws_arch.DrawioSpec.Aws4.ShapeNames No description. shape software.aws.awsprototypingsdk.awsarch.aws_arch.DrawioAws4ParentShapes No description. align Required public java . lang . String getAlign (); Type: java.lang.String aspect Required public java . lang . String getAspect (); Type: java.lang.String dashed Required public java . lang . Number getDashed (); Type: java.lang.Number fontSize Required public java . lang . Number getFontSize (); Type: java.lang.Number fontStyle Required public java . lang . Object getFontStyle (); Type: java.lang.String OR java.lang.Number gradientDirection Required public java . lang . String getGradientDirection (); Type: java.lang.String html Required public java . lang . Number getHtml (); Type: java.lang.Number outlineConnect Required public java . lang . Number getOutlineConnect (); Type: java.lang.Number strokeColor Required public java . lang . String getStrokeColor (); Type: java.lang.String verticalAlign Required public java . lang . String getVerticalAlign (); Type: java.lang.String verticalLabelPosition Required public java . lang . String getVerticalLabelPosition (); Type: java.lang.String pointerEvent Optional public java . lang . Number getPointerEvent (); Type: java.lang.Number fillColor Required public java . lang . String getFillColor (); Type: java.lang.String fontColor Required public java . lang . String getFontColor (); Type: java.lang.String gradientColor Required public java . lang . String getGradientColor (); Type: java.lang.String resIcon Required public ShapeNames getResIcon (); Type: software.aws.awsprototypingsdk.awsarch.aws_arch.DrawioSpec.Aws4.ShapeNames shape Required public DrawioAws4ParentShapes getShape (); Type: software.aws.awsprototypingsdk.awsarch.aws_arch.DrawioAws4ParentShapes AwsDrawioShapeStyle Drawio shape based style definition. Initializer import software.aws.awsprototypingsdk.awsarch.AwsDrawioShapeStyle ; AwsDrawioShapeStyle . builder () . align ( java . lang . String ) . aspect ( java . lang . String ) . dashed ( java . lang . Number ) . fontSize ( java . lang . Number ) . fontStyle ( java . lang . String ) . fontStyle ( java . lang . Number ) . gradientDirection ( java . lang . String ) . html ( java . lang . Number ) . outlineConnect ( java . lang . Number ) . strokeColor ( java . lang . String ) . verticalAlign ( java . lang . String ) . verticalLabelPosition ( java . lang . String ) // .pointerEvent(java.lang.Number) . fillColor ( java . lang . String ) . fontColor ( java . lang . String ) . gradientColor ( java . lang . String ) . shape ( ShapeNames ) . build (); Properties Name Type Description align java.lang.String No description. aspect java.lang.String No description. dashed java.lang.Number No description. fontSize java.lang.Number No description. fontStyle java.lang.String OR java.lang.Number No description. gradientDirection java.lang.String No description. html java.lang.Number No description. outlineConnect java.lang.Number No description. strokeColor java.lang.String No description. verticalAlign java.lang.String No description. verticalLabelPosition java.lang.String No description. pointerEvent java.lang.Number No description. fillColor java.lang.String No description. fontColor java.lang.String No description. gradientColor java.lang.String No description. shape software.aws.awsprototypingsdk.awsarch.aws_arch.DrawioSpec.Aws4.ShapeNames No description. align Required public java . lang . String getAlign (); Type: java.lang.String aspect Required public java . lang . String getAspect (); Type: java.lang.String dashed Required public java . lang . Number getDashed (); Type: java.lang.Number fontSize Required public java . lang . Number getFontSize (); Type: java.lang.Number fontStyle Required public java . lang . Object getFontStyle (); Type: java.lang.String OR java.lang.Number gradientDirection Required public java . lang . String getGradientDirection (); Type: java.lang.String html Required public java . lang . Number getHtml (); Type: java.lang.Number outlineConnect Required public java . lang . Number getOutlineConnect (); Type: java.lang.Number strokeColor Required public java . lang . String getStrokeColor (); Type: java.lang.String verticalAlign Required public java . lang . String getVerticalAlign (); Type: java.lang.String verticalLabelPosition Required public java . lang . String getVerticalLabelPosition (); Type: java.lang.String pointerEvent Optional public java . lang . Number getPointerEvent (); Type: java.lang.Number fillColor Required public java . lang . String getFillColor (); Type: java.lang.String fontColor Required public java . lang . String getFontColor (); Type: java.lang.String gradientColor Required public java . lang . String getGradientColor (); Type: java.lang.String shape Required public ShapeNames getShape (); Type: software.aws.awsprototypingsdk.awsarch.aws_arch.DrawioSpec.Aws4.ShapeNames DrawioAwsResourceIconStyleBase Based style definition for drawio aws resource icon. Initializer import software.aws.awsprototypingsdk.awsarch.aws_arch.DrawioAwsResourceIconStyleBase ; DrawioAwsResourceIconStyleBase . builder () . align ( java . lang . String ) . aspect ( java . lang . String ) . dashed ( java . lang . Number ) . fontSize ( java . lang . Number ) . fontStyle ( java . lang . String ) . fontStyle ( java . lang . Number ) . gradientDirection ( java . lang . String ) . html ( java . lang . Number ) . outlineConnect ( java . lang . Number ) . strokeColor ( java . lang . String ) . verticalAlign ( java . lang . String ) . verticalLabelPosition ( java . lang . String ) // .pointerEvent(java.lang.Number) . fillColor ( java . lang . String ) . fontColor ( java . lang . String ) . gradientColor ( java . lang . String ) . build (); Properties Name Type Description align java.lang.String No description. aspect java.lang.String No description. dashed java.lang.Number No description. fontSize java.lang.Number No description. fontStyle java.lang.String OR java.lang.Number No description. gradientDirection java.lang.String No description. html java.lang.Number No description. outlineConnect java.lang.Number No description. strokeColor java.lang.String No description. verticalAlign java.lang.String No description. verticalLabelPosition java.lang.String No description. pointerEvent java.lang.Number No description. fillColor java.lang.String No description. fontColor java.lang.String No description. gradientColor java.lang.String No description. align Required public java . lang . String getAlign (); Type: java.lang.String aspect Required public java . lang . String getAspect (); Type: java.lang.String dashed Required public java . lang . Number getDashed (); Type: java.lang.Number fontSize Required public java . lang . Number getFontSize (); Type: java.lang.Number fontStyle Required public java . lang . Object getFontStyle (); Type: java.lang.String OR java.lang.Number gradientDirection Required public java . lang . String getGradientDirection (); Type: java.lang.String html Required public java . lang . Number getHtml (); Type: java.lang.Number outlineConnect Required public java . lang . Number getOutlineConnect (); Type: java.lang.Number strokeColor Required public java . lang . String getStrokeColor (); Type: java.lang.String verticalAlign Required public java . lang . String getVerticalAlign (); Type: java.lang.String verticalLabelPosition Required public java . lang . String getVerticalLabelPosition (); Type: java.lang.String pointerEvent Optional public java . lang . Number getPointerEvent (); Type: java.lang.Number fillColor Required public java . lang . String getFillColor (); Type: java.lang.String fontColor Required public java . lang . String getFontColor (); Type: java.lang.String gradientColor Required public java . lang . String getGradientColor (); Type: java.lang.String DrawioAwsShapeStyleBase Base definition of drawio aws shape style. Initializer import software.aws.awsprototypingsdk.awsarch.aws_arch.DrawioAwsShapeStyleBase ; DrawioAwsShapeStyleBase . builder () . align ( java . lang . String ) . aspect ( java . lang . String ) . dashed ( java . lang . Number ) . fontSize ( java . lang . Number ) . fontStyle ( java . lang . String ) . fontStyle ( java . lang . Number ) . gradientDirection ( java . lang . String ) . html ( java . lang . Number ) . outlineConnect ( java . lang . Number ) . strokeColor ( java . lang . String ) . verticalAlign ( java . lang . String ) . verticalLabelPosition ( java . lang . String ) // .pointerEvent(java.lang.Number) . build (); Properties Name Type Description align java.lang.String No description. aspect java.lang.String No description. dashed java.lang.Number No description. fontSize java.lang.Number No description. fontStyle java.lang.String OR java.lang.Number No description. gradientDirection java.lang.String No description. html java.lang.Number No description. outlineConnect java.lang.Number No description. strokeColor java.lang.String No description. verticalAlign java.lang.String No description. verticalLabelPosition java.lang.String No description. pointerEvent java.lang.Number No description. align Required public java . lang . String getAlign (); Type: java.lang.String aspect Required public java . lang . String getAspect (); Type: java.lang.String dashed Required public java . lang . Number getDashed (); Type: java.lang.Number fontSize Required public java . lang . Number getFontSize (); Type: java.lang.Number fontStyle Required public java . lang . Object getFontStyle (); Type: java.lang.String OR java.lang.Number gradientDirection Required public java . lang . String getGradientDirection (); Type: java.lang.String html Required public java . lang . Number getHtml (); Type: java.lang.Number outlineConnect Required public java . lang . Number getOutlineConnect (); Type: java.lang.Number strokeColor Required public java . lang . String getStrokeColor (); Type: java.lang.String verticalAlign Required public java . lang . String getVerticalAlign (); Type: java.lang.String verticalLabelPosition Required public java . lang . String getVerticalLabelPosition (); Type: java.lang.String pointerEvent Optional public java . lang . Number getPointerEvent (); Type: java.lang.Number GroupFormat Theme group format definition. Initializer import software.aws.awsprototypingsdk.awsarch.aws_arch.GroupFormat ; GroupFormat . builder () . bgcolor ( java . lang . String ) . bgcolor ( java . lang . Boolean ) . borderColor ( java . lang . String ) . borderColor ( java . lang . Boolean ) . borderStyle ( java . lang . String ) . color ( java . lang . String ) . color ( java . lang . Boolean ) // .iconPng(java.lang.String) // .labelLocation(java.lang.String) . build (); Properties Name Type Description bgcolor java.lang.String OR java.lang.Boolean No description. borderColor java.lang.String OR java.lang.Boolean No description. borderStyle java.lang.String No description. color java.lang.String OR java.lang.Boolean No description. iconPng java.lang.String No description. labelLocation java.lang.String No description. bgcolor Required public java . lang . Object getBgcolor (); Type: java.lang.String OR java.lang.Boolean borderColor Required public java . lang . Object getBorderColor (); Type: java.lang.String OR java.lang.Boolean borderStyle Required public java . lang . String getBorderStyle (); Type: java.lang.String color Required public java . lang . Object getColor (); Type: java.lang.String OR java.lang.Boolean iconPng Optional public java . lang . String getIconPng (); Type: java.lang.String labelLocation Optional public java . lang . String getLabelLocation (); Type: java.lang.String ParsedAssetKey Parsed asset key. Initializer import software.aws.awsprototypingsdk.awsarch.ParsedAssetKey ; ParsedAssetKey . builder () . assetKey ( java . lang . String ) . basename ( java . lang . String ) . category ( java . lang . String ) // .instanceType(java.lang.String) // .iotThing(java.lang.String) // .resource(java.lang.String) // .service(java.lang.String) . build (); Properties Name Type Description assetKey java.lang.String Reference to the full key that was parsed. basename java.lang.String The last segment of the key (which is the nested icon). category java.lang.String Category id. instanceType java.lang.String The instance type if key is for an ec2 instance. iotThing java.lang.String The iot thing if key is for an iot thing. resource java.lang.String Resource id if key is for a resource. service java.lang.String Service id if key is partitioned by resource. assetKey Required public java . lang . String getAssetKey (); Type: java.lang.String Reference to the full key that was parsed. basename Required public java . lang . String getBasename (); Type: java.lang.String The last segment of the key (which is the nested icon). For instances and things this includes the dir prefix. category Required public java . lang . String getCategory (); Type: java.lang.String Category id. instanceType Optional public java . lang . String getInstanceType (); Type: java.lang.String The instance type if key is for an ec2 instance. iotThing Optional public java . lang . String getIotThing (); Type: java.lang.String The iot thing if key is for an iot thing. resource Optional public java . lang . String getResource (); Type: java.lang.String Resource id if key is for a resource. service Optional public java . lang . String getService (); Type: java.lang.String Service id if key is partitioned by resource. ParsedAssetKey Parsed asset key. Initializer import software.aws.awsprototypingsdk.awsarch.aws_arch.ParsedAssetKey ; ParsedAssetKey . builder () . assetKey ( java . lang . String ) . basename ( java . lang . String ) . category ( java . lang . String ) // .instanceType(java.lang.String) // .iotThing(java.lang.String) // .resource(java.lang.String) // .service(java.lang.String) . build (); Properties Name Type Description assetKey java.lang.String Reference to the full key that was parsed. basename java.lang.String The last segment of the key (which is the nested icon). category java.lang.String Category id. instanceType java.lang.String The instance type if key is for an ec2 instance. iotThing java.lang.String The iot thing if key is for an iot thing. resource java.lang.String Resource id if key is for a resource. service java.lang.String Service id if key is partitioned by resource. assetKey Required public java . lang . String getAssetKey (); Type: java.lang.String Reference to the full key that was parsed. basename Required public java . lang . String getBasename (); Type: java.lang.String The last segment of the key (which is the nested icon). For instances and things this includes the dir prefix. category Required public java . lang . String getCategory (); Type: java.lang.String Category id. instanceType Optional public java . lang . String getInstanceType (); Type: java.lang.String The instance type if key is for an ec2 instance. iotThing Optional public java . lang . String getIotThing (); Type: java.lang.String The iot thing if key is for an iot thing. resource Optional public java . lang . String getResource (); Type: java.lang.String Resource id if key is for a resource. service Optional public java . lang . String getService (); Type: java.lang.String Service id if key is partitioned by resource. Theme Theme definition. Initializer import software.aws.awsprototypingsdk.awsarch.aws_arch.Theme ; Theme . builder () . arrows ( ThemeArrows ) . backgrounds ( ThemeBackgrounds ) . groups ( ThemeGroups ) . id ( java . lang . String ) . text ( ThemeText ) . build (); Properties Name Type Description arrows software.aws.awsprototypingsdk.awsarch.aws_arch.ThemeArrows No description. backgrounds software.aws.awsprototypingsdk.awsarch.aws_arch.ThemeBackgrounds No description. groups software.aws.awsprototypingsdk.awsarch.aws_arch.ThemeGroups No description. id java.lang.String No description. text software.aws.awsprototypingsdk.awsarch.aws_arch.ThemeText No description. arrows Required public ThemeArrows getArrows (); Type: software.aws.awsprototypingsdk.awsarch.aws_arch.ThemeArrows backgrounds Required public ThemeBackgrounds getBackgrounds (); Type: software.aws.awsprototypingsdk.awsarch.aws_arch.ThemeBackgrounds groups Required public ThemeGroups getGroups (); Type: software.aws.awsprototypingsdk.awsarch.aws_arch.ThemeGroups id Required public java . lang . String getId (); Type: java.lang.String text Required public ThemeText getText (); Type: software.aws.awsprototypingsdk.awsarch.aws_arch.ThemeText ThemeArrows Theme arrow dictionary. Initializer import software.aws.awsprototypingsdk.awsarch.aws_arch.ThemeArrows ; ThemeArrows . builder () . child ( ArrowFormat ) . default ( ArrowFormat ) . dependency ( ArrowFormat ) . reference ( ArrowFormat ) . build (); Properties Name Type Description child software.aws.awsprototypingsdk.awsarch.aws_arch.ArrowFormat No description. default software.aws.awsprototypingsdk.awsarch.aws_arch.ArrowFormat No description. dependency software.aws.awsprototypingsdk.awsarch.aws_arch.ArrowFormat No description. reference software.aws.awsprototypingsdk.awsarch.aws_arch.ArrowFormat No description. child Required public ArrowFormat getChild (); Type: software.aws.awsprototypingsdk.awsarch.aws_arch.ArrowFormat default Required public ArrowFormat getDefault (); Type: software.aws.awsprototypingsdk.awsarch.aws_arch.ArrowFormat dependency Required public ArrowFormat getDependency (); Type: software.aws.awsprototypingsdk.awsarch.aws_arch.ArrowFormat reference Required public ArrowFormat getReference (); Type: software.aws.awsprototypingsdk.awsarch.aws_arch.ArrowFormat ThemeBackgrounds Theme background dictionary. Initializer import software.aws.awsprototypingsdk.awsarch.aws_arch.ThemeBackgrounds ; ThemeBackgrounds . builder () . base ( java . lang . String ) . generic ( java . lang . String ) . private ( java . lang . String ) . public ( java . lang . String ) . build (); Properties Name Type Description base java.lang.String No description. generic java.lang.String No description. private java.lang.String No description. public java.lang.String No description. base Required public java . lang . String getBase (); Type: java.lang.String generic Required public java . lang . String getGeneric (); Type: java.lang.String private Required public java . lang . String getPrivate (); Type: java.lang.String public Required public java . lang . String getPublic (); Type: java.lang.String ThemeGroups Theme group dicionary. Initializer import software.aws.awsprototypingsdk.awsarch.aws_arch.ThemeGroups ; ThemeGroups . builder () . autoScalingGroup ( GroupFormat ) . availabilityZone ( GroupFormat ) . awsAccount ( GroupFormat ) . awsIoTGreengrass ( GroupFormat ) . awsIoTGreengrassDeployment ( GroupFormat ) . awsStepFunctionsWorkflow ( GroupFormat ) . cloud ( GroupFormat ) . cloudAlt ( GroupFormat ) . corporateDataCenter ( GroupFormat ) . ec2InstanceContents ( GroupFormat ) . elasticBeanstalkContainer ( GroupFormat ) . generic ( GroupFormat ) . genericAlt ( GroupFormat ) . privateSubnet ( GroupFormat ) . publicSubnet ( GroupFormat ) . region ( GroupFormat ) . securityGroup ( GroupFormat ) . serverContents ( GroupFormat ) . spotFleet ( GroupFormat ) . vpc ( GroupFormat ) . build (); Properties Name Type Description autoScalingGroup software.aws.awsprototypingsdk.awsarch.aws_arch.GroupFormat No description. availabilityZone software.aws.awsprototypingsdk.awsarch.aws_arch.GroupFormat No description. awsAccount software.aws.awsprototypingsdk.awsarch.aws_arch.GroupFormat No description. awsIoTGreengrass software.aws.awsprototypingsdk.awsarch.aws_arch.GroupFormat No description. awsIoTGreengrassDeployment software.aws.awsprototypingsdk.awsarch.aws_arch.GroupFormat No description. awsStepFunctionsWorkflow software.aws.awsprototypingsdk.awsarch.aws_arch.GroupFormat No description. cloud software.aws.awsprototypingsdk.awsarch.aws_arch.GroupFormat No description. cloudAlt software.aws.awsprototypingsdk.awsarch.aws_arch.GroupFormat No description. corporateDataCenter software.aws.awsprototypingsdk.awsarch.aws_arch.GroupFormat No description. ec2InstanceContents software.aws.awsprototypingsdk.awsarch.aws_arch.GroupFormat No description. elasticBeanstalkContainer software.aws.awsprototypingsdk.awsarch.aws_arch.GroupFormat No description. generic software.aws.awsprototypingsdk.awsarch.aws_arch.GroupFormat No description. genericAlt software.aws.awsprototypingsdk.awsarch.aws_arch.GroupFormat No description. privateSubnet software.aws.awsprototypingsdk.awsarch.aws_arch.GroupFormat No description. publicSubnet software.aws.awsprototypingsdk.awsarch.aws_arch.GroupFormat No description. region software.aws.awsprototypingsdk.awsarch.aws_arch.GroupFormat No description. securityGroup software.aws.awsprototypingsdk.awsarch.aws_arch.GroupFormat No description. serverContents software.aws.awsprototypingsdk.awsarch.aws_arch.GroupFormat No description. spotFleet software.aws.awsprototypingsdk.awsarch.aws_arch.GroupFormat No description. vpc software.aws.awsprototypingsdk.awsarch.aws_arch.GroupFormat No description. autoScalingGroup Required public GroupFormat getAutoScalingGroup (); Type: software.aws.awsprototypingsdk.awsarch.aws_arch.GroupFormat availabilityZone Required public GroupFormat getAvailabilityZone (); Type: software.aws.awsprototypingsdk.awsarch.aws_arch.GroupFormat awsAccount Required public GroupFormat getAwsAccount (); Type: software.aws.awsprototypingsdk.awsarch.aws_arch.GroupFormat awsIoTGreengrass Required public GroupFormat getAwsIoTGreengrass (); Type: software.aws.awsprototypingsdk.awsarch.aws_arch.GroupFormat awsIoTGreengrassDeployment Required public GroupFormat getAwsIoTGreengrassDeployment (); Type: software.aws.awsprototypingsdk.awsarch.aws_arch.GroupFormat awsStepFunctionsWorkflow Required public GroupFormat getAwsStepFunctionsWorkflow (); Type: software.aws.awsprototypingsdk.awsarch.aws_arch.GroupFormat cloud Required public GroupFormat getCloud (); Type: software.aws.awsprototypingsdk.awsarch.aws_arch.GroupFormat cloudAlt Required public GroupFormat getCloudAlt (); Type: software.aws.awsprototypingsdk.awsarch.aws_arch.GroupFormat corporateDataCenter Required public GroupFormat getCorporateDataCenter (); Type: software.aws.awsprototypingsdk.awsarch.aws_arch.GroupFormat ec2InstanceContents Required public GroupFormat getEc2InstanceContents (); Type: software.aws.awsprototypingsdk.awsarch.aws_arch.GroupFormat elasticBeanstalkContainer Required public GroupFormat getElasticBeanstalkContainer (); Type: software.aws.awsprototypingsdk.awsarch.aws_arch.GroupFormat generic Required public GroupFormat getGeneric (); Type: software.aws.awsprototypingsdk.awsarch.aws_arch.GroupFormat genericAlt Required public GroupFormat getGenericAlt (); Type: software.aws.awsprototypingsdk.awsarch.aws_arch.GroupFormat privateSubnet Required public GroupFormat getPrivateSubnet (); Type: software.aws.awsprototypingsdk.awsarch.aws_arch.GroupFormat publicSubnet Required public GroupFormat getPublicSubnet (); Type: software.aws.awsprototypingsdk.awsarch.aws_arch.GroupFormat region Required public GroupFormat getRegion (); Type: software.aws.awsprototypingsdk.awsarch.aws_arch.GroupFormat securityGroup Required public GroupFormat getSecurityGroup (); Type: software.aws.awsprototypingsdk.awsarch.aws_arch.GroupFormat serverContents Required public GroupFormat getServerContents (); Type: software.aws.awsprototypingsdk.awsarch.aws_arch.GroupFormat spotFleet Required public GroupFormat getSpotFleet (); Type: software.aws.awsprototypingsdk.awsarch.aws_arch.GroupFormat vpc Required public GroupFormat getVpc (); Type: software.aws.awsprototypingsdk.awsarch.aws_arch.GroupFormat ThemeText Theme text dictionary. Initializer import software.aws.awsprototypingsdk.awsarch.aws_arch.ThemeText ; ThemeText . builder () . default ( java . lang . String ) . primary ( java . lang . String ) . secondary ( java . lang . String ) . tertiary ( java . lang . String ) . build (); Properties Name Type Description default java.lang.String No description. primary java.lang.String No description. secondary java.lang.String No description. tertiary java.lang.String No description. default Required public java . lang . String getDefault (); Type: java.lang.String primary Required public java . lang . String getPrimary (); Type: java.lang.String secondary Required public java . lang . String getSecondary (); Type: java.lang.String tertiary Required public java . lang . String getTertiary (); Type: java.lang.String Classes AwsArchitecture AwsArchitecture provides an interface for retrieving the inferred normalization between @aws-cdk/cfnspec and AWS Architecture Icons systems for all CloudFormation \"services\" and \"resources\". Static Functions Name Description formatAssetPath Gets formatted asset path including extension and theme. getCategory Get specific category based on id. getInstanceTypeIcon Get icon for EC2 instance type. getRdsInstanceTypeIcon Get icon for RDS instance type. getResource Get resource based on Cfn Resource Type (eg: AWS::S3::Bucket). getService Get specific service based on identifier (eg: S3, AWS::S3, AWS::S3::Bucket). parseAssetPath Parse assets path into part descriptor. resolveAssetPath Resolve relative asset path to absolute asset path. resolveAssetSvgDataUrl Resolve relative asset path as SVG Data URL . formatAssetPath import software.aws.awsprototypingsdk.awsarch.AwsArchitecture ; AwsArchitecture . formatAssetPath ( java . lang . String qualifiedAssetKey , java . lang . String format ), AwsArchitecture . formatAssetPath ( java . lang . String qualifiedAssetKey , java . lang . String format , java . lang . String theme ) Gets formatted asset path including extension and theme. qualifiedAssetKey Required Type: java.lang.String The qualified asset key (eg: compute/ec2/service_icon, storage/s3/bucket). format Required Type: java.lang.String The format to return (eg: png, svg). theme Optional Type: java.lang.String (Optional) The theme to use, if not specific or now matching asset for the them, the default theme is used. getCategory import software.aws.awsprototypingsdk.awsarch.AwsArchitecture ; AwsArchitecture . getCategory ( java . lang . String category ) Get specific category based on id. {@link AwsCategory.getCategory} category Required Type: java.lang.String getInstanceTypeIcon import software.aws.awsprototypingsdk.awsarch.AwsArchitecture ; AwsArchitecture . getInstanceTypeIcon ( java . lang . String instanceType ), AwsArchitecture . getInstanceTypeIcon ( java . lang . String instanceType , java . lang . String format ), AwsArchitecture . getInstanceTypeIcon ( java . lang . String instanceType , java . lang . String format , java . lang . String theme ) Get icon for EC2 instance type. instanceType Required Type: java.lang.String The { @link AwsAsset.InstanceType} to get icon for. format Optional Type: java.lang.String The format of icon. theme Optional Type: java.lang.String Optional theme. getRdsInstanceTypeIcon import software.aws.awsprototypingsdk.awsarch.AwsArchitecture ; AwsArchitecture . getRdsInstanceTypeIcon ( java . lang . String instanceType ), AwsArchitecture . getRdsInstanceTypeIcon ( java . lang . String instanceType , java . lang . String format ), AwsArchitecture . getRdsInstanceTypeIcon ( java . lang . String instanceType , java . lang . String format , java . lang . String theme ) Get icon for RDS instance type. instanceType Required Type: java.lang.String The { @link AwsAsset.RdsInstanceType} to get icon for. format Optional Type: java.lang.String The format of icon. theme Optional Type: java.lang.String Optional theme. getResource import software.aws.awsprototypingsdk.awsarch.AwsArchitecture ; AwsArchitecture . getResource ( java . lang . String cfnType ) Get resource based on Cfn Resource Type (eg: AWS::S3::Bucket). {@link AwsResource.getResource} cfnType Required Type: java.lang.String getService import software.aws.awsprototypingsdk.awsarch.AwsArchitecture ; AwsArchitecture . getService ( java . lang . String identifier ) Get specific service based on identifier (eg: S3, AWS::S3, AWS::S3::Bucket). {@link AwsSerfice.getService} identifier Required Type: java.lang.String parseAssetPath import software.aws.awsprototypingsdk.awsarch.AwsArchitecture ; AwsArchitecture . parseAssetPath ( java . lang . String assetPath ) Parse assets path into part descriptor. assetPath Required Type: java.lang.String Absolute or relative asset file path to parse. resolveAssetPath import software.aws.awsprototypingsdk.awsarch.AwsArchitecture ; AwsArchitecture . resolveAssetPath ( java . lang . String assetPath ) Resolve relative asset path to absolute asset path. assetPath Required Type: java.lang.String The relative asset path to resolve. resolveAssetSvgDataUrl import software.aws.awsprototypingsdk.awsarch.AwsArchitecture ; AwsArchitecture . resolveAssetSvgDataUrl ( java . lang . String svgAssetPath ) Resolve relative asset path as SVG Data URL . data:image/svg+xml;base64,... svgAssetPath Required Type: java.lang.String The relative path of svg asset to resolve. Properties Name Type Description assetDirectory java.lang.String The absolute directory where AWS Architecture Icons are stored and retrieved. categories java.util.Map AwsCategory\\ > Get all categories. resources java.util.Map AwsResource\\ > Get all resources. services java.util.Map AwsService\\ > Get all services. assetDirectory Required public java . lang . String getAssetDirectory (); Type: java.lang.String The absolute directory where AWS Architecture Icons are stored and retrieved. categories Required public java . util . Map < java . lang . String , AwsCategory > getCategories (); Type: java.util.Map AwsCategory\\ > Get all categories. {@link AwsCategory.categories} resources Required public java . util . Map < java . lang . String , AwsResource > getResources (); Type: java.util.Map AwsResource\\ > Get all resources. {@link AwsResource.resources} services Required public java . util . Map < java . lang . String , AwsService > getServices (); Type: java.util.Map AwsService\\ > Get all services. {@link AwsService.services} AwsCategory AwsCategory class provides an interface for normalizing category metadata between mapped systems. Methods Name Description categoryServices Gets a list of all services within this category. icon Retrieves a well-formatted relative path to the icon for this given category in the specified format. categoryServices public java . util . List < AwsService > categoryServices () Gets a list of all services within this category. icon public java . lang . String icon ( java . lang . String format ) public java . lang . String icon ( java . lang . String format , java . lang . String theme ) Retrieves a well-formatted relative path to the icon for this given category in the specified format. format Required Type: java.lang.String theme Optional Type: java.lang.String Static Functions Name Description getCategory Get { @link AwsCategory} based on { @link AwsCategoryId}. getCategory import software.aws.awsprototypingsdk.awsarch.AwsCategory ; AwsCategory . getCategory ( java . lang . String id ) Get { @link AwsCategory} based on { @link AwsCategoryId}. id Required Type: java.lang.String The id of the category to retrieve. Properties Name Type Description categories java.util.Map AwsCategory\\ > Get record of all categories keyed by category id. fillColor java.lang.String Fill color for the category. fontColor java.lang.String Font color for the category. gradientColor java.lang.String Gradien color for the category. id java.lang.String The unique id of the category. name java.lang.String The proper name of the category. variants java.util.List Alternative names used to identity this category. drawioStyles AwsCategoryDrawioStyles Drawio style definition for this category. categories Required public java . util . Map < java . lang . String , AwsCategory > getCategories (); Type: java.util.Map AwsCategory\\ > Get record of all categories keyed by category id. fillColor Required public java . lang . String getFillColor (); Type: java.lang.String Fill color for the category. fontColor Required public java . lang . String getFontColor (); Type: java.lang.String Font color for the category. gradientColor Required public java . lang . String getGradientColor (); Type: java.lang.String Gradien color for the category. id Required public java . lang . String getId (); Type: java.lang.String The unique id of the category. Example \"security_identity_compliance\" ; name Required public java . lang . String getName (); Type: java.lang.String The proper name of the category. Example \"Security, Identity, & Compliance\" ; variants Required public java . util . List < java . lang . String > getVariants (); Type: java.util.List Alternative names used to identity this category. drawioStyles Optional public AwsCategoryDrawioStyles getDrawioStyles (); Type: AwsCategoryDrawioStyles Drawio style definition for this category. AwsCategoryDrawioStyles AwsCategoryDrawioStyles is a utility class for constructing drawio shape styles for services and resources. Initializers import software.aws.awsprototypingsdk.awsarch.AwsCategoryDrawioStyles ; AwsCategoryDrawioStyles . Builder . create ( ShapeNames categoryShape ) . align ( java . lang . String ) . aspect ( java . lang . String ) . dashed ( java . lang . Number ) . fontSize ( java . lang . Number ) . fontStyle ( java . lang . String ) . fontStyle ( java . lang . Number ) . gradientDirection ( java . lang . String ) . html ( java . lang . Number ) . outlineConnect ( java . lang . Number ) . strokeColor ( java . lang . String ) . verticalAlign ( java . lang . String ) . verticalLabelPosition ( java . lang . String ) // .pointerEvent(java.lang.Number) . fillColor ( java . lang . String ) . fontColor ( java . lang . String ) . gradientColor ( java . lang . String ) . build (); Name Type Description categoryShape software.aws.awsprototypingsdk.awsarch.aws_arch.DrawioSpec.Aws4.ShapeNames No description. align java.lang.String No description. aspect java.lang.String No description. dashed java.lang.Number No description. fontSize java.lang.Number No description. fontStyle java.lang.String OR java.lang.Number No description. gradientDirection java.lang.String No description. html java.lang.Number No description. outlineConnect java.lang.Number No description. strokeColor java.lang.String No description. verticalAlign java.lang.String No description. verticalLabelPosition java.lang.String No description. pointerEvent java.lang.Number No description. fillColor java.lang.String No description. fontColor java.lang.String No description. gradientColor java.lang.String No description. categoryShape Required Type: software.aws.awsprototypingsdk.awsarch.aws_arch.DrawioSpec.Aws4.ShapeNames align Required Type: java.lang.String aspect Required Type: java.lang.String dashed Required Type: java.lang.Number fontSize Required Type: java.lang.Number fontStyle Required Type: java.lang.String OR java.lang.Number gradientDirection Required Type: java.lang.String html Required Type: java.lang.Number outlineConnect Required Type: java.lang.Number strokeColor Required Type: java.lang.String verticalAlign Required Type: java.lang.String verticalLabelPosition Required Type: java.lang.String pointerEvent Optional Type: java.lang.Number fillColor Required Type: java.lang.String fontColor Required Type: java.lang.String gradientColor Required Type: java.lang.String Methods Name Description getResourceStyle Gets the drawio style for a resource based on the category style. getServiceStyle Gets the drawio style for a service based on the category style. getResourceStyle public AwsDrawioShapeStyle getResourceStyle ( ShapeNames resourceShape ) Gets the drawio style for a resource based on the category style. resourceShape Required Type: software.aws.awsprototypingsdk.awsarch.aws_arch.DrawioSpec.Aws4.ShapeNames The resource shape to style based on category. getServiceStyle public AwsDrawioResourceIconStyle getServiceStyle ( ShapeNames serviceShape ) Gets the drawio style for a service based on the category style. serviceShape Required Type: software.aws.awsprototypingsdk.awsarch.aws_arch.DrawioSpec.Aws4.ShapeNames The service shape to style based on category. Properties Name Type Description base software.aws.awsprototypingsdk.awsarch.aws_arch.DrawioAwsResourceIconStyleBase No description. categoryShape software.aws.awsprototypingsdk.awsarch.aws_arch.DrawioSpec.Aws4.ShapeNames No description. categoryStyle AwsDrawioResourceIconStyle Get the drawio style for this category. base Required public DrawioAwsResourceIconStyleBase getBase (); Type: software.aws.awsprototypingsdk.awsarch.aws_arch.DrawioAwsResourceIconStyleBase categoryShape Required public ShapeNames getCategoryShape (); Type: software.aws.awsprototypingsdk.awsarch.aws_arch.DrawioSpec.Aws4.ShapeNames categoryStyle Required public AwsDrawioResourceIconStyle getCategoryStyle (); Type: AwsDrawioResourceIconStyle Get the drawio style for this category. AwsResource AwsResource class provides an interface for normalizing resource metadata between mapped systems. Methods Name Description drawioStyle Gets the draiwio style for the resource. getCategoryIcon Gets the category icon for the resource. getGeneralIcon Gets the general icon for the resource if available. getResourceIcon Gets the resource specific icon for the resource. getServiceIcon Gets the service icon for the resource. icon Gets the best icon match for the resource following the order of: 1. drawioStyle public AwsDrawioShapeStyle drawioStyle () Gets the draiwio style for the resource. getCategoryIcon public java . lang . String getCategoryIcon ( java . lang . String format ) public java . lang . String getCategoryIcon ( java . lang . String format , java . lang . String theme ) Gets the category icon for the resource. This maybe different than { @link AwsResource.service.category.icon} based on mappings overrides, which if do not exist will fallback to { @link AwsResource.service.category.icon}. {@link AwsService.icon} format Required Type: java.lang.String The format of icon. theme Optional Type: java.lang.String Optional theme. getGeneralIcon public java . lang . String getGeneralIcon ( java . lang . String format ) public java . lang . String getGeneralIcon ( java . lang . String format , java . lang . String theme ) Gets the general icon for the resource if available. format Required Type: java.lang.String The format of icon. theme Optional Type: java.lang.String Optional theme. getResourceIcon public java . lang . String getResourceIcon ( java . lang . String format ) public java . lang . String getResourceIcon ( java . lang . String format , java . lang . String theme ) Gets the resource specific icon for the resource. format Required Type: java.lang.String The format of icon. theme Optional Type: java.lang.String Optional theme. getServiceIcon public java . lang . String getServiceIcon ( java . lang . String format ) public java . lang . String getServiceIcon ( java . lang . String format , java . lang . String theme ) Gets the service icon for the resource. This maybe different than { @link AwsResource.service.icon} based on mappings overrides, which if do not exist will fallback to { @link AwsResource.service.icon}. {@link AwsService.icon} format Required Type: java.lang.String The format of icon. theme Optional Type: java.lang.String Optional theme. icon public java . lang . String icon ( java . lang . String format ) public java . lang . String icon ( java . lang . String format , java . lang . String theme ) Gets the best icon match for the resource following the order of: 1. explicit resource icon 2. general icon 3. service icon format Required Type: java.lang.String The format of icon. theme Optional Type: java.lang.String Optional theme. Static Functions Name Description findResource Find { @link AwsResource} associated with given value. getResource Get { @link AwsResource} by CloudFormation resource type. findResource import software.aws.awsprototypingsdk.awsarch.AwsResource ; AwsResource . findResource ( java . lang . String value ) Find { @link AwsResource} associated with given value. value Required Type: java.lang.String The value to match { @link AwsResource}; can be id, asset key, full name, etc. getResource import software.aws.awsprototypingsdk.awsarch.AwsResource ; AwsResource . getResource ( java . lang . String cfnResourceType ) Get { @link AwsResource} by CloudFormation resource type. cfnResourceType Required Type: java.lang.String Fully qualifief CloudFormation resource type (eg: AWS:S3:Bucket). Properties Name Type Description resources java.util.Map AwsResource\\ > Get record of all resources keyed by resource id. cfnResourceType java.lang.String Fully-qualified CloudFormation resource type (eg: \"AWS:S3:Bucket\"). service AwsService The { @link AwsService} the resource belongs to. drawioShape software.aws.awsprototypingsdk.awsarch.aws_arch.DrawioSpec.Aws4.ShapeNames The drawio shape mapped to this resource, or undefined if no mapping. fullName java.lang.String The proper full name of the resource. resources Required public java . util . Map < java . lang . String , AwsResource > getResources (); Type: java.util.Map AwsResource\\ > Get record of all resources keyed by resource id. cfnResourceType Required public java . lang . String getCfnResourceType (); Type: java.lang.String Fully-qualified CloudFormation resource type (eg: \"AWS:S3:Bucket\"). service Required public AwsService getService (); Type: AwsService The { @link AwsService} the resource belongs to. drawioShape Optional public ShapeNames getDrawioShape (); Type: software.aws.awsprototypingsdk.awsarch.aws_arch.DrawioSpec.Aws4.ShapeNames The drawio shape mapped to this resource, or undefined if no mapping. fullName Optional public java . lang . String getFullName (); Type: java.lang.String The proper full name of the resource. Example // Example automatically generated from non-compiling source. May contain errors. \"Bucket\" , \"Amazon S3 on Outposts\" ; AwsService AwsService class provides an interface for normalizing service metadata between mapped systems. Methods Name Description drawioStyle Get drawio style for this service. icon Get relative asset icon for the service for a given format and optional theme. serviceResources List all resources of this service. drawioStyle public AwsDrawioResourceIconStyle drawioStyle () Get drawio style for this service. icon public java . lang . String icon ( java . lang . String format ) public java . lang . String icon ( java . lang . String format , java . lang . String theme ) Get relative asset icon for the service for a given format and optional theme. format Required Type: java.lang.String The format of icon. theme Optional Type: java.lang.String Optional theme. serviceResources public java . util . List < AwsResource > serviceResources () List all resources of this service. Static Functions Name Description findService Finds the { @link AwsService} associated with a given value. getService Get { @link AwsService} by CloudFormation \"service\" name, where service name is expressed as <provider>::<service>::<resource> . findService import software.aws.awsprototypingsdk.awsarch.AwsService ; AwsService . findService ( java . lang . String value ) Finds the { @link AwsService} associated with a given value. value Required Type: java.lang.String Value to match { @link AwsService}, which can be id , assetKey , fullName , etc. getService import software.aws.awsprototypingsdk.awsarch.AwsService ; AwsService . getService ( java . lang . String cfnService ) Get { @link AwsService} by CloudFormation \"service\" name, where service name is expressed as <provider>::<service>::<resource> . cfnService Required Type: java.lang.String The service name to retrieve { @link AwsService} for. Properties Name Type Description services java.util.Map AwsService\\ > Get record of all { @link AwsService}s keyed by id . cfnProvider java.lang.String The CloudFormation \"provider\" for the service, as expressed by <provicer>::<service>::<resource> . cfnService java.lang.String The CloudFormation \"service\" for the service, as expressed by <provicer>::<service>::<resource> . fullName java.lang.String The proper full name of the service. category AwsCategory The category the service belongs to, or undefined if does not belong to a category. drawioShape software.aws.awsprototypingsdk.awsarch.aws_arch.DrawioSpec.Aws4.ShapeNames Drawio shape associated with this service, or undefined if service not mapped to draiwio shape. pricingMetadata software.aws.awsprototypingsdk.awsarch.aws_arch.PricingManifest.Service Get service pricing metadata. pricingServiceCode java.lang.String The pricing serviceCode associated with this service, or undefined if service not mapped to pricing. services Required public java . util . Map < java . lang . String , AwsService > getServices (); Type: java.util.Map AwsService\\ > Get record of all { @link AwsService}s keyed by id . cfnProvider Required public java . lang . String getCfnProvider (); Type: java.lang.String The CloudFormation \"provider\" for the service, as expressed by <provicer>::<service>::<resource> . cfnService Required public java . lang . String getCfnService (); Type: java.lang.String The CloudFormation \"service\" for the service, as expressed by <provicer>::<service>::<resource> . fullName Required public java . lang . String getFullName (); Type: java.lang.String The proper full name of the service. Example // Example automatically generated from non-compiling source. May contain errors. \"AWS Glue\" , \"Amazon S3\" ; category Optional public AwsCategory getCategory (); Type: AwsCategory The category the service belongs to, or undefined if does not belong to a category. drawioShape Optional public ShapeNames getDrawioShape (); Type: software.aws.awsprototypingsdk.awsarch.aws_arch.DrawioSpec.Aws4.ShapeNames Drawio shape associated with this service, or undefined if service not mapped to draiwio shape. pricingMetadata Optional public Service getPricingMetadata (); Type: software.aws.awsprototypingsdk.awsarch.aws_arch.PricingManifest.Service Get service pricing metadata. pricingServiceCode Optional public java . lang . String getPricingServiceCode (); Type: java.lang.String The pricing serviceCode associated with this service, or undefined if service not mapped to pricing. Enums DarkPalette Dark theme color palette. Members Name Description PUBLIC No description. PRIVATE No description. GENERIC No description. PRIMARY No description. SECONDARY No description. TERTIARY No description. PUBLIC PRIVATE GENERIC PRIMARY SECONDARY TERTIARY DrawioAws4ParentShapes Draiwio aws4 parent shapes enum. Members Name Description RESOURCE_ICON No description. RESOURCE_ICON LightPalette Light theme color palette. Members Name Description PUBLIC No description. PRIVATE No description. GENERIC No description. PRIMARY No description. SECONDARY No description. TERTIARY No description. PUBLIC PRIVATE GENERIC PRIMARY SECONDARY TERTIARY","title":"Index"},{"location":"java/aws-arch/index.html#aws-arch-aws-architecture","text":"Library to provide metadata for AWS Services and AWS Resources. This package generates mappings between @aws-cdk/cfnspec and AWS Architecture Icons , and resolves resource metadata between these systems to infer a normalized definition of an AwsService and AwsResource . The primary aim of this package is to provide a consistent mechanism for other libraries to retrieve naming and assets associated with CloudFormation resources, and by extension CDK resources.","title":"aws-arch (AWS Architecture)"},{"location":"java/aws-arch/index.html#get-started","text":"yarn add '@aws-prototyping-sdk/aws-arch' // Example automatically generated from non-compiling source. May contain errors. import aws.prototyping.sdk.aws.arch.AwsArchitecture ; Object s3Bucket = AwsArchitecture . getResource ( \"AWS::S3::Bucket\" ); Object s3Service = AwsArchitecture . getService ( s3Bucket . getService ()); System . out . println ( s3Bucket ); System . out . println ( s3Service ); // => console.log(s3Bucket); { \"name\" : \"Amazon Simple Storage Service Bucket\" , \"cfnType\" : \"AWS::S3::Bucket\" , \"awsAssetName\" : \"Amazon-Simple-Storage-Service_Bucket\" , \"awsAssetIcon\" : \"resources/Amazon-Simple-Storage-Service_Bucket.png\" , \"service\" : \"S3\" } // => console.log(s3Service); { \"provider\" : \"AWS\" , \"name\" : \"Amazon Simple Storage Service\" , \"cfnName\" : \"S3\" , \"awsAssetIcon\" : \"services/Amazon-Simple-Storage-Service.png\" , \"awsAssetName\" : \"Amazon-Simple-Storage-Service\" }","title":"Get Started"},{"location":"java/aws-arch/index.html#aws-achritecture-icons","text":"Retrieve category , service , and resource AWS Architecture Icons . Icon methods return relative asset key paths, as most frameworks have the concept of a base path (imagepaths). Use AwsArchitecture.resolveAssetPath(...) to get absolute path.","title":"Aws Achritecture Icons"},{"location":"java/aws-arch/index.html#development","text":"This package auto-generates many types and asset files from external sources, which are then auto mapped based on common patterns and explict mappings for edge-cases. The auto-generation is handled by /scripts files which can be run via corresponding package scripts (eg: npx projen generate:assets => /scripts/generate-assets.ts ). There is an implicit sequential order the scripts must be called in due to dependencies, which is handled by npx projen generate script. The generate script is also invoked prior to npx projen build if generated asset directory does not exist. For local development of packages that depend on aws-arch package, you will need to call npx projen generate && npx projen compile (or npx projen build ) prior to locally importing this package. To update AWS Architecture Icons , change the url in ASSET_PACKAGE_ZIP_URL .","title":"Development"},{"location":"java/aws-arch/index.html#api-reference","text":"","title":"API Reference "},{"location":"java/aws-arch/index.html#structs","text":"","title":"Structs "},{"location":"java/aws-arch/index.html#arrowformat","text":"Theme arrow format definition.","title":"ArrowFormat "},{"location":"java/aws-arch/index.html#awscategorydefinition","text":"Category definition.","title":"AwsCategoryDefinition "},{"location":"java/aws-arch/index.html#awsdrawioresourceiconstyle","text":"Drawio resource icon style definition for AWS Resources.","title":"AwsDrawioResourceIconStyle "},{"location":"java/aws-arch/index.html#awsdrawioshapestyle","text":"Drawio shape based style definition.","title":"AwsDrawioShapeStyle "},{"location":"java/aws-arch/index.html#drawioawsresourceiconstylebase","text":"Based style definition for drawio aws resource icon.","title":"DrawioAwsResourceIconStyleBase "},{"location":"java/aws-arch/index.html#drawioawsshapestylebase","text":"Base definition of drawio aws shape style.","title":"DrawioAwsShapeStyleBase "},{"location":"java/aws-arch/index.html#groupformat","text":"Theme group format definition.","title":"GroupFormat "},{"location":"java/aws-arch/index.html#parsedassetkey","text":"Parsed asset key.","title":"ParsedAssetKey "},{"location":"java/aws-arch/index.html#parsedassetkey_1","text":"Parsed asset key.","title":"ParsedAssetKey "},{"location":"java/aws-arch/index.html#theme","text":"Theme definition.","title":"Theme "},{"location":"java/aws-arch/index.html#themearrows","text":"Theme arrow dictionary.","title":"ThemeArrows "},{"location":"java/aws-arch/index.html#themebackgrounds","text":"Theme background dictionary.","title":"ThemeBackgrounds "},{"location":"java/aws-arch/index.html#themegroups","text":"Theme group dicionary.","title":"ThemeGroups "},{"location":"java/aws-arch/index.html#themetext","text":"Theme text dictionary.","title":"ThemeText "},{"location":"java/aws-arch/index.html#classes","text":"","title":"Classes "},{"location":"java/aws-arch/index.html#awsarchitecture","text":"AwsArchitecture provides an interface for retrieving the inferred normalization between @aws-cdk/cfnspec and AWS Architecture Icons systems for all CloudFormation \"services\" and \"resources\".","title":"AwsArchitecture "},{"location":"java/aws-arch/index.html#awscategory","text":"AwsCategory class provides an interface for normalizing category metadata between mapped systems.","title":"AwsCategory "},{"location":"java/aws-arch/index.html#awscategorydrawiostyles","text":"AwsCategoryDrawioStyles is a utility class for constructing drawio shape styles for services and resources.","title":"AwsCategoryDrawioStyles "},{"location":"java/aws-arch/index.html#awsresource","text":"AwsResource class provides an interface for normalizing resource metadata between mapped systems.","title":"AwsResource "},{"location":"java/aws-arch/index.html#awsservice","text":"AwsService class provides an interface for normalizing service metadata between mapped systems.","title":"AwsService "},{"location":"java/aws-arch/index.html#enums","text":"","title":"Enums "},{"location":"java/aws-arch/index.html#darkpalette","text":"Dark theme color palette.","title":"DarkPalette "},{"location":"java/aws-arch/index.html#drawioaws4parentshapes","text":"Draiwio aws4 parent shapes enum.","title":"DrawioAws4ParentShapes "},{"location":"java/aws-arch/index.html#lightpalette","text":"Light theme color palette.","title":"LightPalette "},{"location":"java/cloudscape-react-ts-website/index.html","text":"Experimental Warning This is packaged in a separate module while the API is being stabilized. This package is subject to non-backward compatible changes or removal in any future version. Breaking changes will be announced in the release notes. Whilst you may use this package, you may need to update your source code when upgrading to a newer version. Once we stabilize the module, it will be included into the stable aws-prototyping-sdk library. Experimental Usage To use this package, add a dependency on: software.aws.awsprototypingsdk/cloudscape-react-ts-website Getting started To create a new Cloudscape React Typescript Project, there are a couple of options: Via Projen CLI npx projen new --from @aws-prototyping-sdk/cloudscape-react-ts-website cloudscape-react-ts-website [--application-name <your-app>] Programmatically // Example automatically generated from non-compiling source. May contain errors. CloudscapeReactTsWebsiteProject . Builder . create () . defaultReleaseBranch ( \"mainline\" ) . name ( \"<name-of-package>\" ) . applicationName ( \"<name-of-app>\" ) . build (); Running your synthesized Application To run your synthesized application locally, run npx projen dev . Developer Notes To enable Cognito auth, ensure you have a runtime-config.json file in the root of your deployed project which at least contains the following: { \"region\" : \"<aws-region>\" , \"identityPoolId\" : \"<identity-pool-id>\" , \"userPoolId\" : \"<user-pool-id>\" , \"userPoolWebClientId\" : \"<user-pool-web-client-id>\" } The easiest way to get this set up is to use the static-website + identity packages to deploy your website. An example of how to do this is as follows: // Example automatically generated from non-compiling source. May contain errors. Object userIdentity = new UserIdentity ( this , \"UserIdentity\" ); StaticWebsite . Builder . create ( this , \"StaticWebsite\" ) . websiteContentPath ( \"<relative>/<path>/<to>/<built>/<website>\" ) . runtimeOptions ( Map . of ( \"jsonPayload\" , Map . of ( \"region\" , Stack . of ( this ). getRegion (), \"identityPoolId\" , userIdentity . getIdentityPool (). getIdentityPoolId (), \"userPoolId\" , userIdentity . getUserPool (). getUserPoolId (), \"userPoolWebClientId\" , userIdentity . getUserPoolClient (). getUserPoolClientId ()))) . build (); For local development, you will need to copy the generated runtime-config.json file into your /public directory. An example on how to do this is as follows: curl https://dxxxxxxxxxx.cloudfront.net/runtime-config.json > public/runtime-config.json API Reference Structs CloudscapeReactTsWebsiteProjectOptions Configuration options for the CloudscapeReactTsWebsiteProject. Initializer import software.aws.awsprototypingsdk.cloudscapereacttswebsite.CloudscapeReactTsWebsiteProjectOptions ; CloudscapeReactTsWebsiteProjectOptions . builder () . name ( java . lang . String ) // .commitGenerated(java.lang.Boolean) // .gitOptions(GitOptions) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .renovatebot(java.lang.Boolean) // .renovatebotOptions(RenovatebotOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMerge(java.lang.Boolean) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenCredentials(GithubCredentials) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) // .allowLibraryDependencies(java.lang.Boolean) // .authorEmail(java.lang.String) // .authorName(java.lang.String) // .authorOrganization(java.lang.Boolean) // .authorUrl(java.lang.String) // .autoDetectBin(java.lang.Boolean) // .bin(java.util.Map<java.lang.String, java.lang.String>) // .bugsEmail(java.lang.String) // .bugsUrl(java.lang.String) // .bundledDeps(java.util.List<java.lang.String>) // .codeArtifactOptions(CodeArtifactOptions) // .deps(java.util.List<java.lang.String>) // .description(java.lang.String) // .devDeps(java.util.List<java.lang.String>) // .entrypoint(java.lang.String) // .homepage(java.lang.String) // .keywords(java.util.List<java.lang.String>) // .license(java.lang.String) // .licensed(java.lang.Boolean) // .maxNodeVersion(java.lang.String) // .minNodeVersion(java.lang.String) // .npmAccess(NpmAccess) // .npmRegistry(java.lang.String) // .npmRegistryUrl(java.lang.String) // .npmTokenSecret(java.lang.String) // .packageManager(NodePackageManager) // .packageName(java.lang.String) // .peerDependencyOptions(PeerDependencyOptions) // .peerDeps(java.util.List<java.lang.String>) // .pnpmVersion(java.lang.String) // .repository(java.lang.String) // .repositoryDirectory(java.lang.String) // .scopedPackagesOptions(java.util.List<ScopedPackagesOptions>) // .scripts(java.util.Map<java.lang.String, java.lang.String>) // .stability(java.lang.String) // .jsiiReleaseVersion(java.lang.String) // .majorVersion(java.lang.Number) // .minMajorVersion(java.lang.Number) // .npmDistTag(java.lang.String) // .postBuildSteps(java.util.List<JobStep>) // .prerelease(java.lang.String) // .publishDryRun(java.lang.Boolean) // .publishTasks(java.lang.Boolean) // .releaseBranches(java.util.Map<java.lang.String, BranchOptions>) // .releaseEveryCommit(java.lang.Boolean) // .releaseFailureIssue(java.lang.Boolean) // .releaseFailureIssueLabel(java.lang.String) // .releaseSchedule(java.lang.String) // .releaseTagPrefix(java.lang.String) // .releaseTrigger(ReleaseTrigger) // .releaseWorkflowName(java.lang.String) // .releaseWorkflowSetupSteps(java.util.List<JobStep>) // .versionrcOptions(java.util.Map<java.lang.String, java.lang.Object>) // .workflowContainerImage(java.lang.String) // .workflowRunsOn(java.util.List<java.lang.String>) . defaultReleaseBranch ( java . lang . String ) // .artifactsDirectory(java.lang.String) // .autoApproveUpgrades(java.lang.Boolean) // .buildWorkflow(java.lang.Boolean) // .buildWorkflowTriggers(Triggers) // .bundlerOptions(BundlerOptions) // .codeCov(java.lang.Boolean) // .codeCovTokenSecret(java.lang.String) // .copyrightOwner(java.lang.String) // .copyrightPeriod(java.lang.String) // .dependabot(java.lang.Boolean) // .dependabotOptions(DependabotOptions) // .depsUpgrade(java.lang.Boolean) // .depsUpgradeOptions(UpgradeDependenciesOptions) // .gitignore(java.util.List<java.lang.String>) // .jest(java.lang.Boolean) // .jestOptions(JestOptions) // .mutableBuild(java.lang.Boolean) // .npmignore(java.util.List<java.lang.String>) // .npmignoreEnabled(java.lang.Boolean) // .package(java.lang.Boolean) // .prettier(java.lang.Boolean) // .prettierOptions(PrettierOptions) // .projenDevDependency(java.lang.Boolean) // .projenrcJs(java.lang.Boolean) // .projenrcJsOptions(ProjenrcOptions) // .projenVersion(java.lang.String) // .pullRequestTemplate(java.lang.Boolean) // .pullRequestTemplateContents(java.util.List<java.lang.String>) // .release(java.lang.Boolean) // .releaseToNpm(java.lang.Boolean) // .releaseWorkflow(java.lang.Boolean) // .workflowBootstrapSteps(java.util.List<JobStep>) // .workflowGitIdentity(GitIdentity) // .workflowNodeVersion(java.lang.String) // .disableTsconfig(java.lang.Boolean) // .docgen(java.lang.Boolean) // .docsDirectory(java.lang.String) // .entrypointTypes(java.lang.String) // .eslint(java.lang.Boolean) // .eslintOptions(EslintOptions) // .libdir(java.lang.String) // .projenrcTs(java.lang.Boolean) // .projenrcTsOptions(ProjenrcOptions) // .sampleCode(java.lang.Boolean) // .srcdir(java.lang.String) // .testdir(java.lang.String) // .tsconfig(TypescriptConfigOptions) // .tsconfigDev(TypescriptConfigOptions) // .tsconfigDevFile(java.lang.String) // .typescriptVersion(java.lang.String) // .rewire(java.util.Map<java.lang.String, java.lang.Object>) // .applicationName(java.lang.String) // .publicDir(java.lang.String) . build (); Properties Name Type Description name java.lang.String This is the name of your project. commitGenerated java.lang.Boolean Whether to commit the managed files by default. gitOptions io.github.cdklabs.projen.GitOptions Configuration options for git. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. renovatebot java.lang.Boolean Use renovatebot to handle dependency upgrades. renovatebotOptions io.github.cdklabs.projen.RenovatebotOptions Options for renovatebot. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge java.lang.Boolean Enable automatic merging on GitHub. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenCredentials io.github.cdklabs.projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. allowLibraryDependencies java.lang.Boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail java.lang.String Author's e-mail. authorName java.lang.String Author's name. authorOrganization java.lang.Boolean Is the author an organization. authorUrl java.lang.String Author's URL / Website. autoDetectBin java.lang.Boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin java.util.Map Binary programs vended with your module. bugsEmail java.lang.String The email address to which issues should be reported. bugsUrl java.lang.String The url to your project's issue tracker. bundledDeps java.util.List List of dependencies to bundle into this module. codeArtifactOptions io.github.cdklabs.projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps java.util.List Runtime dependencies of this module. description java.lang.String The description is just a string that helps people understand the purpose of the package. devDeps java.util.List Build dependencies for this module. entrypoint java.lang.String Module entrypoint ( main in package.json ). homepage java.lang.String Package's Homepage / Website. keywords java.util.List Keywords to include in package.json . license java.lang.String License's SPDX identifier. licensed java.lang.Boolean Indicates if a license should be added. maxNodeVersion java.lang.String Minimum node.js version to require via engines (inclusive). minNodeVersion java.lang.String Minimum Node.js version to require via package.json engines (inclusive). npmAccess io.github.cdklabs.projen.javascript.NpmAccess Access level of the npm package. npmRegistry java.lang.String The host name of the npm registry to publish to. npmRegistryUrl java.lang.String The base URL of the npm package registry. npmTokenSecret java.lang.String GitHub secret which contains the NPM token to use when publishing packages. packageManager io.github.cdklabs.projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName java.lang.String The \"name\" in package.json. peerDependencyOptions io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps java.util.List Peer dependencies for this module. pnpmVersion java.lang.String The version of PNPM to use if using PNPM as a package manager. repository java.lang.String The repository is the location where the actual code for your package lives. repositoryDirectory java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions java.util.List Options for privately hosted scoped packages. scripts java.util.Map npm scripts to include. stability java.lang.String Package's Stability. jsiiReleaseVersion java.lang.String Version requirement of publib which is used to publish modules to npm. majorVersion java.lang.Number Major version to release from the default branch. minMajorVersion java.lang.Number Minimal Major version to release. npmDistTag java.lang.String The npmDistTag to use when publishing from the default branch. postBuildSteps java.util.List Steps to execute after build as part of the release workflow. prerelease java.lang.String Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun java.lang.Boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks java.lang.Boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches java.util.Map Defines additional release branches. releaseEveryCommit java.lang.Boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue java.lang.Boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel java.lang.String The label to apply to issues indicating publish failures. releaseSchedule java.lang.String CRON schedule to trigger new releases. releaseTagPrefix java.lang.String Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger io.github.cdklabs.projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName java.lang.String The name of the default release workflow. releaseWorkflowSetupSteps java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions java.util.Map Custom configuration used when creating changelog with standard-version package. workflowContainerImage java.lang.String Container image to use for GitHub workflows. workflowRunsOn java.util.List Github Runner selection labels. defaultReleaseBranch java.lang.String The name of the main release branch. artifactsDirectory java.lang.String A directory which will contain build artifacts. autoApproveUpgrades java.lang.Boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow java.lang.Boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers io.github.cdklabs.projen.github.workflows.Triggers Build workflow triggers. bundlerOptions io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov java.lang.Boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret java.lang.String Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner java.lang.String License copyright owner. copyrightPeriod java.lang.String The copyright years to put in the LICENSE file. dependabot java.lang.Boolean Use dependabot to handle dependency upgrades. dependabotOptions io.github.cdklabs.projen.github.DependabotOptions Options for dependabot. depsUpgrade java.lang.Boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore java.util.List Additional entries to .gitignore. jest java.lang.Boolean Setup jest unit tests. jestOptions io.github.cdklabs.projen.javascript.JestOptions Jest options. mutableBuild java.lang.Boolean Automatically update files modified during builds to pull-request branches. npmignore java.util.List Additional entries to .npmignore. npmignoreEnabled java.lang.Boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package java.lang.Boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier java.lang.Boolean Setup prettier. prettierOptions io.github.cdklabs.projen.javascript.PrettierOptions Prettier options. projenDevDependency java.lang.Boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs java.lang.Boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions io.github.cdklabs.projen.javascript.ProjenrcOptions Options for .projenrc.js. projenVersion java.lang.String Version of projen to install. pullRequestTemplate java.lang.Boolean Include a GitHub pull request template. pullRequestTemplateContents java.util.List The contents of the pull request template. release java.lang.Boolean Add release management to this project. releaseToNpm java.lang.Boolean Automatically release to npm when new versions are introduced. releaseWorkflow java.lang.Boolean DEPRECATED: renamed to release . workflowBootstrapSteps java.util.List Workflow steps to use in order to bootstrap this repo. workflowGitIdentity io.github.cdklabs.projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion java.lang.String The node version to use in GitHub workflows. disableTsconfig java.lang.Boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen java.lang.Boolean Docgen by Typedoc. docsDirectory java.lang.String Docs directory. entrypointTypes java.lang.String The .d.ts file that includes the type declarations for this module. eslint java.lang.Boolean Setup eslint. eslintOptions io.github.cdklabs.projen.javascript.EslintOptions Eslint options. libdir java.lang.String Typescript artifacts output directory. projenrcTs java.lang.Boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode java.lang.Boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir java.lang.String Typescript sources directory. testdir java.lang.String Jest tests directory. Tests files should be named xxx.test.ts . tsconfig io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile java.lang.String The name of the development tsconfig.json file. typescriptVersion java.lang.String TypeScript version to use. rewire java.util.Map Rewire webpack configuration. applicationName java.lang.String Name of the application name. publicDir java.lang.String Public directory. name Required public java . lang . String getName (); Type: java.lang.String Default: $BASEDIR This is the name of your project. commitGenerated Optional public java . lang . Boolean getCommitGenerated (); Type: java.lang.Boolean Default: true Whether to commit the managed files by default. gitOptions Optional public GitOptions getGitOptions (); Type: io.github.cdklabs.projen.GitOptions Configuration options for git. logging Optional public LoggerOptions getLogging (); Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public java . lang . String getOutdir (); Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public java . lang . String getProjenCommand (); Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public java . lang . Boolean getProjenrcJson (); Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public ProjenrcOptions getProjenrcJsonOptions (); Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional public java . lang . Boolean getRenovatebot (); Type: java.lang.Boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional public RenovatebotOptions getRenovatebotOptions (); Type: io.github.cdklabs.projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional public AutoApproveOptions getAutoApproveOptions (); Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional public java . lang . Boolean getAutoMerge (); Type: java.lang.Boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional public AutoMergeOptions getAutoMergeOptions (); Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional public java . lang . Boolean getClobber (); Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public java . lang . Boolean getDevContainer (); Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public java . lang . Boolean getGithub (); Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public GitHubOptions getGithubOptions (); Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public java . lang . Boolean getGitpod (); Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public java . lang . Boolean getMergify (); Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public MergifyOptions getMergifyOptions (); Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional public GithubCredentials getProjenCredentials (); Type: io.github.cdklabs.projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials public java . lang . String getProjenTokenSecret (); Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public SampleReadmeProps getReadme (); Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional public java . lang . Boolean getStale (); Type: java.lang.Boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public StaleOptions getStaleOptions (); Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public java . lang . Boolean getVscode (); Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allowLibraryDependencies Optional public java . lang . Boolean getAllowLibraryDependencies (); Type: java.lang.Boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. authorEmail Optional public java . lang . String getAuthorEmail (); Type: java.lang.String Author's e-mail. authorName Optional public java . lang . String getAuthorName (); Type: java.lang.String Author's name. authorOrganization Optional public java . lang . Boolean getAuthorOrganization (); Type: java.lang.Boolean Is the author an organization. authorUrl Optional public java . lang . String getAuthorUrl (); Type: java.lang.String Author's URL / Website. autoDetectBin Optional public java . lang . Boolean getAutoDetectBin (); Type: java.lang.Boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional public java . util . Map < java . lang . String , java . lang . String > getBin (); Type: java.util.Map Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugsEmail Optional public java . lang . String getBugsEmail (); Type: java.lang.String The email address to which issues should be reported. bugsUrl Optional public java . lang . String getBugsUrl (); Type: java.lang.String The url to your project's issue tracker. bundledDeps Optional public java . util . List < java . lang . String > getBundledDeps (); Type: java.util.List List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. codeArtifactOptions Optional public CodeArtifactOptions getCodeArtifactOptions (); Type: io.github.cdklabs.projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional public java . util . List < java . lang . String > getDeps (); Type: java.util.List Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ ' express ' , ' lodash ' , ' foo @ ^ 2 ' ] description Optional public java . lang . String getDescription (); Type: java.lang.String The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description devDeps Optional public java . util . List < java . lang . String > getDevDeps (); Type: java.util.List Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ ' typescript ' , ' @types / express ' ] entrypoint Optional public java . lang . String getEntrypoint (); Type: java.lang.String Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional public java . lang . String getHomepage (); Type: java.lang.String Package's Homepage / Website. keywords Optional public java . util . List < java . lang . String > getKeywords (); Type: java.util.List Keywords to include in package.json . license Optional public java . lang . String getLicense (); Type: java.lang.String Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional public java . lang . Boolean getLicensed (); Type: java.lang.Boolean Default: true Indicates if a license should be added. maxNodeVersion Optional public java . lang . String getMaxNodeVersion (); Type: java.lang.String Default: no max Minimum node.js version to require via engines (inclusive). minNodeVersion Optional public java . lang . String getMinNodeVersion (); Type: java.lang.String Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npmAccess Optional public NpmAccess getNpmAccess (); Type: io.github.cdklabs.projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npmRegistry ~~ Optional Deprecated: use npmRegistryUrl instead public java . lang . String getNpmRegistry (); Type: java.lang.String The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npmRegistryUrl Optional public java . lang . String getNpmRegistryUrl (); Type: java.lang.String Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npmTokenSecret Optional public java . lang . String getNpmTokenSecret (); Type: java.lang.String Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. packageManager Optional public NodePackageManager getPackageManager (); Type: io.github.cdklabs.projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. packageName Optional public java . lang . String getPackageName (); Type: java.lang.String Default: defaults to project name The \"name\" in package.json. peerDependencyOptions Optional public PeerDependencyOptions getPeerDependencyOptions (); Type: io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps Optional public java . util . List < java . lang . String > getPeerDeps (); Type: java.util.List Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. pnpmVersion Optional public java . lang . String getPnpmVersion (); Type: java.lang.String Default: \"7\" The version of PNPM to use if using PNPM as a package manager. repository Optional public java . lang . String getRepository (); Type: java.lang.String The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repositoryDirectory Optional public java . lang . String getRepositoryDirectory (); Type: java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions Optional public java . util . List < ScopedPackagesOptions > getScopedPackagesOptions (); Type: java.util.List Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional public java . util . Map < java . lang . String , java . lang . String > getScripts (); Type: java.util.Map Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional public java . lang . String getStability (); Type: java.lang.String Package's Stability. jsiiReleaseVersion Optional public java . lang . String getJsiiReleaseVersion (); Type: java.lang.String Default: \"latest\" Version requirement of publib which is used to publish modules to npm. majorVersion Optional public java . lang . Number getMajorVersion (); Type: java.lang.Number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. minMajorVersion Optional public java . lang . Number getMinMajorVersion (); Type: java.lang.Number Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npmDistTag Optional public java . lang . String getNpmDistTag (); Type: java.lang.String Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. postBuildSteps Optional public java . util . List < JobStep > getPostBuildSteps (); Type: java.util.List Default: [] Steps to execute after build as part of the release workflow. prerelease Optional public java . lang . String getPrerelease (); Type: java.lang.String Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun Optional public java . lang . Boolean getPublishDryRun (); Type: java.lang.Boolean Default: false Instead of actually publishing to package managers, just print the publishing command. publishTasks Optional public java . lang . Boolean getPublishTasks (); Type: java.lang.Boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. releaseBranches Optional public java . util . Map < java . lang . String , BranchOptions > getReleaseBranches (); Type: java.util.Map Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ releaseEveryCommit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead public java . lang . Boolean getReleaseEveryCommit (); Type: java.lang.Boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue Optional public java . lang . Boolean getReleaseFailureIssue (); Type: java.lang.Boolean Default: false Create a github issue on every failed publishing task. releaseFailureIssueLabel Optional public java . lang . String getReleaseFailureIssueLabel (); Type: java.lang.String Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ releaseSchedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead public java . lang . String getReleaseSchedule (); Type: java.lang.String Default: no scheduled releases CRON schedule to trigger new releases. releaseTagPrefix Optional public java . lang . String getReleaseTagPrefix (); Type: java.lang.String Default: \"v\" Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. releaseTrigger Optional public ReleaseTrigger getReleaseTrigger (); Type: io.github.cdklabs.projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. releaseWorkflowName Optional public java . lang . String getReleaseWorkflowName (); Type: java.lang.String Default: \"Release\" The name of the default release workflow. releaseWorkflowSetupSteps Optional public java . util . List < JobStep > getReleaseWorkflowSetupSteps (); Type: java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions Optional public java . util . Map < java . lang . String , java . lang . Object > getVersionrcOptions (); Type: java.util.Map Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflowContainerImage Optional public java . lang . String getWorkflowContainerImage (); Type: java.lang.String Default: default image Container image to use for GitHub workflows. workflowRunsOn Optional public java . util . List < java . lang . String > getWorkflowRunsOn (); Type: java.util.List Default: [\"ubuntu-latest\"] Github Runner selection labels. defaultReleaseBranch Required public java . lang . String getDefaultReleaseBranch (); Type: java.lang.String Default: \"main\" The name of the main release branch. artifactsDirectory Optional public java . lang . String getArtifactsDirectory (); Type: java.lang.String Default: \"dist\" A directory which will contain build artifacts. autoApproveUpgrades Optional public java . lang . Boolean getAutoApproveUpgrades (); Type: java.lang.Boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. buildWorkflow Optional public java . lang . Boolean getBuildWorkflow (); Type: java.lang.Boolean Default: true if not a subproject Define a GitHub workflow for building PRs. buildWorkflowTriggers Optional public Triggers getBuildWorkflowTriggers (); Type: io.github.cdklabs.projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundlerOptions Optional public BundlerOptions getBundlerOptions (); Type: io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov Optional public java . lang . Boolean getCodeCov (); Type: java.lang.Boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret Optional public java . lang . String getCodeCovTokenSecret (); Type: java.lang.String Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner Optional public java . lang . String getCopyrightOwner (); Type: java.lang.String Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyrightPeriod Optional public java . lang . String getCopyrightPeriod (); Type: java.lang.String Default: current year The copyright years to put in the LICENSE file. dependabot Optional public java . lang . Boolean getDependabot (); Type: java.lang.Boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabotOptions Optional public DependabotOptions getDependabotOptions (); Type: io.github.cdklabs.projen.github.DependabotOptions Default: default options Options for dependabot. depsUpgrade Optional public java . lang . Boolean getDepsUpgrade (); Type: java.lang.Boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . depsUpgradeOptions Optional public UpgradeDependenciesOptions getDepsUpgradeOptions (); Type: io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional public java . util . List < java . lang . String > getGitignore (); Type: java.util.List Additional entries to .gitignore. jest Optional public java . lang . Boolean getJest (); Type: java.lang.Boolean Default: true Setup jest unit tests. jestOptions Optional public JestOptions getJestOptions (); Type: io.github.cdklabs.projen.javascript.JestOptions Default: default options Jest options. mutableBuild Optional public java . lang . Boolean getMutableBuild (); Type: java.lang.Boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore public java . util . List < java . lang . String > getNpmignore (); Type: java.util.List Additional entries to .npmignore. npmignoreEnabled Optional public java . lang . Boolean getNpmignoreEnabled (); Type: java.lang.Boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional public java . lang . Boolean getPackage (); Type: java.lang.Boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional public java . lang . Boolean getPrettier (); Type: java.lang.Boolean Default: false Setup prettier. prettierOptions Optional public PrettierOptions getPrettierOptions (); Type: io.github.cdklabs.projen.javascript.PrettierOptions Default: default options Prettier options. projenDevDependency Optional public java . lang . Boolean getProjenDevDependency (); Type: java.lang.Boolean Default: true Indicates of \"projen\" should be installed as a devDependency. projenrcJs Optional public java . lang . Boolean getProjenrcJs (); Type: java.lang.Boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions Optional public ProjenrcOptions getProjenrcJsOptions (); Type: io.github.cdklabs.projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projenVersion Optional public java . lang . String getProjenVersion (); Type: java.lang.String Default: Defaults to the latest version. Version of projen to install. pullRequestTemplate Optional public java . lang . Boolean getPullRequestTemplate (); Type: java.lang.Boolean Default: true Include a GitHub pull request template. pullRequestTemplateContents Optional public java . util . List < java . lang . String > getPullRequestTemplateContents (); Type: java.util.List Default: default content The contents of the pull request template. release Optional public java . lang . Boolean getRelease (); Type: java.lang.Boolean Default: true (false for subprojects) Add release management to this project. releaseToNpm Optional public java . lang . Boolean getReleaseToNpm (); Type: java.lang.Boolean Default: false Automatically release to npm when new versions are introduced. ~~ releaseWorkflow ~~ Optional Deprecated: see release . public java . lang . Boolean getReleaseWorkflow (); Type: java.lang.Boolean Default: true if not a subproject DEPRECATED: renamed to release . workflowBootstrapSteps Optional public java . util . List < JobStep > getWorkflowBootstrapSteps (); Type: java.util.List Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflowGitIdentity Optional public GitIdentity getWorkflowGitIdentity (); Type: io.github.cdklabs.projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflowNodeVersion Optional public java . lang . String getWorkflowNodeVersion (); Type: java.lang.String Default: same as minNodeVersion The node version to use in GitHub workflows. disableTsconfig Optional public java . lang . Boolean getDisableTsconfig (); Type: java.lang.Boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional public java . lang . Boolean getDocgen (); Type: java.lang.Boolean Default: false Docgen by Typedoc. docsDirectory Optional public java . lang . String getDocsDirectory (); Type: java.lang.String Default: \"docs\" Docs directory. entrypointTypes Optional public java . lang . String getEntrypointTypes (); Type: java.lang.String Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional public java . lang . Boolean getEslint (); Type: java.lang.Boolean Default: true Setup eslint. eslintOptions Optional public EslintOptions getEslintOptions (); Type: io.github.cdklabs.projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional public java . lang . String getLibdir (); Type: java.lang.String Default: \"lib\" Typescript artifacts output directory. projenrcTs Optional public java . lang . Boolean getProjenrcTs (); Type: java.lang.Boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions Optional public ProjenrcOptions getProjenrcTsOptions (); Type: io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode Optional public java . lang . Boolean getSampleCode (); Type: java.lang.Boolean Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional public java . lang . String getSrcdir (); Type: java.lang.String Default: \"src\" Typescript sources directory. testdir Optional public java . lang . String getTestdir (); Type: java.lang.String Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional public TypescriptConfigOptions getTsconfig (); Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfigDev Optional public TypescriptConfigOptions getTsconfigDev (); Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile Optional public java . lang . String getTsconfigDevFile (); Type: java.lang.String Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescriptVersion Optional public java . lang . String getTypescriptVersion (); Type: java.lang.String Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). rewire Optional public java . util . Map < java . lang . String , java . lang . Object > getRewire (); Type: java.util.Map Default: No rewired config. Rewire webpack configuration. Use this property to override webpack configuration properties provided by create-react-app, without needing to eject. This property will create a config-overrides.js file in your root directory, which will contain the desired rewiring code. To override the configuration, you can provide simple key value pairs. Keys take the form of js code directives that traverse to the desired property. Values should be JSON serializable objects. For example, the following config: rewire : { \"module.unknownContextCritical\" : false } Will translate to the following config-overrides.js file: module . exports = function override ( config , env ) { config . module . unknownContextCritical = false ; } timarney/react-app-rewired applicationName Optional public java . lang . String getApplicationName (); Type: java.lang.String Default: \"Sample App\" Name of the application name. publicDir Optional public java . lang . String getPublicDir (); Type: java.lang.String Default: \"public\" Public directory. Classes CloudscapeReactTsWebsiteProject Synthesizes a Cloudscape React Typescript Website Project. Initializers import software.aws.awsprototypingsdk.cloudscapereacttswebsite.CloudscapeReactTsWebsiteProject ; CloudscapeReactTsWebsiteProject . Builder . create () . name ( java . lang . String ) // .commitGenerated(java.lang.Boolean) // .gitOptions(GitOptions) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .renovatebot(java.lang.Boolean) // .renovatebotOptions(RenovatebotOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMerge(java.lang.Boolean) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenCredentials(GithubCredentials) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) // .allowLibraryDependencies(java.lang.Boolean) // .authorEmail(java.lang.String) // .authorName(java.lang.String) // .authorOrganization(java.lang.Boolean) // .authorUrl(java.lang.String) // .autoDetectBin(java.lang.Boolean) // .bin(java.util.Map<java.lang.String, java.lang.String>) // .bugsEmail(java.lang.String) // .bugsUrl(java.lang.String) // .bundledDeps(java.util.List<java.lang.String>) // .codeArtifactOptions(CodeArtifactOptions) // .deps(java.util.List<java.lang.String>) // .description(java.lang.String) // .devDeps(java.util.List<java.lang.String>) // .entrypoint(java.lang.String) // .homepage(java.lang.String) // .keywords(java.util.List<java.lang.String>) // .license(java.lang.String) // .licensed(java.lang.Boolean) // .maxNodeVersion(java.lang.String) // .minNodeVersion(java.lang.String) // .npmAccess(NpmAccess) // .npmRegistry(java.lang.String) // .npmRegistryUrl(java.lang.String) // .npmTokenSecret(java.lang.String) // .packageManager(NodePackageManager) // .packageName(java.lang.String) // .peerDependencyOptions(PeerDependencyOptions) // .peerDeps(java.util.List<java.lang.String>) // .pnpmVersion(java.lang.String) // .repository(java.lang.String) // .repositoryDirectory(java.lang.String) // .scopedPackagesOptions(java.util.List<ScopedPackagesOptions>) // .scripts(java.util.Map<java.lang.String, java.lang.String>) // .stability(java.lang.String) // .jsiiReleaseVersion(java.lang.String) // .majorVersion(java.lang.Number) // .minMajorVersion(java.lang.Number) // .npmDistTag(java.lang.String) // .postBuildSteps(java.util.List<JobStep>) // .prerelease(java.lang.String) // .publishDryRun(java.lang.Boolean) // .publishTasks(java.lang.Boolean) // .releaseBranches(java.util.Map<java.lang.String, BranchOptions>) // .releaseEveryCommit(java.lang.Boolean) // .releaseFailureIssue(java.lang.Boolean) // .releaseFailureIssueLabel(java.lang.String) // .releaseSchedule(java.lang.String) // .releaseTagPrefix(java.lang.String) // .releaseTrigger(ReleaseTrigger) // .releaseWorkflowName(java.lang.String) // .releaseWorkflowSetupSteps(java.util.List<JobStep>) // .versionrcOptions(java.util.Map<java.lang.String, java.lang.Object>) // .workflowContainerImage(java.lang.String) // .workflowRunsOn(java.util.List<java.lang.String>) . defaultReleaseBranch ( java . lang . String ) // .artifactsDirectory(java.lang.String) // .autoApproveUpgrades(java.lang.Boolean) // .buildWorkflow(java.lang.Boolean) // .buildWorkflowTriggers(Triggers) // .bundlerOptions(BundlerOptions) // .codeCov(java.lang.Boolean) // .codeCovTokenSecret(java.lang.String) // .copyrightOwner(java.lang.String) // .copyrightPeriod(java.lang.String) // .dependabot(java.lang.Boolean) // .dependabotOptions(DependabotOptions) // .depsUpgrade(java.lang.Boolean) // .depsUpgradeOptions(UpgradeDependenciesOptions) // .gitignore(java.util.List<java.lang.String>) // .jest(java.lang.Boolean) // .jestOptions(JestOptions) // .mutableBuild(java.lang.Boolean) // .npmignore(java.util.List<java.lang.String>) // .npmignoreEnabled(java.lang.Boolean) // .package(java.lang.Boolean) // .prettier(java.lang.Boolean) // .prettierOptions(PrettierOptions) // .projenDevDependency(java.lang.Boolean) // .projenrcJs(java.lang.Boolean) // .projenrcJsOptions(ProjenrcOptions) // .projenVersion(java.lang.String) // .pullRequestTemplate(java.lang.Boolean) // .pullRequestTemplateContents(java.util.List<java.lang.String>) // .release(java.lang.Boolean) // .releaseToNpm(java.lang.Boolean) // .releaseWorkflow(java.lang.Boolean) // .workflowBootstrapSteps(java.util.List<JobStep>) // .workflowGitIdentity(GitIdentity) // .workflowNodeVersion(java.lang.String) // .disableTsconfig(java.lang.Boolean) // .docgen(java.lang.Boolean) // .docsDirectory(java.lang.String) // .entrypointTypes(java.lang.String) // .eslint(java.lang.Boolean) // .eslintOptions(EslintOptions) // .libdir(java.lang.String) // .projenrcTs(java.lang.Boolean) // .projenrcTsOptions(ProjenrcOptions) // .sampleCode(java.lang.Boolean) // .srcdir(java.lang.String) // .testdir(java.lang.String) // .tsconfig(TypescriptConfigOptions) // .tsconfigDev(TypescriptConfigOptions) // .tsconfigDevFile(java.lang.String) // .typescriptVersion(java.lang.String) // .rewire(java.util.Map<java.lang.String, java.lang.Object>) // .applicationName(java.lang.String) // .publicDir(java.lang.String) . build (); Name Type Description name java.lang.String This is the name of your project. commitGenerated java.lang.Boolean Whether to commit the managed files by default. gitOptions io.github.cdklabs.projen.GitOptions Configuration options for git. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. renovatebot java.lang.Boolean Use renovatebot to handle dependency upgrades. renovatebotOptions io.github.cdklabs.projen.RenovatebotOptions Options for renovatebot. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge java.lang.Boolean Enable automatic merging on GitHub. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenCredentials io.github.cdklabs.projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. allowLibraryDependencies java.lang.Boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail java.lang.String Author's e-mail. authorName java.lang.String Author's name. authorOrganization java.lang.Boolean Is the author an organization. authorUrl java.lang.String Author's URL / Website. autoDetectBin java.lang.Boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin java.util.Map Binary programs vended with your module. bugsEmail java.lang.String The email address to which issues should be reported. bugsUrl java.lang.String The url to your project's issue tracker. bundledDeps java.util.List List of dependencies to bundle into this module. codeArtifactOptions io.github.cdklabs.projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps java.util.List Runtime dependencies of this module. description java.lang.String The description is just a string that helps people understand the purpose of the package. devDeps java.util.List Build dependencies for this module. entrypoint java.lang.String Module entrypoint ( main in package.json ). homepage java.lang.String Package's Homepage / Website. keywords java.util.List Keywords to include in package.json . license java.lang.String License's SPDX identifier. licensed java.lang.Boolean Indicates if a license should be added. maxNodeVersion java.lang.String Minimum node.js version to require via engines (inclusive). minNodeVersion java.lang.String Minimum Node.js version to require via package.json engines (inclusive). npmAccess io.github.cdklabs.projen.javascript.NpmAccess Access level of the npm package. npmRegistry java.lang.String The host name of the npm registry to publish to. npmRegistryUrl java.lang.String The base URL of the npm package registry. npmTokenSecret java.lang.String GitHub secret which contains the NPM token to use when publishing packages. packageManager io.github.cdklabs.projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName java.lang.String The \"name\" in package.json. peerDependencyOptions io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps java.util.List Peer dependencies for this module. pnpmVersion java.lang.String The version of PNPM to use if using PNPM as a package manager. repository java.lang.String The repository is the location where the actual code for your package lives. repositoryDirectory java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions java.util.List Options for privately hosted scoped packages. scripts java.util.Map npm scripts to include. stability java.lang.String Package's Stability. jsiiReleaseVersion java.lang.String Version requirement of publib which is used to publish modules to npm. majorVersion java.lang.Number Major version to release from the default branch. minMajorVersion java.lang.Number Minimal Major version to release. npmDistTag java.lang.String The npmDistTag to use when publishing from the default branch. postBuildSteps java.util.List Steps to execute after build as part of the release workflow. prerelease java.lang.String Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun java.lang.Boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks java.lang.Boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches java.util.Map Defines additional release branches. releaseEveryCommit java.lang.Boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue java.lang.Boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel java.lang.String The label to apply to issues indicating publish failures. releaseSchedule java.lang.String CRON schedule to trigger new releases. releaseTagPrefix java.lang.String Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger io.github.cdklabs.projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName java.lang.String The name of the default release workflow. releaseWorkflowSetupSteps java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions java.util.Map Custom configuration used when creating changelog with standard-version package. workflowContainerImage java.lang.String Container image to use for GitHub workflows. workflowRunsOn java.util.List Github Runner selection labels. defaultReleaseBranch java.lang.String The name of the main release branch. artifactsDirectory java.lang.String A directory which will contain build artifacts. autoApproveUpgrades java.lang.Boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow java.lang.Boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers io.github.cdklabs.projen.github.workflows.Triggers Build workflow triggers. bundlerOptions io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov java.lang.Boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret java.lang.String Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner java.lang.String License copyright owner. copyrightPeriod java.lang.String The copyright years to put in the LICENSE file. dependabot java.lang.Boolean Use dependabot to handle dependency upgrades. dependabotOptions io.github.cdklabs.projen.github.DependabotOptions Options for dependabot. depsUpgrade java.lang.Boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore java.util.List Additional entries to .gitignore. jest java.lang.Boolean Setup jest unit tests. jestOptions io.github.cdklabs.projen.javascript.JestOptions Jest options. mutableBuild java.lang.Boolean Automatically update files modified during builds to pull-request branches. npmignore java.util.List Additional entries to .npmignore. npmignoreEnabled java.lang.Boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package java.lang.Boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier java.lang.Boolean Setup prettier. prettierOptions io.github.cdklabs.projen.javascript.PrettierOptions Prettier options. projenDevDependency java.lang.Boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs java.lang.Boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions io.github.cdklabs.projen.javascript.ProjenrcOptions Options for .projenrc.js. projenVersion java.lang.String Version of projen to install. pullRequestTemplate java.lang.Boolean Include a GitHub pull request template. pullRequestTemplateContents java.util.List The contents of the pull request template. release java.lang.Boolean Add release management to this project. releaseToNpm java.lang.Boolean Automatically release to npm when new versions are introduced. releaseWorkflow java.lang.Boolean DEPRECATED: renamed to release . workflowBootstrapSteps java.util.List Workflow steps to use in order to bootstrap this repo. workflowGitIdentity io.github.cdklabs.projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion java.lang.String The node version to use in GitHub workflows. disableTsconfig java.lang.Boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen java.lang.Boolean Docgen by Typedoc. docsDirectory java.lang.String Docs directory. entrypointTypes java.lang.String The .d.ts file that includes the type declarations for this module. eslint java.lang.Boolean Setup eslint. eslintOptions io.github.cdklabs.projen.javascript.EslintOptions Eslint options. libdir java.lang.String Typescript artifacts output directory. projenrcTs java.lang.Boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode java.lang.Boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir java.lang.String Typescript sources directory. testdir java.lang.String Jest tests directory. Tests files should be named xxx.test.ts . tsconfig io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile java.lang.String The name of the development tsconfig.json file. typescriptVersion java.lang.String TypeScript version to use. rewire java.util.Map Rewire webpack configuration. applicationName java.lang.String Name of the application name. publicDir java.lang.String Public directory. name Required Type: java.lang.String Default: $BASEDIR This is the name of your project. commitGenerated Optional Type: java.lang.Boolean Default: true Whether to commit the managed files by default. gitOptions Optional Type: io.github.cdklabs.projen.GitOptions Configuration options for git. logging Optional Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional Type: java.lang.Boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional Type: io.github.cdklabs.projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional Type: java.lang.Boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional Type: io.github.cdklabs.projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional Type: java.lang.Boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allowLibraryDependencies Optional Type: java.lang.Boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. authorEmail Optional Type: java.lang.String Author's e-mail. authorName Optional Type: java.lang.String Author's name. authorOrganization Optional Type: java.lang.Boolean Is the author an organization. authorUrl Optional Type: java.lang.String Author's URL / Website. autoDetectBin Optional Type: java.lang.Boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional Type: java.util.Map Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugsEmail Optional Type: java.lang.String The email address to which issues should be reported. bugsUrl Optional Type: java.lang.String The url to your project's issue tracker. bundledDeps Optional Type: java.util.List List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. codeArtifactOptions Optional Type: io.github.cdklabs.projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional Type: java.util.List Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ ' express ' , ' lodash ' , ' foo @ ^ 2 ' ] description Optional Type: java.lang.String The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description devDeps Optional Type: java.util.List Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ ' typescript ' , ' @types / express ' ] entrypoint Optional Type: java.lang.String Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional Type: java.lang.String Package's Homepage / Website. keywords Optional Type: java.util.List Keywords to include in package.json . license Optional Type: java.lang.String Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional Type: java.lang.Boolean Default: true Indicates if a license should be added. maxNodeVersion Optional Type: java.lang.String Default: no max Minimum node.js version to require via engines (inclusive). minNodeVersion Optional Type: java.lang.String Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npmAccess Optional Type: io.github.cdklabs.projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npmRegistry ~~ Optional Deprecated: use npmRegistryUrl instead Type: java.lang.String The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npmRegistryUrl Optional Type: java.lang.String Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npmTokenSecret Optional Type: java.lang.String Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. packageManager Optional Type: io.github.cdklabs.projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. packageName Optional Type: java.lang.String Default: defaults to project name The \"name\" in package.json. peerDependencyOptions Optional Type: io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps Optional Type: java.util.List Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. pnpmVersion Optional Type: java.lang.String Default: \"7\" The version of PNPM to use if using PNPM as a package manager. repository Optional Type: java.lang.String The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repositoryDirectory Optional Type: java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions Optional Type: java.util.List Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional Type: java.util.Map Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional Type: java.lang.String Package's Stability. jsiiReleaseVersion Optional Type: java.lang.String Default: \"latest\" Version requirement of publib which is used to publish modules to npm. majorVersion Optional Type: java.lang.Number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. minMajorVersion Optional Type: java.lang.Number Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npmDistTag Optional Type: java.lang.String Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. postBuildSteps Optional Type: java.util.List Default: [] Steps to execute after build as part of the release workflow. prerelease Optional Type: java.lang.String Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun Optional Type: java.lang.Boolean Default: false Instead of actually publishing to package managers, just print the publishing command. publishTasks Optional Type: java.lang.Boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. releaseBranches Optional Type: java.util.Map Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ releaseEveryCommit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead Type: java.lang.Boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue Optional Type: java.lang.Boolean Default: false Create a github issue on every failed publishing task. releaseFailureIssueLabel Optional Type: java.lang.String Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ releaseSchedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead Type: java.lang.String Default: no scheduled releases CRON schedule to trigger new releases. releaseTagPrefix Optional Type: java.lang.String Default: \"v\" Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. releaseTrigger Optional Type: io.github.cdklabs.projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. releaseWorkflowName Optional Type: java.lang.String Default: \"Release\" The name of the default release workflow. releaseWorkflowSetupSteps Optional Type: java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions Optional Type: java.util.Map Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflowContainerImage Optional Type: java.lang.String Default: default image Container image to use for GitHub workflows. workflowRunsOn Optional Type: java.util.List Default: [\"ubuntu-latest\"] Github Runner selection labels. defaultReleaseBranch Required Type: java.lang.String Default: \"main\" The name of the main release branch. artifactsDirectory Optional Type: java.lang.String Default: \"dist\" A directory which will contain build artifacts. autoApproveUpgrades Optional Type: java.lang.Boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. buildWorkflow Optional Type: java.lang.Boolean Default: true if not a subproject Define a GitHub workflow for building PRs. buildWorkflowTriggers Optional Type: io.github.cdklabs.projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundlerOptions Optional Type: io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov Optional Type: java.lang.Boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret Optional Type: java.lang.String Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner Optional Type: java.lang.String Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyrightPeriod Optional Type: java.lang.String Default: current year The copyright years to put in the LICENSE file. dependabot Optional Type: java.lang.Boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabotOptions Optional Type: io.github.cdklabs.projen.github.DependabotOptions Default: default options Options for dependabot. depsUpgrade Optional Type: java.lang.Boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . depsUpgradeOptions Optional Type: io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional Type: java.util.List Additional entries to .gitignore. jest Optional Type: java.lang.Boolean Default: true Setup jest unit tests. jestOptions Optional Type: io.github.cdklabs.projen.javascript.JestOptions Default: default options Jest options. mutableBuild Optional Type: java.lang.Boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore Type: java.util.List Additional entries to .npmignore. npmignoreEnabled Optional Type: java.lang.Boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional Type: java.lang.Boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional Type: java.lang.Boolean Default: false Setup prettier. prettierOptions Optional Type: io.github.cdklabs.projen.javascript.PrettierOptions Default: default options Prettier options. projenDevDependency Optional Type: java.lang.Boolean Default: true Indicates of \"projen\" should be installed as a devDependency. projenrcJs Optional Type: java.lang.Boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions Optional Type: io.github.cdklabs.projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projenVersion Optional Type: java.lang.String Default: Defaults to the latest version. Version of projen to install. pullRequestTemplate Optional Type: java.lang.Boolean Default: true Include a GitHub pull request template. pullRequestTemplateContents Optional Type: java.util.List Default: default content The contents of the pull request template. release Optional Type: java.lang.Boolean Default: true (false for subprojects) Add release management to this project. releaseToNpm Optional Type: java.lang.Boolean Default: false Automatically release to npm when new versions are introduced. ~~ releaseWorkflow ~~ Optional Deprecated: see release . Type: java.lang.Boolean Default: true if not a subproject DEPRECATED: renamed to release . workflowBootstrapSteps Optional Type: java.util.List Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflowGitIdentity Optional Type: io.github.cdklabs.projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflowNodeVersion Optional Type: java.lang.String Default: same as minNodeVersion The node version to use in GitHub workflows. disableTsconfig Optional Type: java.lang.Boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional Type: java.lang.Boolean Default: false Docgen by Typedoc. docsDirectory Optional Type: java.lang.String Default: \"docs\" Docs directory. entrypointTypes Optional Type: java.lang.String Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional Type: java.lang.Boolean Default: true Setup eslint. eslintOptions Optional Type: io.github.cdklabs.projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional Type: java.lang.String Default: \"lib\" Typescript artifacts output directory. projenrcTs Optional Type: java.lang.Boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions Optional Type: io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode Optional Type: java.lang.Boolean Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional Type: java.lang.String Default: \"src\" Typescript sources directory. testdir Optional Type: java.lang.String Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfigDev Optional Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile Optional Type: java.lang.String Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescriptVersion Optional Type: java.lang.String Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). rewire Optional Type: java.util.Map Default: No rewired config. Rewire webpack configuration. Use this property to override webpack configuration properties provided by create-react-app, without needing to eject. This property will create a config-overrides.js file in your root directory, which will contain the desired rewiring code. To override the configuration, you can provide simple key value pairs. Keys take the form of js code directives that traverse to the desired property. Values should be JSON serializable objects. For example, the following config: rewire : { \"module.unknownContextCritical\" : false } Will translate to the following config-overrides.js file: module . exports = function override ( config , env ) { config . module . unknownContextCritical = false ; } timarney/react-app-rewired applicationName Optional Type: java.lang.String Default: \"Sample App\" Name of the application name. publicDir Optional Type: java.lang.String Default: \"public\" Public directory. Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. tryRemoveFile Finds a file at the specified relative path within this project and removes it. addBins No description. addBundledDeps Defines bundled dependencies. addCompileCommand DEPRECATED. addDeps Defines normal dependencies. addDevDeps Defines development/test dependencies. addFields Directly set fields in package.json . addKeywords Adds keywords to package.json (deduplicated). addPeerDeps Defines peer dependencies. addTestCommand DEPRECATED. hasScript Indicates if a script by the name name is defined. removeScript Removes the npm script (always successful). renderWorkflowSetup Returns the set of workflow steps which should be executed to bootstrap a workflow. setScript Replaces the contents of an npm package.json script. addExcludeFromCleanup public void addExcludeFromCleanup ( java . lang . String globs ) Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: java.lang.String The glob patterns to match. addGitIgnore public void addGitIgnore ( java . lang . String pattern ) Adds a .gitignore pattern. pattern Required Type: java.lang.String The glob pattern to ignore. addPackageIgnore public void addPackageIgnore ( java . lang . String pattern ) Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . pattern Required Type: java.lang.String addTask public Task addTask ( java . lang . String name ) public Task addTask ( java . lang . String name , TaskOptions props ) Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: java.lang.String The task name to add. props Optional Type: io.github.cdklabs.projen.TaskOptions Task properties. ~~ addTip ~~ public void addTip ( java . lang . String message ) Prints a \"tip\" message during synthesis. message Required Type: java.lang.String The message. annotateGenerated public void annotateGenerated ( java . lang . String glob ) Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: java.lang.String the glob pattern to match (could be a file path). postSynthesize public void postSynthesize () Called after all components are synthesized. Order is not guaranteed. preSynthesize public void preSynthesize () Called before all components are synthesized. removeTask public Task removeTask ( java . lang . String name ) Removes a task from a project. name Required Type: java.lang.String The name of the task to remove. runTaskCommand public java . lang . String runTaskCommand ( Task task ) Returns the shell command to execute in order to run a task. This will typically be npx projen TASK . task Required Type: io.github.cdklabs.projen.Task The task for which the command is required. synth public void synth () Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" tryFindFile public FileBase tryFindFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public JsonFile tryFindJsonFile ( java . lang . String filePath ) Finds a json file by name. filePath Required Type: java.lang.String The file path. tryFindObjectFile public ObjectFile tryFindObjectFile ( java . lang . String filePath ) Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: java.lang.String The file path. tryRemoveFile public FileBase tryRemoveFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and removes it. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. addBins public void addBins ( java . util . Map < java . lang . String , java . lang . String > bins ) bins Required Type: java.util.Map addBundledDeps public void addBundledDeps ( java . lang . String deps ) Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json . deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addCompileCommand ~~ public void addCompileCommand ( java . lang . String commands ) DEPRECATED. commands Required Type: java.lang.String addDeps public void addDeps ( java . lang . String deps ) Defines normal dependencies. deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addDevDeps public void addDevDeps ( java . lang . String deps ) Defines development/test dependencies. deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addFields public void addFields ( java . util . Map < java . lang . String , java . lang . Object > fields ) Directly set fields in package.json . fields Required Type: java.util.Map The fields to set. addKeywords public void addKeywords ( java . lang . String keywords ) Adds keywords to package.json (deduplicated). keywords Required Type: java.lang.String The keywords to add. addPeerDeps public void addPeerDeps ( java . lang . String deps ) Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers. deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addTestCommand ~~ public void addTestCommand ( java . lang . String commands ) DEPRECATED. commands Required Type: java.lang.String hasScript public java . lang . Boolean hasScript ( java . lang . String name ) Indicates if a script by the name name is defined. name Required Type: java.lang.String The name of the script. removeScript public void removeScript ( java . lang . String name ) Removes the npm script (always successful). name Required Type: java.lang.String The name of the script. renderWorkflowSetup public java . util . List < JobStep > renderWorkflowSetup () public java . util . List < JobStep > renderWorkflowSetup ( RenderWorkflowSetupOptions options ) Returns the set of workflow steps which should be executed to bootstrap a workflow. options Optional Type: io.github.cdklabs.projen.javascript.RenderWorkflowSetupOptions Options. setScript public void setScript ( java . lang . String name , java . lang . String command ) Replaces the contents of an npm package.json script. name Required Type: java.lang.String The script name. command Required Type: java.lang.String The command to execute. Properties Name Type Description buildTask io.github.cdklabs.projen.Task No description. commitGenerated java.lang.Boolean Whether to commit the managed files by default. compileTask io.github.cdklabs.projen.Task No description. components java.util.List Returns all the components within this project. deps io.github.cdklabs.projen.Dependencies Project dependencies. ejected java.lang.Boolean Whether or not the project is being ejected. files java.util.List All files in this project. gitattributes io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore io.github.cdklabs.projen.IgnoreFile .gitignore. logger io.github.cdklabs.projen.Logger Logging utilities. name java.lang.String Project name. outdir java.lang.String Absolute output directory of this project. packageTask io.github.cdklabs.projen.Task No description. postCompileTask io.github.cdklabs.projen.Task No description. preCompileTask io.github.cdklabs.projen.Task No description. projectBuild io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand java.lang.String The command to use in order to run the projen CLI. root io.github.cdklabs.projen.Project The root project. tasks io.github.cdklabs.projen.Tasks Project tasks. testTask io.github.cdklabs.projen.Task No description. defaultTask io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". initProject io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . parent io.github.cdklabs.projen.Project A parent project. projectType io.github.cdklabs.projen.ProjectType No description. autoApprove io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github io.github.cdklabs.projen.github.GitHub Access all github components. gitpod io.github.cdklabs.projen.Gitpod Access for Gitpod. vscode io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. allowLibraryDependencies java.lang.Boolean No description. artifactsDirectory java.lang.String The build output directory. artifactsJavascriptDirectory java.lang.String The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler io.github.cdklabs.projen.javascript.Bundler No description. entrypoint java.lang.String No description. manifest java.lang.Object No description. package io.github.cdklabs.projen.javascript.NodePackage API for managing the node package. packageManager io.github.cdklabs.projen.javascript.NodePackageManager The package manager to use. runScriptCommand java.lang.String The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge io.github.cdklabs.projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. buildWorkflow io.github.cdklabs.projen.build.BuildWorkflow The PR build GitHub workflow. buildWorkflowJobId java.lang.String The job ID of the build workflow. jest io.github.cdklabs.projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion java.lang.String Maximum node version required by this package. minNodeVersion java.lang.String Minimum node.js version required by this package. npmignore io.github.cdklabs.projen.IgnoreFile The .npmignore file. prettier io.github.cdklabs.projen.javascript.Prettier No description. publisher io.github.cdklabs.projen.release.Publisher Package publisher. release io.github.cdklabs.projen.release.Release Release management. upgradeWorkflow io.github.cdklabs.projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory java.lang.String No description. libdir java.lang.String The directory in which compiled .js files reside. srcdir java.lang.String The directory in which source files reside. testdir java.lang.String The directory in which tests reside. tsconfigDev io.github.cdklabs.projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask io.github.cdklabs.projen.Task The \"watch\" task. docgen java.lang.Boolean No description. eslint io.github.cdklabs.projen.javascript.Eslint No description. tsconfig io.github.cdklabs.projen.javascript.TypescriptConfig No description. tsconfigEslint io.github.cdklabs.projen.javascript.TypescriptConfig No description. applicationName java.lang.String No description. publicDir java.lang.String No description. buildTask Required public Task getBuildTask (); Type: io.github.cdklabs.projen.Task commitGenerated Required public java . lang . Boolean getCommitGenerated (); Type: java.lang.Boolean Whether to commit the managed files by default. compileTask Required public Task getCompileTask (); Type: io.github.cdklabs.projen.Task components Required public java . util . List < Component > getComponents (); Type: java.util.List Returns all the components within this project. deps Required public Dependencies getDeps (); Type: io.github.cdklabs.projen.Dependencies Project dependencies. ejected Required public java . lang . Boolean getEjected (); Type: java.lang.Boolean Whether or not the project is being ejected. files Required public java . util . List < FileBase > getFiles (); Type: java.util.List All files in this project. gitattributes Required public GitAttributesFile getGitattributes (); Type: io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public IgnoreFile getGitignore (); Type: io.github.cdklabs.projen.IgnoreFile .gitignore. logger Required public Logger getLogger (); Type: io.github.cdklabs.projen.Logger Logging utilities. name Required public java . lang . String getName (); Type: java.lang.String Project name. outdir Required public java . lang . String getOutdir (); Type: java.lang.String Absolute output directory of this project. packageTask Required public Task getPackageTask (); Type: io.github.cdklabs.projen.Task postCompileTask Required public Task getPostCompileTask (); Type: io.github.cdklabs.projen.Task preCompileTask Required public Task getPreCompileTask (); Type: io.github.cdklabs.projen.Task projectBuild Required public ProjectBuild getProjectBuild (); Type: io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand Required public java . lang . String getProjenCommand (); Type: java.lang.String The command to use in order to run the projen CLI. root Required public Project getRoot (); Type: io.github.cdklabs.projen.Project The root project. tasks Required public Tasks getTasks (); Type: io.github.cdklabs.projen.Tasks Project tasks. testTask Required public Task getTestTask (); Type: io.github.cdklabs.projen.Task defaultTask Optional public Task getDefaultTask (); Type: io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public InitProject getInitProject (); Type: io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project A parent project. If undefined, this is the root project. projectType Required public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType autoApprove Optional public AutoApprove getAutoApprove (); Type: io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public DevContainer getDevContainer (); Type: io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public GitHub getGithub (); Type: io.github.cdklabs.projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public Gitpod getGitpod (); Type: io.github.cdklabs.projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public VsCode getVscode (); Type: io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. ~~ allowLibraryDependencies ~~ Required Deprecated: use package.allowLibraryDependencies public java . lang . Boolean getAllowLibraryDependencies (); Type: java.lang.Boolean artifactsDirectory Required public java . lang . String getArtifactsDirectory (); Type: java.lang.String The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg . artifactsJavascriptDirectory Required public java . lang . String getArtifactsJavascriptDirectory (); Type: java.lang.String The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler Required public Bundler getBundler (); Type: io.github.cdklabs.projen.javascript.Bundler ~~ entrypoint ~~ Required Deprecated: use package.entrypoint public java . lang . String getEntrypoint (); Type: java.lang.String ~~ manifest ~~ Required Deprecated: use package.addField(x, y) public java . lang . Object getManifest (); Type: java.lang.Object package Required public NodePackage getPackage (); Type: io.github.cdklabs.projen.javascript.NodePackage API for managing the node package. ~~ packageManager ~~ Required Deprecated: use package.packageManager public NodePackageManager getPackageManager (); Type: io.github.cdklabs.projen.javascript.NodePackageManager The package manager to use. runScriptCommand Required public java . lang . String getRunScriptCommand (); Type: java.lang.String The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge Optional public AutoMerge getAutoMerge (); Type: io.github.cdklabs.projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. buildWorkflow Optional public BuildWorkflow getBuildWorkflow (); Type: io.github.cdklabs.projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled. buildWorkflowJobId Optional public java . lang . String getBuildWorkflowJobId (); Type: java.lang.String The job ID of the build workflow. jest Optional public Jest getJest (); Type: io.github.cdklabs.projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion Optional public java . lang . String getMaxNodeVersion (); Type: java.lang.String Maximum node version required by this package. minNodeVersion Optional public java . lang . String getMinNodeVersion (); Type: java.lang.String Minimum node.js version required by this package. npmignore Optional public IgnoreFile getNpmignore (); Type: io.github.cdklabs.projen.IgnoreFile The .npmignore file. prettier Optional public Prettier getPrettier (); Type: io.github.cdklabs.projen.javascript.Prettier ~~ publisher ~~ Optional Deprecated: use release.publisher . public Publisher getPublisher (); Type: io.github.cdklabs.projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow. release Optional public Release getRelease (); Type: io.github.cdklabs.projen.release.Release Release management. upgradeWorkflow Optional public UpgradeDependencies getUpgradeWorkflow (); Type: io.github.cdklabs.projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory Required public java . lang . String getDocsDirectory (); Type: java.lang.String libdir Required public java . lang . String getLibdir (); Type: java.lang.String The directory in which compiled .js files reside. srcdir Required public java . lang . String getSrcdir (); Type: java.lang.String The directory in which source files reside. testdir Required public java . lang . String getTestdir (); Type: java.lang.String The directory in which tests reside. tsconfigDev Required public TypescriptConfig getTsconfigDev (); Type: io.github.cdklabs.projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask Required public Task getWatchTask (); Type: io.github.cdklabs.projen.Task The \"watch\" task. docgen Optional public java . lang . Boolean getDocgen (); Type: java.lang.Boolean eslint Optional public Eslint getEslint (); Type: io.github.cdklabs.projen.javascript.Eslint tsconfig Optional public TypescriptConfig getTsconfig (); Type: io.github.cdklabs.projen.javascript.TypescriptConfig tsconfigEslint Optional public TypescriptConfig getTsconfigEslint (); Type: io.github.cdklabs.projen.javascript.TypescriptConfig applicationName Required public java . lang . String getApplicationName (); Type: java.lang.String publicDir Required public java . lang . String getPublicDir (); Type: java.lang.String Constants Name Type Description DEFAULT_TASK java.lang.String The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public java . lang . String getDefaultTask (); Type: java.lang.String The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files.","title":"Index"},{"location":"java/cloudscape-react-ts-website/index.html#getting-started","text":"To create a new Cloudscape React Typescript Project, there are a couple of options:","title":"Getting started"},{"location":"java/cloudscape-react-ts-website/index.html#via-projen-cli","text":"npx projen new --from @aws-prototyping-sdk/cloudscape-react-ts-website cloudscape-react-ts-website [--application-name <your-app>]","title":"Via Projen CLI"},{"location":"java/cloudscape-react-ts-website/index.html#programmatically","text":"// Example automatically generated from non-compiling source. May contain errors. CloudscapeReactTsWebsiteProject . Builder . create () . defaultReleaseBranch ( \"mainline\" ) . name ( \"<name-of-package>\" ) . applicationName ( \"<name-of-app>\" ) . build ();","title":"Programmatically"},{"location":"java/cloudscape-react-ts-website/index.html#running-your-synthesized-application","text":"To run your synthesized application locally, run npx projen dev .","title":"Running your synthesized Application"},{"location":"java/cloudscape-react-ts-website/index.html#developer-notes","text":"To enable Cognito auth, ensure you have a runtime-config.json file in the root of your deployed project which at least contains the following: { \"region\" : \"<aws-region>\" , \"identityPoolId\" : \"<identity-pool-id>\" , \"userPoolId\" : \"<user-pool-id>\" , \"userPoolWebClientId\" : \"<user-pool-web-client-id>\" } The easiest way to get this set up is to use the static-website + identity packages to deploy your website. An example of how to do this is as follows: // Example automatically generated from non-compiling source. May contain errors. Object userIdentity = new UserIdentity ( this , \"UserIdentity\" ); StaticWebsite . Builder . create ( this , \"StaticWebsite\" ) . websiteContentPath ( \"<relative>/<path>/<to>/<built>/<website>\" ) . runtimeOptions ( Map . of ( \"jsonPayload\" , Map . of ( \"region\" , Stack . of ( this ). getRegion (), \"identityPoolId\" , userIdentity . getIdentityPool (). getIdentityPoolId (), \"userPoolId\" , userIdentity . getUserPool (). getUserPoolId (), \"userPoolWebClientId\" , userIdentity . getUserPoolClient (). getUserPoolClientId ()))) . build (); For local development, you will need to copy the generated runtime-config.json file into your /public directory. An example on how to do this is as follows: curl https://dxxxxxxxxxx.cloudfront.net/runtime-config.json > public/runtime-config.json","title":"Developer Notes"},{"location":"java/cloudscape-react-ts-website/index.html#api-reference","text":"","title":"API Reference "},{"location":"java/cloudscape-react-ts-website/index.html#structs","text":"","title":"Structs "},{"location":"java/cloudscape-react-ts-website/index.html#cloudscapereacttswebsiteprojectoptions","text":"Configuration options for the CloudscapeReactTsWebsiteProject.","title":"CloudscapeReactTsWebsiteProjectOptions "},{"location":"java/cloudscape-react-ts-website/index.html#classes","text":"","title":"Classes "},{"location":"java/cloudscape-react-ts-website/index.html#cloudscapereacttswebsiteproject","text":"Synthesizes a Cloudscape React Typescript Website Project.","title":"CloudscapeReactTsWebsiteProject "},{"location":"java/identity/index.html","text":"Experimental Warning This is packaged in a separate module while the API is being stabilized. This package is subject to non-backward compatible changes or removal in any future version. Breaking changes will be announced in the release notes. Whilst you may use this package, you may need to update your source code when upgrading to a newer version. Once we stabilize the module, it will be included into the stable aws-prototyping-sdk library. Experimental Usage To use this package, add a dependency on: software.aws.awsprototypingsdk/identity This module by default deploys a configurable Identity Provider with a default Cognito User Pool. These resources can be used by your website to restrict access to only authenticated users if needed. All settings are configurable and the creation of these AuthN resources can be disabled if needed or configured to use custom AuthN providers i.e. Facebook, Google, etc. Below is a conceptual view of the default architecture this module creates: Cognito User Pool --------------------> Identity Pool |_ User Pool Client |_ Unauthenticated IAM Role |_ Authenticated IAM Role API Reference Constructs UserIdentity Creates an Identity Pool with sane defaults configured. Initializers import software.aws.awsprototypingsdk.identity.UserIdentity ; UserIdentity . Builder . create ( Construct scope , java . lang . String id ) // .identityPoolOptions(IdentityPoolProps) // .userPool(UserPool) . build (); Name Type Description scope software.constructs.Construct No description. id java.lang.String No description. identityPoolOptions software.amazon.awscdk.services.cognito.identitypool.alpha.IdentityPoolProps Configuration for the Identity Pool. userPool software.amazon.awscdk.services.cognito.UserPool User provided Cognito UserPool. scope Required Type: software.constructs.Construct id Required Type: java.lang.String identityPoolOptions Optional Type: software.amazon.awscdk.services.cognito.identitypool.alpha.IdentityPoolProps Configuration for the Identity Pool. userPool Optional Type: software.amazon.awscdk.services.cognito.UserPool Default: a userpool will be created. User provided Cognito UserPool. Methods Name Description toString Returns a string representation of this construct. toString public java . lang . String toString () Returns a string representation of this construct. Static Functions Name Description isConstruct Checks if x is a construct. isConstruct import software.aws.awsprototypingsdk.identity.UserIdentity ; UserIdentity . isConstruct ( java . lang . Object x ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: java.lang.Object Any object. Properties Name Type Description node software.constructs.Node The tree node. identityPool software.amazon.awscdk.services.cognito.identitypool.alpha.IdentityPool No description. userPool software.amazon.awscdk.services.cognito.UserPool No description. userPoolClient software.amazon.awscdk.services.cognito.UserPoolClient No description. node Required public Node getNode (); Type: software.constructs.Node The tree node. identityPool Required public IdentityPool getIdentityPool (); Type: software.amazon.awscdk.services.cognito.identitypool.alpha.IdentityPool userPool Required public UserPool getUserPool (); Type: software.amazon.awscdk.services.cognito.UserPool userPoolClient Optional public UserPoolClient getUserPoolClient (); Type: software.amazon.awscdk.services.cognito.UserPoolClient Structs UserIdentityProps Properties which configures the Identity Pool. Initializer import software.aws.awsprototypingsdk.identity.UserIdentityProps ; UserIdentityProps . builder () // .identityPoolOptions(IdentityPoolProps) // .userPool(UserPool) . build (); Properties Name Type Description identityPoolOptions software.amazon.awscdk.services.cognito.identitypool.alpha.IdentityPoolProps Configuration for the Identity Pool. userPool software.amazon.awscdk.services.cognito.UserPool User provided Cognito UserPool. identityPoolOptions Optional public IdentityPoolProps getIdentityPoolOptions (); Type: software.amazon.awscdk.services.cognito.identitypool.alpha.IdentityPoolProps Configuration for the Identity Pool. userPool Optional public UserPool getUserPool (); Type: software.amazon.awscdk.services.cognito.UserPool Default: a userpool will be created. User provided Cognito UserPool.","title":"Index"},{"location":"java/identity/index.html#api-reference","text":"","title":"API Reference "},{"location":"java/identity/index.html#constructs","text":"","title":"Constructs "},{"location":"java/identity/index.html#useridentity","text":"Creates an Identity Pool with sane defaults configured.","title":"UserIdentity "},{"location":"java/identity/index.html#structs","text":"","title":"Structs "},{"location":"java/identity/index.html#useridentityprops","text":"Properties which configures the Identity Pool.","title":"UserIdentityProps "},{"location":"java/nx-monorepo/index.html","text":"The nx-monorepo package vends a NxMonorepoProject Projen construct that adds NX monorepo support and manages your yarn/npm/pnpm workspaces on your behalf. This construct enables polyglot builds (and inter language build dependencies), build caching, dependency visualization and much, much more. The PDK itself uses the nx-monorepo project itself and is a good reference for seeing how a complex, polyglot monorepo can be set up. BREAKING CHANGES (pre-release) - v0.13.0: WorkspaceConfig.nxConfig type NxConfig => Nx.WorkspaceConfig , and overrideProjectTargets removed in favor of PDKProject.nx config to manage Nx project configurations. See PR 231 . To get started simply run the following command in an empty directory: npx projen new --from aws-prototyping-sdk nx-monorepo This will bootstrap a new Projen monorepo and contain the following in the .projenrc.ts: import { nx_monorepo } from \"aws-prototyping-sdk\" ; const project = new nx_monorepo . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , deps : [ \"aws-cdk-lib\" , \"constructs\" , \"cdk-nag\" ], devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-package\" , }); project . synth (); To add new packages to the monorepo, you can simply add them as a child to the monorepo. To demonstrate, lets add a PDK Pipeline TS Project as a child as follows: import { nx_monorepo } from \"aws-prototyping-sdk\" ; const project = new nx_monorepo . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , deps : [ \"aws-cdk-lib\" , \"constructs\" , \"cdk-nag\" ], devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-package\" , }); new PDKPipelineTsProject ({ parent : project , outdir : \"packages/cicd\" , defaultReleaseBranch : \"mainline\" , name : \"cicd\" , cdkVersion : \"2.1.0\" }); project . synth (); Once added, run npx projen from the root directory. You will now notice a new TS package has been created under the packages/cicd path. Now let's add a python project to the monorepo and add an inter-language build dependency. import { nx_monorepo } from \"aws-prototyping-sdk\" ; import { PDKPipelineTsProject } from \"aws-prototyping-sdk/pipeline\" ; import { PythonProject } from \"projen/lib/python\" ; const project = new nx_monorepo . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , deps : [ \"aws-cdk-lib\" , \"constructs\" , \"cdk-nag\" ], devDeps : [ \"aws-prototyping-sdk\" ], name : \"test\" , }); const pipelineProject = new PDKPipelineTsProject ({ parent : project , outdir : \"packages/cicd\" , defaultReleaseBranch : \"mainline\" , name : \"cicd\" , cdkVersion : \"2.1.0\" }); // Standard Projen projects also work here const pythonlib = new PythonProject ({ parent : project , outdir : \"packages/pythonlib\" , authorEmail : \"\" , authorName : \"\" , module Name : \"pythonlib\" , name : \"pythonlib\" , version : \"0.0.0\" }); // Pipeline project depends on pythonlib to build first project . addImplicitDependency ( pipelineProject , pythonlib ); project . synth (); Run npx projen from the root directory. You will now notice a new Python package has been created under packages/pythonlib. To visualize our dependency graph, run the following command from the root directory: npx nx graph . Now lets test building our project, from the root directory run npx nx run-many --target=build --nx-bail . As you can see, the pythonlib was built first followed by the cicd package. This is equivalent to running yarn build , pnpm build , or npm run build depending on your node package manager, and similarly yarn build also accepts the same Nx Run-Many options (eg: yarn build --projects=cicd ). The NxMonorepoProject also manages your yarn/pnpm workspaces for you and synthesizes these into your package.json pnpm-workspace.yml respectively. For more information on NX commands, refer to this documentation . Homogenous Dependencies As well as adding implicit dependencies, you can add dependencies between projects of the same language in order to have one project consume another project's code. Typescript Since the NxMonorepoProject manages a yarn/npm/pnpm workspace, configuring dependencies between Typescript projects is as straightforward as referencing them in deps . Note that dependencies cannot be added in the same project synthesis ( npx projen ) as when projects are created. This means a two-pass approach is recommended, first to create your new projects, and then to add the dependencies. For example: First add your new projects: new TypeScriptProject ({ parent : monorepo , outdir : \"packages/a\" , defaultReleaseBranch : \"main\" , name : \"project-a\" }); new TypeScriptProject ({ parent : monorepo , outdir : \"packages/b\" , defaultReleaseBranch : \"main\" , name : \"project-b\" , }); Synthesise, then you can set up your dependency: const a = new TypeScriptProject ({ parent : monorepo , outdir : \"packages/a\" , defaultReleaseBranch : \"main\" , name : \"project-a\" }); new TypeScriptProject ({ parent : monorepo , outdir : \"packages/b\" , defaultReleaseBranch : \"main\" , name : \"project-b\" , // B depends on A deps : [ a . package . packageName ], }); Python The recommended way to configure dependencies between python projects within your monorepo is to use a single shared virtual environment. You can then install packages you wish to depend on into that environment using pip's Editable Installs . You will also need to add an implicit dependency to tell the monorepo the correct build order for your packages. For example: const sharedEnv : VenvOptions = { envdir : '../../.env' , }; const a = new PythonProject ({ parent : monorepo , outdir : 'packages/a' , module Name : 'a' , name : 'a' , authorName : 'jack' , authorEmail : 'me@example.com' , version : '1.0.0' , venvOptions : sharedEnv , }); // Install A into the virtual env since it is consumed by B a . tasks . tryFind ( 'install' ) ! . exec ( 'pip install --editable .' ); const b = new PythonProject ({ parent : monorepo , outdir : 'packages/b' , module Name : 'b' , name : 'b' , authorName : 'jack' , authorEmail : 'me@example.com' , version : '1.0.0' , venvOptions : sharedEnv , // B depends on A deps : [ a . module Name ], }); // Add the implicit dependency so that the monorepo will build A before B monorepo . addImplicitDependency ( b , a ); Java The recommended way to configure dependencies between java projects within your monorepo is to use shared maven repositories. The default java project build will already create a distributable in the correct format for a maven repository in its dist/java folder, so you can use this as a repository. For example: const a = new JavaProject ({ parent : monorepo , outdir : 'packages/a' , groupId : 'com.mycompany' , artifactId : 'a' , name : 'a' , version : '1.0.0' , }); const b = new JavaProject ({ parent : monorepo , outdir : 'packages/b' , groupId : 'com.mycompany' , artifactId : 'b' , name : 'b' , version : '1.0.0' , // Declare the dependency on A deps : [ ` ${ a . pom . groupId } / ${ a . pom . artifactId } @ ${ a . pom . version } ` ], }); // Add the repository b . pom . addRepository ({ url : 'file://../a/dist/java' , id : 'dependency-on-a' , }); // Add the implicit dependency to control build order monorepo . addImplicitDependency ( b , a ); API Reference Structs MonorepoUpgradeDepsOptions Configuration for Monorepo Upgrade Deps task. Initializer import software.aws.awsprototypingsdk.nxmonorepo.MonorepoUpgradeDepsOptions ; MonorepoUpgradeDepsOptions . builder () // .syncpackConfig(SyncpackConfig) // .taskName(java.lang.String) . build (); Properties Name Type Description syncpackConfig SyncpackConfig Syncpack configuration. taskName java.lang.String Name of the task to create. syncpackConfig Optional public SyncpackConfig getSyncpackConfig (); Type: SyncpackConfig Default: SyncpackConfig.DEFAULT_CONFIG Syncpack configuration. No merging is performed and as such a complete syncpackConfig is required if supplied. taskName Optional public java . lang . String getTaskName (); Type: java.lang.String Default: upgrade-deps Name of the task to create. NxMonorepoProjectOptions Configuration options for the NxMonorepoProject. Initializer import software.aws.awsprototypingsdk.nxmonorepo.NxMonorepoProjectOptions ; NxMonorepoProjectOptions . builder () . name ( java . lang . String ) // .commitGenerated(java.lang.Boolean) // .gitOptions(GitOptions) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .renovatebot(java.lang.Boolean) // .renovatebotOptions(RenovatebotOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMerge(java.lang.Boolean) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenCredentials(GithubCredentials) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) // .allowLibraryDependencies(java.lang.Boolean) // .authorEmail(java.lang.String) // .authorName(java.lang.String) // .authorOrganization(java.lang.Boolean) // .authorUrl(java.lang.String) // .autoDetectBin(java.lang.Boolean) // .bin(java.util.Map<java.lang.String, java.lang.String>) // .bugsEmail(java.lang.String) // .bugsUrl(java.lang.String) // .bundledDeps(java.util.List<java.lang.String>) // .codeArtifactOptions(CodeArtifactOptions) // .deps(java.util.List<java.lang.String>) // .description(java.lang.String) // .devDeps(java.util.List<java.lang.String>) // .entrypoint(java.lang.String) // .homepage(java.lang.String) // .keywords(java.util.List<java.lang.String>) // .license(java.lang.String) // .licensed(java.lang.Boolean) // .maxNodeVersion(java.lang.String) // .minNodeVersion(java.lang.String) // .npmAccess(NpmAccess) // .npmRegistry(java.lang.String) // .npmRegistryUrl(java.lang.String) // .npmTokenSecret(java.lang.String) // .packageManager(NodePackageManager) // .packageName(java.lang.String) // .peerDependencyOptions(PeerDependencyOptions) // .peerDeps(java.util.List<java.lang.String>) // .pnpmVersion(java.lang.String) // .repository(java.lang.String) // .repositoryDirectory(java.lang.String) // .scopedPackagesOptions(java.util.List<ScopedPackagesOptions>) // .scripts(java.util.Map<java.lang.String, java.lang.String>) // .stability(java.lang.String) // .jsiiReleaseVersion(java.lang.String) // .majorVersion(java.lang.Number) // .minMajorVersion(java.lang.Number) // .npmDistTag(java.lang.String) // .postBuildSteps(java.util.List<JobStep>) // .prerelease(java.lang.String) // .publishDryRun(java.lang.Boolean) // .publishTasks(java.lang.Boolean) // .releaseBranches(java.util.Map<java.lang.String, BranchOptions>) // .releaseEveryCommit(java.lang.Boolean) // .releaseFailureIssue(java.lang.Boolean) // .releaseFailureIssueLabel(java.lang.String) // .releaseSchedule(java.lang.String) // .releaseTagPrefix(java.lang.String) // .releaseTrigger(ReleaseTrigger) // .releaseWorkflowName(java.lang.String) // .releaseWorkflowSetupSteps(java.util.List<JobStep>) // .versionrcOptions(java.util.Map<java.lang.String, java.lang.Object>) // .workflowContainerImage(java.lang.String) // .workflowRunsOn(java.util.List<java.lang.String>) . defaultReleaseBranch ( java . lang . String ) // .artifactsDirectory(java.lang.String) // .autoApproveUpgrades(java.lang.Boolean) // .buildWorkflow(java.lang.Boolean) // .buildWorkflowTriggers(Triggers) // .bundlerOptions(BundlerOptions) // .codeCov(java.lang.Boolean) // .codeCovTokenSecret(java.lang.String) // .copyrightOwner(java.lang.String) // .copyrightPeriod(java.lang.String) // .dependabot(java.lang.Boolean) // .dependabotOptions(DependabotOptions) // .depsUpgrade(java.lang.Boolean) // .depsUpgradeOptions(UpgradeDependenciesOptions) // .gitignore(java.util.List<java.lang.String>) // .jest(java.lang.Boolean) // .jestOptions(JestOptions) // .mutableBuild(java.lang.Boolean) // .npmignore(java.util.List<java.lang.String>) // .npmignoreEnabled(java.lang.Boolean) // .package(java.lang.Boolean) // .prettier(java.lang.Boolean) // .prettierOptions(PrettierOptions) // .projenDevDependency(java.lang.Boolean) // .projenrcJs(java.lang.Boolean) // .projenrcJsOptions(ProjenrcOptions) // .projenVersion(java.lang.String) // .pullRequestTemplate(java.lang.Boolean) // .pullRequestTemplateContents(java.util.List<java.lang.String>) // .release(java.lang.Boolean) // .releaseToNpm(java.lang.Boolean) // .releaseWorkflow(java.lang.Boolean) // .workflowBootstrapSteps(java.util.List<JobStep>) // .workflowGitIdentity(GitIdentity) // .workflowNodeVersion(java.lang.String) // .disableTsconfig(java.lang.Boolean) // .docgen(java.lang.Boolean) // .docsDirectory(java.lang.String) // .entrypointTypes(java.lang.String) // .eslint(java.lang.Boolean) // .eslintOptions(EslintOptions) // .libdir(java.lang.String) // .projenrcTs(java.lang.Boolean) // .projenrcTsOptions(ProjenrcOptions) // .sampleCode(java.lang.Boolean) // .srcdir(java.lang.String) // .testdir(java.lang.String) // .tsconfig(TypescriptConfigOptions) // .tsconfigDev(TypescriptConfigOptions) // .tsconfigDevFile(java.lang.String) // .typescriptVersion(java.lang.String) // .monorepoUpgradeDeps(java.lang.Boolean) // .monorepoUpgradeDepsOptions(MonorepoUpgradeDepsOptions) // .nxConfig(WorkspaceConfig) // .workspaceConfig(WorkspaceConfig) . build (); Properties Name Type Description name java.lang.String This is the name of your project. commitGenerated java.lang.Boolean Whether to commit the managed files by default. gitOptions io.github.cdklabs.projen.GitOptions Configuration options for git. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. renovatebot java.lang.Boolean Use renovatebot to handle dependency upgrades. renovatebotOptions io.github.cdklabs.projen.RenovatebotOptions Options for renovatebot. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge java.lang.Boolean Enable automatic merging on GitHub. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenCredentials io.github.cdklabs.projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. allowLibraryDependencies java.lang.Boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail java.lang.String Author's e-mail. authorName java.lang.String Author's name. authorOrganization java.lang.Boolean Is the author an organization. authorUrl java.lang.String Author's URL / Website. autoDetectBin java.lang.Boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin java.util.Map Binary programs vended with your module. bugsEmail java.lang.String The email address to which issues should be reported. bugsUrl java.lang.String The url to your project's issue tracker. bundledDeps java.util.List List of dependencies to bundle into this module. codeArtifactOptions io.github.cdklabs.projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps java.util.List Runtime dependencies of this module. description java.lang.String The description is just a string that helps people understand the purpose of the package. devDeps java.util.List Build dependencies for this module. entrypoint java.lang.String Module entrypoint ( main in package.json ). homepage java.lang.String Package's Homepage / Website. keywords java.util.List Keywords to include in package.json . license java.lang.String License's SPDX identifier. licensed java.lang.Boolean Indicates if a license should be added. maxNodeVersion java.lang.String Minimum node.js version to require via engines (inclusive). minNodeVersion java.lang.String Minimum Node.js version to require via package.json engines (inclusive). npmAccess io.github.cdklabs.projen.javascript.NpmAccess Access level of the npm package. npmRegistry java.lang.String The host name of the npm registry to publish to. npmRegistryUrl java.lang.String The base URL of the npm package registry. npmTokenSecret java.lang.String GitHub secret which contains the NPM token to use when publishing packages. packageManager io.github.cdklabs.projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName java.lang.String The \"name\" in package.json. peerDependencyOptions io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps java.util.List Peer dependencies for this module. pnpmVersion java.lang.String The version of PNPM to use if using PNPM as a package manager. repository java.lang.String The repository is the location where the actual code for your package lives. repositoryDirectory java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions java.util.List Options for privately hosted scoped packages. scripts java.util.Map npm scripts to include. stability java.lang.String Package's Stability. jsiiReleaseVersion java.lang.String Version requirement of publib which is used to publish modules to npm. majorVersion java.lang.Number Major version to release from the default branch. minMajorVersion java.lang.Number Minimal Major version to release. npmDistTag java.lang.String The npmDistTag to use when publishing from the default branch. postBuildSteps java.util.List Steps to execute after build as part of the release workflow. prerelease java.lang.String Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun java.lang.Boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks java.lang.Boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches java.util.Map Defines additional release branches. releaseEveryCommit java.lang.Boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue java.lang.Boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel java.lang.String The label to apply to issues indicating publish failures. releaseSchedule java.lang.String CRON schedule to trigger new releases. releaseTagPrefix java.lang.String Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger io.github.cdklabs.projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName java.lang.String The name of the default release workflow. releaseWorkflowSetupSteps java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions java.util.Map Custom configuration used when creating changelog with standard-version package. workflowContainerImage java.lang.String Container image to use for GitHub workflows. workflowRunsOn java.util.List Github Runner selection labels. defaultReleaseBranch java.lang.String The name of the main release branch. artifactsDirectory java.lang.String A directory which will contain build artifacts. autoApproveUpgrades java.lang.Boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow java.lang.Boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers io.github.cdklabs.projen.github.workflows.Triggers Build workflow triggers. bundlerOptions io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov java.lang.Boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret java.lang.String Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner java.lang.String License copyright owner. copyrightPeriod java.lang.String The copyright years to put in the LICENSE file. dependabot java.lang.Boolean Use dependabot to handle dependency upgrades. dependabotOptions io.github.cdklabs.projen.github.DependabotOptions Options for dependabot. depsUpgrade java.lang.Boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore java.util.List Additional entries to .gitignore. jest java.lang.Boolean Setup jest unit tests. jestOptions io.github.cdklabs.projen.javascript.JestOptions Jest options. mutableBuild java.lang.Boolean Automatically update files modified during builds to pull-request branches. npmignore java.util.List Additional entries to .npmignore. npmignoreEnabled java.lang.Boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package java.lang.Boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier java.lang.Boolean Setup prettier. prettierOptions io.github.cdklabs.projen.javascript.PrettierOptions Prettier options. projenDevDependency java.lang.Boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs java.lang.Boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions io.github.cdklabs.projen.javascript.ProjenrcOptions Options for .projenrc.js. projenVersion java.lang.String Version of projen to install. pullRequestTemplate java.lang.Boolean Include a GitHub pull request template. pullRequestTemplateContents java.util.List The contents of the pull request template. release java.lang.Boolean Add release management to this project. releaseToNpm java.lang.Boolean Automatically release to npm when new versions are introduced. releaseWorkflow java.lang.Boolean DEPRECATED: renamed to release . workflowBootstrapSteps java.util.List Workflow steps to use in order to bootstrap this repo. workflowGitIdentity io.github.cdklabs.projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion java.lang.String The node version to use in GitHub workflows. disableTsconfig java.lang.Boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen java.lang.Boolean Docgen by Typedoc. docsDirectory java.lang.String Docs directory. entrypointTypes java.lang.String The .d.ts file that includes the type declarations for this module. eslint java.lang.Boolean Setup eslint. eslintOptions io.github.cdklabs.projen.javascript.EslintOptions Eslint options. libdir java.lang.String Typescript artifacts output directory. projenrcTs java.lang.Boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode java.lang.Boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir java.lang.String Typescript sources directory. testdir java.lang.String Jest tests directory. Tests files should be named xxx.test.ts . tsconfig io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile java.lang.String The name of the development tsconfig.json file. typescriptVersion java.lang.String TypeScript version to use. monorepoUpgradeDeps java.lang.Boolean Whether to include an upgrade-deps task at the root of the monorepo which will upgrade all dependencies. monorepoUpgradeDepsOptions MonorepoUpgradeDepsOptions Monorepo Upgrade Deps options. nxConfig WorkspaceConfig Configuration for NX. workspaceConfig WorkspaceConfig Configuration for workspace. name Required public java . lang . String getName (); Type: java.lang.String Default: $BASEDIR This is the name of your project. commitGenerated Optional public java . lang . Boolean getCommitGenerated (); Type: java.lang.Boolean Default: true Whether to commit the managed files by default. gitOptions Optional public GitOptions getGitOptions (); Type: io.github.cdklabs.projen.GitOptions Configuration options for git. logging Optional public LoggerOptions getLogging (); Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public java . lang . String getOutdir (); Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public java . lang . String getProjenCommand (); Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public java . lang . Boolean getProjenrcJson (); Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public ProjenrcOptions getProjenrcJsonOptions (); Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional public java . lang . Boolean getRenovatebot (); Type: java.lang.Boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional public RenovatebotOptions getRenovatebotOptions (); Type: io.github.cdklabs.projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional public AutoApproveOptions getAutoApproveOptions (); Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional public java . lang . Boolean getAutoMerge (); Type: java.lang.Boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional public AutoMergeOptions getAutoMergeOptions (); Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional public java . lang . Boolean getClobber (); Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public java . lang . Boolean getDevContainer (); Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public java . lang . Boolean getGithub (); Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public GitHubOptions getGithubOptions (); Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public java . lang . Boolean getGitpod (); Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public java . lang . Boolean getMergify (); Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public MergifyOptions getMergifyOptions (); Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional public GithubCredentials getProjenCredentials (); Type: io.github.cdklabs.projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials public java . lang . String getProjenTokenSecret (); Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public SampleReadmeProps getReadme (); Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional public java . lang . Boolean getStale (); Type: java.lang.Boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public StaleOptions getStaleOptions (); Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public java . lang . Boolean getVscode (); Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allowLibraryDependencies Optional public java . lang . Boolean getAllowLibraryDependencies (); Type: java.lang.Boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. authorEmail Optional public java . lang . String getAuthorEmail (); Type: java.lang.String Author's e-mail. authorName Optional public java . lang . String getAuthorName (); Type: java.lang.String Author's name. authorOrganization Optional public java . lang . Boolean getAuthorOrganization (); Type: java.lang.Boolean Is the author an organization. authorUrl Optional public java . lang . String getAuthorUrl (); Type: java.lang.String Author's URL / Website. autoDetectBin Optional public java . lang . Boolean getAutoDetectBin (); Type: java.lang.Boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional public java . util . Map < java . lang . String , java . lang . String > getBin (); Type: java.util.Map Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugsEmail Optional public java . lang . String getBugsEmail (); Type: java.lang.String The email address to which issues should be reported. bugsUrl Optional public java . lang . String getBugsUrl (); Type: java.lang.String The url to your project's issue tracker. bundledDeps Optional public java . util . List < java . lang . String > getBundledDeps (); Type: java.util.List List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. codeArtifactOptions Optional public CodeArtifactOptions getCodeArtifactOptions (); Type: io.github.cdklabs.projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional public java . util . List < java . lang . String > getDeps (); Type: java.util.List Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ ' express ' , ' lodash ' , ' foo @ ^ 2 ' ] description Optional public java . lang . String getDescription (); Type: java.lang.String The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description devDeps Optional public java . util . List < java . lang . String > getDevDeps (); Type: java.util.List Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ ' typescript ' , ' @types / express ' ] entrypoint Optional public java . lang . String getEntrypoint (); Type: java.lang.String Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional public java . lang . String getHomepage (); Type: java.lang.String Package's Homepage / Website. keywords Optional public java . util . List < java . lang . String > getKeywords (); Type: java.util.List Keywords to include in package.json . license Optional public java . lang . String getLicense (); Type: java.lang.String Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional public java . lang . Boolean getLicensed (); Type: java.lang.Boolean Default: true Indicates if a license should be added. maxNodeVersion Optional public java . lang . String getMaxNodeVersion (); Type: java.lang.String Default: no max Minimum node.js version to require via engines (inclusive). minNodeVersion Optional public java . lang . String getMinNodeVersion (); Type: java.lang.String Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npmAccess Optional public NpmAccess getNpmAccess (); Type: io.github.cdklabs.projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npmRegistry ~~ Optional Deprecated: use npmRegistryUrl instead public java . lang . String getNpmRegistry (); Type: java.lang.String The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npmRegistryUrl Optional public java . lang . String getNpmRegistryUrl (); Type: java.lang.String Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npmTokenSecret Optional public java . lang . String getNpmTokenSecret (); Type: java.lang.String Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. packageManager Optional public NodePackageManager getPackageManager (); Type: io.github.cdklabs.projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. packageName Optional public java . lang . String getPackageName (); Type: java.lang.String Default: defaults to project name The \"name\" in package.json. peerDependencyOptions Optional public PeerDependencyOptions getPeerDependencyOptions (); Type: io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps Optional public java . util . List < java . lang . String > getPeerDeps (); Type: java.util.List Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. pnpmVersion Optional public java . lang . String getPnpmVersion (); Type: java.lang.String Default: \"7\" The version of PNPM to use if using PNPM as a package manager. repository Optional public java . lang . String getRepository (); Type: java.lang.String The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repositoryDirectory Optional public java . lang . String getRepositoryDirectory (); Type: java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions Optional public java . util . List < ScopedPackagesOptions > getScopedPackagesOptions (); Type: java.util.List Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional public java . util . Map < java . lang . String , java . lang . String > getScripts (); Type: java.util.Map Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional public java . lang . String getStability (); Type: java.lang.String Package's Stability. jsiiReleaseVersion Optional public java . lang . String getJsiiReleaseVersion (); Type: java.lang.String Default: \"latest\" Version requirement of publib which is used to publish modules to npm. majorVersion Optional public java . lang . Number getMajorVersion (); Type: java.lang.Number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. minMajorVersion Optional public java . lang . Number getMinMajorVersion (); Type: java.lang.Number Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npmDistTag Optional public java . lang . String getNpmDistTag (); Type: java.lang.String Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. postBuildSteps Optional public java . util . List < JobStep > getPostBuildSteps (); Type: java.util.List Default: [] Steps to execute after build as part of the release workflow. prerelease Optional public java . lang . String getPrerelease (); Type: java.lang.String Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun Optional public java . lang . Boolean getPublishDryRun (); Type: java.lang.Boolean Default: false Instead of actually publishing to package managers, just print the publishing command. publishTasks Optional public java . lang . Boolean getPublishTasks (); Type: java.lang.Boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. releaseBranches Optional public java . util . Map < java . lang . String , BranchOptions > getReleaseBranches (); Type: java.util.Map Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ releaseEveryCommit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead public java . lang . Boolean getReleaseEveryCommit (); Type: java.lang.Boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue Optional public java . lang . Boolean getReleaseFailureIssue (); Type: java.lang.Boolean Default: false Create a github issue on every failed publishing task. releaseFailureIssueLabel Optional public java . lang . String getReleaseFailureIssueLabel (); Type: java.lang.String Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ releaseSchedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead public java . lang . String getReleaseSchedule (); Type: java.lang.String Default: no scheduled releases CRON schedule to trigger new releases. releaseTagPrefix Optional public java . lang . String getReleaseTagPrefix (); Type: java.lang.String Default: \"v\" Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. releaseTrigger Optional public ReleaseTrigger getReleaseTrigger (); Type: io.github.cdklabs.projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. releaseWorkflowName Optional public java . lang . String getReleaseWorkflowName (); Type: java.lang.String Default: \"Release\" The name of the default release workflow. releaseWorkflowSetupSteps Optional public java . util . List < JobStep > getReleaseWorkflowSetupSteps (); Type: java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions Optional public java . util . Map < java . lang . String , java . lang . Object > getVersionrcOptions (); Type: java.util.Map Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflowContainerImage Optional public java . lang . String getWorkflowContainerImage (); Type: java.lang.String Default: default image Container image to use for GitHub workflows. workflowRunsOn Optional public java . util . List < java . lang . String > getWorkflowRunsOn (); Type: java.util.List Default: [\"ubuntu-latest\"] Github Runner selection labels. defaultReleaseBranch Required public java . lang . String getDefaultReleaseBranch (); Type: java.lang.String Default: \"main\" The name of the main release branch. artifactsDirectory Optional public java . lang . String getArtifactsDirectory (); Type: java.lang.String Default: \"dist\" A directory which will contain build artifacts. autoApproveUpgrades Optional public java . lang . Boolean getAutoApproveUpgrades (); Type: java.lang.Boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. buildWorkflow Optional public java . lang . Boolean getBuildWorkflow (); Type: java.lang.Boolean Default: true if not a subproject Define a GitHub workflow for building PRs. buildWorkflowTriggers Optional public Triggers getBuildWorkflowTriggers (); Type: io.github.cdklabs.projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundlerOptions Optional public BundlerOptions getBundlerOptions (); Type: io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov Optional public java . lang . Boolean getCodeCov (); Type: java.lang.Boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret Optional public java . lang . String getCodeCovTokenSecret (); Type: java.lang.String Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner Optional public java . lang . String getCopyrightOwner (); Type: java.lang.String Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyrightPeriod Optional public java . lang . String getCopyrightPeriod (); Type: java.lang.String Default: current year The copyright years to put in the LICENSE file. dependabot Optional public java . lang . Boolean getDependabot (); Type: java.lang.Boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabotOptions Optional public DependabotOptions getDependabotOptions (); Type: io.github.cdklabs.projen.github.DependabotOptions Default: default options Options for dependabot. depsUpgrade Optional public java . lang . Boolean getDepsUpgrade (); Type: java.lang.Boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . depsUpgradeOptions Optional public UpgradeDependenciesOptions getDepsUpgradeOptions (); Type: io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional public java . util . List < java . lang . String > getGitignore (); Type: java.util.List Additional entries to .gitignore. jest Optional public java . lang . Boolean getJest (); Type: java.lang.Boolean Default: true Setup jest unit tests. jestOptions Optional public JestOptions getJestOptions (); Type: io.github.cdklabs.projen.javascript.JestOptions Default: default options Jest options. mutableBuild Optional public java . lang . Boolean getMutableBuild (); Type: java.lang.Boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore public java . util . List < java . lang . String > getNpmignore (); Type: java.util.List Additional entries to .npmignore. npmignoreEnabled Optional public java . lang . Boolean getNpmignoreEnabled (); Type: java.lang.Boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional public java . lang . Boolean getPackage (); Type: java.lang.Boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional public java . lang . Boolean getPrettier (); Type: java.lang.Boolean Default: false Setup prettier. prettierOptions Optional public PrettierOptions getPrettierOptions (); Type: io.github.cdklabs.projen.javascript.PrettierOptions Default: default options Prettier options. projenDevDependency Optional public java . lang . Boolean getProjenDevDependency (); Type: java.lang.Boolean Default: true Indicates of \"projen\" should be installed as a devDependency. projenrcJs Optional public java . lang . Boolean getProjenrcJs (); Type: java.lang.Boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions Optional public ProjenrcOptions getProjenrcJsOptions (); Type: io.github.cdklabs.projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projenVersion Optional public java . lang . String getProjenVersion (); Type: java.lang.String Default: Defaults to the latest version. Version of projen to install. pullRequestTemplate Optional public java . lang . Boolean getPullRequestTemplate (); Type: java.lang.Boolean Default: true Include a GitHub pull request template. pullRequestTemplateContents Optional public java . util . List < java . lang . String > getPullRequestTemplateContents (); Type: java.util.List Default: default content The contents of the pull request template. release Optional public java . lang . Boolean getRelease (); Type: java.lang.Boolean Default: true (false for subprojects) Add release management to this project. releaseToNpm Optional public java . lang . Boolean getReleaseToNpm (); Type: java.lang.Boolean Default: false Automatically release to npm when new versions are introduced. ~~ releaseWorkflow ~~ Optional Deprecated: see release . public java . lang . Boolean getReleaseWorkflow (); Type: java.lang.Boolean Default: true if not a subproject DEPRECATED: renamed to release . workflowBootstrapSteps Optional public java . util . List < JobStep > getWorkflowBootstrapSteps (); Type: java.util.List Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflowGitIdentity Optional public GitIdentity getWorkflowGitIdentity (); Type: io.github.cdklabs.projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflowNodeVersion Optional public java . lang . String getWorkflowNodeVersion (); Type: java.lang.String Default: same as minNodeVersion The node version to use in GitHub workflows. disableTsconfig Optional public java . lang . Boolean getDisableTsconfig (); Type: java.lang.Boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional public java . lang . Boolean getDocgen (); Type: java.lang.Boolean Default: false Docgen by Typedoc. docsDirectory Optional public java . lang . String getDocsDirectory (); Type: java.lang.String Default: \"docs\" Docs directory. entrypointTypes Optional public java . lang . String getEntrypointTypes (); Type: java.lang.String Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional public java . lang . Boolean getEslint (); Type: java.lang.Boolean Default: true Setup eslint. eslintOptions Optional public EslintOptions getEslintOptions (); Type: io.github.cdklabs.projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional public java . lang . String getLibdir (); Type: java.lang.String Default: \"lib\" Typescript artifacts output directory. projenrcTs Optional public java . lang . Boolean getProjenrcTs (); Type: java.lang.Boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions Optional public ProjenrcOptions getProjenrcTsOptions (); Type: io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode Optional public java . lang . Boolean getSampleCode (); Type: java.lang.Boolean Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional public java . lang . String getSrcdir (); Type: java.lang.String Default: \"src\" Typescript sources directory. testdir Optional public java . lang . String getTestdir (); Type: java.lang.String Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional public TypescriptConfigOptions getTsconfig (); Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfigDev Optional public TypescriptConfigOptions getTsconfigDev (); Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile Optional public java . lang . String getTsconfigDevFile (); Type: java.lang.String Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescriptVersion Optional public java . lang . String getTypescriptVersion (); Type: java.lang.String Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). monorepoUpgradeDeps Optional public java . lang . Boolean getMonorepoUpgradeDeps (); Type: java.lang.Boolean Default: true Whether to include an upgrade-deps task at the root of the monorepo which will upgrade all dependencies. monorepoUpgradeDepsOptions Optional public MonorepoUpgradeDepsOptions getMonorepoUpgradeDepsOptions (); Type: MonorepoUpgradeDepsOptions Default: undefined Monorepo Upgrade Deps options. This is only used if monorepoUpgradeDeps is true. nxConfig Optional public WorkspaceConfig getNxConfig (); Type: WorkspaceConfig Configuration for NX. workspaceConfig Optional public WorkspaceConfig getWorkspaceConfig (); Type: WorkspaceConfig Configuration for workspace. NxRunManyOptions https://nx.dev/packages/nx/documents/run-many#options Initializer import software.aws.awsprototypingsdk.nxmonorepo.NxRunManyOptions ; NxRunManyOptions . builder () . target ( java . lang . String ) // .configuration(java.lang.String) // .exclude(java.lang.String) // .ignoreCycles(java.lang.Boolean) // .noBail(java.lang.Boolean) // .outputStyle(java.lang.String) // .parallel(java.lang.Number) // .projects(java.util.List<java.lang.String>) // .runner(java.lang.String) // .skipCache(java.lang.Boolean) // .verbose(java.lang.Boolean) . build (); Properties Name Type Description target java.lang.String Task to run for affected projects. configuration java.lang.String This is the configuration to use when performing tasks on projects. exclude java.lang.String Exclude certain projects from being processed. ignoreCycles java.lang.Boolean Ignore cycles in the task graph. noBail java.lang.Boolean Do not stop command execution after the first failed task. outputStyle java.lang.String Defines how Nx emits outputs tasks logs. parallel java.lang.Number Max number of parallel processes. projects java.util.List Project to run as list project names and/or patterns. runner java.lang.String This is the name of the tasks runner configuration in nx.json. skipCache java.lang.Boolean Rerun the tasks even when the results are available in the cache. verbose java.lang.Boolean Prints additional information about the commands (e.g. stack traces). target Required public java . lang . String getTarget (); Type: java.lang.String Task to run for affected projects. configuration Optional public java . lang . String getConfiguration (); Type: java.lang.String This is the configuration to use when performing tasks on projects. exclude Optional public java . lang . String getExclude (); Type: java.lang.String Exclude certain projects from being processed. ignoreCycles Optional public java . lang . Boolean getIgnoreCycles (); Type: java.lang.Boolean Ignore cycles in the task graph. noBail Optional public java . lang . Boolean getNoBail (); Type: java.lang.Boolean Do not stop command execution after the first failed task. outputStyle Optional public java . lang . String getOutputStyle (); Type: java.lang.String Default: \"stream\" Defines how Nx emits outputs tasks logs. parallel Optional public java . lang . Number getParallel (); Type: java.lang.Number Default: 3 Max number of parallel processes. projects Optional public java . util . List < java . lang . String > getProjects (); Type: java.util.List Project to run as list project names and/or patterns. runner Optional public java . lang . String getRunner (); Type: java.lang.String This is the name of the tasks runner configuration in nx.json. skipCache Optional public java . lang . Boolean getSkipCache (); Type: java.lang.Boolean Rerun the tasks even when the results are available in the cache. verbose Optional public java . lang . Boolean getVerbose (); Type: java.lang.Boolean Prints additional information about the commands (e.g. stack traces). SemverGroup Initializer import software.aws.awsprototypingsdk.nxmonorepo.SemverGroup ; SemverGroup . builder () . dependencies ( java . util . List < java . lang . String > ) . packages ( java . util . List < java . lang . String > ) . range ( java . lang . String ) // .dependencyTypes(java.util.List<java.lang.String>) . build (); Properties Name Type Description dependencies java.util.List the names of the dependencies (eg. packages java.util.List the names of packages in your monorepo which belong to this group, taken from the \"name\" field in package.json, not the package directory name. range java.lang.String the semver range which dependencies in this group should use. dependencyTypes java.util.List optionally only apply this group to dependencies of the provided types. dependencies Required public java . util . List < java . lang . String > getDependencies (); Type: java.util.List the names of the dependencies (eg. \"lodash\") which belong to this group packages Required public java . util . List < java . lang . String > getPackages (); Type: java.util.List the names of packages in your monorepo which belong to this group, taken from the \"name\" field in package.json, not the package directory name. range Required public java . lang . String getRange (); Type: java.lang.String the semver range which dependencies in this group should use. dependencyTypes Optional public java . util . List < java . lang . String > getDependencyTypes (); Type: java.util.List optionally only apply this group to dependencies of the provided types. SyncpackConfig Initializer import software.aws.awsprototypingsdk.nxmonorepo.SyncpackConfig ; SyncpackConfig . builder () . dependencyTypes ( java . util . List < java . lang . String > ) . dev ( java . lang . Boolean ) . filter ( java . lang . String ) . indent ( java . lang . String ) . overrides ( java . lang . Boolean ) . peer ( java . lang . Boolean ) . pnpmOverrides ( java . lang . Boolean ) . prod ( java . lang . Boolean ) . resolutions ( java . lang . Boolean ) . semverGroups ( java . util . List < SemverGroup > ) . semverRange ( java . lang . String ) . sortAz ( java . util . List < java . lang . String > ) . sortFirst ( java . util . List < java . lang . String > ) . source ( java . util . List < java . lang . String > ) . versionGroups ( java . util . List < VersionGroup > ) . workspace ( java . lang . Boolean ) . build (); Properties Name Type Description dependencyTypes java.util.List which dependency properties to search within. dev java.lang.Boolean whether to search within devDependencies. filter java.lang.String a string which will be passed to new RegExp() to match against package names that should be included. indent java.lang.String the character(s) to be used to indent your package.json files when writing to disk. overrides java.lang.Boolean whether to search within npm overrides. peer java.lang.Boolean whether to search within peerDependencies. pnpmOverrides java.lang.Boolean whether to search within pnpm overrides. prod java.lang.Boolean whether to search within dependencies. resolutions java.lang.Boolean whether to search within yarn resolutions. semverGroups java.util.List< SemverGroup > No description. semverRange java.lang.String defaults to \"\" to ensure that exact dependency versions are used instead of loose ranges. sortAz java.util.List which fields within package.json files should be sorted alphabetically. sortFirst java.util.List which fields within package.json files should appear at the top, and in what order. source java.util.List glob patterns for package.json file locations. versionGroups java.util.List< VersionGroup > No description. workspace java.lang.Boolean whether to include the versions of the --source packages developed in your workspace/monorepo as part of the search for versions to sync. dependencyTypes Required public java . util . List < java . lang . String > getDependencyTypes (); Type: java.util.List which dependency properties to search within. dev Required public java . lang . Boolean getDev (); Type: java.lang.Boolean whether to search within devDependencies. filter Required public java . lang . String getFilter (); Type: java.lang.String a string which will be passed to new RegExp() to match against package names that should be included. indent Required public java . lang . String getIndent (); Type: java.lang.String the character(s) to be used to indent your package.json files when writing to disk. overrides Required public java . lang . Boolean getOverrides (); Type: java.lang.Boolean whether to search within npm overrides. peer Required public java . lang . Boolean getPeer (); Type: java.lang.Boolean whether to search within peerDependencies. pnpmOverrides Required public java . lang . Boolean getPnpmOverrides (); Type: java.lang.Boolean whether to search within pnpm overrides. prod Required public java . lang . Boolean getProd (); Type: java.lang.Boolean whether to search within dependencies. resolutions Required public java . lang . Boolean getResolutions (); Type: java.lang.Boolean whether to search within yarn resolutions. semverGroups Required public java . util . List < SemverGroup > getSemverGroups (); Type: java.util.List< SemverGroup > semverRange Required public java . lang . String getSemverRange (); Type: java.lang.String defaults to \"\" to ensure that exact dependency versions are used instead of loose ranges. sortAz Required public java . util . List < java . lang . String > getSortAz (); Type: java.util.List which fields within package.json files should be sorted alphabetically. sortFirst Required public java . util . List < java . lang . String > getSortFirst (); Type: java.util.List which fields within package.json files should appear at the top, and in what order. source Required public java . util . List < java . lang . String > getSource (); Type: java.util.List glob patterns for package.json file locations. versionGroups Required public java . util . List < VersionGroup > getVersionGroups (); Type: java.util.List< VersionGroup > workspace Required public java . lang . Boolean getWorkspace (); Type: java.lang.Boolean whether to include the versions of the --source packages developed in your workspace/monorepo as part of the search for versions to sync. VersionGroup Initializer import software.aws.awsprototypingsdk.nxmonorepo.VersionGroup ; VersionGroup . builder () . dependencies ( java . util . List < java . lang . String > ) . packages ( java . util . List < java . lang . String > ) // .dependencyTypes(java.util.List<java.lang.String>) // .isBanned(java.lang.Boolean) // .pinVersion(java.lang.String) . build (); Properties Name Type Description dependencies java.util.List the names of the dependencies (eg. packages java.util.List the names of packages in your monorepo which belong to this group, taken from the \"name\" field in package.json, not the package directory name. dependencyTypes java.util.List optionally only apply this group to dependencies of the provided types. isBanned java.lang.Boolean optionally force all dependencies in this group to be removed. pinVersion java.lang.String optionally force all dependencies in this group to have this version. dependencies Required public java . util . List < java . lang . String > getDependencies (); Type: java.util.List the names of the dependencies (eg. \"lodash\") which belong to this group packages Required public java . util . List < java . lang . String > getPackages (); Type: java.util.List the names of packages in your monorepo which belong to this group, taken from the \"name\" field in package.json, not the package directory name. dependencyTypes Optional public java . util . List < java . lang . String > getDependencyTypes (); Type: java.util.List optionally only apply this group to dependencies of the provided types. isBanned Optional public java . lang . Boolean getIsBanned (); Type: java.lang.Boolean optionally force all dependencies in this group to be removed. pinVersion Optional public java . lang . String getPinVersion (); Type: java.lang.String optionally force all dependencies in this group to have this version. WorkspaceConfig Workspace configurations. https://classic.yarnpkg.com/lang/en/docs/workspaces/ Initializer import software.aws.awsprototypingsdk.nxmonorepo.WorkspaceConfig ; WorkspaceConfig . builder () // .additionalPackages(java.util.List<java.lang.String>) // .disableNoHoistBundled(java.lang.Boolean) // .noHoist(java.util.List<java.lang.String>) . build (); Properties Name Type Description additionalPackages java.util.List List of additional package globs to include in the workspace. disableNoHoistBundled java.lang.Boolean Disable automatically applying noHoist logic for all sub-project \"bundledDependencies\". noHoist java.util.List List of package globs to exclude from hoisting in the workspace. additionalPackages Optional public java . util . List < java . lang . String > getAdditionalPackages (); Type: java.util.List List of additional package globs to include in the workspace. All packages which are parented by the monorepo are automatically added to the workspace, but you can use this property to specify any additional paths to packages which may not be managed by projen. disableNoHoistBundled Optional public java . lang . Boolean getDisableNoHoistBundled (); Type: java.lang.Boolean Default: false Disable automatically applying noHoist logic for all sub-project \"bundledDependencies\". noHoist Optional public java . util . List < java . lang . String > getNoHoist (); Type: java.util.List List of package globs to exclude from hoisting in the workspace. https://classic.yarnpkg.com/blog/2018/02/15/nohoist/ Classes NxMonorepoProject This project type will bootstrap a NX based monorepo with support for polygot builds, build caching, dependency graph visualization and much more. Initializers import software.aws.awsprototypingsdk.nxmonorepo.NxMonorepoProject ; NxMonorepoProject . Builder . create () . name ( java . lang . String ) // .commitGenerated(java.lang.Boolean) // .gitOptions(GitOptions) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .renovatebot(java.lang.Boolean) // .renovatebotOptions(RenovatebotOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMerge(java.lang.Boolean) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenCredentials(GithubCredentials) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) // .allowLibraryDependencies(java.lang.Boolean) // .authorEmail(java.lang.String) // .authorName(java.lang.String) // .authorOrganization(java.lang.Boolean) // .authorUrl(java.lang.String) // .autoDetectBin(java.lang.Boolean) // .bin(java.util.Map<java.lang.String, java.lang.String>) // .bugsEmail(java.lang.String) // .bugsUrl(java.lang.String) // .bundledDeps(java.util.List<java.lang.String>) // .codeArtifactOptions(CodeArtifactOptions) // .deps(java.util.List<java.lang.String>) // .description(java.lang.String) // .devDeps(java.util.List<java.lang.String>) // .entrypoint(java.lang.String) // .homepage(java.lang.String) // .keywords(java.util.List<java.lang.String>) // .license(java.lang.String) // .licensed(java.lang.Boolean) // .maxNodeVersion(java.lang.String) // .minNodeVersion(java.lang.String) // .npmAccess(NpmAccess) // .npmRegistry(java.lang.String) // .npmRegistryUrl(java.lang.String) // .npmTokenSecret(java.lang.String) // .packageManager(NodePackageManager) // .packageName(java.lang.String) // .peerDependencyOptions(PeerDependencyOptions) // .peerDeps(java.util.List<java.lang.String>) // .pnpmVersion(java.lang.String) // .repository(java.lang.String) // .repositoryDirectory(java.lang.String) // .scopedPackagesOptions(java.util.List<ScopedPackagesOptions>) // .scripts(java.util.Map<java.lang.String, java.lang.String>) // .stability(java.lang.String) // .jsiiReleaseVersion(java.lang.String) // .majorVersion(java.lang.Number) // .minMajorVersion(java.lang.Number) // .npmDistTag(java.lang.String) // .postBuildSteps(java.util.List<JobStep>) // .prerelease(java.lang.String) // .publishDryRun(java.lang.Boolean) // .publishTasks(java.lang.Boolean) // .releaseBranches(java.util.Map<java.lang.String, BranchOptions>) // .releaseEveryCommit(java.lang.Boolean) // .releaseFailureIssue(java.lang.Boolean) // .releaseFailureIssueLabel(java.lang.String) // .releaseSchedule(java.lang.String) // .releaseTagPrefix(java.lang.String) // .releaseTrigger(ReleaseTrigger) // .releaseWorkflowName(java.lang.String) // .releaseWorkflowSetupSteps(java.util.List<JobStep>) // .versionrcOptions(java.util.Map<java.lang.String, java.lang.Object>) // .workflowContainerImage(java.lang.String) // .workflowRunsOn(java.util.List<java.lang.String>) . defaultReleaseBranch ( java . lang . String ) // .artifactsDirectory(java.lang.String) // .autoApproveUpgrades(java.lang.Boolean) // .buildWorkflow(java.lang.Boolean) // .buildWorkflowTriggers(Triggers) // .bundlerOptions(BundlerOptions) // .codeCov(java.lang.Boolean) // .codeCovTokenSecret(java.lang.String) // .copyrightOwner(java.lang.String) // .copyrightPeriod(java.lang.String) // .dependabot(java.lang.Boolean) // .dependabotOptions(DependabotOptions) // .depsUpgrade(java.lang.Boolean) // .depsUpgradeOptions(UpgradeDependenciesOptions) // .gitignore(java.util.List<java.lang.String>) // .jest(java.lang.Boolean) // .jestOptions(JestOptions) // .mutableBuild(java.lang.Boolean) // .npmignore(java.util.List<java.lang.String>) // .npmignoreEnabled(java.lang.Boolean) // .package(java.lang.Boolean) // .prettier(java.lang.Boolean) // .prettierOptions(PrettierOptions) // .projenDevDependency(java.lang.Boolean) // .projenrcJs(java.lang.Boolean) // .projenrcJsOptions(ProjenrcOptions) // .projenVersion(java.lang.String) // .pullRequestTemplate(java.lang.Boolean) // .pullRequestTemplateContents(java.util.List<java.lang.String>) // .release(java.lang.Boolean) // .releaseToNpm(java.lang.Boolean) // .releaseWorkflow(java.lang.Boolean) // .workflowBootstrapSteps(java.util.List<JobStep>) // .workflowGitIdentity(GitIdentity) // .workflowNodeVersion(java.lang.String) // .disableTsconfig(java.lang.Boolean) // .docgen(java.lang.Boolean) // .docsDirectory(java.lang.String) // .entrypointTypes(java.lang.String) // .eslint(java.lang.Boolean) // .eslintOptions(EslintOptions) // .libdir(java.lang.String) // .projenrcTs(java.lang.Boolean) // .projenrcTsOptions(ProjenrcOptions) // .sampleCode(java.lang.Boolean) // .srcdir(java.lang.String) // .testdir(java.lang.String) // .tsconfig(TypescriptConfigOptions) // .tsconfigDev(TypescriptConfigOptions) // .tsconfigDevFile(java.lang.String) // .typescriptVersion(java.lang.String) // .monorepoUpgradeDeps(java.lang.Boolean) // .monorepoUpgradeDepsOptions(MonorepoUpgradeDepsOptions) // .nxConfig(WorkspaceConfig) // .workspaceConfig(WorkspaceConfig) . build (); Name Type Description name java.lang.String This is the name of your project. commitGenerated java.lang.Boolean Whether to commit the managed files by default. gitOptions io.github.cdklabs.projen.GitOptions Configuration options for git. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. renovatebot java.lang.Boolean Use renovatebot to handle dependency upgrades. renovatebotOptions io.github.cdklabs.projen.RenovatebotOptions Options for renovatebot. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge java.lang.Boolean Enable automatic merging on GitHub. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenCredentials io.github.cdklabs.projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. allowLibraryDependencies java.lang.Boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail java.lang.String Author's e-mail. authorName java.lang.String Author's name. authorOrganization java.lang.Boolean Is the author an organization. authorUrl java.lang.String Author's URL / Website. autoDetectBin java.lang.Boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin java.util.Map Binary programs vended with your module. bugsEmail java.lang.String The email address to which issues should be reported. bugsUrl java.lang.String The url to your project's issue tracker. bundledDeps java.util.List List of dependencies to bundle into this module. codeArtifactOptions io.github.cdklabs.projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps java.util.List Runtime dependencies of this module. description java.lang.String The description is just a string that helps people understand the purpose of the package. devDeps java.util.List Build dependencies for this module. entrypoint java.lang.String Module entrypoint ( main in package.json ). homepage java.lang.String Package's Homepage / Website. keywords java.util.List Keywords to include in package.json . license java.lang.String License's SPDX identifier. licensed java.lang.Boolean Indicates if a license should be added. maxNodeVersion java.lang.String Minimum node.js version to require via engines (inclusive). minNodeVersion java.lang.String Minimum Node.js version to require via package.json engines (inclusive). npmAccess io.github.cdklabs.projen.javascript.NpmAccess Access level of the npm package. npmRegistry java.lang.String The host name of the npm registry to publish to. npmRegistryUrl java.lang.String The base URL of the npm package registry. npmTokenSecret java.lang.String GitHub secret which contains the NPM token to use when publishing packages. packageManager io.github.cdklabs.projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName java.lang.String The \"name\" in package.json. peerDependencyOptions io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps java.util.List Peer dependencies for this module. pnpmVersion java.lang.String The version of PNPM to use if using PNPM as a package manager. repository java.lang.String The repository is the location where the actual code for your package lives. repositoryDirectory java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions java.util.List Options for privately hosted scoped packages. scripts java.util.Map npm scripts to include. stability java.lang.String Package's Stability. jsiiReleaseVersion java.lang.String Version requirement of publib which is used to publish modules to npm. majorVersion java.lang.Number Major version to release from the default branch. minMajorVersion java.lang.Number Minimal Major version to release. npmDistTag java.lang.String The npmDistTag to use when publishing from the default branch. postBuildSteps java.util.List Steps to execute after build as part of the release workflow. prerelease java.lang.String Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun java.lang.Boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks java.lang.Boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches java.util.Map Defines additional release branches. releaseEveryCommit java.lang.Boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue java.lang.Boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel java.lang.String The label to apply to issues indicating publish failures. releaseSchedule java.lang.String CRON schedule to trigger new releases. releaseTagPrefix java.lang.String Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger io.github.cdklabs.projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName java.lang.String The name of the default release workflow. releaseWorkflowSetupSteps java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions java.util.Map Custom configuration used when creating changelog with standard-version package. workflowContainerImage java.lang.String Container image to use for GitHub workflows. workflowRunsOn java.util.List Github Runner selection labels. defaultReleaseBranch java.lang.String The name of the main release branch. artifactsDirectory java.lang.String A directory which will contain build artifacts. autoApproveUpgrades java.lang.Boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow java.lang.Boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers io.github.cdklabs.projen.github.workflows.Triggers Build workflow triggers. bundlerOptions io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov java.lang.Boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret java.lang.String Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner java.lang.String License copyright owner. copyrightPeriod java.lang.String The copyright years to put in the LICENSE file. dependabot java.lang.Boolean Use dependabot to handle dependency upgrades. dependabotOptions io.github.cdklabs.projen.github.DependabotOptions Options for dependabot. depsUpgrade java.lang.Boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore java.util.List Additional entries to .gitignore. jest java.lang.Boolean Setup jest unit tests. jestOptions io.github.cdklabs.projen.javascript.JestOptions Jest options. mutableBuild java.lang.Boolean Automatically update files modified during builds to pull-request branches. npmignore java.util.List Additional entries to .npmignore. npmignoreEnabled java.lang.Boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package java.lang.Boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier java.lang.Boolean Setup prettier. prettierOptions io.github.cdklabs.projen.javascript.PrettierOptions Prettier options. projenDevDependency java.lang.Boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs java.lang.Boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions io.github.cdklabs.projen.javascript.ProjenrcOptions Options for .projenrc.js. projenVersion java.lang.String Version of projen to install. pullRequestTemplate java.lang.Boolean Include a GitHub pull request template. pullRequestTemplateContents java.util.List The contents of the pull request template. release java.lang.Boolean Add release management to this project. releaseToNpm java.lang.Boolean Automatically release to npm when new versions are introduced. releaseWorkflow java.lang.Boolean DEPRECATED: renamed to release . workflowBootstrapSteps java.util.List Workflow steps to use in order to bootstrap this repo. workflowGitIdentity io.github.cdklabs.projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion java.lang.String The node version to use in GitHub workflows. disableTsconfig java.lang.Boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen java.lang.Boolean Docgen by Typedoc. docsDirectory java.lang.String Docs directory. entrypointTypes java.lang.String The .d.ts file that includes the type declarations for this module. eslint java.lang.Boolean Setup eslint. eslintOptions io.github.cdklabs.projen.javascript.EslintOptions Eslint options. libdir java.lang.String Typescript artifacts output directory. projenrcTs java.lang.Boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode java.lang.Boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir java.lang.String Typescript sources directory. testdir java.lang.String Jest tests directory. Tests files should be named xxx.test.ts . tsconfig io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile java.lang.String The name of the development tsconfig.json file. typescriptVersion java.lang.String TypeScript version to use. monorepoUpgradeDeps java.lang.Boolean Whether to include an upgrade-deps task at the root of the monorepo which will upgrade all dependencies. monorepoUpgradeDepsOptions MonorepoUpgradeDepsOptions Monorepo Upgrade Deps options. nxConfig WorkspaceConfig Configuration for NX. workspaceConfig WorkspaceConfig Configuration for workspace. name Required Type: java.lang.String Default: $BASEDIR This is the name of your project. commitGenerated Optional Type: java.lang.Boolean Default: true Whether to commit the managed files by default. gitOptions Optional Type: io.github.cdklabs.projen.GitOptions Configuration options for git. logging Optional Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional Type: java.lang.Boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional Type: io.github.cdklabs.projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional Type: java.lang.Boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional Type: io.github.cdklabs.projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional Type: java.lang.Boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allowLibraryDependencies Optional Type: java.lang.Boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. authorEmail Optional Type: java.lang.String Author's e-mail. authorName Optional Type: java.lang.String Author's name. authorOrganization Optional Type: java.lang.Boolean Is the author an organization. authorUrl Optional Type: java.lang.String Author's URL / Website. autoDetectBin Optional Type: java.lang.Boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional Type: java.util.Map Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugsEmail Optional Type: java.lang.String The email address to which issues should be reported. bugsUrl Optional Type: java.lang.String The url to your project's issue tracker. bundledDeps Optional Type: java.util.List List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. codeArtifactOptions Optional Type: io.github.cdklabs.projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional Type: java.util.List Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ ' express ' , ' lodash ' , ' foo @ ^ 2 ' ] description Optional Type: java.lang.String The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description devDeps Optional Type: java.util.List Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ ' typescript ' , ' @types / express ' ] entrypoint Optional Type: java.lang.String Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional Type: java.lang.String Package's Homepage / Website. keywords Optional Type: java.util.List Keywords to include in package.json . license Optional Type: java.lang.String Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional Type: java.lang.Boolean Default: true Indicates if a license should be added. maxNodeVersion Optional Type: java.lang.String Default: no max Minimum node.js version to require via engines (inclusive). minNodeVersion Optional Type: java.lang.String Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npmAccess Optional Type: io.github.cdklabs.projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npmRegistry ~~ Optional Deprecated: use npmRegistryUrl instead Type: java.lang.String The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npmRegistryUrl Optional Type: java.lang.String Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npmTokenSecret Optional Type: java.lang.String Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. packageManager Optional Type: io.github.cdklabs.projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. packageName Optional Type: java.lang.String Default: defaults to project name The \"name\" in package.json. peerDependencyOptions Optional Type: io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps Optional Type: java.util.List Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. pnpmVersion Optional Type: java.lang.String Default: \"7\" The version of PNPM to use if using PNPM as a package manager. repository Optional Type: java.lang.String The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repositoryDirectory Optional Type: java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions Optional Type: java.util.List Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional Type: java.util.Map Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional Type: java.lang.String Package's Stability. jsiiReleaseVersion Optional Type: java.lang.String Default: \"latest\" Version requirement of publib which is used to publish modules to npm. majorVersion Optional Type: java.lang.Number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. minMajorVersion Optional Type: java.lang.Number Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npmDistTag Optional Type: java.lang.String Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. postBuildSteps Optional Type: java.util.List Default: [] Steps to execute after build as part of the release workflow. prerelease Optional Type: java.lang.String Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun Optional Type: java.lang.Boolean Default: false Instead of actually publishing to package managers, just print the publishing command. publishTasks Optional Type: java.lang.Boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. releaseBranches Optional Type: java.util.Map Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ releaseEveryCommit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead Type: java.lang.Boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue Optional Type: java.lang.Boolean Default: false Create a github issue on every failed publishing task. releaseFailureIssueLabel Optional Type: java.lang.String Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ releaseSchedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead Type: java.lang.String Default: no scheduled releases CRON schedule to trigger new releases. releaseTagPrefix Optional Type: java.lang.String Default: \"v\" Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. releaseTrigger Optional Type: io.github.cdklabs.projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. releaseWorkflowName Optional Type: java.lang.String Default: \"Release\" The name of the default release workflow. releaseWorkflowSetupSteps Optional Type: java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions Optional Type: java.util.Map Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflowContainerImage Optional Type: java.lang.String Default: default image Container image to use for GitHub workflows. workflowRunsOn Optional Type: java.util.List Default: [\"ubuntu-latest\"] Github Runner selection labels. defaultReleaseBranch Required Type: java.lang.String Default: \"main\" The name of the main release branch. artifactsDirectory Optional Type: java.lang.String Default: \"dist\" A directory which will contain build artifacts. autoApproveUpgrades Optional Type: java.lang.Boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. buildWorkflow Optional Type: java.lang.Boolean Default: true if not a subproject Define a GitHub workflow for building PRs. buildWorkflowTriggers Optional Type: io.github.cdklabs.projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundlerOptions Optional Type: io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov Optional Type: java.lang.Boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret Optional Type: java.lang.String Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner Optional Type: java.lang.String Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyrightPeriod Optional Type: java.lang.String Default: current year The copyright years to put in the LICENSE file. dependabot Optional Type: java.lang.Boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabotOptions Optional Type: io.github.cdklabs.projen.github.DependabotOptions Default: default options Options for dependabot. depsUpgrade Optional Type: java.lang.Boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . depsUpgradeOptions Optional Type: io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional Type: java.util.List Additional entries to .gitignore. jest Optional Type: java.lang.Boolean Default: true Setup jest unit tests. jestOptions Optional Type: io.github.cdklabs.projen.javascript.JestOptions Default: default options Jest options. mutableBuild Optional Type: java.lang.Boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore Type: java.util.List Additional entries to .npmignore. npmignoreEnabled Optional Type: java.lang.Boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional Type: java.lang.Boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional Type: java.lang.Boolean Default: false Setup prettier. prettierOptions Optional Type: io.github.cdklabs.projen.javascript.PrettierOptions Default: default options Prettier options. projenDevDependency Optional Type: java.lang.Boolean Default: true Indicates of \"projen\" should be installed as a devDependency. projenrcJs Optional Type: java.lang.Boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions Optional Type: io.github.cdklabs.projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projenVersion Optional Type: java.lang.String Default: Defaults to the latest version. Version of projen to install. pullRequestTemplate Optional Type: java.lang.Boolean Default: true Include a GitHub pull request template. pullRequestTemplateContents Optional Type: java.util.List Default: default content The contents of the pull request template. release Optional Type: java.lang.Boolean Default: true (false for subprojects) Add release management to this project. releaseToNpm Optional Type: java.lang.Boolean Default: false Automatically release to npm when new versions are introduced. ~~ releaseWorkflow ~~ Optional Deprecated: see release . Type: java.lang.Boolean Default: true if not a subproject DEPRECATED: renamed to release . workflowBootstrapSteps Optional Type: java.util.List Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflowGitIdentity Optional Type: io.github.cdklabs.projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflowNodeVersion Optional Type: java.lang.String Default: same as minNodeVersion The node version to use in GitHub workflows. disableTsconfig Optional Type: java.lang.Boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional Type: java.lang.Boolean Default: false Docgen by Typedoc. docsDirectory Optional Type: java.lang.String Default: \"docs\" Docs directory. entrypointTypes Optional Type: java.lang.String Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional Type: java.lang.Boolean Default: true Setup eslint. eslintOptions Optional Type: io.github.cdklabs.projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional Type: java.lang.String Default: \"lib\" Typescript artifacts output directory. projenrcTs Optional Type: java.lang.Boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions Optional Type: io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode Optional Type: java.lang.Boolean Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional Type: java.lang.String Default: \"src\" Typescript sources directory. testdir Optional Type: java.lang.String Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfigDev Optional Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile Optional Type: java.lang.String Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescriptVersion Optional Type: java.lang.String Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). monorepoUpgradeDeps Optional Type: java.lang.Boolean Default: true Whether to include an upgrade-deps task at the root of the monorepo which will upgrade all dependencies. monorepoUpgradeDepsOptions Optional Type: MonorepoUpgradeDepsOptions Default: undefined Monorepo Upgrade Deps options. This is only used if monorepoUpgradeDeps is true. nxConfig Optional Type: WorkspaceConfig Configuration for NX. workspaceConfig Optional Type: WorkspaceConfig Configuration for workspace. Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. tryRemoveFile Finds a file at the specified relative path within this project and removes it. addBins No description. addBundledDeps Defines bundled dependencies. addCompileCommand DEPRECATED. addDeps Defines normal dependencies. addDevDeps Defines development/test dependencies. addFields Directly set fields in package.json . addKeywords Adds keywords to package.json (deduplicated). addPeerDeps Defines peer dependencies. addTestCommand DEPRECATED. hasScript Indicates if a script by the name name is defined. removeScript Removes the npm script (always successful). renderWorkflowSetup Returns the set of workflow steps which should be executed to bootstrap a workflow. setScript Replaces the contents of an npm package.json script. addImplicitDependency Create an implicit dependency between two Project's. addNxRunManyTask Add project task that executes npx nx run-many ... style command. addWorkspacePackages Add one or more additional package globs to the workspace. formatNxRunManyCommand Helper to format npx nx run-many ... style command. addExcludeFromCleanup public void addExcludeFromCleanup ( java . lang . String globs ) Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: java.lang.String The glob patterns to match. addGitIgnore public void addGitIgnore ( java . lang . String pattern ) Adds a .gitignore pattern. pattern Required Type: java.lang.String The glob pattern to ignore. addPackageIgnore public void addPackageIgnore ( java . lang . String pattern ) Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . pattern Required Type: java.lang.String addTask public Task addTask ( java . lang . String name ) public Task addTask ( java . lang . String name , TaskOptions props ) Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: java.lang.String The task name to add. props Optional Type: io.github.cdklabs.projen.TaskOptions Task properties. ~~ addTip ~~ public void addTip ( java . lang . String message ) Prints a \"tip\" message during synthesis. message Required Type: java.lang.String The message. annotateGenerated public void annotateGenerated ( java . lang . String glob ) Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: java.lang.String the glob pattern to match (could be a file path). postSynthesize public void postSynthesize () Called after all components are synthesized. Order is not guaranteed. preSynthesize public void preSynthesize () Called before all components are synthesized. removeTask public Task removeTask ( java . lang . String name ) Removes a task from a project. name Required Type: java.lang.String The name of the task to remove. runTaskCommand public java . lang . String runTaskCommand ( Task task ) Returns the shell command to execute in order to run a task. This will typically be npx projen TASK . task Required Type: io.github.cdklabs.projen.Task The task for which the command is required. synth public void synth () Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" tryFindFile public FileBase tryFindFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public JsonFile tryFindJsonFile ( java . lang . String filePath ) Finds a json file by name. filePath Required Type: java.lang.String The file path. tryFindObjectFile public ObjectFile tryFindObjectFile ( java . lang . String filePath ) Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: java.lang.String The file path. tryRemoveFile public FileBase tryRemoveFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and removes it. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. addBins public void addBins ( java . util . Map < java . lang . String , java . lang . String > bins ) bins Required Type: java.util.Map addBundledDeps public void addBundledDeps ( java . lang . String deps ) Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json . deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addCompileCommand ~~ public void addCompileCommand ( java . lang . String commands ) DEPRECATED. commands Required Type: java.lang.String addDeps public void addDeps ( java . lang . String deps ) Defines normal dependencies. deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addDevDeps public void addDevDeps ( java . lang . String deps ) Defines development/test dependencies. deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addFields public void addFields ( java . util . Map < java . lang . String , java . lang . Object > fields ) Directly set fields in package.json . fields Required Type: java.util.Map The fields to set. addKeywords public void addKeywords ( java . lang . String keywords ) Adds keywords to package.json (deduplicated). keywords Required Type: java.lang.String The keywords to add. addPeerDeps public void addPeerDeps ( java . lang . String deps ) Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers. deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addTestCommand ~~ public void addTestCommand ( java . lang . String commands ) DEPRECATED. commands Required Type: java.lang.String hasScript public java . lang . Boolean hasScript ( java . lang . String name ) Indicates if a script by the name name is defined. name Required Type: java.lang.String The name of the script. removeScript public void removeScript ( java . lang . String name ) Removes the npm script (always successful). name Required Type: java.lang.String The name of the script. renderWorkflowSetup public java . util . List < JobStep > renderWorkflowSetup () public java . util . List < JobStep > renderWorkflowSetup ( RenderWorkflowSetupOptions options ) Returns the set of workflow steps which should be executed to bootstrap a workflow. options Optional Type: io.github.cdklabs.projen.javascript.RenderWorkflowSetupOptions Options. setScript public void setScript ( java . lang . String name , java . lang . String command ) Replaces the contents of an npm package.json script. name Required Type: java.lang.String The script name. command Required Type: java.lang.String The command to execute. addImplicitDependency public void addImplicitDependency ( Project dependent , Project dependee ) Create an implicit dependency between two Project's. This is typically used in polygot repos where a Typescript project wants a build dependency on a Python project as an example. dependent Required Type: io.github.cdklabs.projen.Project project you want to have the dependency. dependee Required Type: io.github.cdklabs.projen.Project project you wish to depend on. addNxRunManyTask public Task addNxRunManyTask ( java . lang . String name , NxRunManyOptions options ) Add project task that executes npx nx run-many ... style command. name Required Type: java.lang.String options Required Type: NxRunManyOptions addWorkspacePackages public void addWorkspacePackages ( java . lang . String packageGlobs ) Add one or more additional package globs to the workspace. packageGlobs Required Type: java.lang.String paths to the package to include in the workspace (for example packages/my-package). formatNxRunManyCommand public java . lang . String formatNxRunManyCommand ( NxRunManyOptions options ) Helper to format npx nx run-many ... style command. options Required Type: NxRunManyOptions Properties Name Type Description buildTask io.github.cdklabs.projen.Task No description. commitGenerated java.lang.Boolean Whether to commit the managed files by default. compileTask io.github.cdklabs.projen.Task No description. components java.util.List Returns all the components within this project. deps io.github.cdklabs.projen.Dependencies Project dependencies. ejected java.lang.Boolean Whether or not the project is being ejected. files java.util.List All files in this project. gitattributes io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore io.github.cdklabs.projen.IgnoreFile .gitignore. logger io.github.cdklabs.projen.Logger Logging utilities. name java.lang.String Project name. outdir java.lang.String Absolute output directory of this project. packageTask io.github.cdklabs.projen.Task No description. postCompileTask io.github.cdklabs.projen.Task No description. preCompileTask io.github.cdklabs.projen.Task No description. projectBuild io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand java.lang.String The command to use in order to run the projen CLI. root io.github.cdklabs.projen.Project The root project. tasks io.github.cdklabs.projen.Tasks Project tasks. testTask io.github.cdklabs.projen.Task No description. defaultTask io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". initProject io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . parent io.github.cdklabs.projen.Project A parent project. projectType io.github.cdklabs.projen.ProjectType No description. autoApprove io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github io.github.cdklabs.projen.github.GitHub Access all github components. gitpod io.github.cdklabs.projen.Gitpod Access for Gitpod. vscode io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. allowLibraryDependencies java.lang.Boolean No description. artifactsDirectory java.lang.String The build output directory. artifactsJavascriptDirectory java.lang.String The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler io.github.cdklabs.projen.javascript.Bundler No description. entrypoint java.lang.String No description. manifest java.lang.Object No description. package io.github.cdklabs.projen.javascript.NodePackage API for managing the node package. packageManager io.github.cdklabs.projen.javascript.NodePackageManager The package manager to use. runScriptCommand java.lang.String The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge io.github.cdklabs.projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. buildWorkflow io.github.cdklabs.projen.build.BuildWorkflow The PR build GitHub workflow. buildWorkflowJobId java.lang.String The job ID of the build workflow. jest io.github.cdklabs.projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion java.lang.String Maximum node version required by this package. minNodeVersion java.lang.String Minimum node.js version required by this package. npmignore io.github.cdklabs.projen.IgnoreFile The .npmignore file. prettier io.github.cdklabs.projen.javascript.Prettier No description. publisher io.github.cdklabs.projen.release.Publisher Package publisher. release io.github.cdklabs.projen.release.Release Release management. upgradeWorkflow io.github.cdklabs.projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory java.lang.String No description. libdir java.lang.String The directory in which compiled .js files reside. srcdir java.lang.String The directory in which the .ts sources reside. testdir java.lang.String The directory in which tests reside. tsconfigDev io.github.cdklabs.projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask io.github.cdklabs.projen.Task The \"watch\" task. docgen java.lang.Boolean No description. eslint io.github.cdklabs.projen.javascript.Eslint No description. tsconfig io.github.cdklabs.projen.javascript.TypescriptConfig No description. tsconfigEslint io.github.cdklabs.projen.javascript.TypescriptConfig No description. subProjects java.util.List No description. buildTask Required public Task getBuildTask (); Type: io.github.cdklabs.projen.Task commitGenerated Required public java . lang . Boolean getCommitGenerated (); Type: java.lang.Boolean Whether to commit the managed files by default. compileTask Required public Task getCompileTask (); Type: io.github.cdklabs.projen.Task components Required public java . util . List < Component > getComponents (); Type: java.util.List Returns all the components within this project. deps Required public Dependencies getDeps (); Type: io.github.cdklabs.projen.Dependencies Project dependencies. ejected Required public java . lang . Boolean getEjected (); Type: java.lang.Boolean Whether or not the project is being ejected. files Required public java . util . List < FileBase > getFiles (); Type: java.util.List All files in this project. gitattributes Required public GitAttributesFile getGitattributes (); Type: io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public IgnoreFile getGitignore (); Type: io.github.cdklabs.projen.IgnoreFile .gitignore. logger Required public Logger getLogger (); Type: io.github.cdklabs.projen.Logger Logging utilities. name Required public java . lang . String getName (); Type: java.lang.String Project name. outdir Required public java . lang . String getOutdir (); Type: java.lang.String Absolute output directory of this project. packageTask Required public Task getPackageTask (); Type: io.github.cdklabs.projen.Task postCompileTask Required public Task getPostCompileTask (); Type: io.github.cdklabs.projen.Task preCompileTask Required public Task getPreCompileTask (); Type: io.github.cdklabs.projen.Task projectBuild Required public ProjectBuild getProjectBuild (); Type: io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand Required public java . lang . String getProjenCommand (); Type: java.lang.String The command to use in order to run the projen CLI. root Required public Project getRoot (); Type: io.github.cdklabs.projen.Project The root project. tasks Required public Tasks getTasks (); Type: io.github.cdklabs.projen.Tasks Project tasks. testTask Required public Task getTestTask (); Type: io.github.cdklabs.projen.Task defaultTask Optional public Task getDefaultTask (); Type: io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public InitProject getInitProject (); Type: io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project A parent project. If undefined, this is the root project. projectType Required public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType autoApprove Optional public AutoApprove getAutoApprove (); Type: io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public DevContainer getDevContainer (); Type: io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public GitHub getGithub (); Type: io.github.cdklabs.projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public Gitpod getGitpod (); Type: io.github.cdklabs.projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public VsCode getVscode (); Type: io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. ~~ allowLibraryDependencies ~~ Required Deprecated: use package.allowLibraryDependencies public java . lang . Boolean getAllowLibraryDependencies (); Type: java.lang.Boolean artifactsDirectory Required public java . lang . String getArtifactsDirectory (); Type: java.lang.String The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg . artifactsJavascriptDirectory Required public java . lang . String getArtifactsJavascriptDirectory (); Type: java.lang.String The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler Required public Bundler getBundler (); Type: io.github.cdklabs.projen.javascript.Bundler ~~ entrypoint ~~ Required Deprecated: use package.entrypoint public java . lang . String getEntrypoint (); Type: java.lang.String ~~ manifest ~~ Required Deprecated: use package.addField(x, y) public java . lang . Object getManifest (); Type: java.lang.Object package Required public NodePackage getPackage (); Type: io.github.cdklabs.projen.javascript.NodePackage API for managing the node package. ~~ packageManager ~~ Required Deprecated: use package.packageManager public NodePackageManager getPackageManager (); Type: io.github.cdklabs.projen.javascript.NodePackageManager The package manager to use. runScriptCommand Required public java . lang . String getRunScriptCommand (); Type: java.lang.String The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge Optional public AutoMerge getAutoMerge (); Type: io.github.cdklabs.projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. buildWorkflow Optional public BuildWorkflow getBuildWorkflow (); Type: io.github.cdklabs.projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled. buildWorkflowJobId Optional public java . lang . String getBuildWorkflowJobId (); Type: java.lang.String The job ID of the build workflow. jest Optional public Jest getJest (); Type: io.github.cdklabs.projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion Optional public java . lang . String getMaxNodeVersion (); Type: java.lang.String Maximum node version required by this package. minNodeVersion Optional public java . lang . String getMinNodeVersion (); Type: java.lang.String Minimum node.js version required by this package. npmignore Optional public IgnoreFile getNpmignore (); Type: io.github.cdklabs.projen.IgnoreFile The .npmignore file. prettier Optional public Prettier getPrettier (); Type: io.github.cdklabs.projen.javascript.Prettier ~~ publisher ~~ Optional Deprecated: use release.publisher . public Publisher getPublisher (); Type: io.github.cdklabs.projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow. release Optional public Release getRelease (); Type: io.github.cdklabs.projen.release.Release Release management. upgradeWorkflow Optional public UpgradeDependencies getUpgradeWorkflow (); Type: io.github.cdklabs.projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory Required public java . lang . String getDocsDirectory (); Type: java.lang.String libdir Required public java . lang . String getLibdir (); Type: java.lang.String The directory in which compiled .js files reside. srcdir Required public java . lang . String getSrcdir (); Type: java.lang.String The directory in which the .ts sources reside. testdir Required public java . lang . String getTestdir (); Type: java.lang.String The directory in which tests reside. tsconfigDev Required public TypescriptConfig getTsconfigDev (); Type: io.github.cdklabs.projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask Required public Task getWatchTask (); Type: io.github.cdklabs.projen.Task The \"watch\" task. docgen Optional public java . lang . Boolean getDocgen (); Type: java.lang.Boolean eslint Optional public Eslint getEslint (); Type: io.github.cdklabs.projen.javascript.Eslint tsconfig Optional public TypescriptConfig getTsconfig (); Type: io.github.cdklabs.projen.javascript.TypescriptConfig tsconfigEslint Optional public TypescriptConfig getTsconfigEslint (); Type: io.github.cdklabs.projen.javascript.TypescriptConfig subProjects Required public java . util . List < Project > getSubProjects (); Type: java.util.List Constants Name Type Description DEFAULT_TASK java.lang.String The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public java . lang . String getDefaultTask (); Type: java.lang.String The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files.","title":"Index"},{"location":"java/nx-monorepo/index.html#homogenous-dependencies","text":"As well as adding implicit dependencies, you can add dependencies between projects of the same language in order to have one project consume another project's code.","title":"Homogenous Dependencies"},{"location":"java/nx-monorepo/index.html#api-reference","text":"","title":"API Reference "},{"location":"java/nx-monorepo/index.html#structs","text":"","title":"Structs "},{"location":"java/nx-monorepo/index.html#monorepoupgradedepsoptions","text":"Configuration for Monorepo Upgrade Deps task.","title":"MonorepoUpgradeDepsOptions "},{"location":"java/nx-monorepo/index.html#nxmonorepoprojectoptions","text":"Configuration options for the NxMonorepoProject.","title":"NxMonorepoProjectOptions "},{"location":"java/nx-monorepo/index.html#nxrunmanyoptions","text":"https://nx.dev/packages/nx/documents/run-many#options","title":"NxRunManyOptions "},{"location":"java/nx-monorepo/index.html#semvergroup","text":"","title":"SemverGroup "},{"location":"java/nx-monorepo/index.html#syncpackconfig","text":"","title":"SyncpackConfig "},{"location":"java/nx-monorepo/index.html#versiongroup","text":"","title":"VersionGroup "},{"location":"java/nx-monorepo/index.html#workspaceconfig","text":"Workspace configurations. https://classic.yarnpkg.com/lang/en/docs/workspaces/","title":"WorkspaceConfig "},{"location":"java/nx-monorepo/index.html#classes","text":"","title":"Classes "},{"location":"java/nx-monorepo/index.html#nxmonorepoproject","text":"This project type will bootstrap a NX based monorepo with support for polygot builds, build caching, dependency graph visualization and much more.","title":"NxMonorepoProject "},{"location":"java/open-api-gateway/index.html","text":"Experimental Warning This is packaged in a separate module while the API is being stabilized. This package is subject to non-backward compatible changes or removal in any future version. Breaking changes will be announced in the release notes. Whilst you may use this package, you may need to update your source code when upgrading to a newer version. Once we stabilize the module, it will be included into the stable aws-prototyping-sdk library. Experimental Usage To use this package, add a dependency on: software.aws.awsprototypingsdk/open-api-gateway OpenAPI Gateway Define your APIs using Smithy or OpenAPI v3 , and leverage the power of generated clients and documentation, automatic input validation, and type safe client and server code! This package vends a projen project type which allows you to define an API using either Smithy or OpenAPI v3 , and a construct which manages deploying this API in API Gateway, given an integration (eg a lambda) for every operation. The project will generate models and clients from your api definition in your desired languages, and can be utilised both client side or server side in lambda handlers. The project type also generates a wrapper construct which adds type safety to ensure an integration is provided for every API operation. When you change your API specification, just run npx projen again to regenerate all of this! Project Use the provided projen project types to get started with your API quickly! There are options for TypeScript, Python and Java: Smithy SmithyApiGatewayTsProject SmithyApiGatewayPythonProject SmithyApiGatewayJavaProject OpenAPI OpenApiGatewayTsProject OpenApiGatewayPythonProject OpenApiGatewayJavaProject We recommend using the Smithy-based projects, given that Smithy has a less verbose and more powerful IDL (Interface Definition Language). Choose the project type based on the language you'd like to write your CDK infrastructure in . Whichever option above you choose, you can still write your server-side code in any language. It's recommended that these projects are used as part of an nx-monorepo project, as it makes setting up dependencies much easier, and you will not need to manage the build order of generated clients. Typescript OpenAPI While it is recommended to use the project within an nx-monorepo , you can still use this as a standalone project if you like (eg npx projen new --from @aws-prototyping-sdk/open-api-gateway open-api-gateway-ts ), however you will need to manage build order (ie building the generated client first, followed by the project). For usage in a monorepo: Create the project in your .projenrc: // Example automatically generated from non-compiling source. May contain errors. import aws.prototyping.sdk.open.api.gateway.ClientLanguage ; import aws.prototyping.sdk.open.api.gateway.DocumentationFormat ; import aws.prototyping.sdk.open.api.gateway.OpenApiGatewayTsProject ; OpenApiGatewayTsProject . Builder . create () . parent ( myNxMonorepo ) . defaultReleaseBranch ( \"mainline\" ) . name ( \"my-api\" ) . outdir ( \"packages/api\" ) . clientLanguages ( List . of ( ClientLanguage . getTYPESCRIPT (), ClientLanguage . getPYTHON (), ClientLanguage . getJAVA ())) . documentationFormats ( List . of ( DocumentationFormat . getHTML2 (), DocumentationFormat . getPLANTUML (), DocumentationFormat . getMARKDOWN ())) . build (); In the output directory ( outdir ), you'll find a few files to get you started. |_ src/ |_ spec/ |_ spec.yaml - The OpenAPI specification - edit this to define your API |_ .parsed-spec.json - A json spec generated from your spec.yaml. |_ api/ |_ api.ts - A CDK construct which defines the API Gateway resources to deploy your API. | This wraps the OpenApiGatewayRestApi construct and provides typed interfaces for integrations specific | to your API. You shouldn't need to modify this, instead just extend it as in sample-api.ts. |_ sample-api.ts - Example usage of the construct defined in api.ts. |_ sample-api.say-hello.ts - An example lambda handler for the operation defined in spec.yaml, making use of the generated lambda handler wrappers for marshalling and type safety. |_ generated/ |_ typescript/ - A generated typescript API client. |_ python/ - A generated python API client. |_ java/ - A generated java API client. |_ documentation/ |_ html2/ - Generated html documentation |_ markdown/ - Generated markdown documentation |_ plantuml/ - Generated plant uml documentation If you would prefer to not generate the sample code, you can pass sampleCode: false to OpenApiGatewayTsProject . To make changes to your api, simply update spec.yaml and run npx projen to synthesize all the typesafe client/server code! The SampleApi construct uses NodejsFunction to declare the example lambda, but you are free to change this! Smithy To create a project with Smithy as your interface definition language (IDL), you can use the SmithyApiGatewayTsProject : // Example automatically generated from non-compiling source. May contain errors. import aws.prototyping.sdk.open.api.gateway.ClientLanguage ; import aws.prototyping.sdk.open.api.gateway.DocumentationFormat ; import aws.prototyping.sdk.open.api.gateway.SmithyApiGatewayTsProject ; SmithyApiGatewayTsProject . Builder . create () . parent ( myNxMonorepo ) . defaultReleaseBranch ( \"mainline\" ) . name ( \"my-api\" ) . outdir ( \"packages/api\" ) . serviceName ( Map . of ( \"namespace\" , \"com.mycompany\" , \"serviceName\" , \"MyService\" )) . clientLanguages ( List . of ( ClientLanguage . getTYPESCRIPT (), ClientLanguage . getPYTHON (), ClientLanguage . getJAVA ())) . documentationFormats ( List . of ( DocumentationFormat . getHTML2 (), DocumentationFormat . getPLANTUML (), DocumentationFormat . getMARKDOWN ())) . build (); This will result in a directory structure similar to the following: |_ smithy/ |_ src/ |_ main/ |_ smithy - The Smithy model used to define your API. You can define as many .smithy files in here as you like. |_ build.gradle - Smithy build gradle file - use this to add dependencies/plugins used in your smithy build |_ settings.gradle - Setup for the Smithy gradle project |_ smithy-build.json - Smithy build configuration - managed via options on the projen project |_ src/ |_ spec/ |_ .parsed-spec.json - A json spec generated from your Smithy model. |_ api/ |_ api.ts - A CDK construct which defines the API Gateway resources to deploy your API. | This wraps the OpenApiGatewayRestApi construct and provides typed interfaces for integrations specific | to your API. You shouldn't need to modify this, instead just extend it as in sample-api.ts. |_ sample-api.ts - Example usage of the construct defined in api.ts. |_ sample-api.say-hello.ts - An example lambda handler for the operation defined in spec.yaml, making use of the generated lambda handler wrappers for marshalling and type safety. |_ generated/ |_ typescript/ - A generated typescript API client. |_ python/ - A generated python API client. |_ java/ - A generated java API client. |_ documentation/ |_ html2/ - Generated html documentation |_ markdown/ - Generated markdown documentation |_ plantuml/ - Generated plant uml documentation Customisation You can customise the Smithy project with several properties: // Example automatically generated from non-compiling source. May contain errors. SmithyApiGatewayTsProject . Builder . create () . parent ( myNxMonorepo ) . defaultReleaseBranch ( \"mainline\" ) . name ( \"my-api\" ) . outdir ( \"packages/api\" ) . clientLanguages ( List . of ()) // The fully qualified service name for your API . serviceName ( Map . of ( \"namespace\" , \"com.mycompany\" , \"serviceName\" , \"MyService\" )) // By default, the contents of `smithy-build/output` will be ignored by source control. // Set this to false to include it, for example if you are generating clients directly from the smithy model. . ignoreSmithyBuildOutput ( false ) // The gradle wrapper used for the smithy build is copied from the PDK itself if it does not already exist in // the 'smithy' folder. By default, this gradle wrapper will be ignored by source control. // Set this to false if you would like to check the gradle wrapper in to source control, for example if you want // to use a different version of the gradle wrapper in your project. . ignoreGradleWrapper ( false ) // Use smithyBuildOptions to control what is added to smithy-build.json. See more details below. . smithyBuildOptions ( Map . of ( \"projections\" , Map . of ( \"ts-client\" , Map . of ( \"plugins\" , Map . of ( \"typescript-codegen\" , Map . of ( \"package\" , \"@my-test/smithy-generated-typescript-client\" , \"packageVersion\" , \"0.0.1\" )))))) . build (); smithyBuildOptions allows you to customise the Smithy build, used for generating clients from the Smithy model (eg above), or customising the OpenAPI generation. OpenAPI generation can be customised by referencing the openapi projection as follows: // Example automatically generated from non-compiling source. May contain errors. smithyBuildOptions : { projections : { openapi : { plugins : { openapi : { // Customise the openapi projection here... forbidGreedyLabels : true , ... } } } } } The OpenAPI specification generated by this projection is used to create the CDK infrastructure, lambda handler wrappers, etc. Options for configuring OpenAPI generation can be found in the Smithy OpenAPI documentation . Note that any additional dependencies required for projections/plugins can be added by modifying smithyBuildOptions , which in turn will add them to the smithy/build.gradle file: smithyBuildOptions : { maven : { dependencies : [ \"software.amazon.smithy:smithy-validation-model:1.27.2\" , ] } } Notice smithy-cli , smithy-model , smithy-openapi and smithy-aws-traits are always included in the build.gradle since they are required for converting your Smithy model to OpenAPI. You can customise the version of these dependencies by specifying them in smithyBuildOptions : smithyBuildOptions : { maven : { dependencies : [ \"software.amazon.smithy:smithy-cli:1.27.0\" , \"software.amazon.smithy:smithy-model:1.27.0\" , \"software.amazon.smithy:smithy-openapi:1.27.0\" , \"software.amazon.smithy:smithy-aws-traits:1.27.0\" , ] } } Python OpenAPI As well as typescript, you can choose to generate the cdk construct and sample handler in python. // Example automatically generated from non-compiling source. May contain errors. OpenApiGatewayPythonProject . Builder . create () . parent ( myNxMonorepo ) . outdir ( \"packages/myapi\" ) . name ( \"myapi\" ) . moduleName ( \"myapi\" ) . version ( \"1.0.0\" ) . authorName ( \"jack\" ) . authorEmail ( \"me@example.com\" ) . clientLanguages ( List . of ( ClientLanguage . getTYPESCRIPT (), ClientLanguage . getPYTHON (), ClientLanguage . getJAVA ())) . build (); You will need to set up a shared virtual environment and configure dependencies via the monorepo (see README.md for the nx-monorepo package). An example of a full .projenrc.ts might be: // Example automatically generated from non-compiling source. May contain errors. import aws.prototyping.sdk.nx_monorepo.* ; import aws.prototyping.sdk.open.api.gateway.ClientLanguage ; import aws.prototyping.sdk.open.api.gateway.OpenApiGatewayPythonProject ; import io.github.cdklabs.projen.awscdk.AwsCdkPythonApp ; Object monorepo = NxMonorepoProject . Builder . create () . defaultReleaseBranch ( \"main\" ) . devDeps ( List . of ( \"aws-prototyping-sdk\" , \"@aws-prototyping-sdk/open-api-gateway\" )) . name ( \"open-api-test\" ) . build (); Object api = OpenApiGatewayPythonProject . Builder . create () . parent ( monorepo ) . outdir ( \"packages/myapi\" ) . name ( \"myapi\" ) . moduleName ( \"myapi\" ) . version ( \"1.0.0\" ) . authorName ( \"jack\" ) . authorEmail ( \"me@example.com\" ) . clientLanguages ( List . of ( ClientLanguage . getTYPESCRIPT ())) . venvOptions ( Map . of ( // Use a shared virtual env dir. // The generated python client will also use this virtual env dir \"envdir\" , \"../../.env\" )) . build (); // Install into virtual env so it's available for the cdk app api . tasks . tryFind ( \"install\" ). exec ( \"pip install --editable .\" ); AwsCdkPythonApp app = AwsCdkPythonApp . Builder . create () . authorName ( \"jack\" ) . authorEmail ( \"me@example.com\" ) . cdkVersion ( \"2.1.0\" ) . moduleName ( \"myapp\" ) . name ( \"myapp\" ) . version ( \"1.0.0\" ) . parent ( monorepo ) . outdir ( \"packages/myapp\" ) . deps ( List . of ( api . getModuleName ())) . venvOptions ( VenvOptions . builder () . envdir ( \"../../.env\" ) . build ()) . build (); monorepo . addImplicitDependency ( app , api ); monorepo . synth (); You'll find the following directory structure in packages/myapi : |_ myapi/ |_ spec/ |_ spec.yaml - The OpenAPI specification - edit this to define your API |_ .parsed-spec.json - A json spec generated from your spec.yaml. |_ api/ |_ api.py - A CDK construct which defines the API Gateway resources to deploy your API. | This wraps the OpenApiGatewayRestApi construct and provides typed interfaces for integrations specific | to your API. You shouldn't need to modify this, instead just extend it as in sample_api.py. |_ sample_api.py - Example usage of the construct defined in api.py. |_ handlers/ |_ say_hello_handler_sample.py - An example lambda handler for the operation defined in spec.yaml, making use of the generated lambda handler wrappers for marshalling and type safety. |_ generated/ |_ typescript/ - A generated typescript API client. |_ python/ - A generated python API client. |_ java/ - A generated java API client. For simplicity, the generated code deploys a lambda layer for the generated code and its dependencies. You may choose to define an entirely separate projen PythonProject for your lambda handlers should you wish to add more dependencies than just the generated code. Smithy Similar to typescript, you can use the SmithyApiGatewayPythonProject . Java OpenAPI As well as TypeScript and Python, you can choose to generate the cdk construct and sample handler in Java. // Example automatically generated from non-compiling source. May contain errors. OpenApiGatewayJavaProject . Builder . create () . parent ( monorepo ) . outdir ( \"packages/myapi\" ) . name ( \"myapi\" ) . groupId ( \"com.mycompany\" ) . artifactId ( \"my-api\" ) . version ( \"1.0.0\" ) . clientLanguages ( List . of ( ClientLanguage . getPYTHON (), ClientLanguage . getTYPESCRIPT ())) . documentationFormats ( List . of ( DocumentationFormat . getHTML2 (), DocumentationFormat . getPLANTUML (), DocumentationFormat . getMARKDOWN ())) . build (); The output directory will look a little like this: |_ src/ |_ spec/ |_ spec.yaml - The OpenAPI specification - edit this to define your API |_ main/ |_ java/ |_ api/ |_ Api.java - A CDK construct which defines the API Gateway resources to deploy your API. | This wraps the OpenApiGatewayRestApi construct and provides typed interfaces for integrations specific | to your API. You shouldn't need to modify this, instead just extend it as in SampleApi.java. |_ ApiProps.java - Defines properties for the CDK construct in Api.java |_ SampleApi.java - Example usage of the construct defined in Api.java |_ SayHelloHandler.java - An example lambda handler for the operation defined in spec.yaml, making use of the generated lambda handler wrappers for marshalling and type safety. |_ resources/ |_ .parsed-spec.json - A json spec generated from your spec.yaml. This will be bundled in the project jar. |_ generated/ |_ typescript/ - A generated typescript API client |_ python/ - A generated python API client. |_ java/ - A generated java API client. |_ documentation/ |_ html2/ - Generated html documentation |_ markdown/ - Generated markdown documentation |_ plantuml/ - Generated plant uml documentation The SampleApi construct uses a lambda function which deploys the entire project jar as a simple way to get started with an api that deploys out of the box. This jar includes a lot of extra code and dependencies that you don't need in your lambda, so it's recommended that after experimenting with the construct, you separate your lambdas into another JavaProject . Please refer to the Java API Lambda Handlers section of this README for details on how to set this up. Smithy Similar to typescript and python, you can use the SmithyApiGatewayJavaProject . Smithy IDL Please refer to the Smithy documentation for how to write models in Smithy. A basic example is provided below: $version : \"2\" namespace example.hello use aws.protocols#restJson1 @title ( \"A Sample Hello World API\" ) /// A sample smithy api @restJson1 service Hello { version: \"1.0\" operations: [ SayHello ] } @readonly @http ( method: \"GET\" , uri: \"/hello\" ) operation SayHello { input: SayHelloInput output: SayHelloOutput errors: [ ApiError ] } string Name string Message @input structure SayHelloInput { @httpQuery ( \"name\" ) @required name: Name } @output structure SayHelloOutput { @required message: Message } @error ( \"client\" ) structure ApiError { @required errorMessage: Message } Supported Protocols Currently only AWS restJson1 is supported. Please ensure your service is annotated with the @restJson1 trait. Multiple Files You can split your definition into multiple files and folders, so long as they are all under the smithy/src/main/smithy directory in your API project. Authorizers Smithy supports adding API Gateway authorizers in the model itself . Given that at model definition time one usually does not know the ARN of the user pool or lambda function for an authorizer, it is recommended to add the authorizer(s) in your Api CDK construct. If using Smithy generated clients, some authorizer traits (eg sigv4) will include configuring the client for that particular method of authorization, so it can be beneficial to still define authorizers in the model. We therefore support specifying authorizers in both the model and the construct, but note that the construct will take precedence where the authorizer ID is the same. OpenAPI Specification Your spec.yaml file defines your api using OpenAPI Version 3.0.3 . An example spec might look like: openapi : 3.0.3 info : version : 1.0.0 title : Example API paths : /hello : get : operationId : sayHello parameters : - in : query name : name schema : type : string required : true responses : '200' : description : Successful response content : 'application/json' : schema : $ref : '#/components/schemas/HelloResponse' components : schemas : HelloResponse : type : object properties : message : type : string required : - message You can divide your specification into multiple files using $ref . For example, you might choose to structure your spec as follows: |_ spec/ |_ spec.yaml |_ paths/ |_ index.yaml |_ sayHello.yaml |_ schemas/ |_ index.yaml |_ helloResponse.yaml Where spec.yaml looks as follows: openapi : 3.0.3 info : version : 1.0.0 title : Example API paths : $ref : './paths/index.yaml' components : schemas : $ref : './schemas/index.yaml' paths/index.yaml : /hello : get : $ref : './sayHello.yaml' paths/sayHello.yaml : operationId : sayHello parameters : - in : query name : name schema : type : string required : true responses : '200' : description : Successful response content : 'application/json' : schema : $ref : '../schemas/helloResponse.yaml' schemas/index.yaml : HelloResponse : $ref : './helloResponse.yaml' schemas/helloResponse.yaml : type : object properties : message : type : string required : - message Construct A sample construct is generated which provides a type-safe interface for creating an API Gateway API based on your OpenAPI specification. You'll get a type error if you forget to define an integration for an operation defined in your api. // Example automatically generated from non-compiling source. May contain errors. import aws.prototyping.sdk.open.api.gateway.Authorizers ; import aws.prototyping.sdk.open.api.gateway.Integrations ; import software.amazon.awscdk.services.lambda.nodejs.NodejsFunction ; import software.constructs.Construct ; import api.Api ; /** * An example of how to wire lambda handler functions to the API */ public class SampleApi extends Api { public SampleApi ( Construct scope , String id ) { super ( scope , id , Map . of ( \"defaultAuthorizer\" , Authorizers . iam (), \"integrations\" , Map . of ( // Every operation defined in your API must have an integration defined! \"sayHello\" , Map . of ( \"integration\" , Integrations . lambda ( new NodejsFunction ( scope , \"say-hello\" )))))); } } Sharing Integrations If you would like to use the same integration for every operation, you can use the Operations.all method from your generated client to save repeating yourself, for example: // Example automatically generated from non-compiling source. May contain errors. import my.api.typescript.client.Operations ; import aws.prototyping.sdk.open.api.gateway.Authorizers ; import aws.prototyping.sdk.open.api.gateway.Integrations ; import software.amazon.awscdk.services.lambda.nodejs.NodejsFunction ; import software.constructs.Construct ; import api.Api ; public class SampleApi extends Api { public SampleApi ( Construct scope , String id ) { super ( scope , id , Map . of ( \"defaultAuthorizer\" , Authorizers . iam (), // Use the same integration for every operation. \"integrations\" , Operations . all ( Map . of ( \"integration\" , Integrations . lambda ( new NodejsFunction ( scope , \"say-hello\" )))))); } } Authorizers The Api construct allows you to define one or more authorizers for securing your API. An integration will use the defaultAuthorizer unless an authorizer is specified at the integration level. The following authorizers are supported: Authorizers.none - No auth Authorizers.iam - AWS IAM (Signature Version 4) Authorizers.cognito - Cognito user pool Authorizers.custom - A custom authorizer Cognito Authorizer To use the Cognito authorizer, one or more user pools must be provided. You can optionally specify the scopes to check if using an access token. You can use the withScopes method to use the same authorizer but verify different scopes for individual integrations, for example: // Example automatically generated from non-compiling source. May contain errors. public class SampleApi extends Api { public SampleApi ( Construct scope , String id ) { Object cognitoAuthorizer = Authorizers . cognito ( Map . of ( \"authorizerId\" , \"myCognitoAuthorizer\" , \"userPools\" , List . of ( new UserPool ( scope , \"UserPool\" )))); super ( scope , id , Map . of ( \"defaultAuthorizer\" , cognitoAuthorizer , \"integrations\" , Map . of ( // Everyone in the user pool can call this operation: \"sayHello\" , Map . of ( \"integration\" , Integrations . lambda ( new NodejsFunction ( scope , \"say-hello\" ))), // Only users with the given scopes can call this operation \"myRestrictedOperation\" , Map . of ( \"integration\" , Integrations . lambda ( new NodejsFunction ( scope , \"my-restricted-operation\" )), \"authorizer\" , cognitoAuthorizer . withScopes ( \"my-resource-server/my-scope\" ))))); } } For more information about scopes or identity and access tokens, please see the API Gateway documentation . Custom Authorizer Custom authorizers use lambda functions to handle authorizing requests. These can either be simple token-based authorizers, or more complex request-based authorizers. See the API Gateway documentation for more details. An example token-based authorizer (default): // Example automatically generated from non-compiling source. May contain errors. Authorizers . custom ( Map . of ( \"authorizerId\" , \"myTokenAuthorizer\" , \"function\" , new NodejsFunction ( scope , \"authorizer\" ))); An example request-based handler. By default the identitySource will be method.request.header.Authorization , however you can customise this as per the API Gateway documentation . // Example automatically generated from non-compiling source. May contain errors. Authorizers . custom ( Map . of ( \"authorizerId\" , \"myRequestAuthorizer\" , \"type\" , CustomAuthorizerType . getREQUEST (), \"identitySource\" , \"method.request.header.MyCustomHeader, method.request.querystring.myQueryString\" , \"function\" , new NodejsFunction ( scope , \"authorizer\" ))); Integrations Integrations are used by API Gateway to service requests. Lambda Integration Currently, the only built-in integration is a lambda integration. You can construct one using Integrations.lambda(yourLambdaFunction) . Custom Integrations You can implement your own integrations by inheriting the Integration class and implementing its render method. This method is responsible for returning a snippet of OpenAPI which will be added as the x-amazon-apigateway-integration for an operation. Please refer to the API Gateway Swagger Extensions documentation for more details. You can also optionally override the grant method if you need to use CDK to grant API Gateway access to invoke your integration. Generated Client Typescript The typescript-fetch OpenAPI generator is used to generate OpenAPI clients for typescript. This requires an implementation of fetch to be passed to the client. In the browser one can pass the built in fetch, or in NodeJS you can use an implementation such as node-fetch . Example usage of the client in a website: // Example automatically generated from non-compiling source. May contain errors. import my.api.typescript.client.Configuration ; import my.api.typescript.client.DefaultApi ; Object client = new DefaultApi ( Configuration . Builder . create () . basePath ( \"https://xxxxxxxxxx.execute-api.ap-southeast-2.amazonaws.com\" ) . fetchApi ( window . fetch . bind ( window )) . build ()); client . sayHello ( Map . of ( \"name\" , \"Jack\" )); Python The python OpenAPI generator is used to generate OpenAPI clients for python. Example usage: from my_api_python import ApiClient , Configuration from my_api_python.api.default_api import DefaultApi configuration = Configuration ( host = \"https://xxxxxxxxxx.execute-api.ap-southeast-2.amazonaws.com\" ) with ApiClient ( configuration ) as api_client : client = DefaultApi ( api_client ) client . say_hello ( query_params = { 'name' : \"name_example\" , }, ) You'll find details about how to use the python client in the README.md alongside your generated client. Java The java OpenAPI generator is used to generate OpenAPI clients for Java. Example usage: import com.generated.api.myapijava.client.api.DefaultApi ; import com.generated.api.myapijava.client.ApiClient ; import com.generated.api.myapijava.client.Configuration ; import com.generated.api.myapijava.client.models.HelloResponse ; ApiClient client = Configuration . getDefaultApiClient (); client . setBasePath ( \"https://xxxxxxxxxx.execute-api.ap-southeast-2.amazonaws.com\" ); DefaultApi api = new DefaultApi ( client ); HelloResponse response = api . sayHello ( \"Adrian\" ). execute () You'll find more details about how to use the Java client in the README.md alongside your generated client. Lambda Handler Wrappers Lambda handler wrappers are also importable from the generated client. These provide input/output type safety, ensuring that your API handlers return outputs that correspond to your specification. Typescript // Example automatically generated from non-compiling source. May contain errors. import my.api.typescript.client.sayHelloHandler.* ; Object handler = sayHelloHandler ( async ({ input }) => { return { statusCode : 200 , body : { message : ` Hello $ { input . requestParameters . name } ! ` , }, }; }); Handler Router The lambda handler wrappers can be used in isolation as handler methods for separate lambdas. If you would like to use a single lambda function to serve all requests, you can do so with the handlerRouter . // Example automatically generated from non-compiling source. May contain errors. import my.api.typescript.client.handlerRouter.* ; import my.api.typescript.client.sayHelloHandler.* ; import my.api.typescript.client.sayGoodbyeHandler.* ; import interceptors.corsInterceptor.* ; import handlers.say.goodbye.sayGoodbye.* ; Object sayHello = sayHelloHandler ( async ({ input }) => { return { statusCode : 200 , body : { message : ` Hello $ { input . requestParameters . name } ! ` , }, }; }); Object handler = handlerRouter ( Map . of ( // Interceptors declared in this list will apply to all operations \"interceptors\" , List . of ( corsInterceptor ), // Assign handlers to each operation here \"handlers\" , Map . of ( \"sayHello\" , sayHello , \"sayGoodbye\" , sayGoodbye ))); Python from myapi_python.apis.tags.default_api_operation_config import say_hello_handler , SayHelloRequest , ApiResponse , SayHelloOperationResponses from myapi_python.model.api_error import ApiError from myapi_python.model.hello_response import HelloResponse @say_hello_handler def handler ( input : SayHelloRequest , ** kwargs ) -> SayHelloOperationResponses : return ApiResponse ( status_code = 200 , body = HelloResponse ( message = \"Hello {} !\" . format ( input . request_parameters [ \"name\" ])), headers = {} ) Handler Router The lambda handler wrappers can be used in isolation as handler methods for separate lambdas. If you would like to use a single lambda function to serve all requests, you can do so with the handler_router . from myapi_python.apis.tags.default_api_operation_config import say_hello_handler , SayHelloRequest , ApiResponse , SayHelloOperationResponses , handler_router , HandlerRouterHandlers from myapi_python.model.api_error import ApiError from myapi_python.model.hello_response import HelloResponse from other_handlers import say_goodbye from my_interceptors import cors_interceptor @say_hello_handler def say_hello ( input : SayHelloRequest , ** kwargs ) -> SayHelloOperationResponses : return ApiResponse ( status_code = 200 , body = HelloResponse ( message = \"Hello {} !\" . format ( input . request_parameters [ \"name\" ])), headers = {} ) handler = handler_router ( # Interceptors defined here will apply to all operations interceptors = [ cors_interceptor ], handlers = HandlerRouterHandlers ( say_hello = say_hello , say_goodbye = say_goodbye ) ) Java import com.generated.api.myapijava.client.api.Handlers.SayHello ; import com.generated.api.myapijava.client.api.Handlers.SayHello200Response ; import com.generated.api.myapijava.client.api.Handlers.SayHelloRequestInput ; import com.generated.api.myapijava.client.api.Handlers.SayHelloResponse ; import com.generated.api.myapijava.client.model.HelloResponse ; public class SayHelloHandler extends SayHello { @Override public SayHelloResponse handle ( SayHelloRequestInput sayHelloRequestInput ) { return SayHello200Response . of ( HelloResponse . builder () . message ( String . format ( \"Hello %s\" , sayHelloRequestInput . getInput (). getRequestParameters (). getName ())) . build ()); } } Handler Router The lambda handler wrappers can be used in isolation as handler methods for separate lambdas. If you would like to use a single lambda function to serve all requests, you can do so by extending the HandlerRouter class. import com.generated.api.myapijava.client.api.Handlers.SayGoodbye ; import com.generated.api.myapijava.client.api.Handlers.HandlerRouter ; import com.generated.api.myapijava.client.api.Handlers.Interceptors ; import com.generated.api.myapijava.client.api.Handlers.SayHello ; import java.util.Arrays ; import java.util.List ; // Interceptors defined here apply to all operations @Interceptors ({ TimingInterceptor . class }) public class ApiHandlerRouter extends HandlerRouter { // You must implement a method to return a handler for every operation @Override public SayHello sayHello () { return new SayHelloHandler (); } @Override public SayGoodbye sayGoodbye () { return new SayGoodbyeHandler (); } } Interceptors The lambda handler wrappers allow you to pass in a chain of handler functions to handle the request. This allows you to implement middleware / interceptors for handling requests. Each handler function may choose whether or not to continue the handler chain by invoking chain.next . Typescript In typescript, interceptors are passed as separate arguments to the generated handler wrapper, in the order in which they should be executed. Call request.chain.next(request) from an interceptor to delegate to the rest of the chain to handle a request. Note that the last handler in the chain (ie the actual request handler which transforms the input to the output) should not call chain.next . // Example automatically generated from non-compiling source. May contain errors. import my.api.typescript.client.sayHelloHandler.* ; import my.api.typescript.client.ChainedRequestInput ; import my.api.typescript.client.OperationResponse ; // Interceptor to wrap invocations in a try/catch, returning a 500 error for any unhandled exceptions. __function tryCatchInterceptor = async < RequestParameters , RequestArrayParameters , RequestBody , Response > ( request : ChainedRequestInput < RequestParameters , RequestArrayParameters , RequestBody , Response > ): Promise < Response | OperationResponse < 500 , { errorMessage : string } >> => { try { return await request . chain . next ( request ); } catch ( e : any ) { return { statusCode : 500 , body : { errorMessage : e . message }}; } }; // tryCatchInterceptor is passed first, so it runs first and calls the second argument function (the request handler) via chain.next Object handler = sayHelloHandler ( tryCatchInterceptor , async ({ input }) => { return { statusCode : 200 , body : { message : ` Hello $ { input . requestParameters . name } ! ` , }, }; }); Another example interceptor might be to record request time metrics. The example below includes the full generic type signature for an interceptor: // Example automatically generated from non-compiling source. May contain errors. import my.api.typescript.client.ChainedRequestInput ; __function timingInterceptor = async < RequestParameters , RequestArrayParameters , RequestBody , Response > ( request : ChainedRequestInput < RequestParameters , RequestArrayParameters , RequestBody , Response > ): Promise < Response > => { const start = Date . now (); const response = await request . chain . next ( request ); const end = Date . now (); console . log ( ` Took $ { end - start } ms ` ); return response ; }; Interceptors may mutate the interceptorContext to pass state to further interceptors or the final lambda handler, for example an identityInterceptor might want to extract the authenticated user from the request so that it is available in handlers. // Example automatically generated from non-compiling source. May contain errors. import my.api.typescript.client.LambdaRequestParameters ; import my.api.typescript.client.LambdaHandlerChain ; __function identityInterceptor = async < RequestParameters , RequestArrayParameters , RequestBody , Response > ( request : ChainedRequestInput < RequestParameters , RequestArrayParameters , RequestBody , Response > ): Promise < Response > => { const authenticatedUser = await getAuthenticatedUser ( request . event ); return await request . chain . next ({ ... request , interceptorContext : { ... request . interceptorContext , authenticatedUser , }, }); }; Python In Python, a list of interceptors can be passed as a keyword argument to the generated lambda handler decorator, for example: from myapi_python.apis.tags.default_api_operation_config import say_hello_handler , SayHelloRequest , ApiResponse , SayHelloOperationResponses from myapi_python.model.api_error import ApiError from myapi_python.model.hello_response import HelloResponse @say_hello_handler ( interceptors = [ timing_interceptor , try_catch_interceptor ]) def handler ( input : SayHelloRequest , ** kwargs ) -> SayHelloOperationResponses : return ApiResponse ( status_code = 200 , body = HelloResponse ( message = \"Hello {} !\" . format ( input . request_parameters [ \"name\" ])), headers = {} ) Writing an interceptor is just like writing a lambda handler. Call chain.next(input) from an interceptor to delegate to the rest of the chain to handle a request. import time from myapi_python.apis.tags.default_api_operation_config import ChainedApiRequest , ApiResponse def timing_interceptor ( input : ChainedApiRequest ) -> ApiResponse : start = int ( round ( time . time () * 1000 )) response = input . chain . next ( input ) end = int ( round ( time . time () * 1000 )) print ( \"Took {} ms\" . format ( end - start )) return response Interceptors may choose to return different responses, for example to return a 500 response for any unhandled exceptions: import time from myapi_python.model.api_error import ApiError from myapi_python.apis.tags.default_api_operation_config import ChainedApiRequest , ApiResponse def try_catch_interceptor ( input : ChainedApiRequest ) -> ApiResponse : try : return input . chain . next ( input ) except Exception as e : return ApiResponse ( status_code = 500 , body = ApiError ( errorMessage = str ( e )), headers = {} ) Interceptors are permitted to mutate the \"interceptor context\", which is a Dict[str, Any] . Each interceptor in the chain, and the final handler, can access this context: def identity_interceptor ( input : ChainedApiRequest ) -> ApiResponse : input . interceptor_context [ \"AuthenticatedUser\" ] = get_authenticated_user ( input . event ) return input . chain . next ( input ) Interceptors can also mutate the response returned by the handler chain. An example use case might be adding cross-origin resource sharing headers: def add_cors_headers_interceptor ( input : ChainedApiRequest ) -> ApiResponse : response = input . chain . next ( input ) return ApiResponse ( status_code = response . status_code , body = response . body , headers = { ** response . headers , \"Access-Control-Allow-Origin\" : \"*\" , \"Access-Control-Allow-Headers\" : \"*\" } ) Java In Java, interceptors can be added to a handler via the @Interceptors class annotation: import com.generated.api.myjavaapi.client.api.Handlers.Interceptors ; @Interceptors ({ TimingInterceptor . class , TryCatchInterceptor . class }) public class SayHelloHandler extends SayHello { @Override public SayHelloResponse handle ( SayHelloRequestInput sayHelloRequestInput ) { return SayHello200Response . of ( HelloResponse . builder () . message ( String . format ( \"Hello %s\" , sayHelloRequestInput . getInput (). getRequestParameters (). getName ())) . build ()); } } To write an interceptor, you can implement the Interceptor interface. For example, a timing interceptor: import com.generated.api.myjavaapi.client.api.Handlers.Interceptor ; import com.generated.api.myjavaapi.client.api.Handlers.ChainedRequestInput ; import com.generated.api.myjavaapi.client.api.Handlers.Response ; public class TimingInterceptor < Input > implements Interceptor < Input > { @Override public Response handle ( ChainedRequestInput < Input > input ) { long start = System . currentTimeMillis (); Response res = input . getChain (). next ( input ); long end = System . currentTimeMillis (); System . out . printf ( \"Took %d ms%n\" , end - start ); return res ; } } Interceptors may choose to return different responses, for example to return a 500 response for any unhandled exceptions: import com.generated.api.myjavaapi.client.api.Handlers.Interceptor ; import com.generated.api.myjavaapi.client.api.Handlers.ChainedRequestInput ; import com.generated.api.myjavaapi.client.api.Handlers.Response ; import com.generated.api.myjavaapi.client.api.Handlers.ApiResponse ; import com.generated.api.myjavaapi.client.model.ApiError ; public class TryCatchInterceptor < Input > implements Interceptor < Input > { @Override public Response handle ( ChainedRequestInput < Input > input ) { try { return input . getChain (). next ( input ); } catch ( Exception e ) { return ApiResponse . builder () . statusCode ( 500 ) . body ( ApiError . builder () . errorMessage ( e . getMessage ()) . build (). toJson ()) . build (); } } } Interceptors are permitted to mutate the \"interceptor context\", which is a Map<String, Object> . Each interceptor in the chain, and the final handler, can access this context: public class IdentityInterceptor < Input > implements Interceptor < Input > { @Override public Response handle ( ChainedRequestInput < Input > input ) { input . getInterceptorContext (). put ( \"AuthenticatedUser\" , this . getAuthenticatedUser ( input . getEvent ())); return input . getChain (). next ( input ); } } Interceptors can also mutate the response returned by the handler chain. An example use case might be adding cross-origin resource sharing headers: public static class AddCorsHeadersInterceptor < Input > implements Interceptor < Input > { @Override public Response handle ( ChainedRequestInput < Input > input ) { Response res = input . getChain (). next ( input ); res . getHeaders (). put ( \"Access-Control-Allow-Origin\" , \"*\" ); res . getHeaders (). put ( \"Access-Control-Allow-Headers\" , \"*\" ); return res ; } } Interceptors with Dependency Injection Interceptors referenced by the @Interceptors annotation must be constructable with no arguments. If more complex instantiation of your interceptor is required (for example if you are using dependency injection or wish to pass configuration to your interceptor), you may instead override the getInterceptors method in your handler: public class SayHelloHandler extends SayHello { @Override public List < Interceptor < SayHelloInput >> getInterceptors () { return Arrays . asList ( new MyConfiguredInterceptor <> ( 42 ), new MyOtherConfiguredInterceptor <> ( \"configuration\" )); } @Override public SayHelloResponse handle ( SayHelloRequestInput sayHelloRequestInput ) { return SayHello200Response . of ( HelloResponse . builder () . message ( String . format ( \"Hello %s!\" , sayHelloRequestInput . getInput (). getRequestParameters (). getName ())) . build ()); } } Other Details Workspaces and OpenApiGatewayTsProject OpenApiGatewayTsProject can be used as part of a monorepo using YARN/NPM/PNPM workspaces. When used in a monorepo, a dependency is established between OpenApiGatewayTsProject and the generated typescript client, which is expected to be managed by the parent monorepo (ie both OpenApiGatewayTsProject and the generated typescript client are parented by the monorepo). During initial project synthesis, the dependency between OpenApiGatewayTsProject and the generated client is established via workspace configuration local to OpenApiGatewayTsProject , since the parent monorepo will not have updated to include the new packages in time for the initial \"install\". When the package manager is PNPM, this initial workspace is configured by creating a local pnpm-workspace.yaml file, and thus if you specify your own for an instance of OpenApiGatewayTsProject , synthesis will fail. It is most likely that you will not need to define this file locally in OpenApiGatewayTsProject since the monorepo copy should be used to manage all packages within the repo, however if managing this file at the OpenApiGatewayTsProject level is required, please use the pnpmWorkspace property of OpenApiGatewayTsProject . Customising Generated Client Projects By default, the generated clients are configured automatically, including project names. You can customise the generated client code using the <language>ProjectOptions properties when constructing your projen project. Python Shared Virtual Environment For adding dependencies between python projects within a monorepo you can use a single shared virtual environment, and install your python projects into that environment with pip install --editable . in the dependee. The generated python client will automatically do this if it detects it is within a monorepo. The following example shows how to configure the generated client to use a shared virtual environment: // Example automatically generated from non-compiling source. May contain errors. Object api = OpenApiGatewayTsProject . Builder . create () . parent ( monorepo ) . name ( \"api\" ) . outdir ( \"packages/api\" ) . defaultReleaseBranch ( \"main\" ) . clientLanguages ( List . of ( ClientLanguage . getPYTHON ())) . pythonClientOptions ( Map . of ( \"moduleName\" , \"my_api_python\" , \"name\" , \"my_api_python\" , \"authorName\" , \"jack\" , \"authorEmail\" , \"me@example.com\" , \"version\" , \"1.0.0\" , \"venvOptions\" , Map . of ( // Directory relative to the generated python client (in this case packages/api/generated/python) \"envdir\" , \"../../../../.env\" ))) . build (); PythonProject . Builder . create () . parent ( monorepo ) . outdir ( \"packages/my-python-lib\" ) . moduleName ( \"my_python_lib\" ) . name ( \"my_python_lib\" ) . authorName ( \"jack\" ) . authorEmail ( \"me@example.com\" ) . version ( \"1.0.0\" ) . venvOptions ( Map . of ( // Directory relative to the python lib (in this case packages/my-python-lib) \"envdir\" , \"../../.env\" )) // Generated client can be safely cast to a PythonProject . deps ( List . of ((( Object ) api . getGeneratedClients () [ ClientLanguage . getPYTHON () ] ). getModuleName ())) . build (); Java API Lambda Handlers To build your lambda handlers in Java, it's recommended to create a separate JavaProject in your .projenrc . This needs to build a \"super jar\" with all of your dependencies packed into a single jar. You can use the maven-shade-plugin to achieve this (see the java lambda docs for details ). You'll need to add a dependency on the generated java client for the handler wrappers. For example, your .projenrc.ts might look like: // Example automatically generated from non-compiling source. May contain errors. Object api = OpenApiGatewayTsProject . Builder . create () . parent ( monorepo ) . name ( \"@my-test/api\" ) . outdir ( \"packages/api\" ) . defaultReleaseBranch ( \"main\" ) . clientLanguages ( List . of ( ClientLanguage . getJAVA ())) . build (); Object apiJavaClient = (( Object ) api . getGeneratedClients () [ ClientLanguage . getJAVA () ] ); Object javaLambdaProject = JavaProject . Builder . create () . parent ( monorepo ) . outdir ( \"packages/java-lambdas\" ) . artifactId ( \"my-java-lambdas\" ) . groupId ( \"com.mycompany\" ) . name ( \"javalambdas\" ) . version ( \"1.0.0\" ) // Add a dependency on the java client . deps ( List . of ( String . format ( \"%s/%s@%s\" , apiJavaClient . getPom (). getGroupId (), apiJavaClient . getPom (). getArtifactId (), apiJavaClient . getPom (). getVersion ()))) . build (); // Set up the dependency on the generated lambda client monorepo . addImplicitDependency ( javaLambdaProject , apiJavaClient ); javaLambdaProject . pom . addRepository ( Map . of ( \"url\" , \"file://../api/generated/java/dist/java\" , \"id\" , \"java-api-client\" )); // Use the maven-shade-plugin as part of the maven package task javaLambdaProject . pom . addPlugin ( \"org.apache.maven.plugins/maven-shade-plugin@3.2.2\" , Map . of ( \"configuration\" , Map . of ( \"createDependencyReducedPom\" , false , \"finalName\" , \"my-java-lambdas\" ), \"executions\" , List . of ( Map . of ( \"id\" , \"shade-task\" , \"phase\" , \"package\" , // <- NB \"phase\" is supported in projen ^0.61.37 \"goals\" , List . of ( \"shade\" ))))); // Build the \"super jar\" as part of the project's package task javaLambdaProject . packageTask . exec ( \"mvn clean install\" ); You can then implement your lambda handlers in your java-lambdas project using the generated lambda handler wrappers (see above). Finally, you can create a lambda function in your CDK infrastructure which points to the resultant \"super jar\": // Example automatically generated from non-compiling source. May contain errors. Api . Builder . create ( this , \"JavaApi\" ) . integrations ( Map . of ( \"sayHello\" , Map . of ( \"function\" , new Function ( this , \"SayHelloJava\" , Map . of ( \"code\" , Code . fromAsset ( \"../java-lambdas/target/my-java-lambdas.jar\" ), \"handler\" , \"com.mycompany.SayHelloHandler\" , \"runtime\" , Runtime . getJAVA_11 (), \"timeout\" , Duration . seconds ( 30 )))))) . build (); Note that to ensure the jar is built before the CDK infrastructure which consumes it, you must add a dependency, eg: // Example automatically generated from non-compiling source. May contain errors. monorepo . addImplicitDependency ( infra , javaLambdaProject ); AWS WAFv2 Web ACL By default, a Web ACL is deployed and attached to your API Gateway Rest API with the \" AWSManagedRulesCommonRuleSet \", which provides protection against exploitation of a wide range of vulnerabilities, including some of the high risk and commonly occurring vulnerabilities described in OWASP publications such as OWASP Top 10 . You can customise the Web ACL configuration via the webAclOptions of your Api CDK construct, eg: // Example automatically generated from non-compiling source. May contain errors. public class SampleApi extends Api { public SampleApi ( Construct scope , String id ) { super ( scope , id , Map . of ( \"integrations\" , Map . of (...), \"webAclOptions\" , Map . of ( // Allow access only to specific CIDR ranges \"cidrAllowList\" , Map . of ( \"cidrType\" , \"IPV4\" , \"cidrRanges\" , List . of ( \"1.2.3.4/5\" )), // Pick from the set here: https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-list.html \"managedRules\" , List . of ( Map . of ( \"vendor\" , \"AWS\" , \"name\" , \"AWSManagedRulesSQLiRuleSet\" ))))); } } You can remove the Web ACL entirely with webAclOptions: { disable: true } - you may wish to use this if you'd like to set up a Web ACL yourself with more control over the rules. Smithy IntelliJ Plugin The Smithy-based projects are compatible with the Smithy IntelliJ Plugin , which provides syntax highlighting and auto-complete for your Smithy model. To make use of it, perform the following steps: Install the \"Smithy\" plugin (under Preferences -> Plugins ) Right-click on the smithy/build.gradle file in your Smithy API project Select \"Link Gradle Project\" Tagging Operations Operations can be grouped together into logical collections via tags. This can be achieved in Smithy with the @tags trait: @tags ([ \"pets\" , \"users\" ]) operation PurchasePet { ... } Or in OpenAPI using the tags property: paths : /pets/purchase : post : operationId : purchasePet tags : - pets - users ... When multiple tags are used, the \"first\" tag is considered to be the API that the operation belongs to, so in the generated client, the above example operation would be included in the PetsApi client but not the UsersApi client. Multiple tags are still useful for documentation generation, for example DocumentationFormat.HTML_REDOC will group operations by tag in the side navigation bar. If you would like to introduce tags without breaking existing clients, we recommend first adding a tag named default to all operations. \u26a0\ufe0f Important Note : Smithy versions below 1.28.0 sort tags in alphabetical order and so the \"first\" tag will be the earliest in the alphabet. Therefore, if using tags with older versions of Smithy, we recommend prefixing your desired first tag with an underscore (for example _default ). This is rectified in 1.28.0 , where tag order from the @tags trait is preserved. Breaking Changes v0.14.0 - see aws-prototyping-sdk!280 Moved smithy model files from model directory to smithy/src/main/smithy - please move these manually as part of upgrading to 0.14.0 , and delete your model directory when done. Moved smithy gradle files from smithy-build directory to smithy - if you have added any dependencies to your smithy-build/build.gradle file you will need to copy them across into smithy/build.gradle (note dependencies in the new gradle file start with implementation rather than smithy ). Deprecated gradleWrapperPath option on SmithApiGateway projects in favour of ignoreGradleWrapper: false - the gradle wrapper in smithy directory is always used (and generated automatically if not found). If you used a custom gradle wrapper, copy it into the smithy directory, set ignoreGradleWrapper: false and check it in to your repository. API Reference Constructs OpenApiGatewayRestApi A construct for creating an api gateway rest api based on the definition in the OpenAPI spec. Initializers import software.aws.awsprototypingsdk.openapigateway.OpenApiGatewayRestApi ; OpenApiGatewayRestApi . Builder . create ( Construct scope , java . lang . String id ) // .cloudWatchRole(java.lang.Boolean) // .deploy(java.lang.Boolean) // .deployOptions(StageOptions) // .description(java.lang.String) // .disableExecuteApiEndpoint(java.lang.Boolean) // .domainName(DomainNameOptions) // .endpointExportName(java.lang.String) // .endpointTypes(java.util.List<EndpointType>) // .failOnWarnings(java.lang.Boolean) // .parameters(java.util.Map<java.lang.String, java.lang.String>) // .policy(PolicyDocument) // .restApiName(java.lang.String) // .retainDeployments(java.lang.Boolean) . integrations ( java . util . Map < java . lang . String , OpenApiIntegration > ) . operationLookup ( java . util . Map < java . lang . String , MethodAndPath > ) // .corsOptions(CorsOptions) // .defaultAuthorizer(Authorizer) . spec ( java . lang . Object ) . specPath ( java . lang . String ) // .webAclOptions(OpenApiGatewayWebAclOptions) . build (); Name Type Description scope software.constructs.Construct No description. id java.lang.String No description. cloudWatchRole java.lang.Boolean Automatically configure an AWS CloudWatch role for API Gateway. deploy java.lang.Boolean Indicates if a Deployment should be automatically created for this API, and recreated when the API model (resources, methods) changes. deployOptions software.amazon.awscdk.services.apigateway.StageOptions Options for the API Gateway stage that will always point to the latest deployment when deploy is enabled. description java.lang.String A description of the RestApi construct. disableExecuteApiEndpoint java.lang.Boolean Specifies whether clients can invoke the API using the default execute-api endpoint. domainName software.amazon.awscdk.services.apigateway.DomainNameOptions Configure a custom domain name and map it to this API. endpointExportName java.lang.String Export name for the CfnOutput containing the API endpoint. endpointTypes java.util.List A list of the endpoint types of the API. failOnWarnings java.lang.Boolean Indicates whether to roll back the resource if a warning occurs while API Gateway is creating the RestApi resource. parameters java.util.Map Custom header parameters for the request. policy software.amazon.awscdk.services.iam.PolicyDocument A policy document that contains the permissions for this RestApi. restApiName java.lang.String A name for the API Gateway RestApi resource. retainDeployments java.lang.Boolean Retains old deployment resources when the API changes. integrations java.util.Map OpenApiIntegration\\ > A mapping of API operation to its integration. operationLookup java.util.Map MethodAndPath\\ > Details about each operation. corsOptions software.amazon.awscdk.services.apigateway.CorsOptions Cross Origin Resource Sharing options for the API. defaultAuthorizer Authorizer The default authorizer to use for your api. spec java.lang.Object The parsed OpenAPI specification. specPath java.lang.String Path to the JSON open api spec. webAclOptions OpenApiGatewayWebAclOptions Options for the AWS WAF v2 WebACL associated with the api. scope Required Type: software.constructs.Construct id Required Type: java.lang.String cloudWatchRole Optional Type: java.lang.Boolean Default: false if @aws-cdk/aws-apigateway:disableCloudWatchRole is enabled, true otherwise Automatically configure an AWS CloudWatch role for API Gateway. deploy Optional Type: java.lang.Boolean Default: true Indicates if a Deployment should be automatically created for this API, and recreated when the API model (resources, methods) changes. Since API Gateway deployments are immutable, When this option is enabled (by default), an AWS::ApiGateway::Deployment resource will automatically created with a logical ID that hashes the API model (methods, resources and options). This means that when the model changes, the logical ID of this CloudFormation resource will change, and a new deployment will be created. If this is set, latestDeployment will refer to the Deployment object and deploymentStage will refer to a Stage that points to this deployment. To customize the stage options, use the deployOptions property. A CloudFormation Output will also be defined with the root URL endpoint of this REST API. deployOptions Optional Type: software.amazon.awscdk.services.apigateway.StageOptions Default: Based on defaults of StageOptions . Options for the API Gateway stage that will always point to the latest deployment when deploy is enabled. If deploy is disabled, this value cannot be set. description Optional Type: java.lang.String Default: 'Automatically created by the RestApi construct' A description of the RestApi construct. disableExecuteApiEndpoint Optional Type: java.lang.Boolean Default: false Specifies whether clients can invoke the API using the default execute-api endpoint. To require that clients use a custom domain name to invoke the API, disable the default endpoint. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-restapi.html domainName Optional Type: software.amazon.awscdk.services.apigateway.DomainNameOptions Default: no domain name is defined, use addDomainName or directly define a DomainName . Configure a custom domain name and map it to this API. endpointExportName Optional Type: java.lang.String Default: when no export name is given, output will be created without export Export name for the CfnOutput containing the API endpoint. endpointTypes Optional Type: java.util.List Default: EndpointType.EDGE A list of the endpoint types of the API. Use this property when creating an API. failOnWarnings Optional Type: java.lang.Boolean Default: false Indicates whether to roll back the resource if a warning occurs while API Gateway is creating the RestApi resource. parameters Optional Type: java.util.Map Default: No parameters. Custom header parameters for the request. https://docs.aws.amazon.com/cli/latest/reference/apigateway/import-rest-api.html policy Optional Type: software.amazon.awscdk.services.iam.PolicyDocument Default: No policy. A policy document that contains the permissions for this RestApi. restApiName Optional Type: java.lang.String Default: ID of the RestApi construct. A name for the API Gateway RestApi resource. retainDeployments Optional Type: java.lang.Boolean Default: false Retains old deployment resources when the API changes. This allows manually reverting stages to point to old deployments via the AWS Console. integrations Required Type: java.util.Map OpenApiIntegration\\ > A mapping of API operation to its integration. operationLookup Required Type: java.util.Map MethodAndPath\\ > Details about each operation. corsOptions Optional Type: software.amazon.awscdk.services.apigateway.CorsOptions Cross Origin Resource Sharing options for the API. defaultAuthorizer Optional Type: Authorizer The default authorizer to use for your api. When omitted, no default authorizer is used. Authorizers specified at the integration level will override this for that operation. spec Required Type: java.lang.Object The parsed OpenAPI specification. specPath Required Type: java.lang.String Path to the JSON open api spec. webAclOptions Optional Type: OpenApiGatewayWebAclOptions Options for the AWS WAF v2 WebACL associated with the api. By default, a Web ACL with the AWS default managed rule set will be associated with the API. These options may disable or override the defaults. Methods Name Description toString Returns a string representation of this construct. toString public java . lang . String toString () Returns a string representation of this construct. Static Functions Name Description isConstruct Checks if x is a construct. isConstruct import software.aws.awsprototypingsdk.openapigateway.OpenApiGatewayRestApi ; OpenApiGatewayRestApi . isConstruct ( java . lang . Object x ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: java.lang.Object Any object. Properties Name Type Description node software.constructs.Node The tree node. api software.amazon.awscdk.services.apigateway.SpecRestApi No description. ipSet software.amazon.awscdk.services.wafv2.CfnIPSet No description. webAcl software.amazon.awscdk.services.wafv2.CfnWebACL No description. webAclAssociation software.amazon.awscdk.services.wafv2.CfnWebACLAssociation No description. node Required public Node getNode (); Type: software.constructs.Node The tree node. api Required public SpecRestApi getApi (); Type: software.amazon.awscdk.services.apigateway.SpecRestApi ipSet Optional public CfnIPSet getIpSet (); Type: software.amazon.awscdk.services.wafv2.CfnIPSet webAcl Optional public CfnWebACL getWebAcl (); Type: software.amazon.awscdk.services.wafv2.CfnWebACL webAclAssociation Optional public CfnWebACLAssociation getWebAclAssociation (); Type: software.amazon.awscdk.services.wafv2.CfnWebACLAssociation Structs ApiGatewayIntegration Represents an api gateway integration. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-integration.html Initializer import software.aws.awsprototypingsdk.openapigateway.ApiGatewayIntegration ; ApiGatewayIntegration . builder () // .cacheKeyParameters(java.util.List<java.lang.String>) // .cacheNamespace(java.lang.String) // .connectionId(java.lang.String) // .connectionType(java.lang.String) // .contentHandling(java.lang.String) // .credentials(java.lang.String) // .httpMethod(java.lang.String) // .passthroughBehavior(java.lang.String) // .requestParameters(java.util.Map<java.lang.String, java.lang.String>) // .requestTemplates(java.util.Map<java.lang.String, java.lang.String>) // .responses(java.util.Map<java.lang.String, ApiGatewayIntegrationResponse>) // .timeoutInMillis(java.lang.Number) // .tlsConfig(ApiGatewayIntegrationTlsConfig) // .type(java.lang.String) // .uri(java.lang.String) . build (); Properties Name Type Description cacheKeyParameters java.util.List A list of request parameters whose values are to be cached. cacheNamespace java.lang.String An API-specific tag group of related cached parameters. connectionId java.lang.String The ID of a VpcLink for the private integration. connectionType java.lang.String The integration connection type. contentHandling java.lang.String Request payload encoding conversion types. credentials java.lang.String For AWS IAM role-based credentials, specify the ARN of an appropriate IAM role. httpMethod java.lang.String The HTTP method used in the integration request. passthroughBehavior java.lang.String Specifies how a request payload of unmapped content type is passed through the integration request without modification. requestParameters java.util.Map Specifies mappings from method request parameters to integration request parameters. requestTemplates java.util.Map Mapping templates for a request payload of specified MIME types. responses java.util.Map ApiGatewayIntegrationResponse\\ > Defines the method's responses and specifies desired parameter mappings or payload mappings from integration responses to method responses. timeoutInMillis java.lang.Number Custom timeout between 50 and 29,000 milliseconds. tlsConfig ApiGatewayIntegrationTlsConfig Specifies the TLS configuration for an integration. type java.lang.String The type of integration with the specified backend. uri java.lang.String The endpoint URI of the backend. cacheKeyParameters Optional public java . util . List < java . lang . String > getCacheKeyParameters (); Type: java.util.List A list of request parameters whose values are to be cached. cacheNamespace Optional public java . lang . String getCacheNamespace (); Type: java.lang.String An API-specific tag group of related cached parameters. connectionId Optional public java . lang . String getConnectionId (); Type: java.lang.String The ID of a VpcLink for the private integration. https://docs.aws.amazon.com/apigateway/latest/api/API_VpcLink.html connectionType Optional public java . lang . String getConnectionType (); Type: java.lang.String The integration connection type. The valid value is \"VPC_LINK\" for private integration or \"INTERNET\", otherwise. contentHandling Optional public java . lang . String getContentHandling (); Type: java.lang.String Request payload encoding conversion types. Valid values are 1) CONVERT_TO_TEXT, for converting a binary payload into a base64-encoded string or converting a text payload into a utf-8-encoded string or passing through the text payload natively without modification, and 2) CONVERT_TO_BINARY, for converting a text payload into a base64-decoded blob or passing through a binary payload natively without modification. credentials Optional public java . lang . String getCredentials (); Type: java.lang.String For AWS IAM role-based credentials, specify the ARN of an appropriate IAM role. If unspecified, credentials default to resource-based permissions that must be added manually to allow the API to access the resource. For more information, see Granting Permissions Using a Resource Policy. Note: When using IAM credentials, make sure that AWS STS Regional endpoints are enabled for the Region where this API is deployed for best performance. httpMethod Optional public java . lang . String getHttpMethod (); Type: java.lang.String The HTTP method used in the integration request. For Lambda function invocations, the value must be POST. passthroughBehavior Optional public java . lang . String getPassthroughBehavior (); Type: java.lang.String Specifies how a request payload of unmapped content type is passed through the integration request without modification. Supported values are when_no_templates, when_no_match, and never. https://docs.aws.amazon.com/apigateway/latest/api/API_Integration.html#passthroughBehavior requestParameters Optional public java . util . Map < java . lang . String , java . lang . String > getRequestParameters (); Type: java.util.Map Specifies mappings from method request parameters to integration request parameters. Supported request parameters are querystring, path, header, and body. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-integration-requestParameters.html requestTemplates Optional public java . util . Map < java . lang . String , java . lang . String > getRequestTemplates (); Type: java.util.Map Mapping templates for a request payload of specified MIME types. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-integration-requestTemplates.html responses Optional public java . util . Map < java . lang . String , ApiGatewayIntegrationResponse > getResponses (); Type: java.util.Map ApiGatewayIntegrationResponse\\ > Defines the method's responses and specifies desired parameter mappings or payload mappings from integration responses to method responses. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-integration-responses.html timeoutInMillis Optional public java . lang . Number getTimeoutInMillis (); Type: java.lang.Number Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds. tlsConfig Optional public ApiGatewayIntegrationTlsConfig getTlsConfig (); Type: ApiGatewayIntegrationTlsConfig Specifies the TLS configuration for an integration. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-extensions-integration-tls-config.html type Optional public java . lang . String getType (); Type: java.lang.String The type of integration with the specified backend. https://docs.aws.amazon.com/apigateway/latest/api/API_Integration.html#type uri Optional public java . lang . String getUri (); Type: java.lang.String The endpoint URI of the backend. For integrations of the aws type, this is an ARN value. For the HTTP integration, this is the URL of the HTTP endpoint including the https or http scheme. ApiGatewayIntegrationResponse API Gateway integration response. https://docs.aws.amazon.com/apigateway/latest/api/API_Integration.html Initializer import software.aws.awsprototypingsdk.openapigateway.ApiGatewayIntegrationResponse ; ApiGatewayIntegrationResponse . builder () . responseParameters ( java . util . Map < java . lang . String , java . lang . String > ) . responseTemplates ( java . util . Map < java . lang . String , java . lang . String > ) . statusCode ( java . lang . String ) // .contentHandling(java.lang.String) . build (); Properties Name Type Description responseParameters java.util.Map Specifies parameter mappings for the response. responseTemplates java.util.Map Specifies MIME type-specific mapping templates for the response\u2019s payload. statusCode java.lang.String HTTP status code for the method response. contentHandling java.lang.String Response payload encoding conversion types. responseParameters Required public java . util . Map < java . lang . String , java . lang . String > getResponseParameters (); Type: java.util.Map Specifies parameter mappings for the response. responseTemplates Required public java . util . Map < java . lang . String , java . lang . String > getResponseTemplates (); Type: java.util.Map Specifies MIME type-specific mapping templates for the response\u2019s payload. statusCode Required public java . lang . String getStatusCode (); Type: java.lang.String HTTP status code for the method response. contentHandling Optional public java . lang . String getContentHandling (); Type: java.lang.String Response payload encoding conversion types. Valid values are 1) CONVERT_TO_TEXT, for converting a binary payload into a base64-encoded string or converting a text payload into a utf-8-encoded string or passing through the text payload natively without modification, and 2) CONVERT_TO_BINARY, for converting a text payload into a base64-decoded blob or passing through a binary payload natively without modification. ApiGatewayIntegrationTlsConfig Specifies the TLS configuration for an integration. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-extensions-integration-tls-config.html Initializer import software.aws.awsprototypingsdk.openapigateway.ApiGatewayIntegrationTlsConfig ; ApiGatewayIntegrationTlsConfig . builder () // .insecureSkipVerification(java.lang.Boolean) . build (); Properties Name Type Description insecureSkipVerification java.lang.Boolean Specifies whether or not API Gateway skips verification that the certificate for an integration endpoint is issued by a supported certificate authority. insecureSkipVerification Optional public java . lang . Boolean getInsecureSkipVerification (); Type: java.lang.Boolean Specifies whether or not API Gateway skips verification that the certificate for an integration endpoint is issued by a supported certificate authority. This isn\u2019t recommended, but it enables you to use certificates that are signed by private certificate authorities, or certificates that are self-signed. If enabled, API Gateway still performs basic certificate validation, which includes checking the certificate's expiration date, hostname, and presence of a root certificate authority. Supported only for HTTP and HTTP_PROXY integrations. AuthorizerProps Properties for an authorizer. Initializer import software.aws.awsprototypingsdk.openapigateway.AuthorizerProps ; AuthorizerProps . builder () . authorizationType ( AuthorizationType ) . authorizerId ( java . lang . String ) // .authorizationScopes(java.util.List<java.lang.String>) . build (); Properties Name Type Description authorizationType software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId java.lang.String The unique identifier for the authorizer. authorizationScopes java.util.List Scopes for the authorizer, if any. authorizationType Required public AuthorizationType getAuthorizationType (); Type: software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId Required public java . lang . String getAuthorizerId (); Type: java.lang.String The unique identifier for the authorizer. authorizationScopes Optional public java . util . List < java . lang . String > getAuthorizationScopes (); Type: java.util.List Scopes for the authorizer, if any. CidrAllowList Representation of a CIDR range. Initializer import software.aws.awsprototypingsdk.openapigateway.CidrAllowList ; CidrAllowList . builder () . cidrRanges ( java . util . List < java . lang . String > ) . cidrType ( java . lang . String ) . build (); Properties Name Type Description cidrRanges java.util.List Specify an IPv4 address by using CIDR notation. cidrType java.lang.String Type of CIDR range. cidrRanges Required public java . util . List < java . lang . String > getCidrRanges (); Type: java.util.List Specify an IPv4 address by using CIDR notation. For example: To configure AWS WAF to allow, block, or count requests that originated from the IP address 192.0.2.44, specify 192.0.2.44/32 . To configure AWS WAF to allow, block, or count requests that originated from IP addresses from 192.0.2.0 to 192.0.2.255, specify 192.0.2.0/24 . For more information about CIDR notation, see the Wikipedia entry Classless Inter-Domain Routing . Specify an IPv6 address by using CIDR notation. For example: To configure AWS WAF to allow, block, or count requests that originated from the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify 1111:0000:0000:0000:0000:0000:0000:0111/128 . To configure AWS WAF to allow, block, or count requests that originated from IP addresses 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify 1111:0000:0000:0000:0000:0000:0000:0000/64 . cidrType Required public java . lang . String getCidrType (); Type: java.lang.String Type of CIDR range. CognitoAuthorizerProps Properties used to configure a cognito authorizer. Initializer import software.aws.awsprototypingsdk.openapigateway.CognitoAuthorizerProps ; CognitoAuthorizerProps . builder () . authorizerId ( java . lang . String ) . userPools ( java . util . List < IUserPool > ) // .authorizationScopes(java.util.List<java.lang.String>) . build (); Properties Name Type Description authorizerId java.lang.String Unique identifier for this authorizer. userPools java.util.List The Cognito user pools associated with this authorizer. authorizationScopes java.util.List A list of authorization scopes configured on the method. authorizerId Required public java . lang . String getAuthorizerId (); Type: java.lang.String Unique identifier for this authorizer. userPools Required public java . util . List < IUserPool > getUserPools (); Type: java.util.List The Cognito user pools associated with this authorizer. authorizationScopes Optional public java . util . List < java . lang . String > getAuthorizationScopes (); Type: java.util.List Default: [] A list of authorization scopes configured on the method. When used as the default authorizer, these scopes will be applied to all methods without an authorizer at the integration level. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-method.html#cfn-apigateway-method-authorizationscopes CommonApiProjectOptions Initializer import software.aws.awsprototypingsdk.openapigateway.CommonApiProjectOptions ; CommonApiProjectOptions . builder () . clientLanguages ( java . util . List < ClientLanguage > ) // .apiSrcDir(java.lang.String) // .documentationFormats(java.util.List<DocumentationFormat>) // .forceGenerateCodeAndDocs(java.lang.Boolean) // .generatedCodeDir(java.lang.String) // .javaClientOptions(JavaProjectOptions) // .parsedSpecFileName(java.lang.String) // .pythonClientOptions(PythonProjectOptions) // .typescriptClientOptions(TypeScriptProjectOptions) . build (); Properties Name Type Description clientLanguages java.util.List< ClientLanguage > The list of languages for which clients will be generated. apiSrcDir java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats java.util.List< DocumentationFormat > Formats to generate documentation in. forceGenerateCodeAndDocs java.lang.Boolean Force to generate code and docs even if there were no changes in spec. generatedCodeDir java.lang.String The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions io.github.cdklabs.projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsedSpecFileName java.lang.String The name of the output parsed OpenAPI specification file. pythonClientOptions io.github.cdklabs.projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). typescriptClientOptions io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. clientLanguages Required public java . util . List < ClientLanguage > getClientLanguages (); Type: java.util.List< ClientLanguage > The list of languages for which clients will be generated. A typescript client will always be generated. apiSrcDir Optional public java . lang . String getApiSrcDir (); Type: java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats Optional public java . util . List < DocumentationFormat > getDocumentationFormats (); Type: java.util.List< DocumentationFormat > Formats to generate documentation in. forceGenerateCodeAndDocs Optional public java . lang . Boolean getForceGenerateCodeAndDocs (); Type: java.lang.Boolean Default: \"false\" Force to generate code and docs even if there were no changes in spec. generatedCodeDir Optional public java . lang . String getGeneratedCodeDir (); Type: java.lang.String Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions Optional public JavaProjectOptions getJavaClientOptions (); Type: io.github.cdklabs.projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsedSpecFileName Optional public java . lang . String getParsedSpecFileName (); Type: java.lang.String Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. pythonClientOptions Optional public PythonProjectOptions getPythonClientOptions (); Type: io.github.cdklabs.projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. typescriptClientOptions Optional public TypeScriptProjectOptions getTypescriptClientOptions (); Type: io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. CustomAuthorizerProps Properties used to configure a custom authorizer. Initializer import software.aws.awsprototypingsdk.openapigateway.CustomAuthorizerProps ; CustomAuthorizerProps . builder () . authorizerId ( java . lang . String ) . function ( IFunction ) // .authorizerResultTtlInSeconds(java.lang.Number) // .identitySource(java.lang.String) // .type(CustomAuthorizerType) . build (); Properties Name Type Description authorizerId java.lang.String Unique identifier for this authorizer. function software.amazon.awscdk.services.lambda.IFunction The lambda function used to authorize requests. authorizerResultTtlInSeconds java.lang.Number The number of seconds during which the authorizer result is cached. identitySource java.lang.String The source of the identity in an incoming request. type CustomAuthorizerType The type of custom authorizer. authorizerId Required public java . lang . String getAuthorizerId (); Type: java.lang.String Unique identifier for this authorizer. function Required public IFunction getFunction (); Type: software.amazon.awscdk.services.lambda.IFunction The lambda function used to authorize requests. authorizerResultTtlInSeconds Optional public java . lang . Number getAuthorizerResultTtlInSeconds (); Type: java.lang.Number Default: 300 The number of seconds during which the authorizer result is cached. identitySource Optional public java . lang . String getIdentitySource (); Type: java.lang.String Default: \"method.request.header.Authorization\" The source of the identity in an incoming request. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-identitysource type Optional public CustomAuthorizerType getType (); Type: CustomAuthorizerType Default: CustomAuthorizerType.TOKEN The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type IntegrationGrantProps Properties for granting the API access to invoke the operation. Initializer import software.aws.awsprototypingsdk.openapigateway.IntegrationGrantProps ; IntegrationGrantProps . builder () . method ( java . lang . String ) . path ( java . lang . String ) . api ( SpecRestApi ) . operationId ( java . lang . String ) . scope ( Construct ) . build (); Properties Name Type Description method java.lang.String The http method of this operation. path java.lang.String The path of this operation in the api. api software.amazon.awscdk.services.apigateway.SpecRestApi The api to grant permissions for. operationId java.lang.String The ID of the operation for which permissions are being granted. scope software.constructs.Construct The scope in which permission resources can be created. method Required public java . lang . String getMethod (); Type: java.lang.String The http method of this operation. path Required public java . lang . String getPath (); Type: java.lang.String The path of this operation in the api. api Required public SpecRestApi getApi (); Type: software.amazon.awscdk.services.apigateway.SpecRestApi The api to grant permissions for. operationId Required public java . lang . String getOperationId (); Type: java.lang.String The ID of the operation for which permissions are being granted. scope Required public Construct getScope (); Type: software.constructs.Construct The scope in which permission resources can be created. IntegrationRenderProps Properties for rendering an integration into an API Gateway OpenAPI extension. Initializer import software.aws.awsprototypingsdk.openapigateway.IntegrationRenderProps ; IntegrationRenderProps . builder () . method ( java . lang . String ) . path ( java . lang . String ) . operationId ( java . lang . String ) . scope ( Construct ) . build (); Properties Name Type Description method java.lang.String The http method of this operation. path java.lang.String The path of this operation in the api. operationId java.lang.String The ID of the operation being rendered. scope software.constructs.Construct The scope in which the integration is being rendered. method Required public java . lang . String getMethod (); Type: java.lang.String The http method of this operation. path Required public java . lang . String getPath (); Type: java.lang.String The path of this operation in the api. operationId Required public java . lang . String getOperationId (); Type: java.lang.String The ID of the operation being rendered. scope Required public Construct getScope (); Type: software.constructs.Construct The scope in which the integration is being rendered. ManagedRule Initializer import software.aws.awsprototypingsdk.openapigateway.ManagedRule ; ManagedRule . builder () . name ( java . lang . String ) . vendor ( java . lang . String ) . build (); Properties Name Type Description name java.lang.String The name of the managed rule group. vendor java.lang.String The name of the managed rule group vendor. name Required public java . lang . String getName (); Type: java.lang.String The name of the managed rule group. You use this, along with the vendor name, to identify the rule group. vendor Required public java . lang . String getVendor (); Type: java.lang.String The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group. MethodAndPath Structure to contain an API operation's method and path. Initializer import software.aws.awsprototypingsdk.openapigateway.MethodAndPath ; MethodAndPath . builder () . method ( java . lang . String ) . path ( java . lang . String ) . build (); Properties Name Type Description method java.lang.String The http method of this operation. path java.lang.String The path of this operation in the api. method Required public java . lang . String getMethod (); Type: java.lang.String The http method of this operation. path Required public java . lang . String getPath (); Type: java.lang.String The path of this operation in the api. OpenApiGatewayJavaProjectOptions Configuration for the OpenApiGatewayJavaProject. Initializer import software.aws.awsprototypingsdk.openapigateway.OpenApiGatewayJavaProjectOptions ; OpenApiGatewayJavaProjectOptions . builder () . name ( java . lang . String ) // .commitGenerated(java.lang.Boolean) // .gitOptions(GitOptions) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .renovatebot(java.lang.Boolean) // .renovatebotOptions(RenovatebotOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMerge(java.lang.Boolean) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenCredentials(GithubCredentials) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) . artifactId ( java . lang . String ) . groupId ( java . lang . String ) . version ( java . lang . String ) // .description(java.lang.String) // .packaging(java.lang.String) // .url(java.lang.String) // .compileOptions(MavenCompileOptions) // .deps(java.util.List<java.lang.String>) // .distdir(java.lang.String) // .junit(java.lang.Boolean) // .junitOptions(JunitOptions) // .packagingOptions(MavenPackagingOptions) // .projenrcJava(java.lang.Boolean) // .projenrcJavaOptions(ProjenrcOptions) // .testDeps(java.util.List<java.lang.String>) // .sample(java.lang.Boolean) // .sampleJavaPackage(java.lang.String) . clientLanguages ( java . util . List < ClientLanguage > ) // .apiSrcDir(java.lang.String) // .documentationFormats(java.util.List<DocumentationFormat>) // .forceGenerateCodeAndDocs(java.lang.Boolean) // .generatedCodeDir(java.lang.String) // .javaClientOptions(JavaProjectOptions) // .parsedSpecFileName(java.lang.String) // .pythonClientOptions(PythonProjectOptions) // .typescriptClientOptions(TypeScriptProjectOptions) // .specFile(java.lang.String) . build (); Properties Name Type Description name java.lang.String This is the name of your project. commitGenerated java.lang.Boolean Whether to commit the managed files by default. gitOptions io.github.cdklabs.projen.GitOptions Configuration options for git. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. renovatebot java.lang.Boolean Use renovatebot to handle dependency upgrades. renovatebotOptions io.github.cdklabs.projen.RenovatebotOptions Options for renovatebot. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge java.lang.Boolean Enable automatic merging on GitHub. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenCredentials io.github.cdklabs.projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. artifactId java.lang.String The artifactId is generally the name that the project is known by. groupId java.lang.String This is generally unique amongst an organization or a project. version java.lang.String This is the last piece of the naming puzzle. description java.lang.String Description of a project is always good. packaging java.lang.String Project packaging format. url java.lang.String The URL, like the name, is not required. compileOptions io.github.cdklabs.projen.java.MavenCompileOptions Compile options. deps java.util.List List of runtime dependencies for this project. distdir java.lang.String Final artifact output directory. junit java.lang.Boolean Include junit tests. junitOptions io.github.cdklabs.projen.java.JunitOptions junit options. packagingOptions io.github.cdklabs.projen.java.MavenPackagingOptions Packaging options. projenrcJava java.lang.Boolean Use projenrc in java. projenrcJavaOptions io.github.cdklabs.projen.java.ProjenrcOptions Options related to projenrc in java. testDeps java.util.List List of test dependencies for this project. sample java.lang.Boolean Include sample code and test if the relevant directories don't exist. sampleJavaPackage java.lang.String The java package to use for the code sample. clientLanguages java.util.List< ClientLanguage > The list of languages for which clients will be generated. apiSrcDir java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats java.util.List< DocumentationFormat > Formats to generate documentation in. forceGenerateCodeAndDocs java.lang.Boolean Force to generate code and docs even if there were no changes in spec. generatedCodeDir java.lang.String The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions io.github.cdklabs.projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsedSpecFileName java.lang.String The name of the output parsed OpenAPI specification file. pythonClientOptions io.github.cdklabs.projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). typescriptClientOptions io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. specFile java.lang.String The path to the OpenAPI specification file, relative to the project source directory (srcdir). name Required public java . lang . String getName (); Type: java.lang.String Default: $BASEDIR This is the name of your project. commitGenerated Optional public java . lang . Boolean getCommitGenerated (); Type: java.lang.Boolean Default: true Whether to commit the managed files by default. gitOptions Optional public GitOptions getGitOptions (); Type: io.github.cdklabs.projen.GitOptions Configuration options for git. logging Optional public LoggerOptions getLogging (); Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public java . lang . String getOutdir (); Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public java . lang . String getProjenCommand (); Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public java . lang . Boolean getProjenrcJson (); Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public ProjenrcOptions getProjenrcJsonOptions (); Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional public java . lang . Boolean getRenovatebot (); Type: java.lang.Boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional public RenovatebotOptions getRenovatebotOptions (); Type: io.github.cdklabs.projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional public AutoApproveOptions getAutoApproveOptions (); Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional public java . lang . Boolean getAutoMerge (); Type: java.lang.Boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional public AutoMergeOptions getAutoMergeOptions (); Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional public java . lang . Boolean getClobber (); Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public java . lang . Boolean getDevContainer (); Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public java . lang . Boolean getGithub (); Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public GitHubOptions getGithubOptions (); Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public java . lang . Boolean getGitpod (); Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public java . lang . Boolean getMergify (); Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public MergifyOptions getMergifyOptions (); Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional public GithubCredentials getProjenCredentials (); Type: io.github.cdklabs.projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials public java . lang . String getProjenTokenSecret (); Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public SampleReadmeProps getReadme (); Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional public java . lang . Boolean getStale (); Type: java.lang.Boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public StaleOptions getStaleOptions (); Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public java . lang . Boolean getVscode (); Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. artifactId Required public java . lang . String getArtifactId (); Type: java.lang.String Default: \"my-app\" The artifactId is generally the name that the project is known by. Although the groupId is important, people within the group will rarely mention the groupId in discussion (they are often all be the same ID, such as the MojoHaus project groupId: org.codehaus.mojo). It, along with the groupId, creates a key that separates this project from every other project in the world (at least, it should :) ). Along with the groupId, the artifactId fully defines the artifact's living quarters within the repository. In the case of the above project, my-project lives in $M2_REPO/org/codehaus/mojo/my-project. groupId Required public java . lang . String getGroupId (); Type: java.lang.String Default: \"org.acme\" This is generally unique amongst an organization or a project. For example, all core Maven artifacts do (well, should) live under the groupId org.apache.maven. Group ID's do not necessarily use the dot notation, for example, the junit project. Note that the dot-notated groupId does not have to correspond to the package structure that the project contains. It is, however, a good practice to follow. When stored within a repository, the group acts much like the Java packaging structure does in an operating system. The dots are replaced by OS specific directory separators (such as '/' in Unix) which becomes a relative directory structure from the base repository. In the example given, the org.codehaus.mojo group lives within the directory $M2_REPO/org/codehaus/mojo. version Required public java . lang . String getVersion (); Type: java.lang.String Default: \"0.1.0\" This is the last piece of the naming puzzle. groupId:artifactId denotes a single project but they cannot delineate which incarnation of that project we are talking about. Do we want the junit:junit of 2018 (version 4.12), or of 2007 (version 3.8.2)? In short: code changes, those changes should be versioned, and this element keeps those versions in line. It is also used within an artifact's repository to separate versions from each other. my-project version 1.0 files live in the directory structure $M2_REPO/org/codehaus/mojo/my-project/1.0. description Optional public java . lang . String getDescription (); Type: java.lang.String Default: undefined Description of a project is always good. Although this should not replace formal documentation, a quick comment to any readers of the POM is always helpful. packaging Optional public java . lang . String getPackaging (); Type: java.lang.String Default: \"jar\" Project packaging format. url Optional public java . lang . String getUrl (); Type: java.lang.String Default: undefined The URL, like the name, is not required. This is a nice gesture for projects users, however, so that they know where the project lives. compileOptions Optional public MavenCompileOptions getCompileOptions (); Type: io.github.cdklabs.projen.java.MavenCompileOptions Default: defaults Compile options. deps Optional public java . util . List < java . lang . String > getDeps (); Type: java.util.List Default: [] List of runtime dependencies for this project. Dependencies use the format: <groupId>/<artifactId>@<semver> Additional dependencies can be added via project.addDependency() . distdir Optional public java . lang . String getDistdir (); Type: java.lang.String Default: \"dist/java\" Final artifact output directory. junit Optional public java . lang . Boolean getJunit (); Type: java.lang.Boolean Default: true Include junit tests. junitOptions Optional public JunitOptions getJunitOptions (); Type: io.github.cdklabs.projen.java.JunitOptions Default: defaults junit options. packagingOptions Optional public MavenPackagingOptions getPackagingOptions (); Type: io.github.cdklabs.projen.java.MavenPackagingOptions Default: defaults Packaging options. projenrcJava Optional public java . lang . Boolean getProjenrcJava (); Type: java.lang.Boolean Default: true Use projenrc in java. This will install projen as a java dependency and will add a synth task which will compile & execute main() from src/main/java/projenrc.java . projenrcJavaOptions Optional public ProjenrcOptions getProjenrcJavaOptions (); Type: io.github.cdklabs.projen.java.ProjenrcOptions Default: default options Options related to projenrc in java. testDeps Optional public java . util . List < java . lang . String > getTestDeps (); Type: java.util.List Default: [] List of test dependencies for this project. Dependencies use the format: <groupId>/<artifactId>@<semver> Additional dependencies can be added via project.addTestDependency() . sample Optional public java . lang . Boolean getSample (); Type: java.lang.Boolean Default: true Include sample code and test if the relevant directories don't exist. sampleJavaPackage Optional public java . lang . String getSampleJavaPackage (); Type: java.lang.String Default: \"org.acme\" The java package to use for the code sample. clientLanguages Required public java . util . List < ClientLanguage > getClientLanguages (); Type: java.util.List< ClientLanguage > The list of languages for which clients will be generated. A typescript client will always be generated. apiSrcDir Optional public java . lang . String getApiSrcDir (); Type: java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats Optional public java . util . List < DocumentationFormat > getDocumentationFormats (); Type: java.util.List< DocumentationFormat > Formats to generate documentation in. forceGenerateCodeAndDocs Optional public java . lang . Boolean getForceGenerateCodeAndDocs (); Type: java.lang.Boolean Default: \"false\" Force to generate code and docs even if there were no changes in spec. generatedCodeDir Optional public java . lang . String getGeneratedCodeDir (); Type: java.lang.String Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions Optional public JavaProjectOptions getJavaClientOptions (); Type: io.github.cdklabs.projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsedSpecFileName Optional public java . lang . String getParsedSpecFileName (); Type: java.lang.String Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. pythonClientOptions Optional public PythonProjectOptions getPythonClientOptions (); Type: io.github.cdklabs.projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. typescriptClientOptions Optional public TypeScriptProjectOptions getTypescriptClientOptions (); Type: io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. specFile Optional public java . lang . String getSpecFile (); Type: java.lang.String Default: \"spec/spec.yaml\" The path to the OpenAPI specification file, relative to the project source directory (srcdir). OpenApiGatewayProjectOptions Options common to all open api gateway projects. Initializer import software.aws.awsprototypingsdk.openapigateway.OpenApiGatewayProjectOptions ; OpenApiGatewayProjectOptions . builder () . clientLanguages ( java . util . List < ClientLanguage > ) // .apiSrcDir(java.lang.String) // .documentationFormats(java.util.List<DocumentationFormat>) // .forceGenerateCodeAndDocs(java.lang.Boolean) // .generatedCodeDir(java.lang.String) // .javaClientOptions(JavaProjectOptions) // .parsedSpecFileName(java.lang.String) // .pythonClientOptions(PythonProjectOptions) // .typescriptClientOptions(TypeScriptProjectOptions) // .specFile(java.lang.String) . build (); Properties Name Type Description clientLanguages java.util.List< ClientLanguage > The list of languages for which clients will be generated. apiSrcDir java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats java.util.List< DocumentationFormat > Formats to generate documentation in. forceGenerateCodeAndDocs java.lang.Boolean Force to generate code and docs even if there were no changes in spec. generatedCodeDir java.lang.String The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions io.github.cdklabs.projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsedSpecFileName java.lang.String The name of the output parsed OpenAPI specification file. pythonClientOptions io.github.cdklabs.projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). typescriptClientOptions io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. specFile java.lang.String The path to the OpenAPI specification file, relative to the project source directory (srcdir). clientLanguages Required public java . util . List < ClientLanguage > getClientLanguages (); Type: java.util.List< ClientLanguage > The list of languages for which clients will be generated. A typescript client will always be generated. apiSrcDir Optional public java . lang . String getApiSrcDir (); Type: java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats Optional public java . util . List < DocumentationFormat > getDocumentationFormats (); Type: java.util.List< DocumentationFormat > Formats to generate documentation in. forceGenerateCodeAndDocs Optional public java . lang . Boolean getForceGenerateCodeAndDocs (); Type: java.lang.Boolean Default: \"false\" Force to generate code and docs even if there were no changes in spec. generatedCodeDir Optional public java . lang . String getGeneratedCodeDir (); Type: java.lang.String Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions Optional public JavaProjectOptions getJavaClientOptions (); Type: io.github.cdklabs.projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsedSpecFileName Optional public java . lang . String getParsedSpecFileName (); Type: java.lang.String Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. pythonClientOptions Optional public PythonProjectOptions getPythonClientOptions (); Type: io.github.cdklabs.projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. typescriptClientOptions Optional public TypeScriptProjectOptions getTypescriptClientOptions (); Type: io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. specFile Optional public java . lang . String getSpecFile (); Type: java.lang.String Default: \"spec/spec.yaml\" The path to the OpenAPI specification file, relative to the project source directory (srcdir). OpenApiGatewayPythonProjectOptions Configuration for the OpenApiGatewayPythonProject. Initializer import software.aws.awsprototypingsdk.openapigateway.OpenApiGatewayPythonProjectOptions ; OpenApiGatewayPythonProjectOptions . builder () . name ( java . lang . String ) // .commitGenerated(java.lang.Boolean) // .gitOptions(GitOptions) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .renovatebot(java.lang.Boolean) // .renovatebotOptions(RenovatebotOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMerge(java.lang.Boolean) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenCredentials(GithubCredentials) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) . authorEmail ( java . lang . String ) . authorName ( java . lang . String ) . version ( java . lang . String ) // .classifiers(java.util.List<java.lang.String>) // .description(java.lang.String) // .homepage(java.lang.String) // .license(java.lang.String) // .packageName(java.lang.String) // .poetryOptions(PoetryPyprojectOptionsWithoutDeps) // .setupConfig(java.util.Map<java.lang.String, java.lang.Object>) . moduleName ( java . lang . String ) // .deps(java.util.List<java.lang.String>) // .devDeps(java.util.List<java.lang.String>) // .pip(java.lang.Boolean) // .poetry(java.lang.Boolean) // .projenrcJs(java.lang.Boolean) // .projenrcJsOptions(ProjenrcOptions) // .projenrcPython(java.lang.Boolean) // .projenrcPythonOptions(ProjenrcOptions) // .pytest(java.lang.Boolean) // .pytestOptions(PytestOptions) // .sample(java.lang.Boolean) // .setuptools(java.lang.Boolean) // .venv(java.lang.Boolean) // .venvOptions(VenvOptions) . clientLanguages ( java . util . List < ClientLanguage > ) // .apiSrcDir(java.lang.String) // .documentationFormats(java.util.List<DocumentationFormat>) // .forceGenerateCodeAndDocs(java.lang.Boolean) // .generatedCodeDir(java.lang.String) // .javaClientOptions(JavaProjectOptions) // .parsedSpecFileName(java.lang.String) // .pythonClientOptions(PythonProjectOptions) // .typescriptClientOptions(TypeScriptProjectOptions) // .specFile(java.lang.String) . build (); Properties Name Type Description name java.lang.String This is the name of your project. commitGenerated java.lang.Boolean Whether to commit the managed files by default. gitOptions io.github.cdklabs.projen.GitOptions Configuration options for git. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. renovatebot java.lang.Boolean Use renovatebot to handle dependency upgrades. renovatebotOptions io.github.cdklabs.projen.RenovatebotOptions Options for renovatebot. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge java.lang.Boolean Enable automatic merging on GitHub. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenCredentials io.github.cdklabs.projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. authorEmail java.lang.String Author's e-mail. authorName java.lang.String Author's name. version java.lang.String Version of the package. classifiers java.util.List A list of PyPI trove classifiers that describe the project. description java.lang.String A short description of the package. homepage java.lang.String A URL to the website of the project. license java.lang.String License of this package as an SPDX identifier. packageName java.lang.String Package name. poetryOptions io.github.cdklabs.projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setupConfig java.util.Map Additional fields to pass in the setup() function if using setuptools. moduleName java.lang.String Name of the python package as used in imports and filenames. deps java.util.List List of runtime dependencies for this project. devDeps java.util.List List of dev dependencies for this project. pip java.lang.Boolean Use pip with a requirements.txt file to track project dependencies. poetry java.lang.Boolean Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrcJs java.lang.Boolean Use projenrc in javascript. projenrcJsOptions io.github.cdklabs.projen.javascript.ProjenrcOptions Options related to projenrc in JavaScript. projenrcPython java.lang.Boolean Use projenrc in Python. projenrcPythonOptions io.github.cdklabs.projen.python.ProjenrcOptions Options related to projenrc in python. pytest java.lang.Boolean Include pytest tests. pytestOptions io.github.cdklabs.projen.python.PytestOptions pytest options. sample java.lang.Boolean Include sample code and test if the relevant directories don't exist. setuptools java.lang.Boolean Use setuptools with a setup.py script for packaging and publishing. venv java.lang.Boolean Use venv to manage a virtual environment for installing dependencies inside. venvOptions io.github.cdklabs.projen.python.VenvOptions Venv options. clientLanguages java.util.List< ClientLanguage > The list of languages for which clients will be generated. apiSrcDir java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats java.util.List< DocumentationFormat > Formats to generate documentation in. forceGenerateCodeAndDocs java.lang.Boolean Force to generate code and docs even if there were no changes in spec. generatedCodeDir java.lang.String The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions io.github.cdklabs.projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsedSpecFileName java.lang.String The name of the output parsed OpenAPI specification file. pythonClientOptions io.github.cdklabs.projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). typescriptClientOptions io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. specFile java.lang.String The path to the OpenAPI specification file, relative to the project source directory (srcdir). name Required public java . lang . String getName (); Type: java.lang.String Default: $BASEDIR This is the name of your project. commitGenerated Optional public java . lang . Boolean getCommitGenerated (); Type: java.lang.Boolean Default: true Whether to commit the managed files by default. gitOptions Optional public GitOptions getGitOptions (); Type: io.github.cdklabs.projen.GitOptions Configuration options for git. logging Optional public LoggerOptions getLogging (); Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public java . lang . String getOutdir (); Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public java . lang . String getProjenCommand (); Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public java . lang . Boolean getProjenrcJson (); Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public ProjenrcOptions getProjenrcJsonOptions (); Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional public java . lang . Boolean getRenovatebot (); Type: java.lang.Boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional public RenovatebotOptions getRenovatebotOptions (); Type: io.github.cdklabs.projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional public AutoApproveOptions getAutoApproveOptions (); Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional public java . lang . Boolean getAutoMerge (); Type: java.lang.Boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional public AutoMergeOptions getAutoMergeOptions (); Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional public java . lang . Boolean getClobber (); Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public java . lang . Boolean getDevContainer (); Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public java . lang . Boolean getGithub (); Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public GitHubOptions getGithubOptions (); Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public java . lang . Boolean getGitpod (); Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public java . lang . Boolean getMergify (); Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public MergifyOptions getMergifyOptions (); Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional public GithubCredentials getProjenCredentials (); Type: io.github.cdklabs.projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials public java . lang . String getProjenTokenSecret (); Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public SampleReadmeProps getReadme (); Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional public java . lang . Boolean getStale (); Type: java.lang.Boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public StaleOptions getStaleOptions (); Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public java . lang . Boolean getVscode (); Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. authorEmail Required public java . lang . String getAuthorEmail (); Type: java.lang.String Default: $GIT_USER_EMAIL Author's e-mail. authorName Required public java . lang . String getAuthorName (); Type: java.lang.String Default: $GIT_USER_NAME Author's name. version Required public java . lang . String getVersion (); Type: java.lang.String Default: \"0.1.0\" Version of the package. classifiers Optional public java . util . List < java . lang . String > getClassifiers (); Type: java.util.List A list of PyPI trove classifiers that describe the project. https://pypi.org/classifiers/ description Optional public java . lang . String getDescription (); Type: java.lang.String A short description of the package. homepage Optional public java . lang . String getHomepage (); Type: java.lang.String A URL to the website of the project. license Optional public java . lang . String getLicense (); Type: java.lang.String License of this package as an SPDX identifier. packageName Optional public java . lang . String getPackageName (); Type: java.lang.String Package name. poetryOptions Optional public PoetryPyprojectOptionsWithoutDeps getPoetryOptions (); Type: io.github.cdklabs.projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setupConfig Optional public java . util . Map < java . lang . String , java . lang . Object > getSetupConfig (); Type: java.util.Map Additional fields to pass in the setup() function if using setuptools. moduleName Required public java . lang . String getModuleName (); Type: java.lang.String Default: $PYTHON_MODULE_NAME Name of the python package as used in imports and filenames. Must only consist of alphanumeric characters and underscores. deps Optional public java . util . List < java . lang . String > getDeps (); Type: java.util.List Default: [] List of runtime dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDependency() . devDeps Optional public java . util . List < java . lang . String > getDevDeps (); Type: java.util.List Default: [] List of dev dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDevDependency() . pip Optional public java . lang . Boolean getPip (); Type: java.lang.Boolean Default: true, unless poetry is true, then false Use pip with a requirements.txt file to track project dependencies. poetry Optional public java . lang . Boolean getPoetry (); Type: java.lang.Boolean Default: false Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. This feature is incompatible with pip, setuptools, or venv. If you set this option to true , then pip, setuptools, and venv must be set to false . projenrcJs Optional public java . lang . Boolean getProjenrcJs (); Type: java.lang.Boolean Default: false Use projenrc in javascript. This will install projen as a JavaScript dependency and add a synth task which will run .projenrc.js . projenrcJsOptions Optional public ProjenrcOptions getProjenrcJsOptions (); Type: io.github.cdklabs.projen.javascript.ProjenrcOptions Default: default options Options related to projenrc in JavaScript. projenrcPython Optional public java . lang . Boolean getProjenrcPython (); Type: java.lang.Boolean Default: true Use projenrc in Python. This will install projen as a Python dependency and add a synth task which will run .projenrc.py . projenrcPythonOptions Optional public ProjenrcOptions getProjenrcPythonOptions (); Type: io.github.cdklabs.projen.python.ProjenrcOptions Default: default options Options related to projenrc in python. pytest Optional public java . lang . Boolean getPytest (); Type: java.lang.Boolean Default: true Include pytest tests. pytestOptions Optional public PytestOptions getPytestOptions (); Type: io.github.cdklabs.projen.python.PytestOptions Default: defaults pytest options. sample Optional public java . lang . Boolean getSample (); Type: java.lang.Boolean Default: true Include sample code and test if the relevant directories don't exist. setuptools Optional public java . lang . Boolean getSetuptools (); Type: java.lang.Boolean Default: true, unless poetry is true, then false Use setuptools with a setup.py script for packaging and publishing. venv Optional public java . lang . Boolean getVenv (); Type: java.lang.Boolean Default: true, unless poetry is true, then false Use venv to manage a virtual environment for installing dependencies inside. venvOptions Optional public VenvOptions getVenvOptions (); Type: io.github.cdklabs.projen.python.VenvOptions Default: defaults Venv options. clientLanguages Required public java . util . List < ClientLanguage > getClientLanguages (); Type: java.util.List< ClientLanguage > The list of languages for which clients will be generated. A typescript client will always be generated. apiSrcDir Optional public java . lang . String getApiSrcDir (); Type: java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats Optional public java . util . List < DocumentationFormat > getDocumentationFormats (); Type: java.util.List< DocumentationFormat > Formats to generate documentation in. forceGenerateCodeAndDocs Optional public java . lang . Boolean getForceGenerateCodeAndDocs (); Type: java.lang.Boolean Default: \"false\" Force to generate code and docs even if there were no changes in spec. generatedCodeDir Optional public java . lang . String getGeneratedCodeDir (); Type: java.lang.String Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions Optional public JavaProjectOptions getJavaClientOptions (); Type: io.github.cdklabs.projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsedSpecFileName Optional public java . lang . String getParsedSpecFileName (); Type: java.lang.String Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. pythonClientOptions Optional public PythonProjectOptions getPythonClientOptions (); Type: io.github.cdklabs.projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. typescriptClientOptions Optional public TypeScriptProjectOptions getTypescriptClientOptions (); Type: io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. specFile Optional public java . lang . String getSpecFile (); Type: java.lang.String Default: \"spec/spec.yaml\" The path to the OpenAPI specification file, relative to the project source directory (srcdir). OpenApiGatewayRestApiProps Configuration for the OpenApiGatewayRestApi construct. Initializer import software.aws.awsprototypingsdk.openapigateway.OpenApiGatewayRestApiProps ; OpenApiGatewayRestApiProps . builder () // .cloudWatchRole(java.lang.Boolean) // .deploy(java.lang.Boolean) // .deployOptions(StageOptions) // .description(java.lang.String) // .disableExecuteApiEndpoint(java.lang.Boolean) // .domainName(DomainNameOptions) // .endpointExportName(java.lang.String) // .endpointTypes(java.util.List<EndpointType>) // .failOnWarnings(java.lang.Boolean) // .parameters(java.util.Map<java.lang.String, java.lang.String>) // .policy(PolicyDocument) // .restApiName(java.lang.String) // .retainDeployments(java.lang.Boolean) . integrations ( java . util . Map < java . lang . String , OpenApiIntegration > ) . operationLookup ( java . util . Map < java . lang . String , MethodAndPath > ) // .corsOptions(CorsOptions) // .defaultAuthorizer(Authorizer) . spec ( java . lang . Object ) . specPath ( java . lang . String ) // .webAclOptions(OpenApiGatewayWebAclOptions) . build (); Properties Name Type Description cloudWatchRole java.lang.Boolean Automatically configure an AWS CloudWatch role for API Gateway. deploy java.lang.Boolean Indicates if a Deployment should be automatically created for this API, and recreated when the API model (resources, methods) changes. deployOptions software.amazon.awscdk.services.apigateway.StageOptions Options for the API Gateway stage that will always point to the latest deployment when deploy is enabled. description java.lang.String A description of the RestApi construct. disableExecuteApiEndpoint java.lang.Boolean Specifies whether clients can invoke the API using the default execute-api endpoint. domainName software.amazon.awscdk.services.apigateway.DomainNameOptions Configure a custom domain name and map it to this API. endpointExportName java.lang.String Export name for the CfnOutput containing the API endpoint. endpointTypes java.util.List A list of the endpoint types of the API. failOnWarnings java.lang.Boolean Indicates whether to roll back the resource if a warning occurs while API Gateway is creating the RestApi resource. parameters java.util.Map Custom header parameters for the request. policy software.amazon.awscdk.services.iam.PolicyDocument A policy document that contains the permissions for this RestApi. restApiName java.lang.String A name for the API Gateway RestApi resource. retainDeployments java.lang.Boolean Retains old deployment resources when the API changes. integrations java.util.Map OpenApiIntegration\\ > A mapping of API operation to its integration. operationLookup java.util.Map MethodAndPath\\ > Details about each operation. corsOptions software.amazon.awscdk.services.apigateway.CorsOptions Cross Origin Resource Sharing options for the API. defaultAuthorizer Authorizer The default authorizer to use for your api. spec java.lang.Object The parsed OpenAPI specification. specPath java.lang.String Path to the JSON open api spec. webAclOptions OpenApiGatewayWebAclOptions Options for the AWS WAF v2 WebACL associated with the api. cloudWatchRole Optional public java . lang . Boolean getCloudWatchRole (); Type: java.lang.Boolean Default: false if @aws-cdk/aws-apigateway:disableCloudWatchRole is enabled, true otherwise Automatically configure an AWS CloudWatch role for API Gateway. deploy Optional public java . lang . Boolean getDeploy (); Type: java.lang.Boolean Default: true Indicates if a Deployment should be automatically created for this API, and recreated when the API model (resources, methods) changes. Since API Gateway deployments are immutable, When this option is enabled (by default), an AWS::ApiGateway::Deployment resource will automatically created with a logical ID that hashes the API model (methods, resources and options). This means that when the model changes, the logical ID of this CloudFormation resource will change, and a new deployment will be created. If this is set, latestDeployment will refer to the Deployment object and deploymentStage will refer to a Stage that points to this deployment. To customize the stage options, use the deployOptions property. A CloudFormation Output will also be defined with the root URL endpoint of this REST API. deployOptions Optional public StageOptions getDeployOptions (); Type: software.amazon.awscdk.services.apigateway.StageOptions Default: Based on defaults of StageOptions . Options for the API Gateway stage that will always point to the latest deployment when deploy is enabled. If deploy is disabled, this value cannot be set. description Optional public java . lang . String getDescription (); Type: java.lang.String Default: 'Automatically created by the RestApi construct' A description of the RestApi construct. disableExecuteApiEndpoint Optional public java . lang . Boolean getDisableExecuteApiEndpoint (); Type: java.lang.Boolean Default: false Specifies whether clients can invoke the API using the default execute-api endpoint. To require that clients use a custom domain name to invoke the API, disable the default endpoint. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-restapi.html domainName Optional public DomainNameOptions getDomainName (); Type: software.amazon.awscdk.services.apigateway.DomainNameOptions Default: no domain name is defined, use addDomainName or directly define a DomainName . Configure a custom domain name and map it to this API. endpointExportName Optional public java . lang . String getEndpointExportName (); Type: java.lang.String Default: when no export name is given, output will be created without export Export name for the CfnOutput containing the API endpoint. endpointTypes Optional public java . util . List < EndpointType > getEndpointTypes (); Type: java.util.List Default: EndpointType.EDGE A list of the endpoint types of the API. Use this property when creating an API. failOnWarnings Optional public java . lang . Boolean getFailOnWarnings (); Type: java.lang.Boolean Default: false Indicates whether to roll back the resource if a warning occurs while API Gateway is creating the RestApi resource. parameters Optional public java . util . Map < java . lang . String , java . lang . String > getParameters (); Type: java.util.Map Default: No parameters. Custom header parameters for the request. https://docs.aws.amazon.com/cli/latest/reference/apigateway/import-rest-api.html policy Optional public PolicyDocument getPolicy (); Type: software.amazon.awscdk.services.iam.PolicyDocument Default: No policy. A policy document that contains the permissions for this RestApi. restApiName Optional public java . lang . String getRestApiName (); Type: java.lang.String Default: ID of the RestApi construct. A name for the API Gateway RestApi resource. retainDeployments Optional public java . lang . Boolean getRetainDeployments (); Type: java.lang.Boolean Default: false Retains old deployment resources when the API changes. This allows manually reverting stages to point to old deployments via the AWS Console. integrations Required public java . util . Map < java . lang . String , OpenApiIntegration > getIntegrations (); Type: java.util.Map OpenApiIntegration\\ > A mapping of API operation to its integration. operationLookup Required public java . util . Map < java . lang . String , MethodAndPath > getOperationLookup (); Type: java.util.Map MethodAndPath\\ > Details about each operation. corsOptions Optional public CorsOptions getCorsOptions (); Type: software.amazon.awscdk.services.apigateway.CorsOptions Cross Origin Resource Sharing options for the API. defaultAuthorizer Optional public Authorizer getDefaultAuthorizer (); Type: Authorizer The default authorizer to use for your api. When omitted, no default authorizer is used. Authorizers specified at the integration level will override this for that operation. spec Required public java . lang . Object getSpec (); Type: java.lang.Object The parsed OpenAPI specification. specPath Required public java . lang . String getSpecPath (); Type: java.lang.String Path to the JSON open api spec. webAclOptions Optional public OpenApiGatewayWebAclOptions getWebAclOptions (); Type: OpenApiGatewayWebAclOptions Options for the AWS WAF v2 WebACL associated with the api. By default, a Web ACL with the AWS default managed rule set will be associated with the API. These options may disable or override the defaults. OpenApiGatewayTsProjectOptions Configuration for the OpenApiGatewayTsProject. Initializer import software.aws.awsprototypingsdk.openapigateway.OpenApiGatewayTsProjectOptions ; OpenApiGatewayTsProjectOptions . builder () . name ( java . lang . String ) // .commitGenerated(java.lang.Boolean) // .gitOptions(GitOptions) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .renovatebot(java.lang.Boolean) // .renovatebotOptions(RenovatebotOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMerge(java.lang.Boolean) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenCredentials(GithubCredentials) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) // .allowLibraryDependencies(java.lang.Boolean) // .authorEmail(java.lang.String) // .authorName(java.lang.String) // .authorOrganization(java.lang.Boolean) // .authorUrl(java.lang.String) // .autoDetectBin(java.lang.Boolean) // .bin(java.util.Map<java.lang.String, java.lang.String>) // .bugsEmail(java.lang.String) // .bugsUrl(java.lang.String) // .bundledDeps(java.util.List<java.lang.String>) // .codeArtifactOptions(CodeArtifactOptions) // .deps(java.util.List<java.lang.String>) // .description(java.lang.String) // .devDeps(java.util.List<java.lang.String>) // .entrypoint(java.lang.String) // .homepage(java.lang.String) // .keywords(java.util.List<java.lang.String>) // .license(java.lang.String) // .licensed(java.lang.Boolean) // .maxNodeVersion(java.lang.String) // .minNodeVersion(java.lang.String) // .npmAccess(NpmAccess) // .npmRegistry(java.lang.String) // .npmRegistryUrl(java.lang.String) // .npmTokenSecret(java.lang.String) // .packageManager(NodePackageManager) // .packageName(java.lang.String) // .peerDependencyOptions(PeerDependencyOptions) // .peerDeps(java.util.List<java.lang.String>) // .pnpmVersion(java.lang.String) // .repository(java.lang.String) // .repositoryDirectory(java.lang.String) // .scopedPackagesOptions(java.util.List<ScopedPackagesOptions>) // .scripts(java.util.Map<java.lang.String, java.lang.String>) // .stability(java.lang.String) // .jsiiReleaseVersion(java.lang.String) // .majorVersion(java.lang.Number) // .minMajorVersion(java.lang.Number) // .npmDistTag(java.lang.String) // .postBuildSteps(java.util.List<JobStep>) // .prerelease(java.lang.String) // .publishDryRun(java.lang.Boolean) // .publishTasks(java.lang.Boolean) // .releaseBranches(java.util.Map<java.lang.String, BranchOptions>) // .releaseEveryCommit(java.lang.Boolean) // .releaseFailureIssue(java.lang.Boolean) // .releaseFailureIssueLabel(java.lang.String) // .releaseSchedule(java.lang.String) // .releaseTagPrefix(java.lang.String) // .releaseTrigger(ReleaseTrigger) // .releaseWorkflowName(java.lang.String) // .releaseWorkflowSetupSteps(java.util.List<JobStep>) // .versionrcOptions(java.util.Map<java.lang.String, java.lang.Object>) // .workflowContainerImage(java.lang.String) // .workflowRunsOn(java.util.List<java.lang.String>) . defaultReleaseBranch ( java . lang . String ) // .artifactsDirectory(java.lang.String) // .autoApproveUpgrades(java.lang.Boolean) // .buildWorkflow(java.lang.Boolean) // .buildWorkflowTriggers(Triggers) // .bundlerOptions(BundlerOptions) // .codeCov(java.lang.Boolean) // .codeCovTokenSecret(java.lang.String) // .copyrightOwner(java.lang.String) // .copyrightPeriod(java.lang.String) // .dependabot(java.lang.Boolean) // .dependabotOptions(DependabotOptions) // .depsUpgrade(java.lang.Boolean) // .depsUpgradeOptions(UpgradeDependenciesOptions) // .gitignore(java.util.List<java.lang.String>) // .jest(java.lang.Boolean) // .jestOptions(JestOptions) // .mutableBuild(java.lang.Boolean) // .npmignore(java.util.List<java.lang.String>) // .npmignoreEnabled(java.lang.Boolean) // .package(java.lang.Boolean) // .prettier(java.lang.Boolean) // .prettierOptions(PrettierOptions) // .projenDevDependency(java.lang.Boolean) // .projenrcJs(java.lang.Boolean) // .projenrcJsOptions(ProjenrcOptions) // .projenVersion(java.lang.String) // .pullRequestTemplate(java.lang.Boolean) // .pullRequestTemplateContents(java.util.List<java.lang.String>) // .release(java.lang.Boolean) // .releaseToNpm(java.lang.Boolean) // .releaseWorkflow(java.lang.Boolean) // .workflowBootstrapSteps(java.util.List<JobStep>) // .workflowGitIdentity(GitIdentity) // .workflowNodeVersion(java.lang.String) // .disableTsconfig(java.lang.Boolean) // .docgen(java.lang.Boolean) // .docsDirectory(java.lang.String) // .entrypointTypes(java.lang.String) // .eslint(java.lang.Boolean) // .eslintOptions(EslintOptions) // .libdir(java.lang.String) // .projenrcTs(java.lang.Boolean) // .projenrcTsOptions(ProjenrcOptions) // .sampleCode(java.lang.Boolean) // .srcdir(java.lang.String) // .testdir(java.lang.String) // .tsconfig(TypescriptConfigOptions) // .tsconfigDev(TypescriptConfigOptions) // .tsconfigDevFile(java.lang.String) // .typescriptVersion(java.lang.String) . clientLanguages ( java . util . List < ClientLanguage > ) // .apiSrcDir(java.lang.String) // .documentationFormats(java.util.List<DocumentationFormat>) // .forceGenerateCodeAndDocs(java.lang.Boolean) // .generatedCodeDir(java.lang.String) // .javaClientOptions(JavaProjectOptions) // .parsedSpecFileName(java.lang.String) // .pythonClientOptions(PythonProjectOptions) // .typescriptClientOptions(TypeScriptProjectOptions) // .specFile(java.lang.String) . build (); Properties Name Type Description name java.lang.String This is the name of your project. commitGenerated java.lang.Boolean Whether to commit the managed files by default. gitOptions io.github.cdklabs.projen.GitOptions Configuration options for git. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. renovatebot java.lang.Boolean Use renovatebot to handle dependency upgrades. renovatebotOptions io.github.cdklabs.projen.RenovatebotOptions Options for renovatebot. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge java.lang.Boolean Enable automatic merging on GitHub. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenCredentials io.github.cdklabs.projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. allowLibraryDependencies java.lang.Boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail java.lang.String Author's e-mail. authorName java.lang.String Author's name. authorOrganization java.lang.Boolean Is the author an organization. authorUrl java.lang.String Author's URL / Website. autoDetectBin java.lang.Boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin java.util.Map Binary programs vended with your module. bugsEmail java.lang.String The email address to which issues should be reported. bugsUrl java.lang.String The url to your project's issue tracker. bundledDeps java.util.List List of dependencies to bundle into this module. codeArtifactOptions io.github.cdklabs.projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps java.util.List Runtime dependencies of this module. description java.lang.String The description is just a string that helps people understand the purpose of the package. devDeps java.util.List Build dependencies for this module. entrypoint java.lang.String Module entrypoint ( main in package.json ). homepage java.lang.String Package's Homepage / Website. keywords java.util.List Keywords to include in package.json . license java.lang.String License's SPDX identifier. licensed java.lang.Boolean Indicates if a license should be added. maxNodeVersion java.lang.String Minimum node.js version to require via engines (inclusive). minNodeVersion java.lang.String Minimum Node.js version to require via package.json engines (inclusive). npmAccess io.github.cdklabs.projen.javascript.NpmAccess Access level of the npm package. npmRegistry java.lang.String The host name of the npm registry to publish to. npmRegistryUrl java.lang.String The base URL of the npm package registry. npmTokenSecret java.lang.String GitHub secret which contains the NPM token to use when publishing packages. packageManager io.github.cdklabs.projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName java.lang.String The \"name\" in package.json. peerDependencyOptions io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps java.util.List Peer dependencies for this module. pnpmVersion java.lang.String The version of PNPM to use if using PNPM as a package manager. repository java.lang.String The repository is the location where the actual code for your package lives. repositoryDirectory java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions java.util.List Options for privately hosted scoped packages. scripts java.util.Map npm scripts to include. stability java.lang.String Package's Stability. jsiiReleaseVersion java.lang.String Version requirement of publib which is used to publish modules to npm. majorVersion java.lang.Number Major version to release from the default branch. minMajorVersion java.lang.Number Minimal Major version to release. npmDistTag java.lang.String The npmDistTag to use when publishing from the default branch. postBuildSteps java.util.List Steps to execute after build as part of the release workflow. prerelease java.lang.String Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun java.lang.Boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks java.lang.Boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches java.util.Map Defines additional release branches. releaseEveryCommit java.lang.Boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue java.lang.Boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel java.lang.String The label to apply to issues indicating publish failures. releaseSchedule java.lang.String CRON schedule to trigger new releases. releaseTagPrefix java.lang.String Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger io.github.cdklabs.projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName java.lang.String The name of the default release workflow. releaseWorkflowSetupSteps java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions java.util.Map Custom configuration used when creating changelog with standard-version package. workflowContainerImage java.lang.String Container image to use for GitHub workflows. workflowRunsOn java.util.List Github Runner selection labels. defaultReleaseBranch java.lang.String The name of the main release branch. artifactsDirectory java.lang.String A directory which will contain build artifacts. autoApproveUpgrades java.lang.Boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow java.lang.Boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers io.github.cdklabs.projen.github.workflows.Triggers Build workflow triggers. bundlerOptions io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov java.lang.Boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret java.lang.String Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner java.lang.String License copyright owner. copyrightPeriod java.lang.String The copyright years to put in the LICENSE file. dependabot java.lang.Boolean Use dependabot to handle dependency upgrades. dependabotOptions io.github.cdklabs.projen.github.DependabotOptions Options for dependabot. depsUpgrade java.lang.Boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore java.util.List Additional entries to .gitignore. jest java.lang.Boolean Setup jest unit tests. jestOptions io.github.cdklabs.projen.javascript.JestOptions Jest options. mutableBuild java.lang.Boolean Automatically update files modified during builds to pull-request branches. npmignore java.util.List Additional entries to .npmignore. npmignoreEnabled java.lang.Boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package java.lang.Boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier java.lang.Boolean Setup prettier. prettierOptions io.github.cdklabs.projen.javascript.PrettierOptions Prettier options. projenDevDependency java.lang.Boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs java.lang.Boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions io.github.cdklabs.projen.javascript.ProjenrcOptions Options for .projenrc.js. projenVersion java.lang.String Version of projen to install. pullRequestTemplate java.lang.Boolean Include a GitHub pull request template. pullRequestTemplateContents java.util.List The contents of the pull request template. release java.lang.Boolean Add release management to this project. releaseToNpm java.lang.Boolean Automatically release to npm when new versions are introduced. releaseWorkflow java.lang.Boolean DEPRECATED: renamed to release . workflowBootstrapSteps java.util.List Workflow steps to use in order to bootstrap this repo. workflowGitIdentity io.github.cdklabs.projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion java.lang.String The node version to use in GitHub workflows. disableTsconfig java.lang.Boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen java.lang.Boolean Docgen by Typedoc. docsDirectory java.lang.String Docs directory. entrypointTypes java.lang.String The .d.ts file that includes the type declarations for this module. eslint java.lang.Boolean Setup eslint. eslintOptions io.github.cdklabs.projen.javascript.EslintOptions Eslint options. libdir java.lang.String Typescript artifacts output directory. projenrcTs java.lang.Boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode java.lang.Boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir java.lang.String Typescript sources directory. testdir java.lang.String Jest tests directory. Tests files should be named xxx.test.ts . tsconfig io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile java.lang.String The name of the development tsconfig.json file. typescriptVersion java.lang.String TypeScript version to use. clientLanguages java.util.List< ClientLanguage > The list of languages for which clients will be generated. apiSrcDir java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats java.util.List< DocumentationFormat > Formats to generate documentation in. forceGenerateCodeAndDocs java.lang.Boolean Force to generate code and docs even if there were no changes in spec. generatedCodeDir java.lang.String The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions io.github.cdklabs.projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsedSpecFileName java.lang.String The name of the output parsed OpenAPI specification file. pythonClientOptions io.github.cdklabs.projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). typescriptClientOptions io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. specFile java.lang.String The path to the OpenAPI specification file, relative to the project source directory (srcdir). name Required public java . lang . String getName (); Type: java.lang.String Default: $BASEDIR This is the name of your project. commitGenerated Optional public java . lang . Boolean getCommitGenerated (); Type: java.lang.Boolean Default: true Whether to commit the managed files by default. gitOptions Optional public GitOptions getGitOptions (); Type: io.github.cdklabs.projen.GitOptions Configuration options for git. logging Optional public LoggerOptions getLogging (); Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public java . lang . String getOutdir (); Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public java . lang . String getProjenCommand (); Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public java . lang . Boolean getProjenrcJson (); Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public ProjenrcOptions getProjenrcJsonOptions (); Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional public java . lang . Boolean getRenovatebot (); Type: java.lang.Boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional public RenovatebotOptions getRenovatebotOptions (); Type: io.github.cdklabs.projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional public AutoApproveOptions getAutoApproveOptions (); Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional public java . lang . Boolean getAutoMerge (); Type: java.lang.Boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional public AutoMergeOptions getAutoMergeOptions (); Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional public java . lang . Boolean getClobber (); Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public java . lang . Boolean getDevContainer (); Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public java . lang . Boolean getGithub (); Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public GitHubOptions getGithubOptions (); Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public java . lang . Boolean getGitpod (); Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public java . lang . Boolean getMergify (); Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public MergifyOptions getMergifyOptions (); Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional public GithubCredentials getProjenCredentials (); Type: io.github.cdklabs.projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials public java . lang . String getProjenTokenSecret (); Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public SampleReadmeProps getReadme (); Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional public java . lang . Boolean getStale (); Type: java.lang.Boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public StaleOptions getStaleOptions (); Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public java . lang . Boolean getVscode (); Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allowLibraryDependencies Optional public java . lang . Boolean getAllowLibraryDependencies (); Type: java.lang.Boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. authorEmail Optional public java . lang . String getAuthorEmail (); Type: java.lang.String Author's e-mail. authorName Optional public java . lang . String getAuthorName (); Type: java.lang.String Author's name. authorOrganization Optional public java . lang . Boolean getAuthorOrganization (); Type: java.lang.Boolean Is the author an organization. authorUrl Optional public java . lang . String getAuthorUrl (); Type: java.lang.String Author's URL / Website. autoDetectBin Optional public java . lang . Boolean getAutoDetectBin (); Type: java.lang.Boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional public java . util . Map < java . lang . String , java . lang . String > getBin (); Type: java.util.Map Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugsEmail Optional public java . lang . String getBugsEmail (); Type: java.lang.String The email address to which issues should be reported. bugsUrl Optional public java . lang . String getBugsUrl (); Type: java.lang.String The url to your project's issue tracker. bundledDeps Optional public java . util . List < java . lang . String > getBundledDeps (); Type: java.util.List List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. codeArtifactOptions Optional public CodeArtifactOptions getCodeArtifactOptions (); Type: io.github.cdklabs.projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional public java . util . List < java . lang . String > getDeps (); Type: java.util.List Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ ' express ' , ' lodash ' , ' foo @ ^ 2 ' ] description Optional public java . lang . String getDescription (); Type: java.lang.String The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description devDeps Optional public java . util . List < java . lang . String > getDevDeps (); Type: java.util.List Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ ' typescript ' , ' @types / express ' ] entrypoint Optional public java . lang . String getEntrypoint (); Type: java.lang.String Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional public java . lang . String getHomepage (); Type: java.lang.String Package's Homepage / Website. keywords Optional public java . util . List < java . lang . String > getKeywords (); Type: java.util.List Keywords to include in package.json . license Optional public java . lang . String getLicense (); Type: java.lang.String Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional public java . lang . Boolean getLicensed (); Type: java.lang.Boolean Default: true Indicates if a license should be added. maxNodeVersion Optional public java . lang . String getMaxNodeVersion (); Type: java.lang.String Default: no max Minimum node.js version to require via engines (inclusive). minNodeVersion Optional public java . lang . String getMinNodeVersion (); Type: java.lang.String Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npmAccess Optional public NpmAccess getNpmAccess (); Type: io.github.cdklabs.projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npmRegistry ~~ Optional Deprecated: use npmRegistryUrl instead public java . lang . String getNpmRegistry (); Type: java.lang.String The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npmRegistryUrl Optional public java . lang . String getNpmRegistryUrl (); Type: java.lang.String Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npmTokenSecret Optional public java . lang . String getNpmTokenSecret (); Type: java.lang.String Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. packageManager Optional public NodePackageManager getPackageManager (); Type: io.github.cdklabs.projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. packageName Optional public java . lang . String getPackageName (); Type: java.lang.String Default: defaults to project name The \"name\" in package.json. peerDependencyOptions Optional public PeerDependencyOptions getPeerDependencyOptions (); Type: io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps Optional public java . util . List < java . lang . String > getPeerDeps (); Type: java.util.List Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. pnpmVersion Optional public java . lang . String getPnpmVersion (); Type: java.lang.String Default: \"7\" The version of PNPM to use if using PNPM as a package manager. repository Optional public java . lang . String getRepository (); Type: java.lang.String The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repositoryDirectory Optional public java . lang . String getRepositoryDirectory (); Type: java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions Optional public java . util . List < ScopedPackagesOptions > getScopedPackagesOptions (); Type: java.util.List Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional public java . util . Map < java . lang . String , java . lang . String > getScripts (); Type: java.util.Map Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional public java . lang . String getStability (); Type: java.lang.String Package's Stability. jsiiReleaseVersion Optional public java . lang . String getJsiiReleaseVersion (); Type: java.lang.String Default: \"latest\" Version requirement of publib which is used to publish modules to npm. majorVersion Optional public java . lang . Number getMajorVersion (); Type: java.lang.Number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. minMajorVersion Optional public java . lang . Number getMinMajorVersion (); Type: java.lang.Number Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npmDistTag Optional public java . lang . String getNpmDistTag (); Type: java.lang.String Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. postBuildSteps Optional public java . util . List < JobStep > getPostBuildSteps (); Type: java.util.List Default: [] Steps to execute after build as part of the release workflow. prerelease Optional public java . lang . String getPrerelease (); Type: java.lang.String Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun Optional public java . lang . Boolean getPublishDryRun (); Type: java.lang.Boolean Default: false Instead of actually publishing to package managers, just print the publishing command. publishTasks Optional public java . lang . Boolean getPublishTasks (); Type: java.lang.Boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. releaseBranches Optional public java . util . Map < java . lang . String , BranchOptions > getReleaseBranches (); Type: java.util.Map Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ releaseEveryCommit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead public java . lang . Boolean getReleaseEveryCommit (); Type: java.lang.Boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue Optional public java . lang . Boolean getReleaseFailureIssue (); Type: java.lang.Boolean Default: false Create a github issue on every failed publishing task. releaseFailureIssueLabel Optional public java . lang . String getReleaseFailureIssueLabel (); Type: java.lang.String Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ releaseSchedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead public java . lang . String getReleaseSchedule (); Type: java.lang.String Default: no scheduled releases CRON schedule to trigger new releases. releaseTagPrefix Optional public java . lang . String getReleaseTagPrefix (); Type: java.lang.String Default: \"v\" Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. releaseTrigger Optional public ReleaseTrigger getReleaseTrigger (); Type: io.github.cdklabs.projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. releaseWorkflowName Optional public java . lang . String getReleaseWorkflowName (); Type: java.lang.String Default: \"Release\" The name of the default release workflow. releaseWorkflowSetupSteps Optional public java . util . List < JobStep > getReleaseWorkflowSetupSteps (); Type: java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions Optional public java . util . Map < java . lang . String , java . lang . Object > getVersionrcOptions (); Type: java.util.Map Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflowContainerImage Optional public java . lang . String getWorkflowContainerImage (); Type: java.lang.String Default: default image Container image to use for GitHub workflows. workflowRunsOn Optional public java . util . List < java . lang . String > getWorkflowRunsOn (); Type: java.util.List Default: [\"ubuntu-latest\"] Github Runner selection labels. defaultReleaseBranch Required public java . lang . String getDefaultReleaseBranch (); Type: java.lang.String Default: \"main\" The name of the main release branch. artifactsDirectory Optional public java . lang . String getArtifactsDirectory (); Type: java.lang.String Default: \"dist\" A directory which will contain build artifacts. autoApproveUpgrades Optional public java . lang . Boolean getAutoApproveUpgrades (); Type: java.lang.Boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. buildWorkflow Optional public java . lang . Boolean getBuildWorkflow (); Type: java.lang.Boolean Default: true if not a subproject Define a GitHub workflow for building PRs. buildWorkflowTriggers Optional public Triggers getBuildWorkflowTriggers (); Type: io.github.cdklabs.projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundlerOptions Optional public BundlerOptions getBundlerOptions (); Type: io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov Optional public java . lang . Boolean getCodeCov (); Type: java.lang.Boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret Optional public java . lang . String getCodeCovTokenSecret (); Type: java.lang.String Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner Optional public java . lang . String getCopyrightOwner (); Type: java.lang.String Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyrightPeriod Optional public java . lang . String getCopyrightPeriod (); Type: java.lang.String Default: current year The copyright years to put in the LICENSE file. dependabot Optional public java . lang . Boolean getDependabot (); Type: java.lang.Boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabotOptions Optional public DependabotOptions getDependabotOptions (); Type: io.github.cdklabs.projen.github.DependabotOptions Default: default options Options for dependabot. depsUpgrade Optional public java . lang . Boolean getDepsUpgrade (); Type: java.lang.Boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . depsUpgradeOptions Optional public UpgradeDependenciesOptions getDepsUpgradeOptions (); Type: io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional public java . util . List < java . lang . String > getGitignore (); Type: java.util.List Additional entries to .gitignore. jest Optional public java . lang . Boolean getJest (); Type: java.lang.Boolean Default: true Setup jest unit tests. jestOptions Optional public JestOptions getJestOptions (); Type: io.github.cdklabs.projen.javascript.JestOptions Default: default options Jest options. mutableBuild Optional public java . lang . Boolean getMutableBuild (); Type: java.lang.Boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore public java . util . List < java . lang . String > getNpmignore (); Type: java.util.List Additional entries to .npmignore. npmignoreEnabled Optional public java . lang . Boolean getNpmignoreEnabled (); Type: java.lang.Boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional public java . lang . Boolean getPackage (); Type: java.lang.Boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional public java . lang . Boolean getPrettier (); Type: java.lang.Boolean Default: false Setup prettier. prettierOptions Optional public PrettierOptions getPrettierOptions (); Type: io.github.cdklabs.projen.javascript.PrettierOptions Default: default options Prettier options. projenDevDependency Optional public java . lang . Boolean getProjenDevDependency (); Type: java.lang.Boolean Default: true Indicates of \"projen\" should be installed as a devDependency. projenrcJs Optional public java . lang . Boolean getProjenrcJs (); Type: java.lang.Boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions Optional public ProjenrcOptions getProjenrcJsOptions (); Type: io.github.cdklabs.projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projenVersion Optional public java . lang . String getProjenVersion (); Type: java.lang.String Default: Defaults to the latest version. Version of projen to install. pullRequestTemplate Optional public java . lang . Boolean getPullRequestTemplate (); Type: java.lang.Boolean Default: true Include a GitHub pull request template. pullRequestTemplateContents Optional public java . util . List < java . lang . String > getPullRequestTemplateContents (); Type: java.util.List Default: default content The contents of the pull request template. release Optional public java . lang . Boolean getRelease (); Type: java.lang.Boolean Default: true (false for subprojects) Add release management to this project. releaseToNpm Optional public java . lang . Boolean getReleaseToNpm (); Type: java.lang.Boolean Default: false Automatically release to npm when new versions are introduced. ~~ releaseWorkflow ~~ Optional Deprecated: see release . public java . lang . Boolean getReleaseWorkflow (); Type: java.lang.Boolean Default: true if not a subproject DEPRECATED: renamed to release . workflowBootstrapSteps Optional public java . util . List < JobStep > getWorkflowBootstrapSteps (); Type: java.util.List Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflowGitIdentity Optional public GitIdentity getWorkflowGitIdentity (); Type: io.github.cdklabs.projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflowNodeVersion Optional public java . lang . String getWorkflowNodeVersion (); Type: java.lang.String Default: same as minNodeVersion The node version to use in GitHub workflows. disableTsconfig Optional public java . lang . Boolean getDisableTsconfig (); Type: java.lang.Boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional public java . lang . Boolean getDocgen (); Type: java.lang.Boolean Default: false Docgen by Typedoc. docsDirectory Optional public java . lang . String getDocsDirectory (); Type: java.lang.String Default: \"docs\" Docs directory. entrypointTypes Optional public java . lang . String getEntrypointTypes (); Type: java.lang.String Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional public java . lang . Boolean getEslint (); Type: java.lang.Boolean Default: true Setup eslint. eslintOptions Optional public EslintOptions getEslintOptions (); Type: io.github.cdklabs.projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional public java . lang . String getLibdir (); Type: java.lang.String Default: \"lib\" Typescript artifacts output directory. projenrcTs Optional public java . lang . Boolean getProjenrcTs (); Type: java.lang.Boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions Optional public ProjenrcOptions getProjenrcTsOptions (); Type: io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode Optional public java . lang . Boolean getSampleCode (); Type: java.lang.Boolean Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional public java . lang . String getSrcdir (); Type: java.lang.String Default: \"src\" Typescript sources directory. testdir Optional public java . lang . String getTestdir (); Type: java.lang.String Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional public TypescriptConfigOptions getTsconfig (); Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfigDev Optional public TypescriptConfigOptions getTsconfigDev (); Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile Optional public java . lang . String getTsconfigDevFile (); Type: java.lang.String Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescriptVersion Optional public java . lang . String getTypescriptVersion (); Type: java.lang.String Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). clientLanguages Required public java . util . List < ClientLanguage > getClientLanguages (); Type: java.util.List< ClientLanguage > The list of languages for which clients will be generated. A typescript client will always be generated. apiSrcDir Optional public java . lang . String getApiSrcDir (); Type: java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats Optional public java . util . List < DocumentationFormat > getDocumentationFormats (); Type: java.util.List< DocumentationFormat > Formats to generate documentation in. forceGenerateCodeAndDocs Optional public java . lang . Boolean getForceGenerateCodeAndDocs (); Type: java.lang.Boolean Default: \"false\" Force to generate code and docs even if there were no changes in spec. generatedCodeDir Optional public java . lang . String getGeneratedCodeDir (); Type: java.lang.String Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions Optional public JavaProjectOptions getJavaClientOptions (); Type: io.github.cdklabs.projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsedSpecFileName Optional public java . lang . String getParsedSpecFileName (); Type: java.lang.String Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. pythonClientOptions Optional public PythonProjectOptions getPythonClientOptions (); Type: io.github.cdklabs.projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. typescriptClientOptions Optional public TypeScriptProjectOptions getTypescriptClientOptions (); Type: io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. specFile Optional public java . lang . String getSpecFile (); Type: java.lang.String Default: \"spec/spec.yaml\" The path to the OpenAPI specification file, relative to the project source directory (srcdir). OpenApiGatewayWebAclOptions Configuration for the Web ACL associated with the API. Initializer import software.aws.awsprototypingsdk.openapigateway.OpenApiGatewayWebAclOptions ; OpenApiGatewayWebAclOptions . builder () // .cidrAllowList(CidrAllowList) // .disable(java.lang.Boolean) // .managedRules(java.util.List<ManagedRule>) . build (); Properties Name Type Description cidrAllowList CidrAllowList List of cidr ranges to allow. disable java.lang.Boolean If set to true, no WebACL will be associated with the API. managedRules java.util.List< ManagedRule > List of managed rules to apply to the web acl. cidrAllowList Optional public CidrAllowList getCidrAllowList (); Type: CidrAllowList Default: undefined List of cidr ranges to allow. disable Optional public java . lang . Boolean getDisable (); Type: java.lang.Boolean Default: false If set to true, no WebACL will be associated with the API. You can also use this option if you would like to create your own WebACL and associate it yourself. managedRules Optional public java . util . List < ManagedRule > getManagedRules (); Type: java.util.List< ManagedRule > Default: [{ vendor: \"AWS\", name: \"AWSManagedRulesCommonRuleSet\" }] List of managed rules to apply to the web acl. OpenApiIntegration Defines an integration for an individual API operation. Initializer import software.aws.awsprototypingsdk.openapigateway.OpenApiIntegration ; OpenApiIntegration . builder () . integration ( Integration ) // .authorizer(Authorizer) . build (); Properties Name Type Description integration Integration The lambda function to service the api operation. authorizer Authorizer The authorizer to use for this api operation (overrides the default). integration Required public Integration getIntegration (); Type: Integration The lambda function to service the api operation. authorizer Optional public Authorizer getAuthorizer (); Type: Authorizer The authorizer to use for this api operation (overrides the default). OpenApiOptions Options required alongside an Open API specification to create API Gateway resources. Initializer import software.aws.awsprototypingsdk.openapigateway.OpenApiOptions ; OpenApiOptions . builder () . integrations ( java . util . Map < java . lang . String , OpenApiIntegration > ) . operationLookup ( java . util . Map < java . lang . String , MethodAndPath > ) // .corsOptions(CorsOptions) // .defaultAuthorizer(Authorizer) . build (); Properties Name Type Description integrations java.util.Map OpenApiIntegration\\ > A mapping of API operation to its integration. operationLookup java.util.Map MethodAndPath\\ > Details about each operation. corsOptions software.amazon.awscdk.services.apigateway.CorsOptions Cross Origin Resource Sharing options for the API. defaultAuthorizer Authorizer The default authorizer to use for your api. integrations Required public java . util . Map < java . lang . String , OpenApiIntegration > getIntegrations (); Type: java.util.Map OpenApiIntegration\\ > A mapping of API operation to its integration. operationLookup Required public java . util . Map < java . lang . String , MethodAndPath > getOperationLookup (); Type: java.util.Map MethodAndPath\\ > Details about each operation. corsOptions Optional public CorsOptions getCorsOptions (); Type: software.amazon.awscdk.services.apigateway.CorsOptions Cross Origin Resource Sharing options for the API. defaultAuthorizer Optional public Authorizer getDefaultAuthorizer (); Type: Authorizer The default authorizer to use for your api. When omitted, no default authorizer is used. Authorizers specified at the integration level will override this for that operation. SmithyApiGatewayJavaProjectOptions Configuration for the SmithyApiGatewayJavaProject. Initializer import software.aws.awsprototypingsdk.openapigateway.SmithyApiGatewayJavaProjectOptions ; SmithyApiGatewayJavaProjectOptions . builder () . name ( java . lang . String ) // .commitGenerated(java.lang.Boolean) // .gitOptions(GitOptions) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .renovatebot(java.lang.Boolean) // .renovatebotOptions(RenovatebotOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMerge(java.lang.Boolean) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenCredentials(GithubCredentials) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) . artifactId ( java . lang . String ) . groupId ( java . lang . String ) . version ( java . lang . String ) // .description(java.lang.String) // .packaging(java.lang.String) // .url(java.lang.String) // .compileOptions(MavenCompileOptions) // .deps(java.util.List<java.lang.String>) // .distdir(java.lang.String) // .junit(java.lang.Boolean) // .junitOptions(JunitOptions) // .packagingOptions(MavenPackagingOptions) // .projenrcJava(java.lang.Boolean) // .projenrcJavaOptions(ProjenrcOptions) // .testDeps(java.util.List<java.lang.String>) // .sample(java.lang.Boolean) // .sampleJavaPackage(java.lang.String) . clientLanguages ( java . util . List < ClientLanguage > ) // .apiSrcDir(java.lang.String) // .documentationFormats(java.util.List<DocumentationFormat>) // .forceGenerateCodeAndDocs(java.lang.Boolean) // .generatedCodeDir(java.lang.String) // .javaClientOptions(JavaProjectOptions) // .parsedSpecFileName(java.lang.String) // .pythonClientOptions(PythonProjectOptions) // .typescriptClientOptions(TypeScriptProjectOptions) . serviceName ( SmithyServiceName ) // .ignoreGradleWrapper(java.lang.Boolean) // .ignoreSmithyBuildOutput(java.lang.Boolean) // .modelDir(java.lang.String) // .smithyBuildOptions(SmithyBuildOptions) . build (); Properties Name Type Description name java.lang.String This is the name of your project. commitGenerated java.lang.Boolean Whether to commit the managed files by default. gitOptions io.github.cdklabs.projen.GitOptions Configuration options for git. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. renovatebot java.lang.Boolean Use renovatebot to handle dependency upgrades. renovatebotOptions io.github.cdklabs.projen.RenovatebotOptions Options for renovatebot. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge java.lang.Boolean Enable automatic merging on GitHub. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenCredentials io.github.cdklabs.projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. artifactId java.lang.String The artifactId is generally the name that the project is known by. groupId java.lang.String This is generally unique amongst an organization or a project. version java.lang.String This is the last piece of the naming puzzle. description java.lang.String Description of a project is always good. packaging java.lang.String Project packaging format. url java.lang.String The URL, like the name, is not required. compileOptions io.github.cdklabs.projen.java.MavenCompileOptions Compile options. deps java.util.List List of runtime dependencies for this project. distdir java.lang.String Final artifact output directory. junit java.lang.Boolean Include junit tests. junitOptions io.github.cdklabs.projen.java.JunitOptions junit options. packagingOptions io.github.cdklabs.projen.java.MavenPackagingOptions Packaging options. projenrcJava java.lang.Boolean Use projenrc in java. projenrcJavaOptions io.github.cdklabs.projen.java.ProjenrcOptions Options related to projenrc in java. testDeps java.util.List List of test dependencies for this project. sample java.lang.Boolean Include sample code and test if the relevant directories don't exist. sampleJavaPackage java.lang.String The java package to use for the code sample. clientLanguages java.util.List< ClientLanguage > The list of languages for which clients will be generated. apiSrcDir java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats java.util.List< DocumentationFormat > Formats to generate documentation in. forceGenerateCodeAndDocs java.lang.Boolean Force to generate code and docs even if there were no changes in spec. generatedCodeDir java.lang.String The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions io.github.cdklabs.projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsedSpecFileName java.lang.String The name of the output parsed OpenAPI specification file. pythonClientOptions io.github.cdklabs.projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). typescriptClientOptions io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. serviceName SmithyServiceName The name of the Smithy service from your model which will be targeted for deployment and client generation. ignoreGradleWrapper java.lang.Boolean Set to false if you would like to check in your gradle wrapper. ignoreSmithyBuildOutput java.lang.Boolean Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. modelDir java.lang.String The path to the Smithy model directory, relative to the project source directory (srcdir). smithyBuildOptions SmithyBuildOptions Any additional properties you'd like to add your smithy-build.json. The smithy-build.json will automatically include the \"openapi\" plugin, but you can add extra configuration for that via this option if you like. name Required public java . lang . String getName (); Type: java.lang.String Default: $BASEDIR This is the name of your project. commitGenerated Optional public java . lang . Boolean getCommitGenerated (); Type: java.lang.Boolean Default: true Whether to commit the managed files by default. gitOptions Optional public GitOptions getGitOptions (); Type: io.github.cdklabs.projen.GitOptions Configuration options for git. logging Optional public LoggerOptions getLogging (); Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public java . lang . String getOutdir (); Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public java . lang . String getProjenCommand (); Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public java . lang . Boolean getProjenrcJson (); Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public ProjenrcOptions getProjenrcJsonOptions (); Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional public java . lang . Boolean getRenovatebot (); Type: java.lang.Boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional public RenovatebotOptions getRenovatebotOptions (); Type: io.github.cdklabs.projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional public AutoApproveOptions getAutoApproveOptions (); Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional public java . lang . Boolean getAutoMerge (); Type: java.lang.Boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional public AutoMergeOptions getAutoMergeOptions (); Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional public java . lang . Boolean getClobber (); Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public java . lang . Boolean getDevContainer (); Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public java . lang . Boolean getGithub (); Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public GitHubOptions getGithubOptions (); Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public java . lang . Boolean getGitpod (); Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public java . lang . Boolean getMergify (); Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public MergifyOptions getMergifyOptions (); Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional public GithubCredentials getProjenCredentials (); Type: io.github.cdklabs.projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials public java . lang . String getProjenTokenSecret (); Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public SampleReadmeProps getReadme (); Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional public java . lang . Boolean getStale (); Type: java.lang.Boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public StaleOptions getStaleOptions (); Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public java . lang . Boolean getVscode (); Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. artifactId Required public java . lang . String getArtifactId (); Type: java.lang.String Default: \"my-app\" The artifactId is generally the name that the project is known by. Although the groupId is important, people within the group will rarely mention the groupId in discussion (they are often all be the same ID, such as the MojoHaus project groupId: org.codehaus.mojo). It, along with the groupId, creates a key that separates this project from every other project in the world (at least, it should :) ). Along with the groupId, the artifactId fully defines the artifact's living quarters within the repository. In the case of the above project, my-project lives in $M2_REPO/org/codehaus/mojo/my-project. groupId Required public java . lang . String getGroupId (); Type: java.lang.String Default: \"org.acme\" This is generally unique amongst an organization or a project. For example, all core Maven artifacts do (well, should) live under the groupId org.apache.maven. Group ID's do not necessarily use the dot notation, for example, the junit project. Note that the dot-notated groupId does not have to correspond to the package structure that the project contains. It is, however, a good practice to follow. When stored within a repository, the group acts much like the Java packaging structure does in an operating system. The dots are replaced by OS specific directory separators (such as '/' in Unix) which becomes a relative directory structure from the base repository. In the example given, the org.codehaus.mojo group lives within the directory $M2_REPO/org/codehaus/mojo. version Required public java . lang . String getVersion (); Type: java.lang.String Default: \"0.1.0\" This is the last piece of the naming puzzle. groupId:artifactId denotes a single project but they cannot delineate which incarnation of that project we are talking about. Do we want the junit:junit of 2018 (version 4.12), or of 2007 (version 3.8.2)? In short: code changes, those changes should be versioned, and this element keeps those versions in line. It is also used within an artifact's repository to separate versions from each other. my-project version 1.0 files live in the directory structure $M2_REPO/org/codehaus/mojo/my-project/1.0. description Optional public java . lang . String getDescription (); Type: java.lang.String Default: undefined Description of a project is always good. Although this should not replace formal documentation, a quick comment to any readers of the POM is always helpful. packaging Optional public java . lang . String getPackaging (); Type: java.lang.String Default: \"jar\" Project packaging format. url Optional public java . lang . String getUrl (); Type: java.lang.String Default: undefined The URL, like the name, is not required. This is a nice gesture for projects users, however, so that they know where the project lives. compileOptions Optional public MavenCompileOptions getCompileOptions (); Type: io.github.cdklabs.projen.java.MavenCompileOptions Default: defaults Compile options. deps Optional public java . util . List < java . lang . String > getDeps (); Type: java.util.List Default: [] List of runtime dependencies for this project. Dependencies use the format: <groupId>/<artifactId>@<semver> Additional dependencies can be added via project.addDependency() . distdir Optional public java . lang . String getDistdir (); Type: java.lang.String Default: \"dist/java\" Final artifact output directory. junit Optional public java . lang . Boolean getJunit (); Type: java.lang.Boolean Default: true Include junit tests. junitOptions Optional public JunitOptions getJunitOptions (); Type: io.github.cdklabs.projen.java.JunitOptions Default: defaults junit options. packagingOptions Optional public MavenPackagingOptions getPackagingOptions (); Type: io.github.cdklabs.projen.java.MavenPackagingOptions Default: defaults Packaging options. projenrcJava Optional public java . lang . Boolean getProjenrcJava (); Type: java.lang.Boolean Default: true Use projenrc in java. This will install projen as a java dependency and will add a synth task which will compile & execute main() from src/main/java/projenrc.java . projenrcJavaOptions Optional public ProjenrcOptions getProjenrcJavaOptions (); Type: io.github.cdklabs.projen.java.ProjenrcOptions Default: default options Options related to projenrc in java. testDeps Optional public java . util . List < java . lang . String > getTestDeps (); Type: java.util.List Default: [] List of test dependencies for this project. Dependencies use the format: <groupId>/<artifactId>@<semver> Additional dependencies can be added via project.addTestDependency() . sample Optional public java . lang . Boolean getSample (); Type: java.lang.Boolean Default: true Include sample code and test if the relevant directories don't exist. sampleJavaPackage Optional public java . lang . String getSampleJavaPackage (); Type: java.lang.String Default: \"org.acme\" The java package to use for the code sample. clientLanguages Required public java . util . List < ClientLanguage > getClientLanguages (); Type: java.util.List< ClientLanguage > The list of languages for which clients will be generated. A typescript client will always be generated. apiSrcDir Optional public java . lang . String getApiSrcDir (); Type: java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats Optional public java . util . List < DocumentationFormat > getDocumentationFormats (); Type: java.util.List< DocumentationFormat > Formats to generate documentation in. forceGenerateCodeAndDocs Optional public java . lang . Boolean getForceGenerateCodeAndDocs (); Type: java.lang.Boolean Default: \"false\" Force to generate code and docs even if there were no changes in spec. generatedCodeDir Optional public java . lang . String getGeneratedCodeDir (); Type: java.lang.String Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions Optional public JavaProjectOptions getJavaClientOptions (); Type: io.github.cdklabs.projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsedSpecFileName Optional public java . lang . String getParsedSpecFileName (); Type: java.lang.String Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. pythonClientOptions Optional public PythonProjectOptions getPythonClientOptions (); Type: io.github.cdklabs.projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. typescriptClientOptions Optional public TypeScriptProjectOptions getTypescriptClientOptions (); Type: io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. serviceName Required public SmithyServiceName getServiceName (); Type: SmithyServiceName Default: \"example.hello#Hello\" The name of the Smithy service from your model which will be targeted for deployment and client generation. On initial project synthesis this service name will be written to the sample \"hello world\" model. If you change this value after initial synthesis you will need to manually update your Smithy models to match, unless you delete the \"model\" directory. Likewise, if you change the namespace or service name in your Smithy models you will need to update this value to ensure your service can be found. ignoreGradleWrapper Optional public java . lang . Boolean getIgnoreGradleWrapper (); Type: java.lang.Boolean Default: true Set to false if you would like to check in your gradle wrapper. Do so if you would like to use a different version of gradle to the one provided by default ignoreSmithyBuildOutput Optional public java . lang . Boolean getIgnoreSmithyBuildOutput (); Type: java.lang.Boolean Default: true Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. modelDir Optional public java . lang . String getModelDir (); Type: java.lang.String Default: \"model\" The path to the Smithy model directory, relative to the project source directory (srcdir). smithyBuildOptions Optional public SmithyBuildOptions getSmithyBuildOptions (); Type: SmithyBuildOptions Any additional properties you'd like to add your smithy-build.json. The smithy-build.json will automatically include the \"openapi\" plugin, but you can add extra configuration for that via this option if you like. https://awslabs.github.io/smithy/2.0/guides/converting-to-openapi.html#openapi-configuration-settings SmithyApiGatewayProjectOptions Options common to all smithy api gateway projects. Initializer import software.aws.awsprototypingsdk.openapigateway.SmithyApiGatewayProjectOptions ; SmithyApiGatewayProjectOptions . builder () . clientLanguages ( java . util . List < ClientLanguage > ) // .apiSrcDir(java.lang.String) // .documentationFormats(java.util.List<DocumentationFormat>) // .forceGenerateCodeAndDocs(java.lang.Boolean) // .generatedCodeDir(java.lang.String) // .javaClientOptions(JavaProjectOptions) // .parsedSpecFileName(java.lang.String) // .pythonClientOptions(PythonProjectOptions) // .typescriptClientOptions(TypeScriptProjectOptions) . serviceName ( SmithyServiceName ) // .ignoreGradleWrapper(java.lang.Boolean) // .ignoreSmithyBuildOutput(java.lang.Boolean) // .modelDir(java.lang.String) // .smithyBuildOptions(SmithyBuildOptions) . build (); Properties Name Type Description clientLanguages java.util.List< ClientLanguage > The list of languages for which clients will be generated. apiSrcDir java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats java.util.List< DocumentationFormat > Formats to generate documentation in. forceGenerateCodeAndDocs java.lang.Boolean Force to generate code and docs even if there were no changes in spec. generatedCodeDir java.lang.String The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions io.github.cdklabs.projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsedSpecFileName java.lang.String The name of the output parsed OpenAPI specification file. pythonClientOptions io.github.cdklabs.projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). typescriptClientOptions io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. serviceName SmithyServiceName The name of the Smithy service from your model which will be targeted for deployment and client generation. ignoreGradleWrapper java.lang.Boolean Set to false if you would like to check in your gradle wrapper. ignoreSmithyBuildOutput java.lang.Boolean Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. modelDir java.lang.String The path to the Smithy model directory, relative to the project source directory (srcdir). smithyBuildOptions SmithyBuildOptions Any additional properties you'd like to add your smithy-build.json. The smithy-build.json will automatically include the \"openapi\" plugin, but you can add extra configuration for that via this option if you like. clientLanguages Required public java . util . List < ClientLanguage > getClientLanguages (); Type: java.util.List< ClientLanguage > The list of languages for which clients will be generated. A typescript client will always be generated. apiSrcDir Optional public java . lang . String getApiSrcDir (); Type: java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats Optional public java . util . List < DocumentationFormat > getDocumentationFormats (); Type: java.util.List< DocumentationFormat > Formats to generate documentation in. forceGenerateCodeAndDocs Optional public java . lang . Boolean getForceGenerateCodeAndDocs (); Type: java.lang.Boolean Default: \"false\" Force to generate code and docs even if there were no changes in spec. generatedCodeDir Optional public java . lang . String getGeneratedCodeDir (); Type: java.lang.String Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions Optional public JavaProjectOptions getJavaClientOptions (); Type: io.github.cdklabs.projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsedSpecFileName Optional public java . lang . String getParsedSpecFileName (); Type: java.lang.String Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. pythonClientOptions Optional public PythonProjectOptions getPythonClientOptions (); Type: io.github.cdklabs.projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. typescriptClientOptions Optional public TypeScriptProjectOptions getTypescriptClientOptions (); Type: io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. serviceName Required public SmithyServiceName getServiceName (); Type: SmithyServiceName Default: \"example.hello#Hello\" The name of the Smithy service from your model which will be targeted for deployment and client generation. On initial project synthesis this service name will be written to the sample \"hello world\" model. If you change this value after initial synthesis you will need to manually update your Smithy models to match, unless you delete the \"model\" directory. Likewise, if you change the namespace or service name in your Smithy models you will need to update this value to ensure your service can be found. ignoreGradleWrapper Optional public java . lang . Boolean getIgnoreGradleWrapper (); Type: java.lang.Boolean Default: true Set to false if you would like to check in your gradle wrapper. Do so if you would like to use a different version of gradle to the one provided by default ignoreSmithyBuildOutput Optional public java . lang . Boolean getIgnoreSmithyBuildOutput (); Type: java.lang.Boolean Default: true Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. modelDir Optional public java . lang . String getModelDir (); Type: java.lang.String Default: \"model\" The path to the Smithy model directory, relative to the project source directory (srcdir). smithyBuildOptions Optional public SmithyBuildOptions getSmithyBuildOptions (); Type: SmithyBuildOptions Any additional properties you'd like to add your smithy-build.json. The smithy-build.json will automatically include the \"openapi\" plugin, but you can add extra configuration for that via this option if you like. https://awslabs.github.io/smithy/2.0/guides/converting-to-openapi.html#openapi-configuration-settings SmithyApiGatewayPythonProjectOptions Configuration for the SmithyApiGatewayPythonProject. Initializer import software.aws.awsprototypingsdk.openapigateway.SmithyApiGatewayPythonProjectOptions ; SmithyApiGatewayPythonProjectOptions . builder () . name ( java . lang . String ) // .commitGenerated(java.lang.Boolean) // .gitOptions(GitOptions) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .renovatebot(java.lang.Boolean) // .renovatebotOptions(RenovatebotOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMerge(java.lang.Boolean) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenCredentials(GithubCredentials) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) . authorEmail ( java . lang . String ) . authorName ( java . lang . String ) . version ( java . lang . String ) // .classifiers(java.util.List<java.lang.String>) // .description(java.lang.String) // .homepage(java.lang.String) // .license(java.lang.String) // .packageName(java.lang.String) // .poetryOptions(PoetryPyprojectOptionsWithoutDeps) // .setupConfig(java.util.Map<java.lang.String, java.lang.Object>) . moduleName ( java . lang . String ) // .deps(java.util.List<java.lang.String>) // .devDeps(java.util.List<java.lang.String>) // .pip(java.lang.Boolean) // .poetry(java.lang.Boolean) // .projenrcJs(java.lang.Boolean) // .projenrcJsOptions(ProjenrcOptions) // .projenrcPython(java.lang.Boolean) // .projenrcPythonOptions(ProjenrcOptions) // .pytest(java.lang.Boolean) // .pytestOptions(PytestOptions) // .sample(java.lang.Boolean) // .setuptools(java.lang.Boolean) // .venv(java.lang.Boolean) // .venvOptions(VenvOptions) . clientLanguages ( java . util . List < ClientLanguage > ) // .apiSrcDir(java.lang.String) // .documentationFormats(java.util.List<DocumentationFormat>) // .forceGenerateCodeAndDocs(java.lang.Boolean) // .generatedCodeDir(java.lang.String) // .javaClientOptions(JavaProjectOptions) // .parsedSpecFileName(java.lang.String) // .pythonClientOptions(PythonProjectOptions) // .typescriptClientOptions(TypeScriptProjectOptions) . serviceName ( SmithyServiceName ) // .ignoreGradleWrapper(java.lang.Boolean) // .ignoreSmithyBuildOutput(java.lang.Boolean) // .modelDir(java.lang.String) // .smithyBuildOptions(SmithyBuildOptions) . build (); Properties Name Type Description name java.lang.String This is the name of your project. commitGenerated java.lang.Boolean Whether to commit the managed files by default. gitOptions io.github.cdklabs.projen.GitOptions Configuration options for git. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. renovatebot java.lang.Boolean Use renovatebot to handle dependency upgrades. renovatebotOptions io.github.cdklabs.projen.RenovatebotOptions Options for renovatebot. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge java.lang.Boolean Enable automatic merging on GitHub. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenCredentials io.github.cdklabs.projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. authorEmail java.lang.String Author's e-mail. authorName java.lang.String Author's name. version java.lang.String Version of the package. classifiers java.util.List A list of PyPI trove classifiers that describe the project. description java.lang.String A short description of the package. homepage java.lang.String A URL to the website of the project. license java.lang.String License of this package as an SPDX identifier. packageName java.lang.String Package name. poetryOptions io.github.cdklabs.projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setupConfig java.util.Map Additional fields to pass in the setup() function if using setuptools. moduleName java.lang.String Name of the python package as used in imports and filenames. deps java.util.List List of runtime dependencies for this project. devDeps java.util.List List of dev dependencies for this project. pip java.lang.Boolean Use pip with a requirements.txt file to track project dependencies. poetry java.lang.Boolean Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrcJs java.lang.Boolean Use projenrc in javascript. projenrcJsOptions io.github.cdklabs.projen.javascript.ProjenrcOptions Options related to projenrc in JavaScript. projenrcPython java.lang.Boolean Use projenrc in Python. projenrcPythonOptions io.github.cdklabs.projen.python.ProjenrcOptions Options related to projenrc in python. pytest java.lang.Boolean Include pytest tests. pytestOptions io.github.cdklabs.projen.python.PytestOptions pytest options. sample java.lang.Boolean Include sample code and test if the relevant directories don't exist. setuptools java.lang.Boolean Use setuptools with a setup.py script for packaging and publishing. venv java.lang.Boolean Use venv to manage a virtual environment for installing dependencies inside. venvOptions io.github.cdklabs.projen.python.VenvOptions Venv options. clientLanguages java.util.List< ClientLanguage > The list of languages for which clients will be generated. apiSrcDir java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats java.util.List< DocumentationFormat > Formats to generate documentation in. forceGenerateCodeAndDocs java.lang.Boolean Force to generate code and docs even if there were no changes in spec. generatedCodeDir java.lang.String The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions io.github.cdklabs.projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsedSpecFileName java.lang.String The name of the output parsed OpenAPI specification file. pythonClientOptions io.github.cdklabs.projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). typescriptClientOptions io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. serviceName SmithyServiceName The name of the Smithy service from your model which will be targeted for deployment and client generation. ignoreGradleWrapper java.lang.Boolean Set to false if you would like to check in your gradle wrapper. ignoreSmithyBuildOutput java.lang.Boolean Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. modelDir java.lang.String The path to the Smithy model directory, relative to the project source directory (srcdir). smithyBuildOptions SmithyBuildOptions Any additional properties you'd like to add your smithy-build.json. The smithy-build.json will automatically include the \"openapi\" plugin, but you can add extra configuration for that via this option if you like. name Required public java . lang . String getName (); Type: java.lang.String Default: $BASEDIR This is the name of your project. commitGenerated Optional public java . lang . Boolean getCommitGenerated (); Type: java.lang.Boolean Default: true Whether to commit the managed files by default. gitOptions Optional public GitOptions getGitOptions (); Type: io.github.cdklabs.projen.GitOptions Configuration options for git. logging Optional public LoggerOptions getLogging (); Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public java . lang . String getOutdir (); Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public java . lang . String getProjenCommand (); Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public java . lang . Boolean getProjenrcJson (); Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public ProjenrcOptions getProjenrcJsonOptions (); Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional public java . lang . Boolean getRenovatebot (); Type: java.lang.Boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional public RenovatebotOptions getRenovatebotOptions (); Type: io.github.cdklabs.projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional public AutoApproveOptions getAutoApproveOptions (); Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional public java . lang . Boolean getAutoMerge (); Type: java.lang.Boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional public AutoMergeOptions getAutoMergeOptions (); Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional public java . lang . Boolean getClobber (); Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public java . lang . Boolean getDevContainer (); Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public java . lang . Boolean getGithub (); Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public GitHubOptions getGithubOptions (); Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public java . lang . Boolean getGitpod (); Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public java . lang . Boolean getMergify (); Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public MergifyOptions getMergifyOptions (); Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional public GithubCredentials getProjenCredentials (); Type: io.github.cdklabs.projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials public java . lang . String getProjenTokenSecret (); Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public SampleReadmeProps getReadme (); Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional public java . lang . Boolean getStale (); Type: java.lang.Boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public StaleOptions getStaleOptions (); Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public java . lang . Boolean getVscode (); Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. authorEmail Required public java . lang . String getAuthorEmail (); Type: java.lang.String Default: $GIT_USER_EMAIL Author's e-mail. authorName Required public java . lang . String getAuthorName (); Type: java.lang.String Default: $GIT_USER_NAME Author's name. version Required public java . lang . String getVersion (); Type: java.lang.String Default: \"0.1.0\" Version of the package. classifiers Optional public java . util . List < java . lang . String > getClassifiers (); Type: java.util.List A list of PyPI trove classifiers that describe the project. https://pypi.org/classifiers/ description Optional public java . lang . String getDescription (); Type: java.lang.String A short description of the package. homepage Optional public java . lang . String getHomepage (); Type: java.lang.String A URL to the website of the project. license Optional public java . lang . String getLicense (); Type: java.lang.String License of this package as an SPDX identifier. packageName Optional public java . lang . String getPackageName (); Type: java.lang.String Package name. poetryOptions Optional public PoetryPyprojectOptionsWithoutDeps getPoetryOptions (); Type: io.github.cdklabs.projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setupConfig Optional public java . util . Map < java . lang . String , java . lang . Object > getSetupConfig (); Type: java.util.Map Additional fields to pass in the setup() function if using setuptools. moduleName Required public java . lang . String getModuleName (); Type: java.lang.String Default: $PYTHON_MODULE_NAME Name of the python package as used in imports and filenames. Must only consist of alphanumeric characters and underscores. deps Optional public java . util . List < java . lang . String > getDeps (); Type: java.util.List Default: [] List of runtime dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDependency() . devDeps Optional public java . util . List < java . lang . String > getDevDeps (); Type: java.util.List Default: [] List of dev dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDevDependency() . pip Optional public java . lang . Boolean getPip (); Type: java.lang.Boolean Default: true, unless poetry is true, then false Use pip with a requirements.txt file to track project dependencies. poetry Optional public java . lang . Boolean getPoetry (); Type: java.lang.Boolean Default: false Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. This feature is incompatible with pip, setuptools, or venv. If you set this option to true , then pip, setuptools, and venv must be set to false . projenrcJs Optional public java . lang . Boolean getProjenrcJs (); Type: java.lang.Boolean Default: false Use projenrc in javascript. This will install projen as a JavaScript dependency and add a synth task which will run .projenrc.js . projenrcJsOptions Optional public ProjenrcOptions getProjenrcJsOptions (); Type: io.github.cdklabs.projen.javascript.ProjenrcOptions Default: default options Options related to projenrc in JavaScript. projenrcPython Optional public java . lang . Boolean getProjenrcPython (); Type: java.lang.Boolean Default: true Use projenrc in Python. This will install projen as a Python dependency and add a synth task which will run .projenrc.py . projenrcPythonOptions Optional public ProjenrcOptions getProjenrcPythonOptions (); Type: io.github.cdklabs.projen.python.ProjenrcOptions Default: default options Options related to projenrc in python. pytest Optional public java . lang . Boolean getPytest (); Type: java.lang.Boolean Default: true Include pytest tests. pytestOptions Optional public PytestOptions getPytestOptions (); Type: io.github.cdklabs.projen.python.PytestOptions Default: defaults pytest options. sample Optional public java . lang . Boolean getSample (); Type: java.lang.Boolean Default: true Include sample code and test if the relevant directories don't exist. setuptools Optional public java . lang . Boolean getSetuptools (); Type: java.lang.Boolean Default: true, unless poetry is true, then false Use setuptools with a setup.py script for packaging and publishing. venv Optional public java . lang . Boolean getVenv (); Type: java.lang.Boolean Default: true, unless poetry is true, then false Use venv to manage a virtual environment for installing dependencies inside. venvOptions Optional public VenvOptions getVenvOptions (); Type: io.github.cdklabs.projen.python.VenvOptions Default: defaults Venv options. clientLanguages Required public java . util . List < ClientLanguage > getClientLanguages (); Type: java.util.List< ClientLanguage > The list of languages for which clients will be generated. A typescript client will always be generated. apiSrcDir Optional public java . lang . String getApiSrcDir (); Type: java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats Optional public java . util . List < DocumentationFormat > getDocumentationFormats (); Type: java.util.List< DocumentationFormat > Formats to generate documentation in. forceGenerateCodeAndDocs Optional public java . lang . Boolean getForceGenerateCodeAndDocs (); Type: java.lang.Boolean Default: \"false\" Force to generate code and docs even if there were no changes in spec. generatedCodeDir Optional public java . lang . String getGeneratedCodeDir (); Type: java.lang.String Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions Optional public JavaProjectOptions getJavaClientOptions (); Type: io.github.cdklabs.projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsedSpecFileName Optional public java . lang . String getParsedSpecFileName (); Type: java.lang.String Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. pythonClientOptions Optional public PythonProjectOptions getPythonClientOptions (); Type: io.github.cdklabs.projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. typescriptClientOptions Optional public TypeScriptProjectOptions getTypescriptClientOptions (); Type: io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. serviceName Required public SmithyServiceName getServiceName (); Type: SmithyServiceName Default: \"example.hello#Hello\" The name of the Smithy service from your model which will be targeted for deployment and client generation. On initial project synthesis this service name will be written to the sample \"hello world\" model. If you change this value after initial synthesis you will need to manually update your Smithy models to match, unless you delete the \"model\" directory. Likewise, if you change the namespace or service name in your Smithy models you will need to update this value to ensure your service can be found. ignoreGradleWrapper Optional public java . lang . Boolean getIgnoreGradleWrapper (); Type: java.lang.Boolean Default: true Set to false if you would like to check in your gradle wrapper. Do so if you would like to use a different version of gradle to the one provided by default ignoreSmithyBuildOutput Optional public java . lang . Boolean getIgnoreSmithyBuildOutput (); Type: java.lang.Boolean Default: true Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. modelDir Optional public java . lang . String getModelDir (); Type: java.lang.String Default: \"model\" The path to the Smithy model directory, relative to the project source directory (srcdir). smithyBuildOptions Optional public SmithyBuildOptions getSmithyBuildOptions (); Type: SmithyBuildOptions Any additional properties you'd like to add your smithy-build.json. The smithy-build.json will automatically include the \"openapi\" plugin, but you can add extra configuration for that via this option if you like. https://awslabs.github.io/smithy/2.0/guides/converting-to-openapi.html#openapi-configuration-settings SmithyApiGatewayTsProjectOptions Configuration for the SmithyApiGatewayTsProject. Initializer import software.aws.awsprototypingsdk.openapigateway.SmithyApiGatewayTsProjectOptions ; SmithyApiGatewayTsProjectOptions . builder () . name ( java . lang . String ) // .commitGenerated(java.lang.Boolean) // .gitOptions(GitOptions) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .renovatebot(java.lang.Boolean) // .renovatebotOptions(RenovatebotOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMerge(java.lang.Boolean) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenCredentials(GithubCredentials) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) // .allowLibraryDependencies(java.lang.Boolean) // .authorEmail(java.lang.String) // .authorName(java.lang.String) // .authorOrganization(java.lang.Boolean) // .authorUrl(java.lang.String) // .autoDetectBin(java.lang.Boolean) // .bin(java.util.Map<java.lang.String, java.lang.String>) // .bugsEmail(java.lang.String) // .bugsUrl(java.lang.String) // .bundledDeps(java.util.List<java.lang.String>) // .codeArtifactOptions(CodeArtifactOptions) // .deps(java.util.List<java.lang.String>) // .description(java.lang.String) // .devDeps(java.util.List<java.lang.String>) // .entrypoint(java.lang.String) // .homepage(java.lang.String) // .keywords(java.util.List<java.lang.String>) // .license(java.lang.String) // .licensed(java.lang.Boolean) // .maxNodeVersion(java.lang.String) // .minNodeVersion(java.lang.String) // .npmAccess(NpmAccess) // .npmRegistry(java.lang.String) // .npmRegistryUrl(java.lang.String) // .npmTokenSecret(java.lang.String) // .packageManager(NodePackageManager) // .packageName(java.lang.String) // .peerDependencyOptions(PeerDependencyOptions) // .peerDeps(java.util.List<java.lang.String>) // .pnpmVersion(java.lang.String) // .repository(java.lang.String) // .repositoryDirectory(java.lang.String) // .scopedPackagesOptions(java.util.List<ScopedPackagesOptions>) // .scripts(java.util.Map<java.lang.String, java.lang.String>) // .stability(java.lang.String) // .jsiiReleaseVersion(java.lang.String) // .majorVersion(java.lang.Number) // .minMajorVersion(java.lang.Number) // .npmDistTag(java.lang.String) // .postBuildSteps(java.util.List<JobStep>) // .prerelease(java.lang.String) // .publishDryRun(java.lang.Boolean) // .publishTasks(java.lang.Boolean) // .releaseBranches(java.util.Map<java.lang.String, BranchOptions>) // .releaseEveryCommit(java.lang.Boolean) // .releaseFailureIssue(java.lang.Boolean) // .releaseFailureIssueLabel(java.lang.String) // .releaseSchedule(java.lang.String) // .releaseTagPrefix(java.lang.String) // .releaseTrigger(ReleaseTrigger) // .releaseWorkflowName(java.lang.String) // .releaseWorkflowSetupSteps(java.util.List<JobStep>) // .versionrcOptions(java.util.Map<java.lang.String, java.lang.Object>) // .workflowContainerImage(java.lang.String) // .workflowRunsOn(java.util.List<java.lang.String>) . defaultReleaseBranch ( java . lang . String ) // .artifactsDirectory(java.lang.String) // .autoApproveUpgrades(java.lang.Boolean) // .buildWorkflow(java.lang.Boolean) // .buildWorkflowTriggers(Triggers) // .bundlerOptions(BundlerOptions) // .codeCov(java.lang.Boolean) // .codeCovTokenSecret(java.lang.String) // .copyrightOwner(java.lang.String) // .copyrightPeriod(java.lang.String) // .dependabot(java.lang.Boolean) // .dependabotOptions(DependabotOptions) // .depsUpgrade(java.lang.Boolean) // .depsUpgradeOptions(UpgradeDependenciesOptions) // .gitignore(java.util.List<java.lang.String>) // .jest(java.lang.Boolean) // .jestOptions(JestOptions) // .mutableBuild(java.lang.Boolean) // .npmignore(java.util.List<java.lang.String>) // .npmignoreEnabled(java.lang.Boolean) // .package(java.lang.Boolean) // .prettier(java.lang.Boolean) // .prettierOptions(PrettierOptions) // .projenDevDependency(java.lang.Boolean) // .projenrcJs(java.lang.Boolean) // .projenrcJsOptions(ProjenrcOptions) // .projenVersion(java.lang.String) // .pullRequestTemplate(java.lang.Boolean) // .pullRequestTemplateContents(java.util.List<java.lang.String>) // .release(java.lang.Boolean) // .releaseToNpm(java.lang.Boolean) // .releaseWorkflow(java.lang.Boolean) // .workflowBootstrapSteps(java.util.List<JobStep>) // .workflowGitIdentity(GitIdentity) // .workflowNodeVersion(java.lang.String) // .disableTsconfig(java.lang.Boolean) // .docgen(java.lang.Boolean) // .docsDirectory(java.lang.String) // .entrypointTypes(java.lang.String) // .eslint(java.lang.Boolean) // .eslintOptions(EslintOptions) // .libdir(java.lang.String) // .projenrcTs(java.lang.Boolean) // .projenrcTsOptions(ProjenrcOptions) // .sampleCode(java.lang.Boolean) // .srcdir(java.lang.String) // .testdir(java.lang.String) // .tsconfig(TypescriptConfigOptions) // .tsconfigDev(TypescriptConfigOptions) // .tsconfigDevFile(java.lang.String) // .typescriptVersion(java.lang.String) . clientLanguages ( java . util . List < ClientLanguage > ) // .apiSrcDir(java.lang.String) // .documentationFormats(java.util.List<DocumentationFormat>) // .forceGenerateCodeAndDocs(java.lang.Boolean) // .generatedCodeDir(java.lang.String) // .javaClientOptions(JavaProjectOptions) // .parsedSpecFileName(java.lang.String) // .pythonClientOptions(PythonProjectOptions) // .typescriptClientOptions(TypeScriptProjectOptions) . serviceName ( SmithyServiceName ) // .ignoreGradleWrapper(java.lang.Boolean) // .ignoreSmithyBuildOutput(java.lang.Boolean) // .modelDir(java.lang.String) // .smithyBuildOptions(SmithyBuildOptions) . build (); Properties Name Type Description name java.lang.String This is the name of your project. commitGenerated java.lang.Boolean Whether to commit the managed files by default. gitOptions io.github.cdklabs.projen.GitOptions Configuration options for git. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. renovatebot java.lang.Boolean Use renovatebot to handle dependency upgrades. renovatebotOptions io.github.cdklabs.projen.RenovatebotOptions Options for renovatebot. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge java.lang.Boolean Enable automatic merging on GitHub. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenCredentials io.github.cdklabs.projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. allowLibraryDependencies java.lang.Boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail java.lang.String Author's e-mail. authorName java.lang.String Author's name. authorOrganization java.lang.Boolean Is the author an organization. authorUrl java.lang.String Author's URL / Website. autoDetectBin java.lang.Boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin java.util.Map Binary programs vended with your module. bugsEmail java.lang.String The email address to which issues should be reported. bugsUrl java.lang.String The url to your project's issue tracker. bundledDeps java.util.List List of dependencies to bundle into this module. codeArtifactOptions io.github.cdklabs.projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps java.util.List Runtime dependencies of this module. description java.lang.String The description is just a string that helps people understand the purpose of the package. devDeps java.util.List Build dependencies for this module. entrypoint java.lang.String Module entrypoint ( main in package.json ). homepage java.lang.String Package's Homepage / Website. keywords java.util.List Keywords to include in package.json . license java.lang.String License's SPDX identifier. licensed java.lang.Boolean Indicates if a license should be added. maxNodeVersion java.lang.String Minimum node.js version to require via engines (inclusive). minNodeVersion java.lang.String Minimum Node.js version to require via package.json engines (inclusive). npmAccess io.github.cdklabs.projen.javascript.NpmAccess Access level of the npm package. npmRegistry java.lang.String The host name of the npm registry to publish to. npmRegistryUrl java.lang.String The base URL of the npm package registry. npmTokenSecret java.lang.String GitHub secret which contains the NPM token to use when publishing packages. packageManager io.github.cdklabs.projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName java.lang.String The \"name\" in package.json. peerDependencyOptions io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps java.util.List Peer dependencies for this module. pnpmVersion java.lang.String The version of PNPM to use if using PNPM as a package manager. repository java.lang.String The repository is the location where the actual code for your package lives. repositoryDirectory java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions java.util.List Options for privately hosted scoped packages. scripts java.util.Map npm scripts to include. stability java.lang.String Package's Stability. jsiiReleaseVersion java.lang.String Version requirement of publib which is used to publish modules to npm. majorVersion java.lang.Number Major version to release from the default branch. minMajorVersion java.lang.Number Minimal Major version to release. npmDistTag java.lang.String The npmDistTag to use when publishing from the default branch. postBuildSteps java.util.List Steps to execute after build as part of the release workflow. prerelease java.lang.String Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun java.lang.Boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks java.lang.Boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches java.util.Map Defines additional release branches. releaseEveryCommit java.lang.Boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue java.lang.Boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel java.lang.String The label to apply to issues indicating publish failures. releaseSchedule java.lang.String CRON schedule to trigger new releases. releaseTagPrefix java.lang.String Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger io.github.cdklabs.projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName java.lang.String The name of the default release workflow. releaseWorkflowSetupSteps java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions java.util.Map Custom configuration used when creating changelog with standard-version package. workflowContainerImage java.lang.String Container image to use for GitHub workflows. workflowRunsOn java.util.List Github Runner selection labels. defaultReleaseBranch java.lang.String The name of the main release branch. artifactsDirectory java.lang.String A directory which will contain build artifacts. autoApproveUpgrades java.lang.Boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow java.lang.Boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers io.github.cdklabs.projen.github.workflows.Triggers Build workflow triggers. bundlerOptions io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov java.lang.Boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret java.lang.String Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner java.lang.String License copyright owner. copyrightPeriod java.lang.String The copyright years to put in the LICENSE file. dependabot java.lang.Boolean Use dependabot to handle dependency upgrades. dependabotOptions io.github.cdklabs.projen.github.DependabotOptions Options for dependabot. depsUpgrade java.lang.Boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore java.util.List Additional entries to .gitignore. jest java.lang.Boolean Setup jest unit tests. jestOptions io.github.cdklabs.projen.javascript.JestOptions Jest options. mutableBuild java.lang.Boolean Automatically update files modified during builds to pull-request branches. npmignore java.util.List Additional entries to .npmignore. npmignoreEnabled java.lang.Boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package java.lang.Boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier java.lang.Boolean Setup prettier. prettierOptions io.github.cdklabs.projen.javascript.PrettierOptions Prettier options. projenDevDependency java.lang.Boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs java.lang.Boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions io.github.cdklabs.projen.javascript.ProjenrcOptions Options for .projenrc.js. projenVersion java.lang.String Version of projen to install. pullRequestTemplate java.lang.Boolean Include a GitHub pull request template. pullRequestTemplateContents java.util.List The contents of the pull request template. release java.lang.Boolean Add release management to this project. releaseToNpm java.lang.Boolean Automatically release to npm when new versions are introduced. releaseWorkflow java.lang.Boolean DEPRECATED: renamed to release . workflowBootstrapSteps java.util.List Workflow steps to use in order to bootstrap this repo. workflowGitIdentity io.github.cdklabs.projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion java.lang.String The node version to use in GitHub workflows. disableTsconfig java.lang.Boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen java.lang.Boolean Docgen by Typedoc. docsDirectory java.lang.String Docs directory. entrypointTypes java.lang.String The .d.ts file that includes the type declarations for this module. eslint java.lang.Boolean Setup eslint. eslintOptions io.github.cdklabs.projen.javascript.EslintOptions Eslint options. libdir java.lang.String Typescript artifacts output directory. projenrcTs java.lang.Boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode java.lang.Boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir java.lang.String Typescript sources directory. testdir java.lang.String Jest tests directory. Tests files should be named xxx.test.ts . tsconfig io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile java.lang.String The name of the development tsconfig.json file. typescriptVersion java.lang.String TypeScript version to use. clientLanguages java.util.List< ClientLanguage > The list of languages for which clients will be generated. apiSrcDir java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats java.util.List< DocumentationFormat > Formats to generate documentation in. forceGenerateCodeAndDocs java.lang.Boolean Force to generate code and docs even if there were no changes in spec. generatedCodeDir java.lang.String The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions io.github.cdklabs.projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsedSpecFileName java.lang.String The name of the output parsed OpenAPI specification file. pythonClientOptions io.github.cdklabs.projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). typescriptClientOptions io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. serviceName SmithyServiceName The name of the Smithy service from your model which will be targeted for deployment and client generation. ignoreGradleWrapper java.lang.Boolean Set to false if you would like to check in your gradle wrapper. ignoreSmithyBuildOutput java.lang.Boolean Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. modelDir java.lang.String The path to the Smithy model directory, relative to the project source directory (srcdir). smithyBuildOptions SmithyBuildOptions Any additional properties you'd like to add your smithy-build.json. The smithy-build.json will automatically include the \"openapi\" plugin, but you can add extra configuration for that via this option if you like. name Required public java . lang . String getName (); Type: java.lang.String Default: $BASEDIR This is the name of your project. commitGenerated Optional public java . lang . Boolean getCommitGenerated (); Type: java.lang.Boolean Default: true Whether to commit the managed files by default. gitOptions Optional public GitOptions getGitOptions (); Type: io.github.cdklabs.projen.GitOptions Configuration options for git. logging Optional public LoggerOptions getLogging (); Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public java . lang . String getOutdir (); Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public java . lang . String getProjenCommand (); Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public java . lang . Boolean getProjenrcJson (); Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public ProjenrcOptions getProjenrcJsonOptions (); Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional public java . lang . Boolean getRenovatebot (); Type: java.lang.Boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional public RenovatebotOptions getRenovatebotOptions (); Type: io.github.cdklabs.projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional public AutoApproveOptions getAutoApproveOptions (); Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional public java . lang . Boolean getAutoMerge (); Type: java.lang.Boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional public AutoMergeOptions getAutoMergeOptions (); Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional public java . lang . Boolean getClobber (); Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public java . lang . Boolean getDevContainer (); Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public java . lang . Boolean getGithub (); Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public GitHubOptions getGithubOptions (); Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public java . lang . Boolean getGitpod (); Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public java . lang . Boolean getMergify (); Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public MergifyOptions getMergifyOptions (); Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional public GithubCredentials getProjenCredentials (); Type: io.github.cdklabs.projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials public java . lang . String getProjenTokenSecret (); Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public SampleReadmeProps getReadme (); Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional public java . lang . Boolean getStale (); Type: java.lang.Boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public StaleOptions getStaleOptions (); Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public java . lang . Boolean getVscode (); Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allowLibraryDependencies Optional public java . lang . Boolean getAllowLibraryDependencies (); Type: java.lang.Boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. authorEmail Optional public java . lang . String getAuthorEmail (); Type: java.lang.String Author's e-mail. authorName Optional public java . lang . String getAuthorName (); Type: java.lang.String Author's name. authorOrganization Optional public java . lang . Boolean getAuthorOrganization (); Type: java.lang.Boolean Is the author an organization. authorUrl Optional public java . lang . String getAuthorUrl (); Type: java.lang.String Author's URL / Website. autoDetectBin Optional public java . lang . Boolean getAutoDetectBin (); Type: java.lang.Boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional public java . util . Map < java . lang . String , java . lang . String > getBin (); Type: java.util.Map Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugsEmail Optional public java . lang . String getBugsEmail (); Type: java.lang.String The email address to which issues should be reported. bugsUrl Optional public java . lang . String getBugsUrl (); Type: java.lang.String The url to your project's issue tracker. bundledDeps Optional public java . util . List < java . lang . String > getBundledDeps (); Type: java.util.List List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. codeArtifactOptions Optional public CodeArtifactOptions getCodeArtifactOptions (); Type: io.github.cdklabs.projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional public java . util . List < java . lang . String > getDeps (); Type: java.util.List Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ ' express ' , ' lodash ' , ' foo @ ^ 2 ' ] description Optional public java . lang . String getDescription (); Type: java.lang.String The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description devDeps Optional public java . util . List < java . lang . String > getDevDeps (); Type: java.util.List Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ ' typescript ' , ' @types / express ' ] entrypoint Optional public java . lang . String getEntrypoint (); Type: java.lang.String Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional public java . lang . String getHomepage (); Type: java.lang.String Package's Homepage / Website. keywords Optional public java . util . List < java . lang . String > getKeywords (); Type: java.util.List Keywords to include in package.json . license Optional public java . lang . String getLicense (); Type: java.lang.String Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional public java . lang . Boolean getLicensed (); Type: java.lang.Boolean Default: true Indicates if a license should be added. maxNodeVersion Optional public java . lang . String getMaxNodeVersion (); Type: java.lang.String Default: no max Minimum node.js version to require via engines (inclusive). minNodeVersion Optional public java . lang . String getMinNodeVersion (); Type: java.lang.String Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npmAccess Optional public NpmAccess getNpmAccess (); Type: io.github.cdklabs.projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npmRegistry ~~ Optional Deprecated: use npmRegistryUrl instead public java . lang . String getNpmRegistry (); Type: java.lang.String The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npmRegistryUrl Optional public java . lang . String getNpmRegistryUrl (); Type: java.lang.String Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npmTokenSecret Optional public java . lang . String getNpmTokenSecret (); Type: java.lang.String Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. packageManager Optional public NodePackageManager getPackageManager (); Type: io.github.cdklabs.projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. packageName Optional public java . lang . String getPackageName (); Type: java.lang.String Default: defaults to project name The \"name\" in package.json. peerDependencyOptions Optional public PeerDependencyOptions getPeerDependencyOptions (); Type: io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps Optional public java . util . List < java . lang . String > getPeerDeps (); Type: java.util.List Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. pnpmVersion Optional public java . lang . String getPnpmVersion (); Type: java.lang.String Default: \"7\" The version of PNPM to use if using PNPM as a package manager. repository Optional public java . lang . String getRepository (); Type: java.lang.String The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repositoryDirectory Optional public java . lang . String getRepositoryDirectory (); Type: java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions Optional public java . util . List < ScopedPackagesOptions > getScopedPackagesOptions (); Type: java.util.List Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional public java . util . Map < java . lang . String , java . lang . String > getScripts (); Type: java.util.Map Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional public java . lang . String getStability (); Type: java.lang.String Package's Stability. jsiiReleaseVersion Optional public java . lang . String getJsiiReleaseVersion (); Type: java.lang.String Default: \"latest\" Version requirement of publib which is used to publish modules to npm. majorVersion Optional public java . lang . Number getMajorVersion (); Type: java.lang.Number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. minMajorVersion Optional public java . lang . Number getMinMajorVersion (); Type: java.lang.Number Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npmDistTag Optional public java . lang . String getNpmDistTag (); Type: java.lang.String Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. postBuildSteps Optional public java . util . List < JobStep > getPostBuildSteps (); Type: java.util.List Default: [] Steps to execute after build as part of the release workflow. prerelease Optional public java . lang . String getPrerelease (); Type: java.lang.String Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun Optional public java . lang . Boolean getPublishDryRun (); Type: java.lang.Boolean Default: false Instead of actually publishing to package managers, just print the publishing command. publishTasks Optional public java . lang . Boolean getPublishTasks (); Type: java.lang.Boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. releaseBranches Optional public java . util . Map < java . lang . String , BranchOptions > getReleaseBranches (); Type: java.util.Map Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ releaseEveryCommit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead public java . lang . Boolean getReleaseEveryCommit (); Type: java.lang.Boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue Optional public java . lang . Boolean getReleaseFailureIssue (); Type: java.lang.Boolean Default: false Create a github issue on every failed publishing task. releaseFailureIssueLabel Optional public java . lang . String getReleaseFailureIssueLabel (); Type: java.lang.String Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ releaseSchedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead public java . lang . String getReleaseSchedule (); Type: java.lang.String Default: no scheduled releases CRON schedule to trigger new releases. releaseTagPrefix Optional public java . lang . String getReleaseTagPrefix (); Type: java.lang.String Default: \"v\" Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. releaseTrigger Optional public ReleaseTrigger getReleaseTrigger (); Type: io.github.cdklabs.projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. releaseWorkflowName Optional public java . lang . String getReleaseWorkflowName (); Type: java.lang.String Default: \"Release\" The name of the default release workflow. releaseWorkflowSetupSteps Optional public java . util . List < JobStep > getReleaseWorkflowSetupSteps (); Type: java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions Optional public java . util . Map < java . lang . String , java . lang . Object > getVersionrcOptions (); Type: java.util.Map Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflowContainerImage Optional public java . lang . String getWorkflowContainerImage (); Type: java.lang.String Default: default image Container image to use for GitHub workflows. workflowRunsOn Optional public java . util . List < java . lang . String > getWorkflowRunsOn (); Type: java.util.List Default: [\"ubuntu-latest\"] Github Runner selection labels. defaultReleaseBranch Required public java . lang . String getDefaultReleaseBranch (); Type: java.lang.String Default: \"main\" The name of the main release branch. artifactsDirectory Optional public java . lang . String getArtifactsDirectory (); Type: java.lang.String Default: \"dist\" A directory which will contain build artifacts. autoApproveUpgrades Optional public java . lang . Boolean getAutoApproveUpgrades (); Type: java.lang.Boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. buildWorkflow Optional public java . lang . Boolean getBuildWorkflow (); Type: java.lang.Boolean Default: true if not a subproject Define a GitHub workflow for building PRs. buildWorkflowTriggers Optional public Triggers getBuildWorkflowTriggers (); Type: io.github.cdklabs.projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundlerOptions Optional public BundlerOptions getBundlerOptions (); Type: io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov Optional public java . lang . Boolean getCodeCov (); Type: java.lang.Boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret Optional public java . lang . String getCodeCovTokenSecret (); Type: java.lang.String Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner Optional public java . lang . String getCopyrightOwner (); Type: java.lang.String Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyrightPeriod Optional public java . lang . String getCopyrightPeriod (); Type: java.lang.String Default: current year The copyright years to put in the LICENSE file. dependabot Optional public java . lang . Boolean getDependabot (); Type: java.lang.Boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabotOptions Optional public DependabotOptions getDependabotOptions (); Type: io.github.cdklabs.projen.github.DependabotOptions Default: default options Options for dependabot. depsUpgrade Optional public java . lang . Boolean getDepsUpgrade (); Type: java.lang.Boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . depsUpgradeOptions Optional public UpgradeDependenciesOptions getDepsUpgradeOptions (); Type: io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional public java . util . List < java . lang . String > getGitignore (); Type: java.util.List Additional entries to .gitignore. jest Optional public java . lang . Boolean getJest (); Type: java.lang.Boolean Default: true Setup jest unit tests. jestOptions Optional public JestOptions getJestOptions (); Type: io.github.cdklabs.projen.javascript.JestOptions Default: default options Jest options. mutableBuild Optional public java . lang . Boolean getMutableBuild (); Type: java.lang.Boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore public java . util . List < java . lang . String > getNpmignore (); Type: java.util.List Additional entries to .npmignore. npmignoreEnabled Optional public java . lang . Boolean getNpmignoreEnabled (); Type: java.lang.Boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional public java . lang . Boolean getPackage (); Type: java.lang.Boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional public java . lang . Boolean getPrettier (); Type: java.lang.Boolean Default: false Setup prettier. prettierOptions Optional public PrettierOptions getPrettierOptions (); Type: io.github.cdklabs.projen.javascript.PrettierOptions Default: default options Prettier options. projenDevDependency Optional public java . lang . Boolean getProjenDevDependency (); Type: java.lang.Boolean Default: true Indicates of \"projen\" should be installed as a devDependency. projenrcJs Optional public java . lang . Boolean getProjenrcJs (); Type: java.lang.Boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions Optional public ProjenrcOptions getProjenrcJsOptions (); Type: io.github.cdklabs.projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projenVersion Optional public java . lang . String getProjenVersion (); Type: java.lang.String Default: Defaults to the latest version. Version of projen to install. pullRequestTemplate Optional public java . lang . Boolean getPullRequestTemplate (); Type: java.lang.Boolean Default: true Include a GitHub pull request template. pullRequestTemplateContents Optional public java . util . List < java . lang . String > getPullRequestTemplateContents (); Type: java.util.List Default: default content The contents of the pull request template. release Optional public java . lang . Boolean getRelease (); Type: java.lang.Boolean Default: true (false for subprojects) Add release management to this project. releaseToNpm Optional public java . lang . Boolean getReleaseToNpm (); Type: java.lang.Boolean Default: false Automatically release to npm when new versions are introduced. ~~ releaseWorkflow ~~ Optional Deprecated: see release . public java . lang . Boolean getReleaseWorkflow (); Type: java.lang.Boolean Default: true if not a subproject DEPRECATED: renamed to release . workflowBootstrapSteps Optional public java . util . List < JobStep > getWorkflowBootstrapSteps (); Type: java.util.List Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflowGitIdentity Optional public GitIdentity getWorkflowGitIdentity (); Type: io.github.cdklabs.projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflowNodeVersion Optional public java . lang . String getWorkflowNodeVersion (); Type: java.lang.String Default: same as minNodeVersion The node version to use in GitHub workflows. disableTsconfig Optional public java . lang . Boolean getDisableTsconfig (); Type: java.lang.Boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional public java . lang . Boolean getDocgen (); Type: java.lang.Boolean Default: false Docgen by Typedoc. docsDirectory Optional public java . lang . String getDocsDirectory (); Type: java.lang.String Default: \"docs\" Docs directory. entrypointTypes Optional public java . lang . String getEntrypointTypes (); Type: java.lang.String Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional public java . lang . Boolean getEslint (); Type: java.lang.Boolean Default: true Setup eslint. eslintOptions Optional public EslintOptions getEslintOptions (); Type: io.github.cdklabs.projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional public java . lang . String getLibdir (); Type: java.lang.String Default: \"lib\" Typescript artifacts output directory. projenrcTs Optional public java . lang . Boolean getProjenrcTs (); Type: java.lang.Boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions Optional public ProjenrcOptions getProjenrcTsOptions (); Type: io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode Optional public java . lang . Boolean getSampleCode (); Type: java.lang.Boolean Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional public java . lang . String getSrcdir (); Type: java.lang.String Default: \"src\" Typescript sources directory. testdir Optional public java . lang . String getTestdir (); Type: java.lang.String Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional public TypescriptConfigOptions getTsconfig (); Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfigDev Optional public TypescriptConfigOptions getTsconfigDev (); Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile Optional public java . lang . String getTsconfigDevFile (); Type: java.lang.String Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescriptVersion Optional public java . lang . String getTypescriptVersion (); Type: java.lang.String Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). clientLanguages Required public java . util . List < ClientLanguage > getClientLanguages (); Type: java.util.List< ClientLanguage > The list of languages for which clients will be generated. A typescript client will always be generated. apiSrcDir Optional public java . lang . String getApiSrcDir (); Type: java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats Optional public java . util . List < DocumentationFormat > getDocumentationFormats (); Type: java.util.List< DocumentationFormat > Formats to generate documentation in. forceGenerateCodeAndDocs Optional public java . lang . Boolean getForceGenerateCodeAndDocs (); Type: java.lang.Boolean Default: \"false\" Force to generate code and docs even if there were no changes in spec. generatedCodeDir Optional public java . lang . String getGeneratedCodeDir (); Type: java.lang.String Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions Optional public JavaProjectOptions getJavaClientOptions (); Type: io.github.cdklabs.projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsedSpecFileName Optional public java . lang . String getParsedSpecFileName (); Type: java.lang.String Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. pythonClientOptions Optional public PythonProjectOptions getPythonClientOptions (); Type: io.github.cdklabs.projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. typescriptClientOptions Optional public TypeScriptProjectOptions getTypescriptClientOptions (); Type: io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. serviceName Required public SmithyServiceName getServiceName (); Type: SmithyServiceName Default: \"example.hello#Hello\" The name of the Smithy service from your model which will be targeted for deployment and client generation. On initial project synthesis this service name will be written to the sample \"hello world\" model. If you change this value after initial synthesis you will need to manually update your Smithy models to match, unless you delete the \"model\" directory. Likewise, if you change the namespace or service name in your Smithy models you will need to update this value to ensure your service can be found. ignoreGradleWrapper Optional public java . lang . Boolean getIgnoreGradleWrapper (); Type: java.lang.Boolean Default: true Set to false if you would like to check in your gradle wrapper. Do so if you would like to use a different version of gradle to the one provided by default ignoreSmithyBuildOutput Optional public java . lang . Boolean getIgnoreSmithyBuildOutput (); Type: java.lang.Boolean Default: true Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. modelDir Optional public java . lang . String getModelDir (); Type: java.lang.String Default: \"model\" The path to the Smithy model directory, relative to the project source directory (srcdir). smithyBuildOptions Optional public SmithyBuildOptions getSmithyBuildOptions (); Type: SmithyBuildOptions Any additional properties you'd like to add your smithy-build.json. The smithy-build.json will automatically include the \"openapi\" plugin, but you can add extra configuration for that via this option if you like. https://awslabs.github.io/smithy/2.0/guides/converting-to-openapi.html#openapi-configuration-settings SmithyBuildOptions Options for the smithy build files. Initializer import software.aws.awsprototypingsdk.openapigateway.SmithyBuildOptions ; SmithyBuildOptions . builder () // .imports(java.util.List<java.lang.String>) // .plugins(java.util.Map<java.lang.String, SmithyPlugin>) // .ignoreMissingPlugins(java.lang.Boolean) // .maven(SmithyMavenConfiguration) // .projections(java.util.Map<java.lang.String, SmithyProjection>) . build (); Properties Name Type Description imports java.util.List List of imports. plugins java.util.Map SmithyPlugin\\ > Plugins keyed by plugin id. ignoreMissingPlugins java.lang.Boolean If a plugin can't be found, Smithy will by default fail the build. maven SmithyMavenConfiguration Maven configuration for the Smithy build project, used to specify dependencies and repositories in the build.gradle and smithy-build.json files. projections java.util.Map SmithyProjection\\ > Map of projections name to projection configurations https://awslabs.github.io/smithy/2.0/guides/building-models/build-config.html#projections . imports Optional public java . util . List < java . lang . String > getImports (); Type: java.util.List List of imports. plugins Optional public java . util . Map < java . lang . String , SmithyPlugin > getPlugins (); Type: java.util.Map SmithyPlugin\\ > Plugins keyed by plugin id. ignoreMissingPlugins Optional public java . lang . Boolean getIgnoreMissingPlugins (); Type: java.lang.Boolean Default: no ignoreMissingPlugins set in the smithy-build.json file If a plugin can't be found, Smithy will by default fail the build. This setting can be set to true to allow the build to progress even if a plugin can't be found on the classpath. maven Optional public SmithyMavenConfiguration getMaven (); Type: SmithyMavenConfiguration Default: the default configuration required for Smithy to OpenAPI conversion Maven configuration for the Smithy build project, used to specify dependencies and repositories in the build.gradle and smithy-build.json files. projections Optional public java . util . Map < java . lang . String , SmithyProjection > getProjections (); Type: java.util.Map SmithyProjection\\ > Default: no projections Map of projections name to projection configurations https://awslabs.github.io/smithy/2.0/guides/building-models/build-config.html#projections . SmithyCommon Properties common to smithy plugins and the root smithy build. Initializer import software.aws.awsprototypingsdk.openapigateway.SmithyCommon ; SmithyCommon . builder () // .imports(java.util.List<java.lang.String>) // .plugins(java.util.Map<java.lang.String, SmithyPlugin>) . build (); Properties Name Type Description imports java.util.List List of imports. plugins java.util.Map SmithyPlugin\\ > Plugins keyed by plugin id. imports Optional public java . util . List < java . lang . String > getImports (); Type: java.util.List List of imports. plugins Optional public java . util . Map < java . lang . String , SmithyPlugin > getPlugins (); Type: java.util.Map SmithyPlugin\\ > Plugins keyed by plugin id. SmithyMavenConfiguration Configuration for smithy maven dependencies. Initializer import software.aws.awsprototypingsdk.openapigateway.SmithyMavenConfiguration ; SmithyMavenConfiguration . builder () // .dependencies(java.util.List<java.lang.String>) // .repositoryUrls(java.util.List<java.lang.String>) . build (); Properties Name Type Description dependencies java.util.List The dependencies used in the build.gradle and smithy-build.json files eg. software.amazon.smithy:smithy-validation-model:1.27.2 The following required dependencies are always added: - software.amazon.smithy:smithy-cli:1.27.2 - software.amazon.smithy:smithy-model:1.27.2 - software.amazon.smithy:smithy-openapi:1.27.2 - software.amazon.smithy:smithy-aws-traits:1.27.2 You can however override the version of these dependencies if required. repositoryUrls java.util.List The repository urls used in the build.gradle and smithy-build.json files. dependencies Optional public java . util . List < java . lang . String > getDependencies (); Type: java.util.List The dependencies used in the build.gradle and smithy-build.json files eg. software.amazon.smithy:smithy-validation-model:1.27.2 The following required dependencies are always added: - software.amazon.smithy:smithy-cli:1.27.2 - software.amazon.smithy:smithy-model:1.27.2 - software.amazon.smithy:smithy-openapi:1.27.2 - software.amazon.smithy:smithy-aws-traits:1.27.2 You can however override the version of these dependencies if required. repositoryUrls Optional public java . util . List < java . lang . String > getRepositoryUrls (); Type: java.util.List Default: maven central and maven local The repository urls used in the build.gradle and smithy-build.json files. SmithyPlugin A smithy plugin. Initializer import software.aws.awsprototypingsdk.openapigateway.SmithyPlugin ; SmithyPlugin . builder () // .service(java.lang.String) . build (); Properties Name Type Description service java.lang.String The service to which the plugin should apply. service Optional public java . lang . String getService (); Type: java.lang.String The service to which the plugin should apply. SmithyProjection A smithy build projection. Initializer import software.aws.awsprototypingsdk.openapigateway.SmithyProjection ; SmithyProjection . builder () // .imports(java.util.List<java.lang.String>) // .plugins(java.util.Map<java.lang.String, SmithyPlugin>) // .abstract(java.lang.Boolean) // .transforms(java.util.List<SmithyTransform>) . build (); Properties Name Type Description imports java.util.List List of imports. plugins java.util.Map SmithyPlugin\\ > Plugins keyed by plugin id. abstract java.lang.Boolean Whether or not the projection is abstract. transforms java.util.List< SmithyTransform > Transforms to apply to the projection. imports Optional public java . util . List < java . lang . String > getImports (); Type: java.util.List List of imports. plugins Optional public java . util . Map < java . lang . String , SmithyPlugin > getPlugins (); Type: java.util.Map SmithyPlugin\\ > Plugins keyed by plugin id. abstract Optional public java . lang . Boolean getAbstract (); Type: java.lang.Boolean Whether or not the projection is abstract. transforms Optional public java . util . List < SmithyTransform > getTransforms (); Type: java.util.List< SmithyTransform > Transforms to apply to the projection. SmithyServiceName Represents a fully qualified name of a Smithy service. https://awslabs.github.io/smithy/2.0/spec/service-types.html Initializer import software.aws.awsprototypingsdk.openapigateway.SmithyServiceName ; SmithyServiceName . builder () . namespace ( java . lang . String ) . serviceName ( java . lang . String ) . build (); Properties Name Type Description namespace java.lang.String The service namespace. serviceName java.lang.String The service name. namespace Required public java . lang . String getNamespace (); Type: java.lang.String The service namespace. Nested namespaces are separated by '.', for example com.company https://awslabs.github.io/smithy/2.0/spec/model.html#shape-id serviceName Required public java . lang . String getServiceName (); Type: java.lang.String The service name. Should be PascalCase, for example HelloService https://awslabs.github.io/smithy/2.0/spec/model.html#shape-id SmithyTransform A smithy build transform. Initializer import software.aws.awsprototypingsdk.openapigateway.SmithyTransform ; SmithyTransform . builder () . args ( java . util . Map < java . lang . String , java . lang . Object > ) . name ( java . lang . String ) . build (); Properties Name Type Description args java.util.Map Arguments for the transform. name java.lang.String Name of the transform. args Required public java . util . Map < java . lang . String , java . lang . Object > getArgs (); Type: java.util.Map Arguments for the transform. name Required public java . lang . String getName (); Type: java.lang.String Name of the transform. Classes Authorizer An authorizer for authorizing API requests. Initializers import software.aws.awsprototypingsdk.openapigateway.Authorizer ; Authorizer . Builder . create () . authorizationType ( AuthorizationType ) . authorizerId ( java . lang . String ) // .authorizationScopes(java.util.List<java.lang.String>) . build (); Name Type Description authorizationType software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId java.lang.String The unique identifier for the authorizer. authorizationScopes java.util.List Scopes for the authorizer, if any. authorizationType Required Type: software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId Required Type: java.lang.String The unique identifier for the authorizer. authorizationScopes Optional Type: java.util.List Scopes for the authorizer, if any. Properties Name Type Description authorizationType software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId java.lang.String The unique identifier for the authorizer. authorizationScopes java.util.List Scopes for the authorizer, if any. authorizationType Required public AuthorizationType getAuthorizationType (); Type: software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId Required public java . lang . String getAuthorizerId (); Type: java.lang.String The unique identifier for the authorizer. authorizationScopes Optional public java . util . List < java . lang . String > getAuthorizationScopes (); Type: java.util.List Scopes for the authorizer, if any. Authorizers Class used to construct authorizers for use in the OpenApiGatewayLambdaApi construct. Initializers import software.aws.awsprototypingsdk.openapigateway.Authorizers ; new Authorizers (); Name Type Description Static Functions Name Description cognito A Cognito User Pools authorizer. custom A custom authorizer. iam An IAM authorizer which uses AWS signature version 4 to authorize requests. none No authorizer. cognito import software.aws.awsprototypingsdk.openapigateway.Authorizers ; Authorizers . cognito ( CognitoAuthorizerProps props ) A Cognito User Pools authorizer. props Required Type: CognitoAuthorizerProps custom import software.aws.awsprototypingsdk.openapigateway.Authorizers ; Authorizers . custom ( CustomAuthorizerProps props ) A custom authorizer. props Required Type: CustomAuthorizerProps iam import software.aws.awsprototypingsdk.openapigateway.Authorizers ; Authorizers . iam () An IAM authorizer which uses AWS signature version 4 to authorize requests. none import software.aws.awsprototypingsdk.openapigateway.Authorizers ; Authorizers . none () No authorizer. CognitoAuthorizer An authorizer that uses Cognito identity or access tokens. Initializers import software.aws.awsprototypingsdk.openapigateway.CognitoAuthorizer ; CognitoAuthorizer . Builder . create () . authorizerId ( java . lang . String ) . userPools ( java . util . List < IUserPool > ) // .authorizationScopes(java.util.List<java.lang.String>) . build (); Name Type Description authorizerId java.lang.String Unique identifier for this authorizer. userPools java.util.List The Cognito user pools associated with this authorizer. authorizationScopes java.util.List A list of authorization scopes configured on the method. authorizerId Required Type: java.lang.String Unique identifier for this authorizer. userPools Required Type: java.util.List The Cognito user pools associated with this authorizer. authorizationScopes Optional Type: java.util.List Default: [] A list of authorization scopes configured on the method. When used as the default authorizer, these scopes will be applied to all methods without an authorizer at the integration level. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-method.html#cfn-apigateway-method-authorizationscopes Methods Name Description withScopes Returns this authorizer with scopes applied, intended for usage in individual operations where scopes may differ on a per-operation basis. withScopes public CognitoAuthorizer withScopes ( java . lang . String authorizationScopes ) Returns this authorizer with scopes applied, intended for usage in individual operations where scopes may differ on a per-operation basis. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-method.html#cfn-apigateway-method-authorizationscopes authorizationScopes Required Type: java.lang.String the scopes to apply. Properties Name Type Description authorizationType software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId java.lang.String The unique identifier for the authorizer. authorizationScopes java.util.List Scopes for the authorizer, if any. userPools java.util.List The Cognito user pools associated with this authorizer. authorizationType Required public AuthorizationType getAuthorizationType (); Type: software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId Required public java . lang . String getAuthorizerId (); Type: java.lang.String The unique identifier for the authorizer. authorizationScopes Optional public java . util . List < java . lang . String > getAuthorizationScopes (); Type: java.util.List Scopes for the authorizer, if any. userPools Required public java . util . List < IUserPool > getUserPools (); Type: java.util.List The Cognito user pools associated with this authorizer. CustomAuthorizer An authorizer that uses a lambda function to authorize requests. Initializers import software.aws.awsprototypingsdk.openapigateway.CustomAuthorizer ; CustomAuthorizer . Builder . create () . authorizerId ( java . lang . String ) . function ( IFunction ) // .authorizerResultTtlInSeconds(java.lang.Number) // .identitySource(java.lang.String) // .type(CustomAuthorizerType) . build (); Name Type Description authorizerId java.lang.String Unique identifier for this authorizer. function software.amazon.awscdk.services.lambda.IFunction The lambda function used to authorize requests. authorizerResultTtlInSeconds java.lang.Number The number of seconds during which the authorizer result is cached. identitySource java.lang.String The source of the identity in an incoming request. type CustomAuthorizerType The type of custom authorizer. authorizerId Required Type: java.lang.String Unique identifier for this authorizer. function Required Type: software.amazon.awscdk.services.lambda.IFunction The lambda function used to authorize requests. authorizerResultTtlInSeconds Optional Type: java.lang.Number Default: 300 The number of seconds during which the authorizer result is cached. identitySource Optional Type: java.lang.String Default: \"method.request.header.Authorization\" The source of the identity in an incoming request. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-identitysource type Optional Type: CustomAuthorizerType Default: CustomAuthorizerType.TOKEN The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type Properties Name Type Description authorizationType software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId java.lang.String The unique identifier for the authorizer. authorizationScopes java.util.List Scopes for the authorizer, if any. authorizerResultTtlInSeconds java.lang.Number The number of seconds during which the authorizer result is cached. function software.amazon.awscdk.services.lambda.IFunction The lambda function used to authorize requests. identitySource java.lang.String The source of the identity in an incoming request. type CustomAuthorizerType The type of custom authorizer. authorizationType Required public AuthorizationType getAuthorizationType (); Type: software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId Required public java . lang . String getAuthorizerId (); Type: java.lang.String The unique identifier for the authorizer. authorizationScopes Optional public java . util . List < java . lang . String > getAuthorizationScopes (); Type: java.util.List Scopes for the authorizer, if any. authorizerResultTtlInSeconds Required public java . lang . Number getAuthorizerResultTtlInSeconds (); Type: java.lang.Number The number of seconds during which the authorizer result is cached. function Required public IFunction getFunction (); Type: software.amazon.awscdk.services.lambda.IFunction The lambda function used to authorize requests. identitySource Required public java . lang . String getIdentitySource (); Type: java.lang.String The source of the identity in an incoming request. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-identitysource type Required public CustomAuthorizerType getType (); Type: CustomAuthorizerType The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type IamAuthorizer An IAM authorizer. Initializers import software.aws.awsprototypingsdk.openapigateway.IamAuthorizer ; new IamAuthorizer (); Name Type Description Properties Name Type Description authorizationType software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId java.lang.String The unique identifier for the authorizer. authorizationScopes java.util.List Scopes for the authorizer, if any. authorizationType Required public AuthorizationType getAuthorizationType (); Type: software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId Required public java . lang . String getAuthorizerId (); Type: java.lang.String The unique identifier for the authorizer. authorizationScopes Optional public java . util . List < java . lang . String > getAuthorizationScopes (); Type: java.util.List Scopes for the authorizer, if any. Integration An integration for an API operation. You can extend this to implement your own integration if you like. Initializers import software.aws.awsprototypingsdk.openapigateway.Integration ; new Integration (); Name Type Description Methods Name Description grant Grant permissions for the API to invoke the integration. render Render the integration into an API Gateway OpenAPI extension. grant public void grant ( IntegrationGrantProps _props ) Grant permissions for the API to invoke the integration. _props Required Type: IntegrationGrantProps render public ApiGatewayIntegration render ( IntegrationRenderProps props ) Render the integration into an API Gateway OpenAPI extension. props Required Type: IntegrationRenderProps Integrations A collection of integrations to connect API operations with a backend to service requests. Initializers import software.aws.awsprototypingsdk.openapigateway.Integrations ; new Integrations (); Name Type Description Static Functions Name Description lambda An integration that invokes a lambda function to service the request. lambda import software.aws.awsprototypingsdk.openapigateway.Integrations ; Integrations . lambda ( IFunction lambdaFunction ) An integration that invokes a lambda function to service the request. lambdaFunction Required Type: software.amazon.awscdk.services.lambda.IFunction the function to invoke. LambdaIntegration A lambda integration. Initializers import software.aws.awsprototypingsdk.openapigateway.LambdaIntegration ; new LambdaIntegration ( IFunction lambdaFunction ); Name Type Description lambdaFunction software.amazon.awscdk.services.lambda.IFunction No description. lambdaFunction Required Type: software.amazon.awscdk.services.lambda.IFunction Methods Name Description grant Grant API Gateway permissions to invoke the lambda. render Render the lambda integration as a snippet of OpenAPI. grant public void grant ( IntegrationGrantProps __0 ) Grant API Gateway permissions to invoke the lambda. __0 Required Type: IntegrationGrantProps render public ApiGatewayIntegration render ( IntegrationRenderProps props ) Render the lambda integration as a snippet of OpenAPI. props Required Type: IntegrationRenderProps NoneAuthorizer No authorizer. Initializers import software.aws.awsprototypingsdk.openapigateway.NoneAuthorizer ; new NoneAuthorizer (); Name Type Description Properties Name Type Description authorizationType software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId java.lang.String The unique identifier for the authorizer. authorizationScopes java.util.List Scopes for the authorizer, if any. authorizationType Required public AuthorizationType getAuthorizationType (); Type: software.amazon.awscdk.services.apigateway.AuthorizationType The type of the authorizer. authorizerId Required public java . lang . String getAuthorizerId (); Type: java.lang.String The unique identifier for the authorizer. authorizationScopes Optional public java . util . List < java . lang . String > getAuthorizationScopes (); Type: java.util.List Scopes for the authorizer, if any. OpenApiGatewayJavaProject Synthesizes a Java Project with an OpenAPI spec, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests. Initializers import software.aws.awsprototypingsdk.openapigateway.OpenApiGatewayJavaProject ; OpenApiGatewayJavaProject . Builder . create () . name ( java . lang . String ) // .commitGenerated(java.lang.Boolean) // .gitOptions(GitOptions) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .renovatebot(java.lang.Boolean) // .renovatebotOptions(RenovatebotOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMerge(java.lang.Boolean) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenCredentials(GithubCredentials) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) . artifactId ( java . lang . String ) . groupId ( java . lang . String ) . version ( java . lang . String ) // .description(java.lang.String) // .packaging(java.lang.String) // .url(java.lang.String) // .compileOptions(MavenCompileOptions) // .deps(java.util.List<java.lang.String>) // .distdir(java.lang.String) // .junit(java.lang.Boolean) // .junitOptions(JunitOptions) // .packagingOptions(MavenPackagingOptions) // .projenrcJava(java.lang.Boolean) // .projenrcJavaOptions(ProjenrcOptions) // .testDeps(java.util.List<java.lang.String>) // .sample(java.lang.Boolean) // .sampleJavaPackage(java.lang.String) . clientLanguages ( java . util . List < ClientLanguage > ) // .apiSrcDir(java.lang.String) // .documentationFormats(java.util.List<DocumentationFormat>) // .forceGenerateCodeAndDocs(java.lang.Boolean) // .generatedCodeDir(java.lang.String) // .javaClientOptions(JavaProjectOptions) // .parsedSpecFileName(java.lang.String) // .pythonClientOptions(PythonProjectOptions) // .typescriptClientOptions(TypeScriptProjectOptions) // .specFile(java.lang.String) . build (); Name Type Description name java.lang.String This is the name of your project. commitGenerated java.lang.Boolean Whether to commit the managed files by default. gitOptions io.github.cdklabs.projen.GitOptions Configuration options for git. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. renovatebot java.lang.Boolean Use renovatebot to handle dependency upgrades. renovatebotOptions io.github.cdklabs.projen.RenovatebotOptions Options for renovatebot. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge java.lang.Boolean Enable automatic merging on GitHub. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenCredentials io.github.cdklabs.projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. artifactId java.lang.String The artifactId is generally the name that the project is known by. groupId java.lang.String This is generally unique amongst an organization or a project. version java.lang.String This is the last piece of the naming puzzle. description java.lang.String Description of a project is always good. packaging java.lang.String Project packaging format. url java.lang.String The URL, like the name, is not required. compileOptions io.github.cdklabs.projen.java.MavenCompileOptions Compile options. deps java.util.List List of runtime dependencies for this project. distdir java.lang.String Final artifact output directory. junit java.lang.Boolean Include junit tests. junitOptions io.github.cdklabs.projen.java.JunitOptions junit options. packagingOptions io.github.cdklabs.projen.java.MavenPackagingOptions Packaging options. projenrcJava java.lang.Boolean Use projenrc in java. projenrcJavaOptions io.github.cdklabs.projen.java.ProjenrcOptions Options related to projenrc in java. testDeps java.util.List List of test dependencies for this project. sample java.lang.Boolean Include sample code and test if the relevant directories don't exist. sampleJavaPackage java.lang.String The java package to use for the code sample. clientLanguages java.util.List< ClientLanguage > The list of languages for which clients will be generated. apiSrcDir java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats java.util.List< DocumentationFormat > Formats to generate documentation in. forceGenerateCodeAndDocs java.lang.Boolean Force to generate code and docs even if there were no changes in spec. generatedCodeDir java.lang.String The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions io.github.cdklabs.projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsedSpecFileName java.lang.String The name of the output parsed OpenAPI specification file. pythonClientOptions io.github.cdklabs.projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). typescriptClientOptions io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. specFile java.lang.String The path to the OpenAPI specification file, relative to the project source directory (srcdir). name Required Type: java.lang.String Default: $BASEDIR This is the name of your project. commitGenerated Optional Type: java.lang.Boolean Default: true Whether to commit the managed files by default. gitOptions Optional Type: io.github.cdklabs.projen.GitOptions Configuration options for git. logging Optional Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional Type: java.lang.Boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional Type: io.github.cdklabs.projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional Type: java.lang.Boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional Type: io.github.cdklabs.projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional Type: java.lang.Boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. artifactId Required Type: java.lang.String Default: \"my-app\" The artifactId is generally the name that the project is known by. Although the groupId is important, people within the group will rarely mention the groupId in discussion (they are often all be the same ID, such as the MojoHaus project groupId: org.codehaus.mojo). It, along with the groupId, creates a key that separates this project from every other project in the world (at least, it should :) ). Along with the groupId, the artifactId fully defines the artifact's living quarters within the repository. In the case of the above project, my-project lives in $M2_REPO/org/codehaus/mojo/my-project. groupId Required Type: java.lang.String Default: \"org.acme\" This is generally unique amongst an organization or a project. For example, all core Maven artifacts do (well, should) live under the groupId org.apache.maven. Group ID's do not necessarily use the dot notation, for example, the junit project. Note that the dot-notated groupId does not have to correspond to the package structure that the project contains. It is, however, a good practice to follow. When stored within a repository, the group acts much like the Java packaging structure does in an operating system. The dots are replaced by OS specific directory separators (such as '/' in Unix) which becomes a relative directory structure from the base repository. In the example given, the org.codehaus.mojo group lives within the directory $M2_REPO/org/codehaus/mojo. version Required Type: java.lang.String Default: \"0.1.0\" This is the last piece of the naming puzzle. groupId:artifactId denotes a single project but they cannot delineate which incarnation of that project we are talking about. Do we want the junit:junit of 2018 (version 4.12), or of 2007 (version 3.8.2)? In short: code changes, those changes should be versioned, and this element keeps those versions in line. It is also used within an artifact's repository to separate versions from each other. my-project version 1.0 files live in the directory structure $M2_REPO/org/codehaus/mojo/my-project/1.0. description Optional Type: java.lang.String Default: undefined Description of a project is always good. Although this should not replace formal documentation, a quick comment to any readers of the POM is always helpful. packaging Optional Type: java.lang.String Default: \"jar\" Project packaging format. url Optional Type: java.lang.String Default: undefined The URL, like the name, is not required. This is a nice gesture for projects users, however, so that they know where the project lives. compileOptions Optional Type: io.github.cdklabs.projen.java.MavenCompileOptions Default: defaults Compile options. deps Optional Type: java.util.List Default: [] List of runtime dependencies for this project. Dependencies use the format: <groupId>/<artifactId>@<semver> Additional dependencies can be added via project.addDependency() . distdir Optional Type: java.lang.String Default: \"dist/java\" Final artifact output directory. junit Optional Type: java.lang.Boolean Default: true Include junit tests. junitOptions Optional Type: io.github.cdklabs.projen.java.JunitOptions Default: defaults junit options. packagingOptions Optional Type: io.github.cdklabs.projen.java.MavenPackagingOptions Default: defaults Packaging options. projenrcJava Optional Type: java.lang.Boolean Default: true Use projenrc in java. This will install projen as a java dependency and will add a synth task which will compile & execute main() from src/main/java/projenrc.java . projenrcJavaOptions Optional Type: io.github.cdklabs.projen.java.ProjenrcOptions Default: default options Options related to projenrc in java. testDeps Optional Type: java.util.List Default: [] List of test dependencies for this project. Dependencies use the format: <groupId>/<artifactId>@<semver> Additional dependencies can be added via project.addTestDependency() . sample Optional Type: java.lang.Boolean Default: true Include sample code and test if the relevant directories don't exist. sampleJavaPackage Optional Type: java.lang.String Default: \"org.acme\" The java package to use for the code sample. clientLanguages Required Type: java.util.List< ClientLanguage > The list of languages for which clients will be generated. A typescript client will always be generated. apiSrcDir Optional Type: java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats Optional Type: java.util.List< DocumentationFormat > Formats to generate documentation in. forceGenerateCodeAndDocs Optional Type: java.lang.Boolean Default: \"false\" Force to generate code and docs even if there were no changes in spec. generatedCodeDir Optional Type: java.lang.String Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions Optional Type: io.github.cdklabs.projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsedSpecFileName Optional Type: java.lang.String Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. pythonClientOptions Optional Type: io.github.cdklabs.projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. typescriptClientOptions Optional Type: io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. specFile Optional Type: java.lang.String Default: \"spec/spec.yaml\" The path to the OpenAPI specification file, relative to the project source directory (srcdir). Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. tryRemoveFile Finds a file at the specified relative path within this project and removes it. addDependency Adds a runtime dependency. addPlugin Adds a build plugin to the pom. addTestDependency Adds a test dependency. addExcludeFromCleanup public void addExcludeFromCleanup ( java . lang . String globs ) Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: java.lang.String The glob patterns to match. addGitIgnore public void addGitIgnore ( java . lang . String pattern ) Adds a .gitignore pattern. pattern Required Type: java.lang.String The glob pattern to ignore. addPackageIgnore public void addPackageIgnore ( java . lang . String _pattern ) Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . _pattern Required Type: java.lang.String The glob pattern to exclude. addTask public Task addTask ( java . lang . String name ) public Task addTask ( java . lang . String name , TaskOptions props ) Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: java.lang.String The task name to add. props Optional Type: io.github.cdklabs.projen.TaskOptions Task properties. ~~ addTip ~~ public void addTip ( java . lang . String message ) Prints a \"tip\" message during synthesis. message Required Type: java.lang.String The message. annotateGenerated public void annotateGenerated ( java . lang . String glob ) Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: java.lang.String the glob pattern to match (could be a file path). postSynthesize public void postSynthesize () Called after all components are synthesized. Order is not guaranteed. preSynthesize public void preSynthesize () Called before all components are synthesized. removeTask public Task removeTask ( java . lang . String name ) Removes a task from a project. name Required Type: java.lang.String The name of the task to remove. runTaskCommand public java . lang . String runTaskCommand ( Task task ) Returns the shell command to execute in order to run a task. By default, this is npx projen@<version> <task> task Required Type: io.github.cdklabs.projen.Task The task for which the command is required. synth public void synth () Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" tryFindFile public FileBase tryFindFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public JsonFile tryFindJsonFile ( java . lang . String filePath ) Finds a json file by name. filePath Required Type: java.lang.String The file path. tryFindObjectFile public ObjectFile tryFindObjectFile ( java . lang . String filePath ) Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: java.lang.String The file path. tryRemoveFile public FileBase tryRemoveFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and removes it. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. addDependency public void addDependency ( java . lang . String spec ) Adds a runtime dependency. spec Required Type: java.lang.String Format <groupId>/<artifactId>@<semver> . addPlugin public Dependency addPlugin ( java . lang . String spec ) public Dependency addPlugin ( java . lang . String spec , PluginOptions options ) Adds a build plugin to the pom. The plug in is also added as a BUILD dep to the project. spec Required Type: java.lang.String dependency spec ( group/artifact@version ). options Optional Type: io.github.cdklabs.projen.java.PluginOptions plugin options. addTestDependency public void addTestDependency ( java . lang . String spec ) Adds a test dependency. spec Required Type: java.lang.String Format <groupId>/<artifactId>@<semver> . Properties Name Type Description buildTask io.github.cdklabs.projen.Task No description. commitGenerated java.lang.Boolean Whether to commit the managed files by default. compileTask io.github.cdklabs.projen.Task No description. components java.util.List Returns all the components within this project. deps io.github.cdklabs.projen.Dependencies Project dependencies. ejected java.lang.Boolean Whether or not the project is being ejected. files java.util.List All files in this project. gitattributes io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore io.github.cdklabs.projen.IgnoreFile .gitignore. logger io.github.cdklabs.projen.Logger Logging utilities. name java.lang.String Project name. outdir java.lang.String Absolute output directory of this project. packageTask io.github.cdklabs.projen.Task No description. postCompileTask io.github.cdklabs.projen.Task No description. preCompileTask io.github.cdklabs.projen.Task No description. projectBuild io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand java.lang.String The command to use in order to run the projen CLI. root io.github.cdklabs.projen.Project The root project. tasks io.github.cdklabs.projen.Tasks Project tasks. testTask io.github.cdklabs.projen.Task No description. defaultTask io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". initProject io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . parent io.github.cdklabs.projen.Project A parent project. projectType io.github.cdklabs.projen.ProjectType No description. autoApprove io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github io.github.cdklabs.projen.github.GitHub Access all github components. gitpod io.github.cdklabs.projen.Gitpod Access for Gitpod. vscode io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. compile io.github.cdklabs.projen.java.MavenCompile Compile component. distdir java.lang.String Maven artifact output directory. packaging io.github.cdklabs.projen.java.MavenPackaging Packaging component. pom io.github.cdklabs.projen.java.Pom API for managing pom.xml . junit io.github.cdklabs.projen.java.Junit JUnit component. projenrc io.github.cdklabs.projen.java.Projenrc Projenrc component. apiSrcDir java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. generatedClients java.util.Map References to the client projects that were generated, keyed by language. generatedCodeDir java.lang.String The directory in which generated client code will be generated, relative to the outdir of this project. generatedJavaClient io.github.cdklabs.projen.java.JavaProject A reference to the generated java client. specDir java.lang.String The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. specFileName java.lang.String The name of the spec file. forceGenerateCodeAndDocs java.lang.Boolean Force to generate code and docs even if there were no changes in spec. buildTask Required public Task getBuildTask (); Type: io.github.cdklabs.projen.Task commitGenerated Required public java . lang . Boolean getCommitGenerated (); Type: java.lang.Boolean Whether to commit the managed files by default. compileTask Required public Task getCompileTask (); Type: io.github.cdklabs.projen.Task components Required public java . util . List < Component > getComponents (); Type: java.util.List Returns all the components within this project. deps Required public Dependencies getDeps (); Type: io.github.cdklabs.projen.Dependencies Project dependencies. ejected Required public java . lang . Boolean getEjected (); Type: java.lang.Boolean Whether or not the project is being ejected. files Required public java . util . List < FileBase > getFiles (); Type: java.util.List All files in this project. gitattributes Required public GitAttributesFile getGitattributes (); Type: io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public IgnoreFile getGitignore (); Type: io.github.cdklabs.projen.IgnoreFile .gitignore. logger Required public Logger getLogger (); Type: io.github.cdklabs.projen.Logger Logging utilities. name Required public java . lang . String getName (); Type: java.lang.String Project name. outdir Required public java . lang . String getOutdir (); Type: java.lang.String Absolute output directory of this project. packageTask Required public Task getPackageTask (); Type: io.github.cdklabs.projen.Task postCompileTask Required public Task getPostCompileTask (); Type: io.github.cdklabs.projen.Task preCompileTask Required public Task getPreCompileTask (); Type: io.github.cdklabs.projen.Task projectBuild Required public ProjectBuild getProjectBuild (); Type: io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand Required public java . lang . String getProjenCommand (); Type: java.lang.String The command to use in order to run the projen CLI. root Required public Project getRoot (); Type: io.github.cdklabs.projen.Project The root project. tasks Required public Tasks getTasks (); Type: io.github.cdklabs.projen.Tasks Project tasks. testTask Required public Task getTestTask (); Type: io.github.cdklabs.projen.Task defaultTask Optional public Task getDefaultTask (); Type: io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public InitProject getInitProject (); Type: io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project A parent project. If undefined, this is the root project. projectType Required public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType autoApprove Optional public AutoApprove getAutoApprove (); Type: io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public DevContainer getDevContainer (); Type: io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public GitHub getGithub (); Type: io.github.cdklabs.projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public Gitpod getGitpod (); Type: io.github.cdklabs.projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public VsCode getVscode (); Type: io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. compile Required public MavenCompile getCompile (); Type: io.github.cdklabs.projen.java.MavenCompile Compile component. distdir Required public java . lang . String getDistdir (); Type: java.lang.String Maven artifact output directory. packaging Required public MavenPackaging getPackaging (); Type: io.github.cdklabs.projen.java.MavenPackaging Packaging component. pom Required public Pom getPom (); Type: io.github.cdklabs.projen.java.Pom API for managing pom.xml . junit Optional public Junit getJunit (); Type: io.github.cdklabs.projen.java.Junit JUnit component. projenrc Optional public Projenrc getProjenrc (); Type: io.github.cdklabs.projen.java.Projenrc Projenrc component. apiSrcDir Required public java . lang . String getApiSrcDir (); Type: java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. This will also be used as the package for the api project. generatedClients Required public java . util . Map < java . lang . String , Project > getGeneratedClients (); Type: java.util.Map References to the client projects that were generated, keyed by language. generatedCodeDir Required public java . lang . String getGeneratedCodeDir (); Type: java.lang.String The directory in which generated client code will be generated, relative to the outdir of this project. generatedJavaClient Required public JavaProject getGeneratedJavaClient (); Type: io.github.cdklabs.projen.java.JavaProject A reference to the generated java client. specDir Required public java . lang . String getSpecDir (); Type: java.lang.String The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. specFileName Required public java . lang . String getSpecFileName (); Type: java.lang.String The name of the spec file. forceGenerateCodeAndDocs Optional public java . lang . Boolean getForceGenerateCodeAndDocs (); Type: java.lang.Boolean Force to generate code and docs even if there were no changes in spec. Constants Name Type Description DEFAULT_TASK java.lang.String The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public java . lang . String getDefaultTask (); Type: java.lang.String The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. OpenApiGatewayPythonProject Synthesizes a Python Project with an OpenAPI spec, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests. Initializers import software.aws.awsprototypingsdk.openapigateway.OpenApiGatewayPythonProject ; OpenApiGatewayPythonProject . Builder . create () . name ( java . lang . String ) // .commitGenerated(java.lang.Boolean) // .gitOptions(GitOptions) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .renovatebot(java.lang.Boolean) // .renovatebotOptions(RenovatebotOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMerge(java.lang.Boolean) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenCredentials(GithubCredentials) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) . authorEmail ( java . lang . String ) . authorName ( java . lang . String ) . version ( java . lang . String ) // .classifiers(java.util.List<java.lang.String>) // .description(java.lang.String) // .homepage(java.lang.String) // .license(java.lang.String) // .packageName(java.lang.String) // .poetryOptions(PoetryPyprojectOptionsWithoutDeps) // .setupConfig(java.util.Map<java.lang.String, java.lang.Object>) . moduleName ( java . lang . String ) // .deps(java.util.List<java.lang.String>) // .devDeps(java.util.List<java.lang.String>) // .pip(java.lang.Boolean) // .poetry(java.lang.Boolean) // .projenrcJs(java.lang.Boolean) // .projenrcJsOptions(ProjenrcOptions) // .projenrcPython(java.lang.Boolean) // .projenrcPythonOptions(ProjenrcOptions) // .pytest(java.lang.Boolean) // .pytestOptions(PytestOptions) // .sample(java.lang.Boolean) // .setuptools(java.lang.Boolean) // .venv(java.lang.Boolean) // .venvOptions(VenvOptions) . clientLanguages ( java . util . List < ClientLanguage > ) // .apiSrcDir(java.lang.String) // .documentationFormats(java.util.List<DocumentationFormat>) // .forceGenerateCodeAndDocs(java.lang.Boolean) // .generatedCodeDir(java.lang.String) // .javaClientOptions(JavaProjectOptions) // .parsedSpecFileName(java.lang.String) // .pythonClientOptions(PythonProjectOptions) // .typescriptClientOptions(TypeScriptProjectOptions) // .specFile(java.lang.String) . build (); Name Type Description name java.lang.String This is the name of your project. commitGenerated java.lang.Boolean Whether to commit the managed files by default. gitOptions io.github.cdklabs.projen.GitOptions Configuration options for git. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. renovatebot java.lang.Boolean Use renovatebot to handle dependency upgrades. renovatebotOptions io.github.cdklabs.projen.RenovatebotOptions Options for renovatebot. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge java.lang.Boolean Enable automatic merging on GitHub. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenCredentials io.github.cdklabs.projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. authorEmail java.lang.String Author's e-mail. authorName java.lang.String Author's name. version java.lang.String Version of the package. classifiers java.util.List A list of PyPI trove classifiers that describe the project. description java.lang.String A short description of the package. homepage java.lang.String A URL to the website of the project. license java.lang.String License of this package as an SPDX identifier. packageName java.lang.String Package name. poetryOptions io.github.cdklabs.projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setupConfig java.util.Map Additional fields to pass in the setup() function if using setuptools. moduleName java.lang.String Name of the python package as used in imports and filenames. deps java.util.List List of runtime dependencies for this project. devDeps java.util.List List of dev dependencies for this project. pip java.lang.Boolean Use pip with a requirements.txt file to track project dependencies. poetry java.lang.Boolean Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrcJs java.lang.Boolean Use projenrc in javascript. projenrcJsOptions io.github.cdklabs.projen.javascript.ProjenrcOptions Options related to projenrc in JavaScript. projenrcPython java.lang.Boolean Use projenrc in Python. projenrcPythonOptions io.github.cdklabs.projen.python.ProjenrcOptions Options related to projenrc in python. pytest java.lang.Boolean Include pytest tests. pytestOptions io.github.cdklabs.projen.python.PytestOptions pytest options. sample java.lang.Boolean Include sample code and test if the relevant directories don't exist. setuptools java.lang.Boolean Use setuptools with a setup.py script for packaging and publishing. venv java.lang.Boolean Use venv to manage a virtual environment for installing dependencies inside. venvOptions io.github.cdklabs.projen.python.VenvOptions Venv options. clientLanguages java.util.List< ClientLanguage > The list of languages for which clients will be generated. apiSrcDir java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats java.util.List< DocumentationFormat > Formats to generate documentation in. forceGenerateCodeAndDocs java.lang.Boolean Force to generate code and docs even if there were no changes in spec. generatedCodeDir java.lang.String The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions io.github.cdklabs.projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsedSpecFileName java.lang.String The name of the output parsed OpenAPI specification file. pythonClientOptions io.github.cdklabs.projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). typescriptClientOptions io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. specFile java.lang.String The path to the OpenAPI specification file, relative to the project source directory (srcdir). name Required Type: java.lang.String Default: $BASEDIR This is the name of your project. commitGenerated Optional Type: java.lang.Boolean Default: true Whether to commit the managed files by default. gitOptions Optional Type: io.github.cdklabs.projen.GitOptions Configuration options for git. logging Optional Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional Type: java.lang.Boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional Type: io.github.cdklabs.projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional Type: java.lang.Boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional Type: io.github.cdklabs.projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional Type: java.lang.Boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. authorEmail Required Type: java.lang.String Default: $GIT_USER_EMAIL Author's e-mail. authorName Required Type: java.lang.String Default: $GIT_USER_NAME Author's name. version Required Type: java.lang.String Default: \"0.1.0\" Version of the package. classifiers Optional Type: java.util.List A list of PyPI trove classifiers that describe the project. https://pypi.org/classifiers/ description Optional Type: java.lang.String A short description of the package. homepage Optional Type: java.lang.String A URL to the website of the project. license Optional Type: java.lang.String License of this package as an SPDX identifier. packageName Optional Type: java.lang.String Package name. poetryOptions Optional Type: io.github.cdklabs.projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setupConfig Optional Type: java.util.Map Additional fields to pass in the setup() function if using setuptools. moduleName Required Type: java.lang.String Default: $PYTHON_MODULE_NAME Name of the python package as used in imports and filenames. Must only consist of alphanumeric characters and underscores. deps Optional Type: java.util.List Default: [] List of runtime dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDependency() . devDeps Optional Type: java.util.List Default: [] List of dev dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDevDependency() . pip Optional Type: java.lang.Boolean Default: true, unless poetry is true, then false Use pip with a requirements.txt file to track project dependencies. poetry Optional Type: java.lang.Boolean Default: false Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. This feature is incompatible with pip, setuptools, or venv. If you set this option to true , then pip, setuptools, and venv must be set to false . projenrcJs Optional Type: java.lang.Boolean Default: false Use projenrc in javascript. This will install projen as a JavaScript dependency and add a synth task which will run .projenrc.js . projenrcJsOptions Optional Type: io.github.cdklabs.projen.javascript.ProjenrcOptions Default: default options Options related to projenrc in JavaScript. projenrcPython Optional Type: java.lang.Boolean Default: true Use projenrc in Python. This will install projen as a Python dependency and add a synth task which will run .projenrc.py . projenrcPythonOptions Optional Type: io.github.cdklabs.projen.python.ProjenrcOptions Default: default options Options related to projenrc in python. pytest Optional Type: java.lang.Boolean Default: true Include pytest tests. pytestOptions Optional Type: io.github.cdklabs.projen.python.PytestOptions Default: defaults pytest options. sample Optional Type: java.lang.Boolean Default: true Include sample code and test if the relevant directories don't exist. setuptools Optional Type: java.lang.Boolean Default: true, unless poetry is true, then false Use setuptools with a setup.py script for packaging and publishing. venv Optional Type: java.lang.Boolean Default: true, unless poetry is true, then false Use venv to manage a virtual environment for installing dependencies inside. venvOptions Optional Type: io.github.cdklabs.projen.python.VenvOptions Default: defaults Venv options. clientLanguages Required Type: java.util.List< ClientLanguage > The list of languages for which clients will be generated. A typescript client will always be generated. apiSrcDir Optional Type: java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats Optional Type: java.util.List< DocumentationFormat > Formats to generate documentation in. forceGenerateCodeAndDocs Optional Type: java.lang.Boolean Default: \"false\" Force to generate code and docs even if there were no changes in spec. generatedCodeDir Optional Type: java.lang.String Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions Optional Type: io.github.cdklabs.projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsedSpecFileName Optional Type: java.lang.String Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. pythonClientOptions Optional Type: io.github.cdklabs.projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. typescriptClientOptions Optional Type: io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. specFile Optional Type: java.lang.String Default: \"spec/spec.yaml\" The path to the OpenAPI specification file, relative to the project source directory (srcdir). Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. tryRemoveFile Finds a file at the specified relative path within this project and removes it. addDependency Adds a runtime dependency. addDevDependency Adds a dev dependency. addExcludeFromCleanup public void addExcludeFromCleanup ( java . lang . String globs ) Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: java.lang.String The glob patterns to match. addGitIgnore public void addGitIgnore ( java . lang . String pattern ) Adds a .gitignore pattern. pattern Required Type: java.lang.String The glob pattern to ignore. addPackageIgnore public void addPackageIgnore ( java . lang . String _pattern ) Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . _pattern Required Type: java.lang.String The glob pattern to exclude. addTask public Task addTask ( java . lang . String name ) public Task addTask ( java . lang . String name , TaskOptions props ) Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: java.lang.String The task name to add. props Optional Type: io.github.cdklabs.projen.TaskOptions Task properties. ~~ addTip ~~ public void addTip ( java . lang . String message ) Prints a \"tip\" message during synthesis. message Required Type: java.lang.String The message. annotateGenerated public void annotateGenerated ( java . lang . String glob ) Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: java.lang.String the glob pattern to match (could be a file path). postSynthesize public void postSynthesize () Called after all components are synthesized. Order is not guaranteed. preSynthesize public void preSynthesize () Called before all components are synthesized. removeTask public Task removeTask ( java . lang . String name ) Removes a task from a project. name Required Type: java.lang.String The name of the task to remove. runTaskCommand public java . lang . String runTaskCommand ( Task task ) Returns the shell command to execute in order to run a task. By default, this is npx projen@<version> <task> task Required Type: io.github.cdklabs.projen.Task The task for which the command is required. synth public void synth () Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" tryFindFile public FileBase tryFindFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public JsonFile tryFindJsonFile ( java . lang . String filePath ) Finds a json file by name. filePath Required Type: java.lang.String The file path. tryFindObjectFile public ObjectFile tryFindObjectFile ( java . lang . String filePath ) Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: java.lang.String The file path. tryRemoveFile public FileBase tryRemoveFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and removes it. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. addDependency public void addDependency ( java . lang . String spec ) Adds a runtime dependency. spec Required Type: java.lang.String Format <module>@<semver> . addDevDependency public void addDevDependency ( java . lang . String spec ) Adds a dev dependency. spec Required Type: java.lang.String Format <module>@<semver> . Properties Name Type Description buildTask io.github.cdklabs.projen.Task No description. commitGenerated java.lang.Boolean Whether to commit the managed files by default. compileTask io.github.cdklabs.projen.Task No description. components java.util.List Returns all the components within this project. deps io.github.cdklabs.projen.Dependencies Project dependencies. ejected java.lang.Boolean Whether or not the project is being ejected. files java.util.List All files in this project. gitattributes io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore io.github.cdklabs.projen.IgnoreFile .gitignore. logger io.github.cdklabs.projen.Logger Logging utilities. name java.lang.String Project name. outdir java.lang.String Absolute output directory of this project. packageTask io.github.cdklabs.projen.Task No description. postCompileTask io.github.cdklabs.projen.Task No description. preCompileTask io.github.cdklabs.projen.Task No description. projectBuild io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand java.lang.String The command to use in order to run the projen CLI. root io.github.cdklabs.projen.Project The root project. tasks io.github.cdklabs.projen.Tasks Project tasks. testTask io.github.cdklabs.projen.Task No description. defaultTask io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". initProject io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . parent io.github.cdklabs.projen.Project A parent project. projectType io.github.cdklabs.projen.ProjectType No description. autoApprove io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github io.github.cdklabs.projen.github.GitHub Access all github components. gitpod io.github.cdklabs.projen.Gitpod Access for Gitpod. vscode io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. depsManager io.github.cdklabs.projen.python.IPythonDeps API for managing dependencies. envManager io.github.cdklabs.projen.python.IPythonEnv API for mangaging the Python runtime environment. moduleName java.lang.String Python module name (the project name, with any hyphens or periods replaced with underscores). version java.lang.String Version of the package for distribution (should follow semver). packagingManager io.github.cdklabs.projen.python.IPythonPackaging API for managing packaging the project as a library. pytest io.github.cdklabs.projen.python.Pytest Pytest component. apiSrcDir java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. generatedClients java.util.Map References to the client projects that were generated, keyed by language. generatedCodeDir java.lang.String The directory in which generated client code will be generated, relative to the outdir of this project. generatedPythonClient io.github.cdklabs.projen.python.PythonProject A reference to the generated python client. specDir java.lang.String The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. specFileName java.lang.String The name of the spec file. forceGenerateCodeAndDocs java.lang.Boolean Force to generate code and docs even if there were no changes in spec. buildTask Required public Task getBuildTask (); Type: io.github.cdklabs.projen.Task commitGenerated Required public java . lang . Boolean getCommitGenerated (); Type: java.lang.Boolean Whether to commit the managed files by default. compileTask Required public Task getCompileTask (); Type: io.github.cdklabs.projen.Task components Required public java . util . List < Component > getComponents (); Type: java.util.List Returns all the components within this project. deps Required public Dependencies getDeps (); Type: io.github.cdklabs.projen.Dependencies Project dependencies. ejected Required public java . lang . Boolean getEjected (); Type: java.lang.Boolean Whether or not the project is being ejected. files Required public java . util . List < FileBase > getFiles (); Type: java.util.List All files in this project. gitattributes Required public GitAttributesFile getGitattributes (); Type: io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public IgnoreFile getGitignore (); Type: io.github.cdklabs.projen.IgnoreFile .gitignore. logger Required public Logger getLogger (); Type: io.github.cdklabs.projen.Logger Logging utilities. name Required public java . lang . String getName (); Type: java.lang.String Project name. outdir Required public java . lang . String getOutdir (); Type: java.lang.String Absolute output directory of this project. packageTask Required public Task getPackageTask (); Type: io.github.cdklabs.projen.Task postCompileTask Required public Task getPostCompileTask (); Type: io.github.cdklabs.projen.Task preCompileTask Required public Task getPreCompileTask (); Type: io.github.cdklabs.projen.Task projectBuild Required public ProjectBuild getProjectBuild (); Type: io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand Required public java . lang . String getProjenCommand (); Type: java.lang.String The command to use in order to run the projen CLI. root Required public Project getRoot (); Type: io.github.cdklabs.projen.Project The root project. tasks Required public Tasks getTasks (); Type: io.github.cdklabs.projen.Tasks Project tasks. testTask Required public Task getTestTask (); Type: io.github.cdklabs.projen.Task defaultTask Optional public Task getDefaultTask (); Type: io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public InitProject getInitProject (); Type: io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project A parent project. If undefined, this is the root project. projectType Required public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType autoApprove Optional public AutoApprove getAutoApprove (); Type: io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public DevContainer getDevContainer (); Type: io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public GitHub getGithub (); Type: io.github.cdklabs.projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public Gitpod getGitpod (); Type: io.github.cdklabs.projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public VsCode getVscode (); Type: io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. depsManager Required public IPythonDeps getDepsManager (); Type: io.github.cdklabs.projen.python.IPythonDeps API for managing dependencies. envManager Required public IPythonEnv getEnvManager (); Type: io.github.cdklabs.projen.python.IPythonEnv API for mangaging the Python runtime environment. moduleName Required public java . lang . String getModuleName (); Type: java.lang.String Python module name (the project name, with any hyphens or periods replaced with underscores). version Required public java . lang . String getVersion (); Type: java.lang.String Version of the package for distribution (should follow semver). packagingManager Optional public IPythonPackaging getPackagingManager (); Type: io.github.cdklabs.projen.python.IPythonPackaging API for managing packaging the project as a library. Only applies when the projectType is LIB. pytest Optional public Pytest getPytest (); Type: io.github.cdklabs.projen.python.Pytest Pytest component. apiSrcDir Required public java . lang . String getApiSrcDir (); Type: java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. generatedClients Required public java . util . Map < java . lang . String , Project > getGeneratedClients (); Type: java.util.Map References to the client projects that were generated, keyed by language. generatedCodeDir Required public java . lang . String getGeneratedCodeDir (); Type: java.lang.String The directory in which generated client code will be generated, relative to the outdir of this project. generatedPythonClient Required public PythonProject getGeneratedPythonClient (); Type: io.github.cdklabs.projen.python.PythonProject A reference to the generated python client. specDir Required public java . lang . String getSpecDir (); Type: java.lang.String The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. specFileName Required public java . lang . String getSpecFileName (); Type: java.lang.String The name of the spec file. forceGenerateCodeAndDocs Optional public java . lang . Boolean getForceGenerateCodeAndDocs (); Type: java.lang.Boolean Force to generate code and docs even if there were no changes in spec. Constants Name Type Description DEFAULT_TASK java.lang.String The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public java . lang . String getDefaultTask (); Type: java.lang.String The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. OpenApiGatewayTsProject Synthesizes a Typescript Project with an OpenAPI spec, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests. Initializers import software.aws.awsprototypingsdk.openapigateway.OpenApiGatewayTsProject ; OpenApiGatewayTsProject . Builder . create () . name ( java . lang . String ) // .commitGenerated(java.lang.Boolean) // .gitOptions(GitOptions) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .renovatebot(java.lang.Boolean) // .renovatebotOptions(RenovatebotOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMerge(java.lang.Boolean) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenCredentials(GithubCredentials) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) // .allowLibraryDependencies(java.lang.Boolean) // .authorEmail(java.lang.String) // .authorName(java.lang.String) // .authorOrganization(java.lang.Boolean) // .authorUrl(java.lang.String) // .autoDetectBin(java.lang.Boolean) // .bin(java.util.Map<java.lang.String, java.lang.String>) // .bugsEmail(java.lang.String) // .bugsUrl(java.lang.String) // .bundledDeps(java.util.List<java.lang.String>) // .codeArtifactOptions(CodeArtifactOptions) // .deps(java.util.List<java.lang.String>) // .description(java.lang.String) // .devDeps(java.util.List<java.lang.String>) // .entrypoint(java.lang.String) // .homepage(java.lang.String) // .keywords(java.util.List<java.lang.String>) // .license(java.lang.String) // .licensed(java.lang.Boolean) // .maxNodeVersion(java.lang.String) // .minNodeVersion(java.lang.String) // .npmAccess(NpmAccess) // .npmRegistry(java.lang.String) // .npmRegistryUrl(java.lang.String) // .npmTokenSecret(java.lang.String) // .packageManager(NodePackageManager) // .packageName(java.lang.String) // .peerDependencyOptions(PeerDependencyOptions) // .peerDeps(java.util.List<java.lang.String>) // .pnpmVersion(java.lang.String) // .repository(java.lang.String) // .repositoryDirectory(java.lang.String) // .scopedPackagesOptions(java.util.List<ScopedPackagesOptions>) // .scripts(java.util.Map<java.lang.String, java.lang.String>) // .stability(java.lang.String) // .jsiiReleaseVersion(java.lang.String) // .majorVersion(java.lang.Number) // .minMajorVersion(java.lang.Number) // .npmDistTag(java.lang.String) // .postBuildSteps(java.util.List<JobStep>) // .prerelease(java.lang.String) // .publishDryRun(java.lang.Boolean) // .publishTasks(java.lang.Boolean) // .releaseBranches(java.util.Map<java.lang.String, BranchOptions>) // .releaseEveryCommit(java.lang.Boolean) // .releaseFailureIssue(java.lang.Boolean) // .releaseFailureIssueLabel(java.lang.String) // .releaseSchedule(java.lang.String) // .releaseTagPrefix(java.lang.String) // .releaseTrigger(ReleaseTrigger) // .releaseWorkflowName(java.lang.String) // .releaseWorkflowSetupSteps(java.util.List<JobStep>) // .versionrcOptions(java.util.Map<java.lang.String, java.lang.Object>) // .workflowContainerImage(java.lang.String) // .workflowRunsOn(java.util.List<java.lang.String>) . defaultReleaseBranch ( java . lang . String ) // .artifactsDirectory(java.lang.String) // .autoApproveUpgrades(java.lang.Boolean) // .buildWorkflow(java.lang.Boolean) // .buildWorkflowTriggers(Triggers) // .bundlerOptions(BundlerOptions) // .codeCov(java.lang.Boolean) // .codeCovTokenSecret(java.lang.String) // .copyrightOwner(java.lang.String) // .copyrightPeriod(java.lang.String) // .dependabot(java.lang.Boolean) // .dependabotOptions(DependabotOptions) // .depsUpgrade(java.lang.Boolean) // .depsUpgradeOptions(UpgradeDependenciesOptions) // .gitignore(java.util.List<java.lang.String>) // .jest(java.lang.Boolean) // .jestOptions(JestOptions) // .mutableBuild(java.lang.Boolean) // .npmignore(java.util.List<java.lang.String>) // .npmignoreEnabled(java.lang.Boolean) // .package(java.lang.Boolean) // .prettier(java.lang.Boolean) // .prettierOptions(PrettierOptions) // .projenDevDependency(java.lang.Boolean) // .projenrcJs(java.lang.Boolean) // .projenrcJsOptions(ProjenrcOptions) // .projenVersion(java.lang.String) // .pullRequestTemplate(java.lang.Boolean) // .pullRequestTemplateContents(java.util.List<java.lang.String>) // .release(java.lang.Boolean) // .releaseToNpm(java.lang.Boolean) // .releaseWorkflow(java.lang.Boolean) // .workflowBootstrapSteps(java.util.List<JobStep>) // .workflowGitIdentity(GitIdentity) // .workflowNodeVersion(java.lang.String) // .disableTsconfig(java.lang.Boolean) // .docgen(java.lang.Boolean) // .docsDirectory(java.lang.String) // .entrypointTypes(java.lang.String) // .eslint(java.lang.Boolean) // .eslintOptions(EslintOptions) // .libdir(java.lang.String) // .projenrcTs(java.lang.Boolean) // .projenrcTsOptions(ProjenrcOptions) // .sampleCode(java.lang.Boolean) // .srcdir(java.lang.String) // .testdir(java.lang.String) // .tsconfig(TypescriptConfigOptions) // .tsconfigDev(TypescriptConfigOptions) // .tsconfigDevFile(java.lang.String) // .typescriptVersion(java.lang.String) . clientLanguages ( java . util . List < ClientLanguage > ) // .apiSrcDir(java.lang.String) // .documentationFormats(java.util.List<DocumentationFormat>) // .forceGenerateCodeAndDocs(java.lang.Boolean) // .generatedCodeDir(java.lang.String) // .javaClientOptions(JavaProjectOptions) // .parsedSpecFileName(java.lang.String) // .pythonClientOptions(PythonProjectOptions) // .typescriptClientOptions(TypeScriptProjectOptions) // .specFile(java.lang.String) . build (); Name Type Description name java.lang.String This is the name of your project. commitGenerated java.lang.Boolean Whether to commit the managed files by default. gitOptions io.github.cdklabs.projen.GitOptions Configuration options for git. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. renovatebot java.lang.Boolean Use renovatebot to handle dependency upgrades. renovatebotOptions io.github.cdklabs.projen.RenovatebotOptions Options for renovatebot. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge java.lang.Boolean Enable automatic merging on GitHub. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenCredentials io.github.cdklabs.projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. allowLibraryDependencies java.lang.Boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail java.lang.String Author's e-mail. authorName java.lang.String Author's name. authorOrganization java.lang.Boolean Is the author an organization. authorUrl java.lang.String Author's URL / Website. autoDetectBin java.lang.Boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin java.util.Map Binary programs vended with your module. bugsEmail java.lang.String The email address to which issues should be reported. bugsUrl java.lang.String The url to your project's issue tracker. bundledDeps java.util.List List of dependencies to bundle into this module. codeArtifactOptions io.github.cdklabs.projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps java.util.List Runtime dependencies of this module. description java.lang.String The description is just a string that helps people understand the purpose of the package. devDeps java.util.List Build dependencies for this module. entrypoint java.lang.String Module entrypoint ( main in package.json ). homepage java.lang.String Package's Homepage / Website. keywords java.util.List Keywords to include in package.json . license java.lang.String License's SPDX identifier. licensed java.lang.Boolean Indicates if a license should be added. maxNodeVersion java.lang.String Minimum node.js version to require via engines (inclusive). minNodeVersion java.lang.String Minimum Node.js version to require via package.json engines (inclusive). npmAccess io.github.cdklabs.projen.javascript.NpmAccess Access level of the npm package. npmRegistry java.lang.String The host name of the npm registry to publish to. npmRegistryUrl java.lang.String The base URL of the npm package registry. npmTokenSecret java.lang.String GitHub secret which contains the NPM token to use when publishing packages. packageManager io.github.cdklabs.projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName java.lang.String The \"name\" in package.json. peerDependencyOptions io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps java.util.List Peer dependencies for this module. pnpmVersion java.lang.String The version of PNPM to use if using PNPM as a package manager. repository java.lang.String The repository is the location where the actual code for your package lives. repositoryDirectory java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions java.util.List Options for privately hosted scoped packages. scripts java.util.Map npm scripts to include. stability java.lang.String Package's Stability. jsiiReleaseVersion java.lang.String Version requirement of publib which is used to publish modules to npm. majorVersion java.lang.Number Major version to release from the default branch. minMajorVersion java.lang.Number Minimal Major version to release. npmDistTag java.lang.String The npmDistTag to use when publishing from the default branch. postBuildSteps java.util.List Steps to execute after build as part of the release workflow. prerelease java.lang.String Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun java.lang.Boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks java.lang.Boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches java.util.Map Defines additional release branches. releaseEveryCommit java.lang.Boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue java.lang.Boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel java.lang.String The label to apply to issues indicating publish failures. releaseSchedule java.lang.String CRON schedule to trigger new releases. releaseTagPrefix java.lang.String Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger io.github.cdklabs.projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName java.lang.String The name of the default release workflow. releaseWorkflowSetupSteps java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions java.util.Map Custom configuration used when creating changelog with standard-version package. workflowContainerImage java.lang.String Container image to use for GitHub workflows. workflowRunsOn java.util.List Github Runner selection labels. defaultReleaseBranch java.lang.String The name of the main release branch. artifactsDirectory java.lang.String A directory which will contain build artifacts. autoApproveUpgrades java.lang.Boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow java.lang.Boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers io.github.cdklabs.projen.github.workflows.Triggers Build workflow triggers. bundlerOptions io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov java.lang.Boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret java.lang.String Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner java.lang.String License copyright owner. copyrightPeriod java.lang.String The copyright years to put in the LICENSE file. dependabot java.lang.Boolean Use dependabot to handle dependency upgrades. dependabotOptions io.github.cdklabs.projen.github.DependabotOptions Options for dependabot. depsUpgrade java.lang.Boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore java.util.List Additional entries to .gitignore. jest java.lang.Boolean Setup jest unit tests. jestOptions io.github.cdklabs.projen.javascript.JestOptions Jest options. mutableBuild java.lang.Boolean Automatically update files modified during builds to pull-request branches. npmignore java.util.List Additional entries to .npmignore. npmignoreEnabled java.lang.Boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package java.lang.Boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier java.lang.Boolean Setup prettier. prettierOptions io.github.cdklabs.projen.javascript.PrettierOptions Prettier options. projenDevDependency java.lang.Boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs java.lang.Boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions io.github.cdklabs.projen.javascript.ProjenrcOptions Options for .projenrc.js. projenVersion java.lang.String Version of projen to install. pullRequestTemplate java.lang.Boolean Include a GitHub pull request template. pullRequestTemplateContents java.util.List The contents of the pull request template. release java.lang.Boolean Add release management to this project. releaseToNpm java.lang.Boolean Automatically release to npm when new versions are introduced. releaseWorkflow java.lang.Boolean DEPRECATED: renamed to release . workflowBootstrapSteps java.util.List Workflow steps to use in order to bootstrap this repo. workflowGitIdentity io.github.cdklabs.projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion java.lang.String The node version to use in GitHub workflows. disableTsconfig java.lang.Boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen java.lang.Boolean Docgen by Typedoc. docsDirectory java.lang.String Docs directory. entrypointTypes java.lang.String The .d.ts file that includes the type declarations for this module. eslint java.lang.Boolean Setup eslint. eslintOptions io.github.cdklabs.projen.javascript.EslintOptions Eslint options. libdir java.lang.String Typescript artifacts output directory. projenrcTs java.lang.Boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode java.lang.Boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir java.lang.String Typescript sources directory. testdir java.lang.String Jest tests directory. Tests files should be named xxx.test.ts . tsconfig io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile java.lang.String The name of the development tsconfig.json file. typescriptVersion java.lang.String TypeScript version to use. clientLanguages java.util.List< ClientLanguage > The list of languages for which clients will be generated. apiSrcDir java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats java.util.List< DocumentationFormat > Formats to generate documentation in. forceGenerateCodeAndDocs java.lang.Boolean Force to generate code and docs even if there were no changes in spec. generatedCodeDir java.lang.String The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions io.github.cdklabs.projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsedSpecFileName java.lang.String The name of the output parsed OpenAPI specification file. pythonClientOptions io.github.cdklabs.projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). typescriptClientOptions io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. specFile java.lang.String The path to the OpenAPI specification file, relative to the project source directory (srcdir). name Required Type: java.lang.String Default: $BASEDIR This is the name of your project. commitGenerated Optional Type: java.lang.Boolean Default: true Whether to commit the managed files by default. gitOptions Optional Type: io.github.cdklabs.projen.GitOptions Configuration options for git. logging Optional Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional Type: java.lang.Boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional Type: io.github.cdklabs.projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional Type: java.lang.Boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional Type: io.github.cdklabs.projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional Type: java.lang.Boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allowLibraryDependencies Optional Type: java.lang.Boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. authorEmail Optional Type: java.lang.String Author's e-mail. authorName Optional Type: java.lang.String Author's name. authorOrganization Optional Type: java.lang.Boolean Is the author an organization. authorUrl Optional Type: java.lang.String Author's URL / Website. autoDetectBin Optional Type: java.lang.Boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional Type: java.util.Map Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugsEmail Optional Type: java.lang.String The email address to which issues should be reported. bugsUrl Optional Type: java.lang.String The url to your project's issue tracker. bundledDeps Optional Type: java.util.List List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. codeArtifactOptions Optional Type: io.github.cdklabs.projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional Type: java.util.List Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ ' express ' , ' lodash ' , ' foo @ ^ 2 ' ] description Optional Type: java.lang.String The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description devDeps Optional Type: java.util.List Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ ' typescript ' , ' @types / express ' ] entrypoint Optional Type: java.lang.String Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional Type: java.lang.String Package's Homepage / Website. keywords Optional Type: java.util.List Keywords to include in package.json . license Optional Type: java.lang.String Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional Type: java.lang.Boolean Default: true Indicates if a license should be added. maxNodeVersion Optional Type: java.lang.String Default: no max Minimum node.js version to require via engines (inclusive). minNodeVersion Optional Type: java.lang.String Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npmAccess Optional Type: io.github.cdklabs.projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npmRegistry ~~ Optional Deprecated: use npmRegistryUrl instead Type: java.lang.String The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npmRegistryUrl Optional Type: java.lang.String Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npmTokenSecret Optional Type: java.lang.String Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. packageManager Optional Type: io.github.cdklabs.projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. packageName Optional Type: java.lang.String Default: defaults to project name The \"name\" in package.json. peerDependencyOptions Optional Type: io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps Optional Type: java.util.List Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. pnpmVersion Optional Type: java.lang.String Default: \"7\" The version of PNPM to use if using PNPM as a package manager. repository Optional Type: java.lang.String The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repositoryDirectory Optional Type: java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions Optional Type: java.util.List Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional Type: java.util.Map Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional Type: java.lang.String Package's Stability. jsiiReleaseVersion Optional Type: java.lang.String Default: \"latest\" Version requirement of publib which is used to publish modules to npm. majorVersion Optional Type: java.lang.Number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. minMajorVersion Optional Type: java.lang.Number Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npmDistTag Optional Type: java.lang.String Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. postBuildSteps Optional Type: java.util.List Default: [] Steps to execute after build as part of the release workflow. prerelease Optional Type: java.lang.String Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun Optional Type: java.lang.Boolean Default: false Instead of actually publishing to package managers, just print the publishing command. publishTasks Optional Type: java.lang.Boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. releaseBranches Optional Type: java.util.Map Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ releaseEveryCommit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead Type: java.lang.Boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue Optional Type: java.lang.Boolean Default: false Create a github issue on every failed publishing task. releaseFailureIssueLabel Optional Type: java.lang.String Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ releaseSchedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead Type: java.lang.String Default: no scheduled releases CRON schedule to trigger new releases. releaseTagPrefix Optional Type: java.lang.String Default: \"v\" Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. releaseTrigger Optional Type: io.github.cdklabs.projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. releaseWorkflowName Optional Type: java.lang.String Default: \"Release\" The name of the default release workflow. releaseWorkflowSetupSteps Optional Type: java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions Optional Type: java.util.Map Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflowContainerImage Optional Type: java.lang.String Default: default image Container image to use for GitHub workflows. workflowRunsOn Optional Type: java.util.List Default: [\"ubuntu-latest\"] Github Runner selection labels. defaultReleaseBranch Required Type: java.lang.String Default: \"main\" The name of the main release branch. artifactsDirectory Optional Type: java.lang.String Default: \"dist\" A directory which will contain build artifacts. autoApproveUpgrades Optional Type: java.lang.Boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. buildWorkflow Optional Type: java.lang.Boolean Default: true if not a subproject Define a GitHub workflow for building PRs. buildWorkflowTriggers Optional Type: io.github.cdklabs.projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundlerOptions Optional Type: io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov Optional Type: java.lang.Boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret Optional Type: java.lang.String Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner Optional Type: java.lang.String Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyrightPeriod Optional Type: java.lang.String Default: current year The copyright years to put in the LICENSE file. dependabot Optional Type: java.lang.Boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabotOptions Optional Type: io.github.cdklabs.projen.github.DependabotOptions Default: default options Options for dependabot. depsUpgrade Optional Type: java.lang.Boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . depsUpgradeOptions Optional Type: io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional Type: java.util.List Additional entries to .gitignore. jest Optional Type: java.lang.Boolean Default: true Setup jest unit tests. jestOptions Optional Type: io.github.cdklabs.projen.javascript.JestOptions Default: default options Jest options. mutableBuild Optional Type: java.lang.Boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore Type: java.util.List Additional entries to .npmignore. npmignoreEnabled Optional Type: java.lang.Boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional Type: java.lang.Boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional Type: java.lang.Boolean Default: false Setup prettier. prettierOptions Optional Type: io.github.cdklabs.projen.javascript.PrettierOptions Default: default options Prettier options. projenDevDependency Optional Type: java.lang.Boolean Default: true Indicates of \"projen\" should be installed as a devDependency. projenrcJs Optional Type: java.lang.Boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions Optional Type: io.github.cdklabs.projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projenVersion Optional Type: java.lang.String Default: Defaults to the latest version. Version of projen to install. pullRequestTemplate Optional Type: java.lang.Boolean Default: true Include a GitHub pull request template. pullRequestTemplateContents Optional Type: java.util.List Default: default content The contents of the pull request template. release Optional Type: java.lang.Boolean Default: true (false for subprojects) Add release management to this project. releaseToNpm Optional Type: java.lang.Boolean Default: false Automatically release to npm when new versions are introduced. ~~ releaseWorkflow ~~ Optional Deprecated: see release . Type: java.lang.Boolean Default: true if not a subproject DEPRECATED: renamed to release . workflowBootstrapSteps Optional Type: java.util.List Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflowGitIdentity Optional Type: io.github.cdklabs.projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflowNodeVersion Optional Type: java.lang.String Default: same as minNodeVersion The node version to use in GitHub workflows. disableTsconfig Optional Type: java.lang.Boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional Type: java.lang.Boolean Default: false Docgen by Typedoc. docsDirectory Optional Type: java.lang.String Default: \"docs\" Docs directory. entrypointTypes Optional Type: java.lang.String Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional Type: java.lang.Boolean Default: true Setup eslint. eslintOptions Optional Type: io.github.cdklabs.projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional Type: java.lang.String Default: \"lib\" Typescript artifacts output directory. projenrcTs Optional Type: java.lang.Boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions Optional Type: io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode Optional Type: java.lang.Boolean Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional Type: java.lang.String Default: \"src\" Typescript sources directory. testdir Optional Type: java.lang.String Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfigDev Optional Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile Optional Type: java.lang.String Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescriptVersion Optional Type: java.lang.String Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). clientLanguages Required Type: java.util.List< ClientLanguage > The list of languages for which clients will be generated. A typescript client will always be generated. apiSrcDir Optional Type: java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats Optional Type: java.util.List< DocumentationFormat > Formats to generate documentation in. forceGenerateCodeAndDocs Optional Type: java.lang.Boolean Default: \"false\" Force to generate code and docs even if there were no changes in spec. generatedCodeDir Optional Type: java.lang.String Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions Optional Type: io.github.cdklabs.projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsedSpecFileName Optional Type: java.lang.String Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. pythonClientOptions Optional Type: io.github.cdklabs.projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. typescriptClientOptions Optional Type: io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. specFile Optional Type: java.lang.String Default: \"spec/spec.yaml\" The path to the OpenAPI specification file, relative to the project source directory (srcdir). Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. tryRemoveFile Finds a file at the specified relative path within this project and removes it. addBins No description. addBundledDeps Defines bundled dependencies. addCompileCommand DEPRECATED. addDeps Defines normal dependencies. addDevDeps Defines development/test dependencies. addFields Directly set fields in package.json . addKeywords Adds keywords to package.json (deduplicated). addPeerDeps Defines peer dependencies. addTestCommand DEPRECATED. hasScript Indicates if a script by the name name is defined. removeScript Removes the npm script (always successful). renderWorkflowSetup Returns the set of workflow steps which should be executed to bootstrap a workflow. setScript Replaces the contents of an npm package.json script. addExcludeFromCleanup public void addExcludeFromCleanup ( java . lang . String globs ) Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: java.lang.String The glob patterns to match. addGitIgnore public void addGitIgnore ( java . lang . String pattern ) Adds a .gitignore pattern. pattern Required Type: java.lang.String The glob pattern to ignore. addPackageIgnore public void addPackageIgnore ( java . lang . String pattern ) Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . pattern Required Type: java.lang.String addTask public Task addTask ( java . lang . String name ) public Task addTask ( java . lang . String name , TaskOptions props ) Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: java.lang.String The task name to add. props Optional Type: io.github.cdklabs.projen.TaskOptions Task properties. ~~ addTip ~~ public void addTip ( java . lang . String message ) Prints a \"tip\" message during synthesis. message Required Type: java.lang.String The message. annotateGenerated public void annotateGenerated ( java . lang . String glob ) Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: java.lang.String the glob pattern to match (could be a file path). postSynthesize public void postSynthesize () Called after all components are synthesized. Order is not guaranteed. preSynthesize public void preSynthesize () Called before all components are synthesized. removeTask public Task removeTask ( java . lang . String name ) Removes a task from a project. name Required Type: java.lang.String The name of the task to remove. runTaskCommand public java . lang . String runTaskCommand ( Task task ) Returns the shell command to execute in order to run a task. This will typically be npx projen TASK . task Required Type: io.github.cdklabs.projen.Task The task for which the command is required. synth public void synth () Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" tryFindFile public FileBase tryFindFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public JsonFile tryFindJsonFile ( java . lang . String filePath ) Finds a json file by name. filePath Required Type: java.lang.String The file path. tryFindObjectFile public ObjectFile tryFindObjectFile ( java . lang . String filePath ) Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: java.lang.String The file path. tryRemoveFile public FileBase tryRemoveFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and removes it. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. addBins public void addBins ( java . util . Map < java . lang . String , java . lang . String > bins ) bins Required Type: java.util.Map addBundledDeps public void addBundledDeps ( java . lang . String deps ) Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json . deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addCompileCommand ~~ public void addCompileCommand ( java . lang . String commands ) DEPRECATED. commands Required Type: java.lang.String addDeps public void addDeps ( java . lang . String deps ) Defines normal dependencies. deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addDevDeps public void addDevDeps ( java . lang . String deps ) Defines development/test dependencies. deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addFields public void addFields ( java . util . Map < java . lang . String , java . lang . Object > fields ) Directly set fields in package.json . fields Required Type: java.util.Map The fields to set. addKeywords public void addKeywords ( java . lang . String keywords ) Adds keywords to package.json (deduplicated). keywords Required Type: java.lang.String The keywords to add. addPeerDeps public void addPeerDeps ( java . lang . String deps ) Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers. deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addTestCommand ~~ public void addTestCommand ( java . lang . String commands ) DEPRECATED. commands Required Type: java.lang.String hasScript public java . lang . Boolean hasScript ( java . lang . String name ) Indicates if a script by the name name is defined. name Required Type: java.lang.String The name of the script. removeScript public void removeScript ( java . lang . String name ) Removes the npm script (always successful). name Required Type: java.lang.String The name of the script. renderWorkflowSetup public java . util . List < JobStep > renderWorkflowSetup () public java . util . List < JobStep > renderWorkflowSetup ( RenderWorkflowSetupOptions options ) Returns the set of workflow steps which should be executed to bootstrap a workflow. options Optional Type: io.github.cdklabs.projen.javascript.RenderWorkflowSetupOptions Options. setScript public void setScript ( java . lang . String name , java . lang . String command ) Replaces the contents of an npm package.json script. name Required Type: java.lang.String The script name. command Required Type: java.lang.String The command to execute. Properties Name Type Description buildTask io.github.cdklabs.projen.Task No description. commitGenerated java.lang.Boolean Whether to commit the managed files by default. compileTask io.github.cdklabs.projen.Task No description. components java.util.List Returns all the components within this project. deps io.github.cdklabs.projen.Dependencies Project dependencies. ejected java.lang.Boolean Whether or not the project is being ejected. files java.util.List All files in this project. gitattributes io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore io.github.cdklabs.projen.IgnoreFile .gitignore. logger io.github.cdklabs.projen.Logger Logging utilities. name java.lang.String Project name. outdir java.lang.String Absolute output directory of this project. packageTask io.github.cdklabs.projen.Task No description. postCompileTask io.github.cdklabs.projen.Task No description. preCompileTask io.github.cdklabs.projen.Task No description. projectBuild io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand java.lang.String The command to use in order to run the projen CLI. root io.github.cdklabs.projen.Project The root project. tasks io.github.cdklabs.projen.Tasks Project tasks. testTask io.github.cdklabs.projen.Task No description. defaultTask io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". initProject io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . parent io.github.cdklabs.projen.Project A parent project. projectType io.github.cdklabs.projen.ProjectType No description. autoApprove io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github io.github.cdklabs.projen.github.GitHub Access all github components. gitpod io.github.cdklabs.projen.Gitpod Access for Gitpod. vscode io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. allowLibraryDependencies java.lang.Boolean No description. artifactsDirectory java.lang.String The build output directory. artifactsJavascriptDirectory java.lang.String The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler io.github.cdklabs.projen.javascript.Bundler No description. entrypoint java.lang.String No description. manifest java.lang.Object No description. package io.github.cdklabs.projen.javascript.NodePackage API for managing the node package. packageManager io.github.cdklabs.projen.javascript.NodePackageManager The package manager to use. runScriptCommand java.lang.String The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge io.github.cdklabs.projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. buildWorkflow io.github.cdklabs.projen.build.BuildWorkflow The PR build GitHub workflow. buildWorkflowJobId java.lang.String The job ID of the build workflow. jest io.github.cdklabs.projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion java.lang.String Maximum node version required by this package. minNodeVersion java.lang.String Minimum node.js version required by this package. npmignore io.github.cdklabs.projen.IgnoreFile The .npmignore file. prettier io.github.cdklabs.projen.javascript.Prettier No description. publisher io.github.cdklabs.projen.release.Publisher Package publisher. release io.github.cdklabs.projen.release.Release Release management. upgradeWorkflow io.github.cdklabs.projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory java.lang.String No description. libdir java.lang.String The directory in which compiled .js files reside. srcdir java.lang.String The directory in which the .ts sources reside. testdir java.lang.String The directory in which tests reside. tsconfigDev io.github.cdklabs.projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask io.github.cdklabs.projen.Task The \"watch\" task. docgen java.lang.Boolean No description. eslint io.github.cdklabs.projen.javascript.Eslint No description. tsconfig io.github.cdklabs.projen.javascript.TypescriptConfig No description. tsconfigEslint io.github.cdklabs.projen.javascript.TypescriptConfig No description. apiSrcDir java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. forceGenerateCodeAndDocs java.lang.Boolean Force to generate code and docs even if there were no changes in spec. generatedClients java.util.Map References to the client projects that were generated, keyed by language. generatedCodeDir java.lang.String The directory in which generated client code will be generated, relative to the outdir of this project. generatedTypescriptClient io.github.cdklabs.projen.typescript.TypeScriptProject A reference to the generated typescript client. specDir java.lang.String The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. specFileName java.lang.String The name of the spec file. pnpmWorkspace io.github.cdklabs.projen.YamlFile Reference to the PNPM workspace yaml file which adds the dependency between this project and the generated typescript client when this project is used in a monorepo, and the package manager is PNPM. buildTask Required public Task getBuildTask (); Type: io.github.cdklabs.projen.Task commitGenerated Required public java . lang . Boolean getCommitGenerated (); Type: java.lang.Boolean Whether to commit the managed files by default. compileTask Required public Task getCompileTask (); Type: io.github.cdklabs.projen.Task components Required public java . util . List < Component > getComponents (); Type: java.util.List Returns all the components within this project. deps Required public Dependencies getDeps (); Type: io.github.cdklabs.projen.Dependencies Project dependencies. ejected Required public java . lang . Boolean getEjected (); Type: java.lang.Boolean Whether or not the project is being ejected. files Required public java . util . List < FileBase > getFiles (); Type: java.util.List All files in this project. gitattributes Required public GitAttributesFile getGitattributes (); Type: io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public IgnoreFile getGitignore (); Type: io.github.cdklabs.projen.IgnoreFile .gitignore. logger Required public Logger getLogger (); Type: io.github.cdklabs.projen.Logger Logging utilities. name Required public java . lang . String getName (); Type: java.lang.String Project name. outdir Required public java . lang . String getOutdir (); Type: java.lang.String Absolute output directory of this project. packageTask Required public Task getPackageTask (); Type: io.github.cdklabs.projen.Task postCompileTask Required public Task getPostCompileTask (); Type: io.github.cdklabs.projen.Task preCompileTask Required public Task getPreCompileTask (); Type: io.github.cdklabs.projen.Task projectBuild Required public ProjectBuild getProjectBuild (); Type: io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand Required public java . lang . String getProjenCommand (); Type: java.lang.String The command to use in order to run the projen CLI. root Required public Project getRoot (); Type: io.github.cdklabs.projen.Project The root project. tasks Required public Tasks getTasks (); Type: io.github.cdklabs.projen.Tasks Project tasks. testTask Required public Task getTestTask (); Type: io.github.cdklabs.projen.Task defaultTask Optional public Task getDefaultTask (); Type: io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public InitProject getInitProject (); Type: io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project A parent project. If undefined, this is the root project. projectType Required public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType autoApprove Optional public AutoApprove getAutoApprove (); Type: io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public DevContainer getDevContainer (); Type: io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public GitHub getGithub (); Type: io.github.cdklabs.projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public Gitpod getGitpod (); Type: io.github.cdklabs.projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public VsCode getVscode (); Type: io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. ~~ allowLibraryDependencies ~~ Required Deprecated: use package.allowLibraryDependencies public java . lang . Boolean getAllowLibraryDependencies (); Type: java.lang.Boolean artifactsDirectory Required public java . lang . String getArtifactsDirectory (); Type: java.lang.String The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg . artifactsJavascriptDirectory Required public java . lang . String getArtifactsJavascriptDirectory (); Type: java.lang.String The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler Required public Bundler getBundler (); Type: io.github.cdklabs.projen.javascript.Bundler ~~ entrypoint ~~ Required Deprecated: use package.entrypoint public java . lang . String getEntrypoint (); Type: java.lang.String ~~ manifest ~~ Required Deprecated: use package.addField(x, y) public java . lang . Object getManifest (); Type: java.lang.Object package Required public NodePackage getPackage (); Type: io.github.cdklabs.projen.javascript.NodePackage API for managing the node package. ~~ packageManager ~~ Required Deprecated: use package.packageManager public NodePackageManager getPackageManager (); Type: io.github.cdklabs.projen.javascript.NodePackageManager The package manager to use. runScriptCommand Required public java . lang . String getRunScriptCommand (); Type: java.lang.String The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge Optional public AutoMerge getAutoMerge (); Type: io.github.cdklabs.projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. buildWorkflow Optional public BuildWorkflow getBuildWorkflow (); Type: io.github.cdklabs.projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled. buildWorkflowJobId Optional public java . lang . String getBuildWorkflowJobId (); Type: java.lang.String The job ID of the build workflow. jest Optional public Jest getJest (); Type: io.github.cdklabs.projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion Optional public java . lang . String getMaxNodeVersion (); Type: java.lang.String Maximum node version required by this package. minNodeVersion Optional public java . lang . String getMinNodeVersion (); Type: java.lang.String Minimum node.js version required by this package. npmignore Optional public IgnoreFile getNpmignore (); Type: io.github.cdklabs.projen.IgnoreFile The .npmignore file. prettier Optional public Prettier getPrettier (); Type: io.github.cdklabs.projen.javascript.Prettier ~~ publisher ~~ Optional Deprecated: use release.publisher . public Publisher getPublisher (); Type: io.github.cdklabs.projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow. release Optional public Release getRelease (); Type: io.github.cdklabs.projen.release.Release Release management. upgradeWorkflow Optional public UpgradeDependencies getUpgradeWorkflow (); Type: io.github.cdklabs.projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory Required public java . lang . String getDocsDirectory (); Type: java.lang.String libdir Required public java . lang . String getLibdir (); Type: java.lang.String The directory in which compiled .js files reside. srcdir Required public java . lang . String getSrcdir (); Type: java.lang.String The directory in which the .ts sources reside. testdir Required public java . lang . String getTestdir (); Type: java.lang.String The directory in which tests reside. tsconfigDev Required public TypescriptConfig getTsconfigDev (); Type: io.github.cdklabs.projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask Required public Task getWatchTask (); Type: io.github.cdklabs.projen.Task The \"watch\" task. docgen Optional public java . lang . Boolean getDocgen (); Type: java.lang.Boolean eslint Optional public Eslint getEslint (); Type: io.github.cdklabs.projen.javascript.Eslint tsconfig Optional public TypescriptConfig getTsconfig (); Type: io.github.cdklabs.projen.javascript.TypescriptConfig tsconfigEslint Optional public TypescriptConfig getTsconfigEslint (); Type: io.github.cdklabs.projen.javascript.TypescriptConfig apiSrcDir Required public java . lang . String getApiSrcDir (); Type: java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. forceGenerateCodeAndDocs Required public java . lang . Boolean getForceGenerateCodeAndDocs (); Type: java.lang.Boolean Force to generate code and docs even if there were no changes in spec. generatedClients Required public java . util . Map < java . lang . String , Project > getGeneratedClients (); Type: java.util.Map References to the client projects that were generated, keyed by language. generatedCodeDir Required public java . lang . String getGeneratedCodeDir (); Type: java.lang.String The directory in which generated client code will be generated, relative to the outdir of this project. generatedTypescriptClient Required public TypeScriptProject getGeneratedTypescriptClient (); Type: io.github.cdklabs.projen.typescript.TypeScriptProject A reference to the generated typescript client. specDir Required public java . lang . String getSpecDir (); Type: java.lang.String The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. specFileName Required public java . lang . String getSpecFileName (); Type: java.lang.String The name of the spec file. pnpmWorkspace Optional public YamlFile getPnpmWorkspace (); Type: io.github.cdklabs.projen.YamlFile Reference to the PNPM workspace yaml file which adds the dependency between this project and the generated typescript client when this project is used in a monorepo, and the package manager is PNPM. Constants Name Type Description DEFAULT_TASK java.lang.String The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public java . lang . String getDefaultTask (); Type: java.lang.String The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. SmithyApiGatewayJavaProject Synthesizes a Java Project with a Smithy model, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests. Initializers import software.aws.awsprototypingsdk.openapigateway.SmithyApiGatewayJavaProject ; SmithyApiGatewayJavaProject . Builder . create () . name ( java . lang . String ) // .commitGenerated(java.lang.Boolean) // .gitOptions(GitOptions) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .renovatebot(java.lang.Boolean) // .renovatebotOptions(RenovatebotOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMerge(java.lang.Boolean) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenCredentials(GithubCredentials) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) . artifactId ( java . lang . String ) . groupId ( java . lang . String ) . version ( java . lang . String ) // .description(java.lang.String) // .packaging(java.lang.String) // .url(java.lang.String) // .compileOptions(MavenCompileOptions) // .deps(java.util.List<java.lang.String>) // .distdir(java.lang.String) // .junit(java.lang.Boolean) // .junitOptions(JunitOptions) // .packagingOptions(MavenPackagingOptions) // .projenrcJava(java.lang.Boolean) // .projenrcJavaOptions(ProjenrcOptions) // .testDeps(java.util.List<java.lang.String>) // .sample(java.lang.Boolean) // .sampleJavaPackage(java.lang.String) . clientLanguages ( java . util . List < ClientLanguage > ) // .apiSrcDir(java.lang.String) // .documentationFormats(java.util.List<DocumentationFormat>) // .forceGenerateCodeAndDocs(java.lang.Boolean) // .generatedCodeDir(java.lang.String) // .javaClientOptions(JavaProjectOptions) // .parsedSpecFileName(java.lang.String) // .pythonClientOptions(PythonProjectOptions) // .typescriptClientOptions(TypeScriptProjectOptions) . serviceName ( SmithyServiceName ) // .ignoreGradleWrapper(java.lang.Boolean) // .ignoreSmithyBuildOutput(java.lang.Boolean) // .modelDir(java.lang.String) // .smithyBuildOptions(SmithyBuildOptions) . build (); Name Type Description name java.lang.String This is the name of your project. commitGenerated java.lang.Boolean Whether to commit the managed files by default. gitOptions io.github.cdklabs.projen.GitOptions Configuration options for git. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. renovatebot java.lang.Boolean Use renovatebot to handle dependency upgrades. renovatebotOptions io.github.cdklabs.projen.RenovatebotOptions Options for renovatebot. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge java.lang.Boolean Enable automatic merging on GitHub. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenCredentials io.github.cdklabs.projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. artifactId java.lang.String The artifactId is generally the name that the project is known by. groupId java.lang.String This is generally unique amongst an organization or a project. version java.lang.String This is the last piece of the naming puzzle. description java.lang.String Description of a project is always good. packaging java.lang.String Project packaging format. url java.lang.String The URL, like the name, is not required. compileOptions io.github.cdklabs.projen.java.MavenCompileOptions Compile options. deps java.util.List List of runtime dependencies for this project. distdir java.lang.String Final artifact output directory. junit java.lang.Boolean Include junit tests. junitOptions io.github.cdklabs.projen.java.JunitOptions junit options. packagingOptions io.github.cdklabs.projen.java.MavenPackagingOptions Packaging options. projenrcJava java.lang.Boolean Use projenrc in java. projenrcJavaOptions io.github.cdklabs.projen.java.ProjenrcOptions Options related to projenrc in java. testDeps java.util.List List of test dependencies for this project. sample java.lang.Boolean Include sample code and test if the relevant directories don't exist. sampleJavaPackage java.lang.String The java package to use for the code sample. clientLanguages java.util.List< ClientLanguage > The list of languages for which clients will be generated. apiSrcDir java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats java.util.List< DocumentationFormat > Formats to generate documentation in. forceGenerateCodeAndDocs java.lang.Boolean Force to generate code and docs even if there were no changes in spec. generatedCodeDir java.lang.String The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions io.github.cdklabs.projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsedSpecFileName java.lang.String The name of the output parsed OpenAPI specification file. pythonClientOptions io.github.cdklabs.projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). typescriptClientOptions io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. serviceName SmithyServiceName The name of the Smithy service from your model which will be targeted for deployment and client generation. ignoreGradleWrapper java.lang.Boolean Set to false if you would like to check in your gradle wrapper. ignoreSmithyBuildOutput java.lang.Boolean Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. modelDir java.lang.String The path to the Smithy model directory, relative to the project source directory (srcdir). smithyBuildOptions SmithyBuildOptions Any additional properties you'd like to add your smithy-build.json. The smithy-build.json will automatically include the \"openapi\" plugin, but you can add extra configuration for that via this option if you like. name Required Type: java.lang.String Default: $BASEDIR This is the name of your project. commitGenerated Optional Type: java.lang.Boolean Default: true Whether to commit the managed files by default. gitOptions Optional Type: io.github.cdklabs.projen.GitOptions Configuration options for git. logging Optional Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional Type: java.lang.Boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional Type: io.github.cdklabs.projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional Type: java.lang.Boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional Type: io.github.cdklabs.projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional Type: java.lang.Boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. artifactId Required Type: java.lang.String Default: \"my-app\" The artifactId is generally the name that the project is known by. Although the groupId is important, people within the group will rarely mention the groupId in discussion (they are often all be the same ID, such as the MojoHaus project groupId: org.codehaus.mojo). It, along with the groupId, creates a key that separates this project from every other project in the world (at least, it should :) ). Along with the groupId, the artifactId fully defines the artifact's living quarters within the repository. In the case of the above project, my-project lives in $M2_REPO/org/codehaus/mojo/my-project. groupId Required Type: java.lang.String Default: \"org.acme\" This is generally unique amongst an organization or a project. For example, all core Maven artifacts do (well, should) live under the groupId org.apache.maven. Group ID's do not necessarily use the dot notation, for example, the junit project. Note that the dot-notated groupId does not have to correspond to the package structure that the project contains. It is, however, a good practice to follow. When stored within a repository, the group acts much like the Java packaging structure does in an operating system. The dots are replaced by OS specific directory separators (such as '/' in Unix) which becomes a relative directory structure from the base repository. In the example given, the org.codehaus.mojo group lives within the directory $M2_REPO/org/codehaus/mojo. version Required Type: java.lang.String Default: \"0.1.0\" This is the last piece of the naming puzzle. groupId:artifactId denotes a single project but they cannot delineate which incarnation of that project we are talking about. Do we want the junit:junit of 2018 (version 4.12), or of 2007 (version 3.8.2)? In short: code changes, those changes should be versioned, and this element keeps those versions in line. It is also used within an artifact's repository to separate versions from each other. my-project version 1.0 files live in the directory structure $M2_REPO/org/codehaus/mojo/my-project/1.0. description Optional Type: java.lang.String Default: undefined Description of a project is always good. Although this should not replace formal documentation, a quick comment to any readers of the POM is always helpful. packaging Optional Type: java.lang.String Default: \"jar\" Project packaging format. url Optional Type: java.lang.String Default: undefined The URL, like the name, is not required. This is a nice gesture for projects users, however, so that they know where the project lives. compileOptions Optional Type: io.github.cdklabs.projen.java.MavenCompileOptions Default: defaults Compile options. deps Optional Type: java.util.List Default: [] List of runtime dependencies for this project. Dependencies use the format: <groupId>/<artifactId>@<semver> Additional dependencies can be added via project.addDependency() . distdir Optional Type: java.lang.String Default: \"dist/java\" Final artifact output directory. junit Optional Type: java.lang.Boolean Default: true Include junit tests. junitOptions Optional Type: io.github.cdklabs.projen.java.JunitOptions Default: defaults junit options. packagingOptions Optional Type: io.github.cdklabs.projen.java.MavenPackagingOptions Default: defaults Packaging options. projenrcJava Optional Type: java.lang.Boolean Default: true Use projenrc in java. This will install projen as a java dependency and will add a synth task which will compile & execute main() from src/main/java/projenrc.java . projenrcJavaOptions Optional Type: io.github.cdklabs.projen.java.ProjenrcOptions Default: default options Options related to projenrc in java. testDeps Optional Type: java.util.List Default: [] List of test dependencies for this project. Dependencies use the format: <groupId>/<artifactId>@<semver> Additional dependencies can be added via project.addTestDependency() . sample Optional Type: java.lang.Boolean Default: true Include sample code and test if the relevant directories don't exist. sampleJavaPackage Optional Type: java.lang.String Default: \"org.acme\" The java package to use for the code sample. clientLanguages Required Type: java.util.List< ClientLanguage > The list of languages for which clients will be generated. A typescript client will always be generated. apiSrcDir Optional Type: java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats Optional Type: java.util.List< DocumentationFormat > Formats to generate documentation in. forceGenerateCodeAndDocs Optional Type: java.lang.Boolean Default: \"false\" Force to generate code and docs even if there were no changes in spec. generatedCodeDir Optional Type: java.lang.String Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions Optional Type: io.github.cdklabs.projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsedSpecFileName Optional Type: java.lang.String Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. pythonClientOptions Optional Type: io.github.cdklabs.projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. typescriptClientOptions Optional Type: io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. serviceName Required Type: SmithyServiceName Default: \"example.hello#Hello\" The name of the Smithy service from your model which will be targeted for deployment and client generation. On initial project synthesis this service name will be written to the sample \"hello world\" model. If you change this value after initial synthesis you will need to manually update your Smithy models to match, unless you delete the \"model\" directory. Likewise, if you change the namespace or service name in your Smithy models you will need to update this value to ensure your service can be found. ignoreGradleWrapper Optional Type: java.lang.Boolean Default: true Set to false if you would like to check in your gradle wrapper. Do so if you would like to use a different version of gradle to the one provided by default ignoreSmithyBuildOutput Optional Type: java.lang.Boolean Default: true Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. modelDir Optional Type: java.lang.String Default: \"model\" The path to the Smithy model directory, relative to the project source directory (srcdir). smithyBuildOptions Optional Type: SmithyBuildOptions Any additional properties you'd like to add your smithy-build.json. The smithy-build.json will automatically include the \"openapi\" plugin, but you can add extra configuration for that via this option if you like. https://awslabs.github.io/smithy/2.0/guides/converting-to-openapi.html#openapi-configuration-settings Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. tryRemoveFile Finds a file at the specified relative path within this project and removes it. addDependency Adds a runtime dependency. addPlugin Adds a build plugin to the pom. addTestDependency Adds a test dependency. addExcludeFromCleanup public void addExcludeFromCleanup ( java . lang . String globs ) Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: java.lang.String The glob patterns to match. addGitIgnore public void addGitIgnore ( java . lang . String pattern ) Adds a .gitignore pattern. pattern Required Type: java.lang.String The glob pattern to ignore. addPackageIgnore public void addPackageIgnore ( java . lang . String _pattern ) Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . _pattern Required Type: java.lang.String The glob pattern to exclude. addTask public Task addTask ( java . lang . String name ) public Task addTask ( java . lang . String name , TaskOptions props ) Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: java.lang.String The task name to add. props Optional Type: io.github.cdklabs.projen.TaskOptions Task properties. ~~ addTip ~~ public void addTip ( java . lang . String message ) Prints a \"tip\" message during synthesis. message Required Type: java.lang.String The message. annotateGenerated public void annotateGenerated ( java . lang . String glob ) Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: java.lang.String the glob pattern to match (could be a file path). postSynthesize public void postSynthesize () Called after all components are synthesized. Order is not guaranteed. preSynthesize public void preSynthesize () Called before all components are synthesized. removeTask public Task removeTask ( java . lang . String name ) Removes a task from a project. name Required Type: java.lang.String The name of the task to remove. runTaskCommand public java . lang . String runTaskCommand ( Task task ) Returns the shell command to execute in order to run a task. By default, this is npx projen@<version> <task> task Required Type: io.github.cdklabs.projen.Task The task for which the command is required. synth public void synth () Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" tryFindFile public FileBase tryFindFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public JsonFile tryFindJsonFile ( java . lang . String filePath ) Finds a json file by name. filePath Required Type: java.lang.String The file path. tryFindObjectFile public ObjectFile tryFindObjectFile ( java . lang . String filePath ) Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: java.lang.String The file path. tryRemoveFile public FileBase tryRemoveFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and removes it. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. addDependency public void addDependency ( java . lang . String spec ) Adds a runtime dependency. spec Required Type: java.lang.String Format <groupId>/<artifactId>@<semver> . addPlugin public Dependency addPlugin ( java . lang . String spec ) public Dependency addPlugin ( java . lang . String spec , PluginOptions options ) Adds a build plugin to the pom. The plug in is also added as a BUILD dep to the project. spec Required Type: java.lang.String dependency spec ( group/artifact@version ). options Optional Type: io.github.cdklabs.projen.java.PluginOptions plugin options. addTestDependency public void addTestDependency ( java . lang . String spec ) Adds a test dependency. spec Required Type: java.lang.String Format <groupId>/<artifactId>@<semver> . Properties Name Type Description buildTask io.github.cdklabs.projen.Task No description. commitGenerated java.lang.Boolean Whether to commit the managed files by default. compileTask io.github.cdklabs.projen.Task No description. components java.util.List Returns all the components within this project. deps io.github.cdklabs.projen.Dependencies Project dependencies. ejected java.lang.Boolean Whether or not the project is being ejected. files java.util.List All files in this project. gitattributes io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore io.github.cdklabs.projen.IgnoreFile .gitignore. logger io.github.cdklabs.projen.Logger Logging utilities. name java.lang.String Project name. outdir java.lang.String Absolute output directory of this project. packageTask io.github.cdklabs.projen.Task No description. postCompileTask io.github.cdklabs.projen.Task No description. preCompileTask io.github.cdklabs.projen.Task No description. projectBuild io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand java.lang.String The command to use in order to run the projen CLI. root io.github.cdklabs.projen.Project The root project. tasks io.github.cdklabs.projen.Tasks Project tasks. testTask io.github.cdklabs.projen.Task No description. defaultTask io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". initProject io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . parent io.github.cdklabs.projen.Project A parent project. projectType io.github.cdklabs.projen.ProjectType No description. autoApprove io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github io.github.cdklabs.projen.github.GitHub Access all github components. gitpod io.github.cdklabs.projen.Gitpod Access for Gitpod. vscode io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. compile io.github.cdklabs.projen.java.MavenCompile Compile component. distdir java.lang.String Maven artifact output directory. packaging io.github.cdklabs.projen.java.MavenPackaging Packaging component. pom io.github.cdklabs.projen.java.Pom API for managing pom.xml . junit io.github.cdklabs.projen.java.Junit JUnit component. projenrc io.github.cdklabs.projen.java.Projenrc Projenrc component. apiSrcDir java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. generatedClients java.util.Map References to the client projects that were generated, keyed by language. generatedCodeDir java.lang.String The directory in which generated client code will be generated, relative to the outdir of this project. generatedJavaClient io.github.cdklabs.projen.java.JavaProject A reference to the generated java client. specDir java.lang.String The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. specFileName java.lang.String The name of the spec file. forceGenerateCodeAndDocs java.lang.Boolean Force to generate code and docs even if there were no changes in spec. buildTask Required public Task getBuildTask (); Type: io.github.cdklabs.projen.Task commitGenerated Required public java . lang . Boolean getCommitGenerated (); Type: java.lang.Boolean Whether to commit the managed files by default. compileTask Required public Task getCompileTask (); Type: io.github.cdklabs.projen.Task components Required public java . util . List < Component > getComponents (); Type: java.util.List Returns all the components within this project. deps Required public Dependencies getDeps (); Type: io.github.cdklabs.projen.Dependencies Project dependencies. ejected Required public java . lang . Boolean getEjected (); Type: java.lang.Boolean Whether or not the project is being ejected. files Required public java . util . List < FileBase > getFiles (); Type: java.util.List All files in this project. gitattributes Required public GitAttributesFile getGitattributes (); Type: io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public IgnoreFile getGitignore (); Type: io.github.cdklabs.projen.IgnoreFile .gitignore. logger Required public Logger getLogger (); Type: io.github.cdklabs.projen.Logger Logging utilities. name Required public java . lang . String getName (); Type: java.lang.String Project name. outdir Required public java . lang . String getOutdir (); Type: java.lang.String Absolute output directory of this project. packageTask Required public Task getPackageTask (); Type: io.github.cdklabs.projen.Task postCompileTask Required public Task getPostCompileTask (); Type: io.github.cdklabs.projen.Task preCompileTask Required public Task getPreCompileTask (); Type: io.github.cdklabs.projen.Task projectBuild Required public ProjectBuild getProjectBuild (); Type: io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand Required public java . lang . String getProjenCommand (); Type: java.lang.String The command to use in order to run the projen CLI. root Required public Project getRoot (); Type: io.github.cdklabs.projen.Project The root project. tasks Required public Tasks getTasks (); Type: io.github.cdklabs.projen.Tasks Project tasks. testTask Required public Task getTestTask (); Type: io.github.cdklabs.projen.Task defaultTask Optional public Task getDefaultTask (); Type: io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public InitProject getInitProject (); Type: io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project A parent project. If undefined, this is the root project. projectType Required public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType autoApprove Optional public AutoApprove getAutoApprove (); Type: io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public DevContainer getDevContainer (); Type: io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public GitHub getGithub (); Type: io.github.cdklabs.projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public Gitpod getGitpod (); Type: io.github.cdklabs.projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public VsCode getVscode (); Type: io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. compile Required public MavenCompile getCompile (); Type: io.github.cdklabs.projen.java.MavenCompile Compile component. distdir Required public java . lang . String getDistdir (); Type: java.lang.String Maven artifact output directory. packaging Required public MavenPackaging getPackaging (); Type: io.github.cdklabs.projen.java.MavenPackaging Packaging component. pom Required public Pom getPom (); Type: io.github.cdklabs.projen.java.Pom API for managing pom.xml . junit Optional public Junit getJunit (); Type: io.github.cdklabs.projen.java.Junit JUnit component. projenrc Optional public Projenrc getProjenrc (); Type: io.github.cdklabs.projen.java.Projenrc Projenrc component. apiSrcDir Required public java . lang . String getApiSrcDir (); Type: java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. This will also be used as the package for the api project. generatedClients Required public java . util . Map < java . lang . String , Project > getGeneratedClients (); Type: java.util.Map References to the client projects that were generated, keyed by language. generatedCodeDir Required public java . lang . String getGeneratedCodeDir (); Type: java.lang.String The directory in which generated client code will be generated, relative to the outdir of this project. generatedJavaClient Required public JavaProject getGeneratedJavaClient (); Type: io.github.cdklabs.projen.java.JavaProject A reference to the generated java client. specDir Required public java . lang . String getSpecDir (); Type: java.lang.String The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. specFileName Required public java . lang . String getSpecFileName (); Type: java.lang.String The name of the spec file. forceGenerateCodeAndDocs Optional public java . lang . Boolean getForceGenerateCodeAndDocs (); Type: java.lang.Boolean Force to generate code and docs even if there were no changes in spec. Constants Name Type Description DEFAULT_TASK java.lang.String The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public java . lang . String getDefaultTask (); Type: java.lang.String The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. SmithyApiGatewayPythonProject Synthesizes a Python Project with a Smithy model, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests. Initializers import software.aws.awsprototypingsdk.openapigateway.SmithyApiGatewayPythonProject ; SmithyApiGatewayPythonProject . Builder . create () . name ( java . lang . String ) // .commitGenerated(java.lang.Boolean) // .gitOptions(GitOptions) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .renovatebot(java.lang.Boolean) // .renovatebotOptions(RenovatebotOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMerge(java.lang.Boolean) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenCredentials(GithubCredentials) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) . authorEmail ( java . lang . String ) . authorName ( java . lang . String ) . version ( java . lang . String ) // .classifiers(java.util.List<java.lang.String>) // .description(java.lang.String) // .homepage(java.lang.String) // .license(java.lang.String) // .packageName(java.lang.String) // .poetryOptions(PoetryPyprojectOptionsWithoutDeps) // .setupConfig(java.util.Map<java.lang.String, java.lang.Object>) . moduleName ( java . lang . String ) // .deps(java.util.List<java.lang.String>) // .devDeps(java.util.List<java.lang.String>) // .pip(java.lang.Boolean) // .poetry(java.lang.Boolean) // .projenrcJs(java.lang.Boolean) // .projenrcJsOptions(ProjenrcOptions) // .projenrcPython(java.lang.Boolean) // .projenrcPythonOptions(ProjenrcOptions) // .pytest(java.lang.Boolean) // .pytestOptions(PytestOptions) // .sample(java.lang.Boolean) // .setuptools(java.lang.Boolean) // .venv(java.lang.Boolean) // .venvOptions(VenvOptions) . clientLanguages ( java . util . List < ClientLanguage > ) // .apiSrcDir(java.lang.String) // .documentationFormats(java.util.List<DocumentationFormat>) // .forceGenerateCodeAndDocs(java.lang.Boolean) // .generatedCodeDir(java.lang.String) // .javaClientOptions(JavaProjectOptions) // .parsedSpecFileName(java.lang.String) // .pythonClientOptions(PythonProjectOptions) // .typescriptClientOptions(TypeScriptProjectOptions) . serviceName ( SmithyServiceName ) // .ignoreGradleWrapper(java.lang.Boolean) // .ignoreSmithyBuildOutput(java.lang.Boolean) // .modelDir(java.lang.String) // .smithyBuildOptions(SmithyBuildOptions) . build (); Name Type Description name java.lang.String This is the name of your project. commitGenerated java.lang.Boolean Whether to commit the managed files by default. gitOptions io.github.cdklabs.projen.GitOptions Configuration options for git. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. renovatebot java.lang.Boolean Use renovatebot to handle dependency upgrades. renovatebotOptions io.github.cdklabs.projen.RenovatebotOptions Options for renovatebot. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge java.lang.Boolean Enable automatic merging on GitHub. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenCredentials io.github.cdklabs.projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. authorEmail java.lang.String Author's e-mail. authorName java.lang.String Author's name. version java.lang.String Version of the package. classifiers java.util.List A list of PyPI trove classifiers that describe the project. description java.lang.String A short description of the package. homepage java.lang.String A URL to the website of the project. license java.lang.String License of this package as an SPDX identifier. packageName java.lang.String Package name. poetryOptions io.github.cdklabs.projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setupConfig java.util.Map Additional fields to pass in the setup() function if using setuptools. moduleName java.lang.String Name of the python package as used in imports and filenames. deps java.util.List List of runtime dependencies for this project. devDeps java.util.List List of dev dependencies for this project. pip java.lang.Boolean Use pip with a requirements.txt file to track project dependencies. poetry java.lang.Boolean Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrcJs java.lang.Boolean Use projenrc in javascript. projenrcJsOptions io.github.cdklabs.projen.javascript.ProjenrcOptions Options related to projenrc in JavaScript. projenrcPython java.lang.Boolean Use projenrc in Python. projenrcPythonOptions io.github.cdklabs.projen.python.ProjenrcOptions Options related to projenrc in python. pytest java.lang.Boolean Include pytest tests. pytestOptions io.github.cdklabs.projen.python.PytestOptions pytest options. sample java.lang.Boolean Include sample code and test if the relevant directories don't exist. setuptools java.lang.Boolean Use setuptools with a setup.py script for packaging and publishing. venv java.lang.Boolean Use venv to manage a virtual environment for installing dependencies inside. venvOptions io.github.cdklabs.projen.python.VenvOptions Venv options. clientLanguages java.util.List< ClientLanguage > The list of languages for which clients will be generated. apiSrcDir java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats java.util.List< DocumentationFormat > Formats to generate documentation in. forceGenerateCodeAndDocs java.lang.Boolean Force to generate code and docs even if there were no changes in spec. generatedCodeDir java.lang.String The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions io.github.cdklabs.projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsedSpecFileName java.lang.String The name of the output parsed OpenAPI specification file. pythonClientOptions io.github.cdklabs.projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). typescriptClientOptions io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. serviceName SmithyServiceName The name of the Smithy service from your model which will be targeted for deployment and client generation. ignoreGradleWrapper java.lang.Boolean Set to false if you would like to check in your gradle wrapper. ignoreSmithyBuildOutput java.lang.Boolean Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. modelDir java.lang.String The path to the Smithy model directory, relative to the project source directory (srcdir). smithyBuildOptions SmithyBuildOptions Any additional properties you'd like to add your smithy-build.json. The smithy-build.json will automatically include the \"openapi\" plugin, but you can add extra configuration for that via this option if you like. name Required Type: java.lang.String Default: $BASEDIR This is the name of your project. commitGenerated Optional Type: java.lang.Boolean Default: true Whether to commit the managed files by default. gitOptions Optional Type: io.github.cdklabs.projen.GitOptions Configuration options for git. logging Optional Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional Type: java.lang.Boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional Type: io.github.cdklabs.projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional Type: java.lang.Boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional Type: io.github.cdklabs.projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional Type: java.lang.Boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. authorEmail Required Type: java.lang.String Default: $GIT_USER_EMAIL Author's e-mail. authorName Required Type: java.lang.String Default: $GIT_USER_NAME Author's name. version Required Type: java.lang.String Default: \"0.1.0\" Version of the package. classifiers Optional Type: java.util.List A list of PyPI trove classifiers that describe the project. https://pypi.org/classifiers/ description Optional Type: java.lang.String A short description of the package. homepage Optional Type: java.lang.String A URL to the website of the project. license Optional Type: java.lang.String License of this package as an SPDX identifier. packageName Optional Type: java.lang.String Package name. poetryOptions Optional Type: io.github.cdklabs.projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setupConfig Optional Type: java.util.Map Additional fields to pass in the setup() function if using setuptools. moduleName Required Type: java.lang.String Default: $PYTHON_MODULE_NAME Name of the python package as used in imports and filenames. Must only consist of alphanumeric characters and underscores. deps Optional Type: java.util.List Default: [] List of runtime dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDependency() . devDeps Optional Type: java.util.List Default: [] List of dev dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDevDependency() . pip Optional Type: java.lang.Boolean Default: true, unless poetry is true, then false Use pip with a requirements.txt file to track project dependencies. poetry Optional Type: java.lang.Boolean Default: false Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. This feature is incompatible with pip, setuptools, or venv. If you set this option to true , then pip, setuptools, and venv must be set to false . projenrcJs Optional Type: java.lang.Boolean Default: false Use projenrc in javascript. This will install projen as a JavaScript dependency and add a synth task which will run .projenrc.js . projenrcJsOptions Optional Type: io.github.cdklabs.projen.javascript.ProjenrcOptions Default: default options Options related to projenrc in JavaScript. projenrcPython Optional Type: java.lang.Boolean Default: true Use projenrc in Python. This will install projen as a Python dependency and add a synth task which will run .projenrc.py . projenrcPythonOptions Optional Type: io.github.cdklabs.projen.python.ProjenrcOptions Default: default options Options related to projenrc in python. pytest Optional Type: java.lang.Boolean Default: true Include pytest tests. pytestOptions Optional Type: io.github.cdklabs.projen.python.PytestOptions Default: defaults pytest options. sample Optional Type: java.lang.Boolean Default: true Include sample code and test if the relevant directories don't exist. setuptools Optional Type: java.lang.Boolean Default: true, unless poetry is true, then false Use setuptools with a setup.py script for packaging and publishing. venv Optional Type: java.lang.Boolean Default: true, unless poetry is true, then false Use venv to manage a virtual environment for installing dependencies inside. venvOptions Optional Type: io.github.cdklabs.projen.python.VenvOptions Default: defaults Venv options. clientLanguages Required Type: java.util.List< ClientLanguage > The list of languages for which clients will be generated. A typescript client will always be generated. apiSrcDir Optional Type: java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats Optional Type: java.util.List< DocumentationFormat > Formats to generate documentation in. forceGenerateCodeAndDocs Optional Type: java.lang.Boolean Default: \"false\" Force to generate code and docs even if there were no changes in spec. generatedCodeDir Optional Type: java.lang.String Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions Optional Type: io.github.cdklabs.projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsedSpecFileName Optional Type: java.lang.String Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. pythonClientOptions Optional Type: io.github.cdklabs.projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. typescriptClientOptions Optional Type: io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. serviceName Required Type: SmithyServiceName Default: \"example.hello#Hello\" The name of the Smithy service from your model which will be targeted for deployment and client generation. On initial project synthesis this service name will be written to the sample \"hello world\" model. If you change this value after initial synthesis you will need to manually update your Smithy models to match, unless you delete the \"model\" directory. Likewise, if you change the namespace or service name in your Smithy models you will need to update this value to ensure your service can be found. ignoreGradleWrapper Optional Type: java.lang.Boolean Default: true Set to false if you would like to check in your gradle wrapper. Do so if you would like to use a different version of gradle to the one provided by default ignoreSmithyBuildOutput Optional Type: java.lang.Boolean Default: true Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. modelDir Optional Type: java.lang.String Default: \"model\" The path to the Smithy model directory, relative to the project source directory (srcdir). smithyBuildOptions Optional Type: SmithyBuildOptions Any additional properties you'd like to add your smithy-build.json. The smithy-build.json will automatically include the \"openapi\" plugin, but you can add extra configuration for that via this option if you like. https://awslabs.github.io/smithy/2.0/guides/converting-to-openapi.html#openapi-configuration-settings Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. tryRemoveFile Finds a file at the specified relative path within this project and removes it. addDependency Adds a runtime dependency. addDevDependency Adds a dev dependency. addExcludeFromCleanup public void addExcludeFromCleanup ( java . lang . String globs ) Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: java.lang.String The glob patterns to match. addGitIgnore public void addGitIgnore ( java . lang . String pattern ) Adds a .gitignore pattern. pattern Required Type: java.lang.String The glob pattern to ignore. addPackageIgnore public void addPackageIgnore ( java . lang . String _pattern ) Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . _pattern Required Type: java.lang.String The glob pattern to exclude. addTask public Task addTask ( java . lang . String name ) public Task addTask ( java . lang . String name , TaskOptions props ) Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: java.lang.String The task name to add. props Optional Type: io.github.cdklabs.projen.TaskOptions Task properties. ~~ addTip ~~ public void addTip ( java . lang . String message ) Prints a \"tip\" message during synthesis. message Required Type: java.lang.String The message. annotateGenerated public void annotateGenerated ( java . lang . String glob ) Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: java.lang.String the glob pattern to match (could be a file path). postSynthesize public void postSynthesize () Called after all components are synthesized. Order is not guaranteed. preSynthesize public void preSynthesize () Called before all components are synthesized. removeTask public Task removeTask ( java . lang . String name ) Removes a task from a project. name Required Type: java.lang.String The name of the task to remove. runTaskCommand public java . lang . String runTaskCommand ( Task task ) Returns the shell command to execute in order to run a task. By default, this is npx projen@<version> <task> task Required Type: io.github.cdklabs.projen.Task The task for which the command is required. synth public void synth () Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" tryFindFile public FileBase tryFindFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public JsonFile tryFindJsonFile ( java . lang . String filePath ) Finds a json file by name. filePath Required Type: java.lang.String The file path. tryFindObjectFile public ObjectFile tryFindObjectFile ( java . lang . String filePath ) Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: java.lang.String The file path. tryRemoveFile public FileBase tryRemoveFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and removes it. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. addDependency public void addDependency ( java . lang . String spec ) Adds a runtime dependency. spec Required Type: java.lang.String Format <module>@<semver> . addDevDependency public void addDevDependency ( java . lang . String spec ) Adds a dev dependency. spec Required Type: java.lang.String Format <module>@<semver> . Properties Name Type Description buildTask io.github.cdklabs.projen.Task No description. commitGenerated java.lang.Boolean Whether to commit the managed files by default. compileTask io.github.cdklabs.projen.Task No description. components java.util.List Returns all the components within this project. deps io.github.cdklabs.projen.Dependencies Project dependencies. ejected java.lang.Boolean Whether or not the project is being ejected. files java.util.List All files in this project. gitattributes io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore io.github.cdklabs.projen.IgnoreFile .gitignore. logger io.github.cdklabs.projen.Logger Logging utilities. name java.lang.String Project name. outdir java.lang.String Absolute output directory of this project. packageTask io.github.cdklabs.projen.Task No description. postCompileTask io.github.cdklabs.projen.Task No description. preCompileTask io.github.cdklabs.projen.Task No description. projectBuild io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand java.lang.String The command to use in order to run the projen CLI. root io.github.cdklabs.projen.Project The root project. tasks io.github.cdklabs.projen.Tasks Project tasks. testTask io.github.cdklabs.projen.Task No description. defaultTask io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". initProject io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . parent io.github.cdklabs.projen.Project A parent project. projectType io.github.cdklabs.projen.ProjectType No description. autoApprove io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github io.github.cdklabs.projen.github.GitHub Access all github components. gitpod io.github.cdklabs.projen.Gitpod Access for Gitpod. vscode io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. depsManager io.github.cdklabs.projen.python.IPythonDeps API for managing dependencies. envManager io.github.cdklabs.projen.python.IPythonEnv API for mangaging the Python runtime environment. moduleName java.lang.String Python module name (the project name, with any hyphens or periods replaced with underscores). version java.lang.String Version of the package for distribution (should follow semver). packagingManager io.github.cdklabs.projen.python.IPythonPackaging API for managing packaging the project as a library. pytest io.github.cdklabs.projen.python.Pytest Pytest component. apiSrcDir java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. generatedClients java.util.Map References to the client projects that were generated, keyed by language. generatedCodeDir java.lang.String The directory in which generated client code will be generated, relative to the outdir of this project. generatedPythonClient io.github.cdklabs.projen.python.PythonProject A reference to the generated python client. specDir java.lang.String The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. specFileName java.lang.String The name of the spec file. forceGenerateCodeAndDocs java.lang.Boolean Force to generate code and docs even if there were no changes in spec. buildTask Required public Task getBuildTask (); Type: io.github.cdklabs.projen.Task commitGenerated Required public java . lang . Boolean getCommitGenerated (); Type: java.lang.Boolean Whether to commit the managed files by default. compileTask Required public Task getCompileTask (); Type: io.github.cdklabs.projen.Task components Required public java . util . List < Component > getComponents (); Type: java.util.List Returns all the components within this project. deps Required public Dependencies getDeps (); Type: io.github.cdklabs.projen.Dependencies Project dependencies. ejected Required public java . lang . Boolean getEjected (); Type: java.lang.Boolean Whether or not the project is being ejected. files Required public java . util . List < FileBase > getFiles (); Type: java.util.List All files in this project. gitattributes Required public GitAttributesFile getGitattributes (); Type: io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public IgnoreFile getGitignore (); Type: io.github.cdklabs.projen.IgnoreFile .gitignore. logger Required public Logger getLogger (); Type: io.github.cdklabs.projen.Logger Logging utilities. name Required public java . lang . String getName (); Type: java.lang.String Project name. outdir Required public java . lang . String getOutdir (); Type: java.lang.String Absolute output directory of this project. packageTask Required public Task getPackageTask (); Type: io.github.cdklabs.projen.Task postCompileTask Required public Task getPostCompileTask (); Type: io.github.cdklabs.projen.Task preCompileTask Required public Task getPreCompileTask (); Type: io.github.cdklabs.projen.Task projectBuild Required public ProjectBuild getProjectBuild (); Type: io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand Required public java . lang . String getProjenCommand (); Type: java.lang.String The command to use in order to run the projen CLI. root Required public Project getRoot (); Type: io.github.cdklabs.projen.Project The root project. tasks Required public Tasks getTasks (); Type: io.github.cdklabs.projen.Tasks Project tasks. testTask Required public Task getTestTask (); Type: io.github.cdklabs.projen.Task defaultTask Optional public Task getDefaultTask (); Type: io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public InitProject getInitProject (); Type: io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project A parent project. If undefined, this is the root project. projectType Required public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType autoApprove Optional public AutoApprove getAutoApprove (); Type: io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public DevContainer getDevContainer (); Type: io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public GitHub getGithub (); Type: io.github.cdklabs.projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public Gitpod getGitpod (); Type: io.github.cdklabs.projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public VsCode getVscode (); Type: io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. depsManager Required public IPythonDeps getDepsManager (); Type: io.github.cdklabs.projen.python.IPythonDeps API for managing dependencies. envManager Required public IPythonEnv getEnvManager (); Type: io.github.cdklabs.projen.python.IPythonEnv API for mangaging the Python runtime environment. moduleName Required public java . lang . String getModuleName (); Type: java.lang.String Python module name (the project name, with any hyphens or periods replaced with underscores). version Required public java . lang . String getVersion (); Type: java.lang.String Version of the package for distribution (should follow semver). packagingManager Optional public IPythonPackaging getPackagingManager (); Type: io.github.cdklabs.projen.python.IPythonPackaging API for managing packaging the project as a library. Only applies when the projectType is LIB. pytest Optional public Pytest getPytest (); Type: io.github.cdklabs.projen.python.Pytest Pytest component. apiSrcDir Required public java . lang . String getApiSrcDir (); Type: java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. generatedClients Required public java . util . Map < java . lang . String , Project > getGeneratedClients (); Type: java.util.Map References to the client projects that were generated, keyed by language. generatedCodeDir Required public java . lang . String getGeneratedCodeDir (); Type: java.lang.String The directory in which generated client code will be generated, relative to the outdir of this project. generatedPythonClient Required public PythonProject getGeneratedPythonClient (); Type: io.github.cdklabs.projen.python.PythonProject A reference to the generated python client. specDir Required public java . lang . String getSpecDir (); Type: java.lang.String The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. specFileName Required public java . lang . String getSpecFileName (); Type: java.lang.String The name of the spec file. forceGenerateCodeAndDocs Optional public java . lang . Boolean getForceGenerateCodeAndDocs (); Type: java.lang.Boolean Force to generate code and docs even if there were no changes in spec. Constants Name Type Description DEFAULT_TASK java.lang.String The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public java . lang . String getDefaultTask (); Type: java.lang.String The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. SmithyApiGatewayTsProject Synthesizes a Typescript Project with a Smithy model, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests. Initializers import software.aws.awsprototypingsdk.openapigateway.SmithyApiGatewayTsProject ; SmithyApiGatewayTsProject . Builder . create () . name ( java . lang . String ) // .commitGenerated(java.lang.Boolean) // .gitOptions(GitOptions) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .renovatebot(java.lang.Boolean) // .renovatebotOptions(RenovatebotOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMerge(java.lang.Boolean) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenCredentials(GithubCredentials) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) // .allowLibraryDependencies(java.lang.Boolean) // .authorEmail(java.lang.String) // .authorName(java.lang.String) // .authorOrganization(java.lang.Boolean) // .authorUrl(java.lang.String) // .autoDetectBin(java.lang.Boolean) // .bin(java.util.Map<java.lang.String, java.lang.String>) // .bugsEmail(java.lang.String) // .bugsUrl(java.lang.String) // .bundledDeps(java.util.List<java.lang.String>) // .codeArtifactOptions(CodeArtifactOptions) // .deps(java.util.List<java.lang.String>) // .description(java.lang.String) // .devDeps(java.util.List<java.lang.String>) // .entrypoint(java.lang.String) // .homepage(java.lang.String) // .keywords(java.util.List<java.lang.String>) // .license(java.lang.String) // .licensed(java.lang.Boolean) // .maxNodeVersion(java.lang.String) // .minNodeVersion(java.lang.String) // .npmAccess(NpmAccess) // .npmRegistry(java.lang.String) // .npmRegistryUrl(java.lang.String) // .npmTokenSecret(java.lang.String) // .packageManager(NodePackageManager) // .packageName(java.lang.String) // .peerDependencyOptions(PeerDependencyOptions) // .peerDeps(java.util.List<java.lang.String>) // .pnpmVersion(java.lang.String) // .repository(java.lang.String) // .repositoryDirectory(java.lang.String) // .scopedPackagesOptions(java.util.List<ScopedPackagesOptions>) // .scripts(java.util.Map<java.lang.String, java.lang.String>) // .stability(java.lang.String) // .jsiiReleaseVersion(java.lang.String) // .majorVersion(java.lang.Number) // .minMajorVersion(java.lang.Number) // .npmDistTag(java.lang.String) // .postBuildSteps(java.util.List<JobStep>) // .prerelease(java.lang.String) // .publishDryRun(java.lang.Boolean) // .publishTasks(java.lang.Boolean) // .releaseBranches(java.util.Map<java.lang.String, BranchOptions>) // .releaseEveryCommit(java.lang.Boolean) // .releaseFailureIssue(java.lang.Boolean) // .releaseFailureIssueLabel(java.lang.String) // .releaseSchedule(java.lang.String) // .releaseTagPrefix(java.lang.String) // .releaseTrigger(ReleaseTrigger) // .releaseWorkflowName(java.lang.String) // .releaseWorkflowSetupSteps(java.util.List<JobStep>) // .versionrcOptions(java.util.Map<java.lang.String, java.lang.Object>) // .workflowContainerImage(java.lang.String) // .workflowRunsOn(java.util.List<java.lang.String>) . defaultReleaseBranch ( java . lang . String ) // .artifactsDirectory(java.lang.String) // .autoApproveUpgrades(java.lang.Boolean) // .buildWorkflow(java.lang.Boolean) // .buildWorkflowTriggers(Triggers) // .bundlerOptions(BundlerOptions) // .codeCov(java.lang.Boolean) // .codeCovTokenSecret(java.lang.String) // .copyrightOwner(java.lang.String) // .copyrightPeriod(java.lang.String) // .dependabot(java.lang.Boolean) // .dependabotOptions(DependabotOptions) // .depsUpgrade(java.lang.Boolean) // .depsUpgradeOptions(UpgradeDependenciesOptions) // .gitignore(java.util.List<java.lang.String>) // .jest(java.lang.Boolean) // .jestOptions(JestOptions) // .mutableBuild(java.lang.Boolean) // .npmignore(java.util.List<java.lang.String>) // .npmignoreEnabled(java.lang.Boolean) // .package(java.lang.Boolean) // .prettier(java.lang.Boolean) // .prettierOptions(PrettierOptions) // .projenDevDependency(java.lang.Boolean) // .projenrcJs(java.lang.Boolean) // .projenrcJsOptions(ProjenrcOptions) // .projenVersion(java.lang.String) // .pullRequestTemplate(java.lang.Boolean) // .pullRequestTemplateContents(java.util.List<java.lang.String>) // .release(java.lang.Boolean) // .releaseToNpm(java.lang.Boolean) // .releaseWorkflow(java.lang.Boolean) // .workflowBootstrapSteps(java.util.List<JobStep>) // .workflowGitIdentity(GitIdentity) // .workflowNodeVersion(java.lang.String) // .disableTsconfig(java.lang.Boolean) // .docgen(java.lang.Boolean) // .docsDirectory(java.lang.String) // .entrypointTypes(java.lang.String) // .eslint(java.lang.Boolean) // .eslintOptions(EslintOptions) // .libdir(java.lang.String) // .projenrcTs(java.lang.Boolean) // .projenrcTsOptions(ProjenrcOptions) // .sampleCode(java.lang.Boolean) // .srcdir(java.lang.String) // .testdir(java.lang.String) // .tsconfig(TypescriptConfigOptions) // .tsconfigDev(TypescriptConfigOptions) // .tsconfigDevFile(java.lang.String) // .typescriptVersion(java.lang.String) . clientLanguages ( java . util . List < ClientLanguage > ) // .apiSrcDir(java.lang.String) // .documentationFormats(java.util.List<DocumentationFormat>) // .forceGenerateCodeAndDocs(java.lang.Boolean) // .generatedCodeDir(java.lang.String) // .javaClientOptions(JavaProjectOptions) // .parsedSpecFileName(java.lang.String) // .pythonClientOptions(PythonProjectOptions) // .typescriptClientOptions(TypeScriptProjectOptions) . serviceName ( SmithyServiceName ) // .ignoreGradleWrapper(java.lang.Boolean) // .ignoreSmithyBuildOutput(java.lang.Boolean) // .modelDir(java.lang.String) // .smithyBuildOptions(SmithyBuildOptions) . build (); Name Type Description name java.lang.String This is the name of your project. commitGenerated java.lang.Boolean Whether to commit the managed files by default. gitOptions io.github.cdklabs.projen.GitOptions Configuration options for git. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. renovatebot java.lang.Boolean Use renovatebot to handle dependency upgrades. renovatebotOptions io.github.cdklabs.projen.RenovatebotOptions Options for renovatebot. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge java.lang.Boolean Enable automatic merging on GitHub. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenCredentials io.github.cdklabs.projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. allowLibraryDependencies java.lang.Boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail java.lang.String Author's e-mail. authorName java.lang.String Author's name. authorOrganization java.lang.Boolean Is the author an organization. authorUrl java.lang.String Author's URL / Website. autoDetectBin java.lang.Boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin java.util.Map Binary programs vended with your module. bugsEmail java.lang.String The email address to which issues should be reported. bugsUrl java.lang.String The url to your project's issue tracker. bundledDeps java.util.List List of dependencies to bundle into this module. codeArtifactOptions io.github.cdklabs.projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps java.util.List Runtime dependencies of this module. description java.lang.String The description is just a string that helps people understand the purpose of the package. devDeps java.util.List Build dependencies for this module. entrypoint java.lang.String Module entrypoint ( main in package.json ). homepage java.lang.String Package's Homepage / Website. keywords java.util.List Keywords to include in package.json . license java.lang.String License's SPDX identifier. licensed java.lang.Boolean Indicates if a license should be added. maxNodeVersion java.lang.String Minimum node.js version to require via engines (inclusive). minNodeVersion java.lang.String Minimum Node.js version to require via package.json engines (inclusive). npmAccess io.github.cdklabs.projen.javascript.NpmAccess Access level of the npm package. npmRegistry java.lang.String The host name of the npm registry to publish to. npmRegistryUrl java.lang.String The base URL of the npm package registry. npmTokenSecret java.lang.String GitHub secret which contains the NPM token to use when publishing packages. packageManager io.github.cdklabs.projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName java.lang.String The \"name\" in package.json. peerDependencyOptions io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps java.util.List Peer dependencies for this module. pnpmVersion java.lang.String The version of PNPM to use if using PNPM as a package manager. repository java.lang.String The repository is the location where the actual code for your package lives. repositoryDirectory java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions java.util.List Options for privately hosted scoped packages. scripts java.util.Map npm scripts to include. stability java.lang.String Package's Stability. jsiiReleaseVersion java.lang.String Version requirement of publib which is used to publish modules to npm. majorVersion java.lang.Number Major version to release from the default branch. minMajorVersion java.lang.Number Minimal Major version to release. npmDistTag java.lang.String The npmDistTag to use when publishing from the default branch. postBuildSteps java.util.List Steps to execute after build as part of the release workflow. prerelease java.lang.String Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun java.lang.Boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks java.lang.Boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches java.util.Map Defines additional release branches. releaseEveryCommit java.lang.Boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue java.lang.Boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel java.lang.String The label to apply to issues indicating publish failures. releaseSchedule java.lang.String CRON schedule to trigger new releases. releaseTagPrefix java.lang.String Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger io.github.cdklabs.projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName java.lang.String The name of the default release workflow. releaseWorkflowSetupSteps java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions java.util.Map Custom configuration used when creating changelog with standard-version package. workflowContainerImage java.lang.String Container image to use for GitHub workflows. workflowRunsOn java.util.List Github Runner selection labels. defaultReleaseBranch java.lang.String The name of the main release branch. artifactsDirectory java.lang.String A directory which will contain build artifacts. autoApproveUpgrades java.lang.Boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow java.lang.Boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers io.github.cdklabs.projen.github.workflows.Triggers Build workflow triggers. bundlerOptions io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov java.lang.Boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret java.lang.String Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner java.lang.String License copyright owner. copyrightPeriod java.lang.String The copyright years to put in the LICENSE file. dependabot java.lang.Boolean Use dependabot to handle dependency upgrades. dependabotOptions io.github.cdklabs.projen.github.DependabotOptions Options for dependabot. depsUpgrade java.lang.Boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore java.util.List Additional entries to .gitignore. jest java.lang.Boolean Setup jest unit tests. jestOptions io.github.cdklabs.projen.javascript.JestOptions Jest options. mutableBuild java.lang.Boolean Automatically update files modified during builds to pull-request branches. npmignore java.util.List Additional entries to .npmignore. npmignoreEnabled java.lang.Boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package java.lang.Boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier java.lang.Boolean Setup prettier. prettierOptions io.github.cdklabs.projen.javascript.PrettierOptions Prettier options. projenDevDependency java.lang.Boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs java.lang.Boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions io.github.cdklabs.projen.javascript.ProjenrcOptions Options for .projenrc.js. projenVersion java.lang.String Version of projen to install. pullRequestTemplate java.lang.Boolean Include a GitHub pull request template. pullRequestTemplateContents java.util.List The contents of the pull request template. release java.lang.Boolean Add release management to this project. releaseToNpm java.lang.Boolean Automatically release to npm when new versions are introduced. releaseWorkflow java.lang.Boolean DEPRECATED: renamed to release . workflowBootstrapSteps java.util.List Workflow steps to use in order to bootstrap this repo. workflowGitIdentity io.github.cdklabs.projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion java.lang.String The node version to use in GitHub workflows. disableTsconfig java.lang.Boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen java.lang.Boolean Docgen by Typedoc. docsDirectory java.lang.String Docs directory. entrypointTypes java.lang.String The .d.ts file that includes the type declarations for this module. eslint java.lang.Boolean Setup eslint. eslintOptions io.github.cdklabs.projen.javascript.EslintOptions Eslint options. libdir java.lang.String Typescript artifacts output directory. projenrcTs java.lang.Boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode java.lang.Boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir java.lang.String Typescript sources directory. testdir java.lang.String Jest tests directory. Tests files should be named xxx.test.ts . tsconfig io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile java.lang.String The name of the development tsconfig.json file. typescriptVersion java.lang.String TypeScript version to use. clientLanguages java.util.List< ClientLanguage > The list of languages for which clients will be generated. apiSrcDir java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats java.util.List< DocumentationFormat > Formats to generate documentation in. forceGenerateCodeAndDocs java.lang.Boolean Force to generate code and docs even if there were no changes in spec. generatedCodeDir java.lang.String The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions io.github.cdklabs.projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsedSpecFileName java.lang.String The name of the output parsed OpenAPI specification file. pythonClientOptions io.github.cdklabs.projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). typescriptClientOptions io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. serviceName SmithyServiceName The name of the Smithy service from your model which will be targeted for deployment and client generation. ignoreGradleWrapper java.lang.Boolean Set to false if you would like to check in your gradle wrapper. ignoreSmithyBuildOutput java.lang.Boolean Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. modelDir java.lang.String The path to the Smithy model directory, relative to the project source directory (srcdir). smithyBuildOptions SmithyBuildOptions Any additional properties you'd like to add your smithy-build.json. The smithy-build.json will automatically include the \"openapi\" plugin, but you can add extra configuration for that via this option if you like. name Required Type: java.lang.String Default: $BASEDIR This is the name of your project. commitGenerated Optional Type: java.lang.Boolean Default: true Whether to commit the managed files by default. gitOptions Optional Type: io.github.cdklabs.projen.GitOptions Configuration options for git. logging Optional Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional Type: java.lang.Boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional Type: io.github.cdklabs.projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional Type: java.lang.Boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional Type: io.github.cdklabs.projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional Type: java.lang.Boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allowLibraryDependencies Optional Type: java.lang.Boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. authorEmail Optional Type: java.lang.String Author's e-mail. authorName Optional Type: java.lang.String Author's name. authorOrganization Optional Type: java.lang.Boolean Is the author an organization. authorUrl Optional Type: java.lang.String Author's URL / Website. autoDetectBin Optional Type: java.lang.Boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional Type: java.util.Map Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugsEmail Optional Type: java.lang.String The email address to which issues should be reported. bugsUrl Optional Type: java.lang.String The url to your project's issue tracker. bundledDeps Optional Type: java.util.List List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. codeArtifactOptions Optional Type: io.github.cdklabs.projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional Type: java.util.List Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ ' express ' , ' lodash ' , ' foo @ ^ 2 ' ] description Optional Type: java.lang.String The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description devDeps Optional Type: java.util.List Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ ' typescript ' , ' @types / express ' ] entrypoint Optional Type: java.lang.String Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional Type: java.lang.String Package's Homepage / Website. keywords Optional Type: java.util.List Keywords to include in package.json . license Optional Type: java.lang.String Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional Type: java.lang.Boolean Default: true Indicates if a license should be added. maxNodeVersion Optional Type: java.lang.String Default: no max Minimum node.js version to require via engines (inclusive). minNodeVersion Optional Type: java.lang.String Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npmAccess Optional Type: io.github.cdklabs.projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npmRegistry ~~ Optional Deprecated: use npmRegistryUrl instead Type: java.lang.String The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npmRegistryUrl Optional Type: java.lang.String Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npmTokenSecret Optional Type: java.lang.String Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. packageManager Optional Type: io.github.cdklabs.projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. packageName Optional Type: java.lang.String Default: defaults to project name The \"name\" in package.json. peerDependencyOptions Optional Type: io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps Optional Type: java.util.List Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. pnpmVersion Optional Type: java.lang.String Default: \"7\" The version of PNPM to use if using PNPM as a package manager. repository Optional Type: java.lang.String The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repositoryDirectory Optional Type: java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions Optional Type: java.util.List Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional Type: java.util.Map Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional Type: java.lang.String Package's Stability. jsiiReleaseVersion Optional Type: java.lang.String Default: \"latest\" Version requirement of publib which is used to publish modules to npm. majorVersion Optional Type: java.lang.Number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. minMajorVersion Optional Type: java.lang.Number Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npmDistTag Optional Type: java.lang.String Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. postBuildSteps Optional Type: java.util.List Default: [] Steps to execute after build as part of the release workflow. prerelease Optional Type: java.lang.String Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun Optional Type: java.lang.Boolean Default: false Instead of actually publishing to package managers, just print the publishing command. publishTasks Optional Type: java.lang.Boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. releaseBranches Optional Type: java.util.Map Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ releaseEveryCommit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead Type: java.lang.Boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue Optional Type: java.lang.Boolean Default: false Create a github issue on every failed publishing task. releaseFailureIssueLabel Optional Type: java.lang.String Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ releaseSchedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead Type: java.lang.String Default: no scheduled releases CRON schedule to trigger new releases. releaseTagPrefix Optional Type: java.lang.String Default: \"v\" Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. releaseTrigger Optional Type: io.github.cdklabs.projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. releaseWorkflowName Optional Type: java.lang.String Default: \"Release\" The name of the default release workflow. releaseWorkflowSetupSteps Optional Type: java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions Optional Type: java.util.Map Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflowContainerImage Optional Type: java.lang.String Default: default image Container image to use for GitHub workflows. workflowRunsOn Optional Type: java.util.List Default: [\"ubuntu-latest\"] Github Runner selection labels. defaultReleaseBranch Required Type: java.lang.String Default: \"main\" The name of the main release branch. artifactsDirectory Optional Type: java.lang.String Default: \"dist\" A directory which will contain build artifacts. autoApproveUpgrades Optional Type: java.lang.Boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. buildWorkflow Optional Type: java.lang.Boolean Default: true if not a subproject Define a GitHub workflow for building PRs. buildWorkflowTriggers Optional Type: io.github.cdklabs.projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundlerOptions Optional Type: io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov Optional Type: java.lang.Boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret Optional Type: java.lang.String Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner Optional Type: java.lang.String Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyrightPeriod Optional Type: java.lang.String Default: current year The copyright years to put in the LICENSE file. dependabot Optional Type: java.lang.Boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabotOptions Optional Type: io.github.cdklabs.projen.github.DependabotOptions Default: default options Options for dependabot. depsUpgrade Optional Type: java.lang.Boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . depsUpgradeOptions Optional Type: io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional Type: java.util.List Additional entries to .gitignore. jest Optional Type: java.lang.Boolean Default: true Setup jest unit tests. jestOptions Optional Type: io.github.cdklabs.projen.javascript.JestOptions Default: default options Jest options. mutableBuild Optional Type: java.lang.Boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore Type: java.util.List Additional entries to .npmignore. npmignoreEnabled Optional Type: java.lang.Boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional Type: java.lang.Boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional Type: java.lang.Boolean Default: false Setup prettier. prettierOptions Optional Type: io.github.cdklabs.projen.javascript.PrettierOptions Default: default options Prettier options. projenDevDependency Optional Type: java.lang.Boolean Default: true Indicates of \"projen\" should be installed as a devDependency. projenrcJs Optional Type: java.lang.Boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions Optional Type: io.github.cdklabs.projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projenVersion Optional Type: java.lang.String Default: Defaults to the latest version. Version of projen to install. pullRequestTemplate Optional Type: java.lang.Boolean Default: true Include a GitHub pull request template. pullRequestTemplateContents Optional Type: java.util.List Default: default content The contents of the pull request template. release Optional Type: java.lang.Boolean Default: true (false for subprojects) Add release management to this project. releaseToNpm Optional Type: java.lang.Boolean Default: false Automatically release to npm when new versions are introduced. ~~ releaseWorkflow ~~ Optional Deprecated: see release . Type: java.lang.Boolean Default: true if not a subproject DEPRECATED: renamed to release . workflowBootstrapSteps Optional Type: java.util.List Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflowGitIdentity Optional Type: io.github.cdklabs.projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflowNodeVersion Optional Type: java.lang.String Default: same as minNodeVersion The node version to use in GitHub workflows. disableTsconfig Optional Type: java.lang.Boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional Type: java.lang.Boolean Default: false Docgen by Typedoc. docsDirectory Optional Type: java.lang.String Default: \"docs\" Docs directory. entrypointTypes Optional Type: java.lang.String Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional Type: java.lang.Boolean Default: true Setup eslint. eslintOptions Optional Type: io.github.cdklabs.projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional Type: java.lang.String Default: \"lib\" Typescript artifacts output directory. projenrcTs Optional Type: java.lang.Boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions Optional Type: io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode Optional Type: java.lang.Boolean Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional Type: java.lang.String Default: \"src\" Typescript sources directory. testdir Optional Type: java.lang.String Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfigDev Optional Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile Optional Type: java.lang.String Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescriptVersion Optional Type: java.lang.String Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). clientLanguages Required Type: java.util.List< ClientLanguage > The list of languages for which clients will be generated. A typescript client will always be generated. apiSrcDir Optional Type: java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats Optional Type: java.util.List< DocumentationFormat > Formats to generate documentation in. forceGenerateCodeAndDocs Optional Type: java.lang.Boolean Default: \"false\" Force to generate code and docs even if there were no changes in spec. generatedCodeDir Optional Type: java.lang.String Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions Optional Type: io.github.cdklabs.projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsedSpecFileName Optional Type: java.lang.String Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. pythonClientOptions Optional Type: io.github.cdklabs.projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. typescriptClientOptions Optional Type: io.github.cdklabs.projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. serviceName Required Type: SmithyServiceName Default: \"example.hello#Hello\" The name of the Smithy service from your model which will be targeted for deployment and client generation. On initial project synthesis this service name will be written to the sample \"hello world\" model. If you change this value after initial synthesis you will need to manually update your Smithy models to match, unless you delete the \"model\" directory. Likewise, if you change the namespace or service name in your Smithy models you will need to update this value to ensure your service can be found. ignoreGradleWrapper Optional Type: java.lang.Boolean Default: true Set to false if you would like to check in your gradle wrapper. Do so if you would like to use a different version of gradle to the one provided by default ignoreSmithyBuildOutput Optional Type: java.lang.Boolean Default: true Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. modelDir Optional Type: java.lang.String Default: \"model\" The path to the Smithy model directory, relative to the project source directory (srcdir). smithyBuildOptions Optional Type: SmithyBuildOptions Any additional properties you'd like to add your smithy-build.json. The smithy-build.json will automatically include the \"openapi\" plugin, but you can add extra configuration for that via this option if you like. https://awslabs.github.io/smithy/2.0/guides/converting-to-openapi.html#openapi-configuration-settings Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. tryRemoveFile Finds a file at the specified relative path within this project and removes it. addBins No description. addBundledDeps Defines bundled dependencies. addCompileCommand DEPRECATED. addDeps Defines normal dependencies. addDevDeps Defines development/test dependencies. addFields Directly set fields in package.json . addKeywords Adds keywords to package.json (deduplicated). addPeerDeps Defines peer dependencies. addTestCommand DEPRECATED. hasScript Indicates if a script by the name name is defined. removeScript Removes the npm script (always successful). renderWorkflowSetup Returns the set of workflow steps which should be executed to bootstrap a workflow. setScript Replaces the contents of an npm package.json script. addExcludeFromCleanup public void addExcludeFromCleanup ( java . lang . String globs ) Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: java.lang.String The glob patterns to match. addGitIgnore public void addGitIgnore ( java . lang . String pattern ) Adds a .gitignore pattern. pattern Required Type: java.lang.String The glob pattern to ignore. addPackageIgnore public void addPackageIgnore ( java . lang . String pattern ) Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . pattern Required Type: java.lang.String addTask public Task addTask ( java . lang . String name ) public Task addTask ( java . lang . String name , TaskOptions props ) Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: java.lang.String The task name to add. props Optional Type: io.github.cdklabs.projen.TaskOptions Task properties. ~~ addTip ~~ public void addTip ( java . lang . String message ) Prints a \"tip\" message during synthesis. message Required Type: java.lang.String The message. annotateGenerated public void annotateGenerated ( java . lang . String glob ) Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: java.lang.String the glob pattern to match (could be a file path). postSynthesize public void postSynthesize () Called after all components are synthesized. Order is not guaranteed. preSynthesize public void preSynthesize () Called before all components are synthesized. removeTask public Task removeTask ( java . lang . String name ) Removes a task from a project. name Required Type: java.lang.String The name of the task to remove. runTaskCommand public java . lang . String runTaskCommand ( Task task ) Returns the shell command to execute in order to run a task. This will typically be npx projen TASK . task Required Type: io.github.cdklabs.projen.Task The task for which the command is required. synth public void synth () Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" tryFindFile public FileBase tryFindFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public JsonFile tryFindJsonFile ( java . lang . String filePath ) Finds a json file by name. filePath Required Type: java.lang.String The file path. tryFindObjectFile public ObjectFile tryFindObjectFile ( java . lang . String filePath ) Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: java.lang.String The file path. tryRemoveFile public FileBase tryRemoveFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and removes it. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. addBins public void addBins ( java . util . Map < java . lang . String , java . lang . String > bins ) bins Required Type: java.util.Map addBundledDeps public void addBundledDeps ( java . lang . String deps ) Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json . deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addCompileCommand ~~ public void addCompileCommand ( java . lang . String commands ) DEPRECATED. commands Required Type: java.lang.String addDeps public void addDeps ( java . lang . String deps ) Defines normal dependencies. deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addDevDeps public void addDevDeps ( java . lang . String deps ) Defines development/test dependencies. deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addFields public void addFields ( java . util . Map < java . lang . String , java . lang . Object > fields ) Directly set fields in package.json . fields Required Type: java.util.Map The fields to set. addKeywords public void addKeywords ( java . lang . String keywords ) Adds keywords to package.json (deduplicated). keywords Required Type: java.lang.String The keywords to add. addPeerDeps public void addPeerDeps ( java . lang . String deps ) Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers. deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addTestCommand ~~ public void addTestCommand ( java . lang . String commands ) DEPRECATED. commands Required Type: java.lang.String hasScript public java . lang . Boolean hasScript ( java . lang . String name ) Indicates if a script by the name name is defined. name Required Type: java.lang.String The name of the script. removeScript public void removeScript ( java . lang . String name ) Removes the npm script (always successful). name Required Type: java.lang.String The name of the script. renderWorkflowSetup public java . util . List < JobStep > renderWorkflowSetup () public java . util . List < JobStep > renderWorkflowSetup ( RenderWorkflowSetupOptions options ) Returns the set of workflow steps which should be executed to bootstrap a workflow. options Optional Type: io.github.cdklabs.projen.javascript.RenderWorkflowSetupOptions Options. setScript public void setScript ( java . lang . String name , java . lang . String command ) Replaces the contents of an npm package.json script. name Required Type: java.lang.String The script name. command Required Type: java.lang.String The command to execute. Properties Name Type Description buildTask io.github.cdklabs.projen.Task No description. commitGenerated java.lang.Boolean Whether to commit the managed files by default. compileTask io.github.cdklabs.projen.Task No description. components java.util.List Returns all the components within this project. deps io.github.cdklabs.projen.Dependencies Project dependencies. ejected java.lang.Boolean Whether or not the project is being ejected. files java.util.List All files in this project. gitattributes io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore io.github.cdklabs.projen.IgnoreFile .gitignore. logger io.github.cdklabs.projen.Logger Logging utilities. name java.lang.String Project name. outdir java.lang.String Absolute output directory of this project. packageTask io.github.cdklabs.projen.Task No description. postCompileTask io.github.cdklabs.projen.Task No description. preCompileTask io.github.cdklabs.projen.Task No description. projectBuild io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand java.lang.String The command to use in order to run the projen CLI. root io.github.cdklabs.projen.Project The root project. tasks io.github.cdklabs.projen.Tasks Project tasks. testTask io.github.cdklabs.projen.Task No description. defaultTask io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". initProject io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . parent io.github.cdklabs.projen.Project A parent project. projectType io.github.cdklabs.projen.ProjectType No description. autoApprove io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github io.github.cdklabs.projen.github.GitHub Access all github components. gitpod io.github.cdklabs.projen.Gitpod Access for Gitpod. vscode io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. allowLibraryDependencies java.lang.Boolean No description. artifactsDirectory java.lang.String The build output directory. artifactsJavascriptDirectory java.lang.String The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler io.github.cdklabs.projen.javascript.Bundler No description. entrypoint java.lang.String No description. manifest java.lang.Object No description. package io.github.cdklabs.projen.javascript.NodePackage API for managing the node package. packageManager io.github.cdklabs.projen.javascript.NodePackageManager The package manager to use. runScriptCommand java.lang.String The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge io.github.cdklabs.projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. buildWorkflow io.github.cdklabs.projen.build.BuildWorkflow The PR build GitHub workflow. buildWorkflowJobId java.lang.String The job ID of the build workflow. jest io.github.cdklabs.projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion java.lang.String Maximum node version required by this package. minNodeVersion java.lang.String Minimum node.js version required by this package. npmignore io.github.cdklabs.projen.IgnoreFile The .npmignore file. prettier io.github.cdklabs.projen.javascript.Prettier No description. publisher io.github.cdklabs.projen.release.Publisher Package publisher. release io.github.cdklabs.projen.release.Release Release management. upgradeWorkflow io.github.cdklabs.projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory java.lang.String No description. libdir java.lang.String The directory in which compiled .js files reside. srcdir java.lang.String The directory in which the .ts sources reside. testdir java.lang.String The directory in which tests reside. tsconfigDev io.github.cdklabs.projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask io.github.cdklabs.projen.Task The \"watch\" task. docgen java.lang.Boolean No description. eslint io.github.cdklabs.projen.javascript.Eslint No description. tsconfig io.github.cdklabs.projen.javascript.TypescriptConfig No description. tsconfigEslint io.github.cdklabs.projen.javascript.TypescriptConfig No description. apiSrcDir java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. forceGenerateCodeAndDocs java.lang.Boolean Force to generate code and docs even if there were no changes in spec. generatedClients java.util.Map References to the client projects that were generated, keyed by language. generatedCodeDir java.lang.String The directory in which generated client code will be generated, relative to the outdir of this project. generatedTypescriptClient io.github.cdklabs.projen.typescript.TypeScriptProject A reference to the generated typescript client. specDir java.lang.String The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. specFileName java.lang.String The name of the spec file. pnpmWorkspace io.github.cdklabs.projen.YamlFile Reference to the PNPM workspace yaml file which adds the dependency between this project and the generated typescript client when this project is used in a monorepo, and the package manager is PNPM. buildTask Required public Task getBuildTask (); Type: io.github.cdklabs.projen.Task commitGenerated Required public java . lang . Boolean getCommitGenerated (); Type: java.lang.Boolean Whether to commit the managed files by default. compileTask Required public Task getCompileTask (); Type: io.github.cdklabs.projen.Task components Required public java . util . List < Component > getComponents (); Type: java.util.List Returns all the components within this project. deps Required public Dependencies getDeps (); Type: io.github.cdklabs.projen.Dependencies Project dependencies. ejected Required public java . lang . Boolean getEjected (); Type: java.lang.Boolean Whether or not the project is being ejected. files Required public java . util . List < FileBase > getFiles (); Type: java.util.List All files in this project. gitattributes Required public GitAttributesFile getGitattributes (); Type: io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public IgnoreFile getGitignore (); Type: io.github.cdklabs.projen.IgnoreFile .gitignore. logger Required public Logger getLogger (); Type: io.github.cdklabs.projen.Logger Logging utilities. name Required public java . lang . String getName (); Type: java.lang.String Project name. outdir Required public java . lang . String getOutdir (); Type: java.lang.String Absolute output directory of this project. packageTask Required public Task getPackageTask (); Type: io.github.cdklabs.projen.Task postCompileTask Required public Task getPostCompileTask (); Type: io.github.cdklabs.projen.Task preCompileTask Required public Task getPreCompileTask (); Type: io.github.cdklabs.projen.Task projectBuild Required public ProjectBuild getProjectBuild (); Type: io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand Required public java . lang . String getProjenCommand (); Type: java.lang.String The command to use in order to run the projen CLI. root Required public Project getRoot (); Type: io.github.cdklabs.projen.Project The root project. tasks Required public Tasks getTasks (); Type: io.github.cdklabs.projen.Tasks Project tasks. testTask Required public Task getTestTask (); Type: io.github.cdklabs.projen.Task defaultTask Optional public Task getDefaultTask (); Type: io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public InitProject getInitProject (); Type: io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project A parent project. If undefined, this is the root project. projectType Required public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType autoApprove Optional public AutoApprove getAutoApprove (); Type: io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public DevContainer getDevContainer (); Type: io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public GitHub getGithub (); Type: io.github.cdklabs.projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public Gitpod getGitpod (); Type: io.github.cdklabs.projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public VsCode getVscode (); Type: io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. ~~ allowLibraryDependencies ~~ Required Deprecated: use package.allowLibraryDependencies public java . lang . Boolean getAllowLibraryDependencies (); Type: java.lang.Boolean artifactsDirectory Required public java . lang . String getArtifactsDirectory (); Type: java.lang.String The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg . artifactsJavascriptDirectory Required public java . lang . String getArtifactsJavascriptDirectory (); Type: java.lang.String The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler Required public Bundler getBundler (); Type: io.github.cdklabs.projen.javascript.Bundler ~~ entrypoint ~~ Required Deprecated: use package.entrypoint public java . lang . String getEntrypoint (); Type: java.lang.String ~~ manifest ~~ Required Deprecated: use package.addField(x, y) public java . lang . Object getManifest (); Type: java.lang.Object package Required public NodePackage getPackage (); Type: io.github.cdklabs.projen.javascript.NodePackage API for managing the node package. ~~ packageManager ~~ Required Deprecated: use package.packageManager public NodePackageManager getPackageManager (); Type: io.github.cdklabs.projen.javascript.NodePackageManager The package manager to use. runScriptCommand Required public java . lang . String getRunScriptCommand (); Type: java.lang.String The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge Optional public AutoMerge getAutoMerge (); Type: io.github.cdklabs.projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. buildWorkflow Optional public BuildWorkflow getBuildWorkflow (); Type: io.github.cdklabs.projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled. buildWorkflowJobId Optional public java . lang . String getBuildWorkflowJobId (); Type: java.lang.String The job ID of the build workflow. jest Optional public Jest getJest (); Type: io.github.cdklabs.projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion Optional public java . lang . String getMaxNodeVersion (); Type: java.lang.String Maximum node version required by this package. minNodeVersion Optional public java . lang . String getMinNodeVersion (); Type: java.lang.String Minimum node.js version required by this package. npmignore Optional public IgnoreFile getNpmignore (); Type: io.github.cdklabs.projen.IgnoreFile The .npmignore file. prettier Optional public Prettier getPrettier (); Type: io.github.cdklabs.projen.javascript.Prettier ~~ publisher ~~ Optional Deprecated: use release.publisher . public Publisher getPublisher (); Type: io.github.cdklabs.projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow. release Optional public Release getRelease (); Type: io.github.cdklabs.projen.release.Release Release management. upgradeWorkflow Optional public UpgradeDependencies getUpgradeWorkflow (); Type: io.github.cdklabs.projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory Required public java . lang . String getDocsDirectory (); Type: java.lang.String libdir Required public java . lang . String getLibdir (); Type: java.lang.String The directory in which compiled .js files reside. srcdir Required public java . lang . String getSrcdir (); Type: java.lang.String The directory in which the .ts sources reside. testdir Required public java . lang . String getTestdir (); Type: java.lang.String The directory in which tests reside. tsconfigDev Required public TypescriptConfig getTsconfigDev (); Type: io.github.cdklabs.projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask Required public Task getWatchTask (); Type: io.github.cdklabs.projen.Task The \"watch\" task. docgen Optional public java . lang . Boolean getDocgen (); Type: java.lang.Boolean eslint Optional public Eslint getEslint (); Type: io.github.cdklabs.projen.javascript.Eslint tsconfig Optional public TypescriptConfig getTsconfig (); Type: io.github.cdklabs.projen.javascript.TypescriptConfig tsconfigEslint Optional public TypescriptConfig getTsconfigEslint (); Type: io.github.cdklabs.projen.javascript.TypescriptConfig apiSrcDir Required public java . lang . String getApiSrcDir (); Type: java.lang.String The directory in which the api generated code will reside, relative to the project srcdir. forceGenerateCodeAndDocs Required public java . lang . Boolean getForceGenerateCodeAndDocs (); Type: java.lang.Boolean Force to generate code and docs even if there were no changes in spec. generatedClients Required public java . util . Map < java . lang . String , Project > getGeneratedClients (); Type: java.util.Map References to the client projects that were generated, keyed by language. generatedCodeDir Required public java . lang . String getGeneratedCodeDir (); Type: java.lang.String The directory in which generated client code will be generated, relative to the outdir of this project. generatedTypescriptClient Required public TypeScriptProject getGeneratedTypescriptClient (); Type: io.github.cdklabs.projen.typescript.TypeScriptProject A reference to the generated typescript client. specDir Required public java . lang . String getSpecDir (); Type: java.lang.String The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. specFileName Required public java . lang . String getSpecFileName (); Type: java.lang.String The name of the spec file. pnpmWorkspace Optional public YamlFile getPnpmWorkspace (); Type: io.github.cdklabs.projen.YamlFile Reference to the PNPM workspace yaml file which adds the dependency between this project and the generated typescript client when this project is used in a monorepo, and the package manager is PNPM. Constants Name Type Description DEFAULT_TASK java.lang.String The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public java . lang . String getDefaultTask (); Type: java.lang.String The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. Enums ClientLanguage Supported languages for client generation. Members Name Description TYPESCRIPT No description. PYTHON No description. JAVA No description. TYPESCRIPT PYTHON JAVA CustomAuthorizerType The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type Members Name Description TOKEN A custom authorizer that uses a Lambda function. REQUEST An authorizer that uses a Lambda function using incoming request parameters. TOKEN A custom authorizer that uses a Lambda function. REQUEST An authorizer that uses a Lambda function using incoming request parameters. DocumentationFormat Formats for documentation generation. Members Name Description HTML_REDOC HTML Documentation generated by redoc. HTML2 OpenAPI Generator 'html2' documentation. MARKDOWN OpenAPI Generator 'markdown' documentation. PLANTUML OpenAPI Generator 'plantuml' documentation. HTML_REDOC HTML Documentation generated by redoc. Redocly/redoc HTML2 OpenAPI Generator 'html2' documentation. https://github.com/OpenAPITools/openapi-generator/blob/master/docs/generators/html2.md MARKDOWN OpenAPI Generator 'markdown' documentation. https://github.com/OpenAPITools/openapi-generator/blob/master/docs/generators/markdown.md PLANTUML OpenAPI Generator 'plantuml' documentation. https://github.com/OpenAPITools/openapi-generator/blob/master/docs/generators/plantuml.md","title":"Index"},{"location":"java/open-api-gateway/index.html#openapi-gateway","text":"Define your APIs using Smithy or OpenAPI v3 , and leverage the power of generated clients and documentation, automatic input validation, and type safe client and server code! This package vends a projen project type which allows you to define an API using either Smithy or OpenAPI v3 , and a construct which manages deploying this API in API Gateway, given an integration (eg a lambda) for every operation. The project will generate models and clients from your api definition in your desired languages, and can be utilised both client side or server side in lambda handlers. The project type also generates a wrapper construct which adds type safety to ensure an integration is provided for every API operation. When you change your API specification, just run npx projen again to regenerate all of this!","title":"OpenAPI Gateway"},{"location":"java/open-api-gateway/index.html#project","text":"Use the provided projen project types to get started with your API quickly! There are options for TypeScript, Python and Java: Smithy SmithyApiGatewayTsProject SmithyApiGatewayPythonProject SmithyApiGatewayJavaProject OpenAPI OpenApiGatewayTsProject OpenApiGatewayPythonProject OpenApiGatewayJavaProject We recommend using the Smithy-based projects, given that Smithy has a less verbose and more powerful IDL (Interface Definition Language). Choose the project type based on the language you'd like to write your CDK infrastructure in . Whichever option above you choose, you can still write your server-side code in any language. It's recommended that these projects are used as part of an nx-monorepo project, as it makes setting up dependencies much easier, and you will not need to manage the build order of generated clients.","title":"Project"},{"location":"java/open-api-gateway/index.html#smithy-idl","text":"Please refer to the Smithy documentation for how to write models in Smithy. A basic example is provided below: $version : \"2\" namespace example.hello use aws.protocols#restJson1 @title ( \"A Sample Hello World API\" ) /// A sample smithy api @restJson1 service Hello { version: \"1.0\" operations: [ SayHello ] } @readonly @http ( method: \"GET\" , uri: \"/hello\" ) operation SayHello { input: SayHelloInput output: SayHelloOutput errors: [ ApiError ] } string Name string Message @input structure SayHelloInput { @httpQuery ( \"name\" ) @required name: Name } @output structure SayHelloOutput { @required message: Message } @error ( \"client\" ) structure ApiError { @required errorMessage: Message }","title":"Smithy IDL"},{"location":"java/open-api-gateway/index.html#openapi-specification","text":"Your spec.yaml file defines your api using OpenAPI Version 3.0.3 . An example spec might look like: openapi : 3.0.3 info : version : 1.0.0 title : Example API paths : /hello : get : operationId : sayHello parameters : - in : query name : name schema : type : string required : true responses : '200' : description : Successful response content : 'application/json' : schema : $ref : '#/components/schemas/HelloResponse' components : schemas : HelloResponse : type : object properties : message : type : string required : - message You can divide your specification into multiple files using $ref . For example, you might choose to structure your spec as follows: |_ spec/ |_ spec.yaml |_ paths/ |_ index.yaml |_ sayHello.yaml |_ schemas/ |_ index.yaml |_ helloResponse.yaml Where spec.yaml looks as follows: openapi : 3.0.3 info : version : 1.0.0 title : Example API paths : $ref : './paths/index.yaml' components : schemas : $ref : './schemas/index.yaml' paths/index.yaml : /hello : get : $ref : './sayHello.yaml' paths/sayHello.yaml : operationId : sayHello parameters : - in : query name : name schema : type : string required : true responses : '200' : description : Successful response content : 'application/json' : schema : $ref : '../schemas/helloResponse.yaml' schemas/index.yaml : HelloResponse : $ref : './helloResponse.yaml' schemas/helloResponse.yaml : type : object properties : message : type : string required : - message","title":"OpenAPI Specification"},{"location":"java/open-api-gateway/index.html#construct","text":"A sample construct is generated which provides a type-safe interface for creating an API Gateway API based on your OpenAPI specification. You'll get a type error if you forget to define an integration for an operation defined in your api. // Example automatically generated from non-compiling source. May contain errors. import aws.prototyping.sdk.open.api.gateway.Authorizers ; import aws.prototyping.sdk.open.api.gateway.Integrations ; import software.amazon.awscdk.services.lambda.nodejs.NodejsFunction ; import software.constructs.Construct ; import api.Api ; /** * An example of how to wire lambda handler functions to the API */ public class SampleApi extends Api { public SampleApi ( Construct scope , String id ) { super ( scope , id , Map . of ( \"defaultAuthorizer\" , Authorizers . iam (), \"integrations\" , Map . of ( // Every operation defined in your API must have an integration defined! \"sayHello\" , Map . of ( \"integration\" , Integrations . lambda ( new NodejsFunction ( scope , \"say-hello\" )))))); } }","title":"Construct"},{"location":"java/open-api-gateway/index.html#generated-client","text":"","title":"Generated Client"},{"location":"java/open-api-gateway/index.html#lambda-handler-wrappers","text":"Lambda handler wrappers are also importable from the generated client. These provide input/output type safety, ensuring that your API handlers return outputs that correspond to your specification.","title":"Lambda Handler Wrappers"},{"location":"java/open-api-gateway/index.html#interceptors","text":"The lambda handler wrappers allow you to pass in a chain of handler functions to handle the request. This allows you to implement middleware / interceptors for handling requests. Each handler function may choose whether or not to continue the handler chain by invoking chain.next .","title":"Interceptors"},{"location":"java/open-api-gateway/index.html#other-details","text":"","title":"Other Details"},{"location":"java/open-api-gateway/index.html#tagging-operations","text":"Operations can be grouped together into logical collections via tags. This can be achieved in Smithy with the @tags trait: @tags ([ \"pets\" , \"users\" ]) operation PurchasePet { ... } Or in OpenAPI using the tags property: paths : /pets/purchase : post : operationId : purchasePet tags : - pets - users ... When multiple tags are used, the \"first\" tag is considered to be the API that the operation belongs to, so in the generated client, the above example operation would be included in the PetsApi client but not the UsersApi client. Multiple tags are still useful for documentation generation, for example DocumentationFormat.HTML_REDOC will group operations by tag in the side navigation bar. If you would like to introduce tags without breaking existing clients, we recommend first adding a tag named default to all operations. \u26a0\ufe0f Important Note : Smithy versions below 1.28.0 sort tags in alphabetical order and so the \"first\" tag will be the earliest in the alphabet. Therefore, if using tags with older versions of Smithy, we recommend prefixing your desired first tag with an underscore (for example _default ). This is rectified in 1.28.0 , where tag order from the @tags trait is preserved.","title":"Tagging Operations"},{"location":"java/open-api-gateway/index.html#breaking-changes","text":"v0.14.0 - see aws-prototyping-sdk!280 Moved smithy model files from model directory to smithy/src/main/smithy - please move these manually as part of upgrading to 0.14.0 , and delete your model directory when done. Moved smithy gradle files from smithy-build directory to smithy - if you have added any dependencies to your smithy-build/build.gradle file you will need to copy them across into smithy/build.gradle (note dependencies in the new gradle file start with implementation rather than smithy ). Deprecated gradleWrapperPath option on SmithApiGateway projects in favour of ignoreGradleWrapper: false - the gradle wrapper in smithy directory is always used (and generated automatically if not found). If you used a custom gradle wrapper, copy it into the smithy directory, set ignoreGradleWrapper: false and check it in to your repository.","title":"Breaking Changes"},{"location":"java/open-api-gateway/index.html#api-reference","text":"","title":"API Reference "},{"location":"java/open-api-gateway/index.html#constructs","text":"","title":"Constructs "},{"location":"java/open-api-gateway/index.html#openapigatewayrestapi","text":"A construct for creating an api gateway rest api based on the definition in the OpenAPI spec.","title":"OpenApiGatewayRestApi "},{"location":"java/open-api-gateway/index.html#structs","text":"","title":"Structs "},{"location":"java/open-api-gateway/index.html#apigatewayintegration","text":"Represents an api gateway integration. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-integration.html","title":"ApiGatewayIntegration "},{"location":"java/open-api-gateway/index.html#apigatewayintegrationresponse","text":"API Gateway integration response. https://docs.aws.amazon.com/apigateway/latest/api/API_Integration.html","title":"ApiGatewayIntegrationResponse "},{"location":"java/open-api-gateway/index.html#apigatewayintegrationtlsconfig","text":"Specifies the TLS configuration for an integration. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-extensions-integration-tls-config.html","title":"ApiGatewayIntegrationTlsConfig "},{"location":"java/open-api-gateway/index.html#authorizerprops","text":"Properties for an authorizer.","title":"AuthorizerProps "},{"location":"java/open-api-gateway/index.html#cidrallowlist","text":"Representation of a CIDR range.","title":"CidrAllowList "},{"location":"java/open-api-gateway/index.html#cognitoauthorizerprops","text":"Properties used to configure a cognito authorizer.","title":"CognitoAuthorizerProps "},{"location":"java/open-api-gateway/index.html#commonapiprojectoptions","text":"","title":"CommonApiProjectOptions "},{"location":"java/open-api-gateway/index.html#customauthorizerprops","text":"Properties used to configure a custom authorizer.","title":"CustomAuthorizerProps "},{"location":"java/open-api-gateway/index.html#integrationgrantprops","text":"Properties for granting the API access to invoke the operation.","title":"IntegrationGrantProps "},{"location":"java/open-api-gateway/index.html#integrationrenderprops","text":"Properties for rendering an integration into an API Gateway OpenAPI extension.","title":"IntegrationRenderProps "},{"location":"java/open-api-gateway/index.html#managedrule","text":"","title":"ManagedRule "},{"location":"java/open-api-gateway/index.html#methodandpath","text":"Structure to contain an API operation's method and path.","title":"MethodAndPath "},{"location":"java/open-api-gateway/index.html#openapigatewayjavaprojectoptions","text":"Configuration for the OpenApiGatewayJavaProject.","title":"OpenApiGatewayJavaProjectOptions "},{"location":"java/open-api-gateway/index.html#openapigatewayprojectoptions","text":"Options common to all open api gateway projects.","title":"OpenApiGatewayProjectOptions "},{"location":"java/open-api-gateway/index.html#openapigatewaypythonprojectoptions","text":"Configuration for the OpenApiGatewayPythonProject.","title":"OpenApiGatewayPythonProjectOptions "},{"location":"java/open-api-gateway/index.html#openapigatewayrestapiprops","text":"Configuration for the OpenApiGatewayRestApi construct.","title":"OpenApiGatewayRestApiProps "},{"location":"java/open-api-gateway/index.html#openapigatewaytsprojectoptions","text":"Configuration for the OpenApiGatewayTsProject.","title":"OpenApiGatewayTsProjectOptions "},{"location":"java/open-api-gateway/index.html#openapigatewaywebacloptions","text":"Configuration for the Web ACL associated with the API.","title":"OpenApiGatewayWebAclOptions "},{"location":"java/open-api-gateway/index.html#openapiintegration","text":"Defines an integration for an individual API operation.","title":"OpenApiIntegration "},{"location":"java/open-api-gateway/index.html#openapioptions","text":"Options required alongside an Open API specification to create API Gateway resources.","title":"OpenApiOptions "},{"location":"java/open-api-gateway/index.html#smithyapigatewayjavaprojectoptions","text":"Configuration for the SmithyApiGatewayJavaProject.","title":"SmithyApiGatewayJavaProjectOptions "},{"location":"java/open-api-gateway/index.html#smithyapigatewayprojectoptions","text":"Options common to all smithy api gateway projects.","title":"SmithyApiGatewayProjectOptions "},{"location":"java/open-api-gateway/index.html#smithyapigatewaypythonprojectoptions","text":"Configuration for the SmithyApiGatewayPythonProject.","title":"SmithyApiGatewayPythonProjectOptions "},{"location":"java/open-api-gateway/index.html#smithyapigatewaytsprojectoptions","text":"Configuration for the SmithyApiGatewayTsProject.","title":"SmithyApiGatewayTsProjectOptions "},{"location":"java/open-api-gateway/index.html#smithybuildoptions","text":"Options for the smithy build files.","title":"SmithyBuildOptions "},{"location":"java/open-api-gateway/index.html#smithycommon","text":"Properties common to smithy plugins and the root smithy build.","title":"SmithyCommon "},{"location":"java/open-api-gateway/index.html#smithymavenconfiguration","text":"Configuration for smithy maven dependencies.","title":"SmithyMavenConfiguration "},{"location":"java/open-api-gateway/index.html#smithyplugin","text":"A smithy plugin.","title":"SmithyPlugin "},{"location":"java/open-api-gateway/index.html#smithyprojection","text":"A smithy build projection.","title":"SmithyProjection "},{"location":"java/open-api-gateway/index.html#smithyservicename","text":"Represents a fully qualified name of a Smithy service. https://awslabs.github.io/smithy/2.0/spec/service-types.html","title":"SmithyServiceName "},{"location":"java/open-api-gateway/index.html#smithytransform","text":"A smithy build transform.","title":"SmithyTransform "},{"location":"java/open-api-gateway/index.html#classes","text":"","title":"Classes "},{"location":"java/open-api-gateway/index.html#authorizer","text":"An authorizer for authorizing API requests.","title":"Authorizer "},{"location":"java/open-api-gateway/index.html#authorizers_2","text":"Class used to construct authorizers for use in the OpenApiGatewayLambdaApi construct.","title":"Authorizers "},{"location":"java/open-api-gateway/index.html#cognitoauthorizer","text":"An authorizer that uses Cognito identity or access tokens.","title":"CognitoAuthorizer "},{"location":"java/open-api-gateway/index.html#customauthorizer","text":"An authorizer that uses a lambda function to authorize requests.","title":"CustomAuthorizer "},{"location":"java/open-api-gateway/index.html#iamauthorizer","text":"An IAM authorizer.","title":"IamAuthorizer "},{"location":"java/open-api-gateway/index.html#integration","text":"An integration for an API operation. You can extend this to implement your own integration if you like.","title":"Integration "},{"location":"java/open-api-gateway/index.html#integrations_1","text":"A collection of integrations to connect API operations with a backend to service requests.","title":"Integrations "},{"location":"java/open-api-gateway/index.html#lambdaintegration","text":"A lambda integration.","title":"LambdaIntegration "},{"location":"java/open-api-gateway/index.html#noneauthorizer","text":"No authorizer.","title":"NoneAuthorizer "},{"location":"java/open-api-gateway/index.html#openapigatewayjavaproject","text":"Synthesizes a Java Project with an OpenAPI spec, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests.","title":"OpenApiGatewayJavaProject "},{"location":"java/open-api-gateway/index.html#openapigatewaypythonproject","text":"Synthesizes a Python Project with an OpenAPI spec, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests.","title":"OpenApiGatewayPythonProject "},{"location":"java/open-api-gateway/index.html#openapigatewaytsproject","text":"Synthesizes a Typescript Project with an OpenAPI spec, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests.","title":"OpenApiGatewayTsProject "},{"location":"java/open-api-gateway/index.html#smithyapigatewayjavaproject","text":"Synthesizes a Java Project with a Smithy model, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests.","title":"SmithyApiGatewayJavaProject "},{"location":"java/open-api-gateway/index.html#smithyapigatewaypythonproject","text":"Synthesizes a Python Project with a Smithy model, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests.","title":"SmithyApiGatewayPythonProject "},{"location":"java/open-api-gateway/index.html#smithyapigatewaytsproject","text":"Synthesizes a Typescript Project with a Smithy model, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests.","title":"SmithyApiGatewayTsProject "},{"location":"java/open-api-gateway/index.html#enums","text":"","title":"Enums "},{"location":"java/open-api-gateway/index.html#clientlanguage","text":"Supported languages for client generation.","title":"ClientLanguage "},{"location":"java/open-api-gateway/index.html#customauthorizertype","text":"The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type","title":"CustomAuthorizerType "},{"location":"java/open-api-gateway/index.html#documentationformat","text":"Formats for documentation generation.","title":"DocumentationFormat "},{"location":"java/pdk-nag/index.html","text":"PDK Nag PDKNag ships with a helper utility that automatically configures CDKNag within your application. const app = PDKNag . app (); const stack = new Stack ( app , 'MyStack' ); ... As shown above, this will configure your application to have CDKNag run on synthesis. By default, CDK will trigger a failure on synth if any errors are encountered. To relax these, run the following: cdk synth --ignore-errors Conversely, CDK will not fail on synth if warnings are detected. To enforce that all warnings are resolved, run the following command: cdk synth --strict Instrumenting custom NagPacks By default, when creating a PDKNag application the AwsSolutions NagPack is instrumented. In order to specify custom NagPacks to instrument, you can configure the PDKApp as follows: import { PDKNag , AwsPrototypingChecks } from \"@aws-prototyping-sdk/pdk-nag\" ; const app = PDKNag . app ({ nagPacks : [ new AwsPrototypingChecks ()] }); In this example, the AwsPrototypingChecks NagPack has been configured to run instead of the default. Multiple NagPacks can also be instrumented by adding NagPack instances to the nagPacks array; API Reference Constructs PDKNagApp Initializers import software.aws.awsprototypingsdk.pdknag.PDKNagApp ; PDKNagApp . Builder . create () // .analyticsReporting(java.lang.Boolean) // .autoSynth(java.lang.Boolean) // .context(java.util.Map<java.lang.String, java.lang.Object>) // .defaultStackSynthesizer(IReusableStackSynthesizer) // .outdir(java.lang.String) // .postCliContext(java.util.Map<java.lang.String, java.lang.Object>) // .stackTraces(java.lang.Boolean) // .treeMetadata(java.lang.Boolean) // .failOnError(java.lang.Boolean) // .failOnWarning(java.lang.Boolean) // .nagPacks(java.util.List<NagPack>) . build (); Name Type Description analyticsReporting java.lang.Boolean Include runtime versioning information in the Stacks of this app. autoSynth java.lang.Boolean Automatically call synth() before the program exits. context java.util.Map Additional context values for the application. defaultStackSynthesizer software.amazon.awscdk.IReusableStackSynthesizer The stack synthesizer to use by default for all Stacks in the App. outdir java.lang.String The output directory into which to emit synthesized artifacts. postCliContext java.util.Map Additional context values for the application. stackTraces java.lang.Boolean Include construct creation stack trace in the aws:cdk:trace metadata key of all constructs. treeMetadata java.lang.Boolean Include construct tree metadata as part of the Cloud Assembly. failOnError java.lang.Boolean Determines whether any errors encountered should trigger a test failure. failOnWarning java.lang.Boolean Determines whether any warnings encountered should trigger a test failure. nagPacks java.util.List Custom nag packs to execute. analyticsReporting Optional Type: java.lang.Boolean Default: Value of 'aws:cdk:version-reporting' context key Include runtime versioning information in the Stacks of this app. autoSynth Optional Type: java.lang.Boolean Default: true if running via CDK CLI ( CDK_OUTDIR is set), false otherwise Automatically call synth() before the program exits. If you set this, you don't have to call synth() explicitly. Note that this feature is only available for certain programming languages, and calling synth() is still recommended. context Optional Type: java.util.Map Default: no additional context Additional context values for the application. Context set by the CLI or the context key in cdk.json has precedence. Context can be read from any construct using node.getContext(key) . defaultStackSynthesizer Optional Type: software.amazon.awscdk.IReusableStackSynthesizer Default: A DefaultStackSynthesizer with default settings The stack synthesizer to use by default for all Stacks in the App. The Stack Synthesizer controls aspects of synthesis and deployment, like how assets are referenced and what IAM roles to use. For more information, see the README of the main CDK package. outdir Optional Type: java.lang.String Default: If this value is not set, considers the environment variable CDK_OUTDIR . If CDK_OUTDIR is not defined, uses a temp directory. The output directory into which to emit synthesized artifacts. You should never need to set this value. By default, the value you pass to the CLI's --output flag will be used, and if you change it to a different directory the CLI will fail to pick up the generated Cloud Assembly. This property is intended for internal and testing use. postCliContext Optional Type: java.util.Map Default: no additional context Additional context values for the application. Context provided here has precedence over context set by: The CLI via --context The context key in cdk.json The AppProps.context property This property is recommended over the AppProps.context property since you can make final decision over which context value to take in your app. Context can be read from any construct using node.getContext(key) . Example // context from the CLI and from `cdk.json` are stored in the // CDK_CONTEXT env variable const cliContext = JSON . parse ( process . env . CDK_CONTEXT ! ); // determine whether to take the context passed in the CLI or not const determineValue = process . env . PROD ? cliContext . SOMEKEY : ' my - prod - value ' ; new App ({ postCliContext : { SOMEKEY : determineValue , }, }); stackTraces Optional Type: java.lang.Boolean Default: true stack traces are included unless aws:cdk:disable-stack-trace is set in the context. Include construct creation stack trace in the aws:cdk:trace metadata key of all constructs. treeMetadata Optional Type: java.lang.Boolean Default: true Include construct tree metadata as part of the Cloud Assembly. failOnError Optional Type: java.lang.Boolean Default: false Determines whether any errors encountered should trigger a test failure. failOnWarning Optional Type: java.lang.Boolean Default: false Determines whether any warnings encountered should trigger a test failure. nagPacks Optional Type: java.util.List Default: DEFAULT_NAG_PACKS Custom nag packs to execute. Methods Name Description toString Returns a string representation of this construct. synth Synthesize this stage into a cloud assembly. addNagResult No description. nagResults Returns a list of NagResult. toString public java . lang . String toString () Returns a string representation of this construct. synth public CloudAssembly synth () public CloudAssembly synth ( StageSynthesisOptions options ) Synthesize this stage into a cloud assembly. Once an assembly has been synthesized, it cannot be modified. Subsequent calls will return the same assembly. options Optional Type: software.amazon.awscdk.StageSynthesisOptions addNagResult public void addNagResult ( NagResult result ) result Required Type: NagResult nagResults public java . util . List < NagResult > nagResults () Returns a list of NagResult. Note: app.synth() must be called before this to retrieve results. Static Functions Name Description isConstruct Checks if x is a construct. isStage Test whether the given construct is a stage. of Return the stage this construct is contained with, if available. isApp Checks if an object is an instance of the App class. isConstruct import software.aws.awsprototypingsdk.pdknag.PDKNagApp ; PDKNagApp . isConstruct ( java . lang . Object x ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: java.lang.Object Any object. isStage import software.aws.awsprototypingsdk.pdknag.PDKNagApp ; PDKNagApp . isStage ( java . lang . Object x ) Test whether the given construct is a stage. x Required Type: java.lang.Object of import software.aws.awsprototypingsdk.pdknag.PDKNagApp ; PDKNagApp . of ( IConstruct construct ) Return the stage this construct is contained with, if available. If called on a nested stage, returns its parent. construct Required Type: software.constructs.IConstruct isApp import software.aws.awsprototypingsdk.pdknag.PDKNagApp ; PDKNagApp . isApp ( java . lang . Object obj ) Checks if an object is an instance of the App class. obj Required Type: java.lang.Object The object to evaluate. Properties Name Type Description node software.constructs.Node The tree node. artifactId java.lang.String Artifact ID of the assembly if it is a nested stage. The root stage (app) will return an empty string. assetOutdir java.lang.String The cloud assembly asset output directory. outdir java.lang.String The cloud assembly output directory. stageName java.lang.String The name of the stage. account java.lang.String The default account for all resources defined within this stage. parentStage software.amazon.awscdk.Stage The parent stage or undefined if this is the app. region java.lang.String The default region for all resources defined within this stage. nagPacks java.util.List No description. node Required public Node getNode (); Type: software.constructs.Node The tree node. artifactId Required public java . lang . String getArtifactId (); Type: java.lang.String Artifact ID of the assembly if it is a nested stage. The root stage (app) will return an empty string. Derived from the construct path. assetOutdir Required public java . lang . String getAssetOutdir (); Type: java.lang.String The cloud assembly asset output directory. outdir Required public java . lang . String getOutdir (); Type: java.lang.String The cloud assembly output directory. stageName Required public java . lang . String getStageName (); Type: java.lang.String The name of the stage. Based on names of the parent stages separated by hypens. account Optional public java . lang . String getAccount (); Type: java.lang.String The default account for all resources defined within this stage. parentStage Optional public Stage getParentStage (); Type: software.amazon.awscdk.Stage The parent stage or undefined if this is the app. * region Optional public java . lang . String getRegion (); Type: java.lang.String The default region for all resources defined within this stage. nagPacks Required public java . util . List < NagPack > getNagPacks (); Type: java.util.List Structs Message Message instance. Initializer import software.aws.awsprototypingsdk.pdknag.Message ; Message . builder () . messageDescription ( java . lang . String ) . messageType ( java . lang . String ) . build (); Properties Name Type Description messageDescription java.lang.String Message description. messageType java.lang.String Message type as returned from cdk-nag. messageDescription Required public java . lang . String getMessageDescription (); Type: java.lang.String Message description. messageType Required public java . lang . String getMessageType (); Type: java.lang.String Message type as returned from cdk-nag. NagResult Nag result. Initializer import software.aws.awsprototypingsdk.pdknag.NagResult ; NagResult . builder () . messages ( java . util . List < Message > ) . resource ( java . lang . String ) . build (); Properties Name Type Description messages java.util.List< Message > List of messages. resource java.lang.String Resource which triggered the message. messages Required public java . util . List < Message > getMessages (); Type: java.util.List< Message > List of messages. resource Required public java . lang . String getResource (); Type: java.lang.String Resource which triggered the message. PDKNagAppProps Initializer import software.aws.awsprototypingsdk.pdknag.PDKNagAppProps ; PDKNagAppProps . builder () // .analyticsReporting(java.lang.Boolean) // .autoSynth(java.lang.Boolean) // .context(java.util.Map<java.lang.String, java.lang.Object>) // .defaultStackSynthesizer(IReusableStackSynthesizer) // .outdir(java.lang.String) // .postCliContext(java.util.Map<java.lang.String, java.lang.Object>) // .stackTraces(java.lang.Boolean) // .treeMetadata(java.lang.Boolean) // .failOnError(java.lang.Boolean) // .failOnWarning(java.lang.Boolean) // .nagPacks(java.util.List<NagPack>) . build (); Properties Name Type Description analyticsReporting java.lang.Boolean Include runtime versioning information in the Stacks of this app. autoSynth java.lang.Boolean Automatically call synth() before the program exits. context java.util.Map Additional context values for the application. defaultStackSynthesizer software.amazon.awscdk.IReusableStackSynthesizer The stack synthesizer to use by default for all Stacks in the App. outdir java.lang.String The output directory into which to emit synthesized artifacts. postCliContext java.util.Map Additional context values for the application. stackTraces java.lang.Boolean Include construct creation stack trace in the aws:cdk:trace metadata key of all constructs. treeMetadata java.lang.Boolean Include construct tree metadata as part of the Cloud Assembly. failOnError java.lang.Boolean Determines whether any errors encountered should trigger a test failure. failOnWarning java.lang.Boolean Determines whether any warnings encountered should trigger a test failure. nagPacks java.util.List Custom nag packs to execute. analyticsReporting Optional public java . lang . Boolean getAnalyticsReporting (); Type: java.lang.Boolean Default: Value of 'aws:cdk:version-reporting' context key Include runtime versioning information in the Stacks of this app. autoSynth Optional public java . lang . Boolean getAutoSynth (); Type: java.lang.Boolean Default: true if running via CDK CLI ( CDK_OUTDIR is set), false otherwise Automatically call synth() before the program exits. If you set this, you don't have to call synth() explicitly. Note that this feature is only available for certain programming languages, and calling synth() is still recommended. context Optional public java . util . Map < java . lang . String , java . lang . Object > getContext (); Type: java.util.Map Default: no additional context Additional context values for the application. Context set by the CLI or the context key in cdk.json has precedence. Context can be read from any construct using node.getContext(key) . defaultStackSynthesizer Optional public IReusableStackSynthesizer getDefaultStackSynthesizer (); Type: software.amazon.awscdk.IReusableStackSynthesizer Default: A DefaultStackSynthesizer with default settings The stack synthesizer to use by default for all Stacks in the App. The Stack Synthesizer controls aspects of synthesis and deployment, like how assets are referenced and what IAM roles to use. For more information, see the README of the main CDK package. outdir Optional public java . lang . String getOutdir (); Type: java.lang.String Default: If this value is not set, considers the environment variable CDK_OUTDIR . If CDK_OUTDIR is not defined, uses a temp directory. The output directory into which to emit synthesized artifacts. You should never need to set this value. By default, the value you pass to the CLI's --output flag will be used, and if you change it to a different directory the CLI will fail to pick up the generated Cloud Assembly. This property is intended for internal and testing use. postCliContext Optional public java . util . Map < java . lang . String , java . lang . Object > getPostCliContext (); Type: java.util.Map Default: no additional context Additional context values for the application. Context provided here has precedence over context set by: The CLI via --context The context key in cdk.json The AppProps.context property This property is recommended over the AppProps.context property since you can make final decision over which context value to take in your app. Context can be read from any construct using node.getContext(key) . Example // context from the CLI and from `cdk.json` are stored in the // CDK_CONTEXT env variable const cliContext = JSON . parse ( process . env . CDK_CONTEXT ! ); // determine whether to take the context passed in the CLI or not const determineValue = process . env . PROD ? cliContext . SOMEKEY : ' my - prod - value ' ; new App ({ postCliContext : { SOMEKEY : determineValue , }, }); stackTraces Optional public java . lang . Boolean getStackTraces (); Type: java.lang.Boolean Default: true stack traces are included unless aws:cdk:disable-stack-trace is set in the context. Include construct creation stack trace in the aws:cdk:trace metadata key of all constructs. treeMetadata Optional public java . lang . Boolean getTreeMetadata (); Type: java.lang.Boolean Default: true Include construct tree metadata as part of the Cloud Assembly. failOnError Optional public java . lang . Boolean getFailOnError (); Type: java.lang.Boolean Default: false Determines whether any errors encountered should trigger a test failure. failOnWarning Optional public java . lang . Boolean getFailOnWarning (); Type: java.lang.Boolean Default: false Determines whether any warnings encountered should trigger a test failure. nagPacks Optional public java . util . List < NagPack > getNagPacks (); Type: java.util.List Default: DEFAULT_NAG_PACKS Custom nag packs to execute. Classes AwsPrototypingChecks Check best practices for prototypes. Initializers import software.aws.awsprototypingsdk.pdknag.AwsPrototypingChecks ; AwsPrototypingChecks . Builder . create () // .logIgnores(java.lang.Boolean) // .reports(java.lang.Boolean) // .suppressionIgnoreCondition(INagSuppressionIgnore) // .verbose(java.lang.Boolean) . build (); Name Type Description logIgnores java.lang.Boolean Whether or not to log triggered rules that have been suppressed as informational messages (default: false). reports java.lang.Boolean Whether or not to generate CSV compliance reports for applied Stacks in the App's output directory (default: true). suppressionIgnoreCondition io.github.cdklabs.cdknag.INagSuppressionIgnore Conditionally prevent rules from being suppressed (default: no user provided condition). verbose java.lang.Boolean Whether or not to enable extended explanatory descriptions on warning, error, and logged ignore messages (default: false). logIgnores Optional Type: java.lang.Boolean Whether or not to log triggered rules that have been suppressed as informational messages (default: false). reports Optional Type: java.lang.Boolean Whether or not to generate CSV compliance reports for applied Stacks in the App's output directory (default: true). suppressionIgnoreCondition Optional Type: io.github.cdklabs.cdknag.INagSuppressionIgnore Conditionally prevent rules from being suppressed (default: no user provided condition). verbose Optional Type: java.lang.Boolean Whether or not to enable extended explanatory descriptions on warning, error, and logged ignore messages (default: false). Methods Name Description visit Check if CfnResource and apply rules. visit public void visit ( IConstruct node ) Check if CfnResource and apply rules. node Required Type: software.constructs.IConstruct Properties Name Type Description readPackName java.lang.String No description. readReportStacks java.util.List No description. readPackName Required public java . lang . String getReadPackName (); Type: java.lang.String readReportStacks Required public java . util . List < java . lang . String > getReadReportStacks (); Type: java.util.List PDKNag Helper for create a Nag Enabled App. Initializers import software.aws.awsprototypingsdk.pdknag.PDKNag ; new PDKNag (); Name Type Description Static Functions Name Description addResourceSuppressionsByPathNoThrow Wrapper around NagSuppressions which does not throw. app Returns an instance of an App with Nag enabled. getStackAccountRegex Returns a stack account regex. getStackPartitionRegex Returns a stack partition regex. getStackPrefix Returns a prefix comprising of a delimited set of Stack Ids. getStackRegionRegex Returns a stack region regex. addResourceSuppressionsByPathNoThrow import software.aws.awsprototypingsdk.pdknag.PDKNag ; PDKNag . addResourceSuppressionsByPathNoThrow ( Stack stack , java . lang . String path , java . util . List < NagPackSuppression > suppressions ), PDKNag . addResourceSuppressionsByPathNoThrow ( Stack stack , java . lang . String path , java . util . List < NagPackSuppression > suppressions , java . lang . Boolean applyToChildren ) Wrapper around NagSuppressions which does not throw. stack Required Type: software.amazon.awscdk.Stack stack instance. path Required Type: java.lang.String resource path. suppressions Required Type: java.util.List list of suppressions to apply. applyToChildren Optional Type: java.lang.Boolean whether to apply to children. app import software.aws.awsprototypingsdk.pdknag.PDKNag ; PDKNag . app (), PDKNag . app ( PDKNagAppProps props ) Returns an instance of an App with Nag enabled. props Optional Type: PDKNagAppProps props to initialize the app with. getStackAccountRegex import software.aws.awsprototypingsdk.pdknag.PDKNag ; PDKNag . getStackAccountRegex ( Stack stack ) Returns a stack account regex. stack Required Type: software.amazon.awscdk.Stack stack instance. getStackPartitionRegex import software.aws.awsprototypingsdk.pdknag.PDKNag ; PDKNag . getStackPartitionRegex ( Stack stack ) Returns a stack partition regex. stack Required Type: software.amazon.awscdk.Stack stack instance. getStackPrefix import software.aws.awsprototypingsdk.pdknag.PDKNag ; PDKNag . getStackPrefix ( Stack stack ) Returns a prefix comprising of a delimited set of Stack Ids. For example: StackA/NestedStackB/ stack Required Type: software.amazon.awscdk.Stack stack instance. getStackRegionRegex import software.aws.awsprototypingsdk.pdknag.PDKNag ; PDKNag . getStackRegionRegex ( Stack stack ) Returns a stack region regex. stack Required Type: software.amazon.awscdk.Stack stack instance.","title":"Index"},{"location":"java/pdk-nag/index.html#pdk-nag","text":"PDKNag ships with a helper utility that automatically configures CDKNag within your application. const app = PDKNag . app (); const stack = new Stack ( app , 'MyStack' ); ... As shown above, this will configure your application to have CDKNag run on synthesis. By default, CDK will trigger a failure on synth if any errors are encountered. To relax these, run the following: cdk synth --ignore-errors Conversely, CDK will not fail on synth if warnings are detected. To enforce that all warnings are resolved, run the following command: cdk synth --strict","title":"PDK Nag"},{"location":"java/pdk-nag/index.html#instrumenting-custom-nagpacks","text":"By default, when creating a PDKNag application the AwsSolutions NagPack is instrumented. In order to specify custom NagPacks to instrument, you can configure the PDKApp as follows: import { PDKNag , AwsPrototypingChecks } from \"@aws-prototyping-sdk/pdk-nag\" ; const app = PDKNag . app ({ nagPacks : [ new AwsPrototypingChecks ()] }); In this example, the AwsPrototypingChecks NagPack has been configured to run instead of the default. Multiple NagPacks can also be instrumented by adding NagPack instances to the nagPacks array;","title":"Instrumenting custom NagPacks"},{"location":"java/pdk-nag/index.html#api-reference","text":"","title":"API Reference "},{"location":"java/pdk-nag/index.html#constructs","text":"","title":"Constructs "},{"location":"java/pdk-nag/index.html#pdknagapp","text":"","title":"PDKNagApp "},{"location":"java/pdk-nag/index.html#structs","text":"","title":"Structs "},{"location":"java/pdk-nag/index.html#message","text":"Message instance.","title":"Message "},{"location":"java/pdk-nag/index.html#nagresult","text":"Nag result.","title":"NagResult "},{"location":"java/pdk-nag/index.html#pdknagappprops","text":"","title":"PDKNagAppProps "},{"location":"java/pdk-nag/index.html#classes","text":"","title":"Classes "},{"location":"java/pdk-nag/index.html#awsprototypingchecks","text":"Check best practices for prototypes.","title":"AwsPrototypingChecks "},{"location":"java/pdk-nag/index.html#pdknag","text":"Helper for create a Nag Enabled App.","title":"PDKNag "},{"location":"java/pipeline/index.html","text":"The pipeline module vends an extension to CDK's CodePipeline construct, named PDKPipeline. It additionally creates a CodeCommit repository and by default is configured to build the project assumming nx-monorepo is being used (although this can be changed). A Sonarqube Scanner can also be configured to trigger a scan whenever the synth build job completes successfully. This Scanner is non-blocking and as such is not instrumented as part of the pipeline. The architecture for the PDKPipeline is as follows: CodeCommit repository -> CodePipeline |-> EventBridge Rule (On Build Succeded) -> CodeBuild (Sonar Scan) |-> Secret (sonarqube token) This module additionally vends multiple Projen Projects, one for each of the supported languages. These projects aim to bootstrap your project by providing sample code which uses the PDKPipeline construct. For example, in .projenrc.ts: new PDKPipelineTsProject ({ cdkVersion : \"2.1.0\" , defaultReleaseBranch : \"mainline\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-pipeline\" , }); This will generate a package in typescript containing CDK boilerplate for a pipeline stack (which instantiates PDKPipeline), sets up a Dev stage with an Application Stage containing an empty ApplicationStack (to be implemented). Once this package is synthesized, you can run npx projen and projen will synthesize your cloudformation. Alternatively, you can initialize a project using the cli (in an empty directory) for each of the supported languages as follows: # Typescript npx projen new --from aws-prototyping-sdk pdk-pipeline-ts # Python npx projen new --from aws-prototyping-sdk pdk-pipeline-py # Java npx projen new --from aws-prototyping-sdk pdk-pipeline-java CDK Nag In order to keep CDK Nag happy, make sure you build the pipeline before synth as per aws-cdk#18440 . API Reference Constructs PDKPipeline An extension to CodePipeline which configures sane defaults for a NX Monorepo codebase. In addition to this, it also creates a CodeCommit repository with automated PR builds and approvals. Initializers import software.aws.awsprototypingsdk.pipeline.PDKPipeline ; PDKPipeline . Builder . create ( Construct scope , java . lang . String id ) . synth ( IFileSetProducer ) // .assetPublishingCodeBuildDefaults(CodeBuildOptions) // .cliVersion(java.lang.String) // .codeBuildDefaults(CodeBuildOptions) // .codePipeline(Pipeline) // .crossAccountKeys(java.lang.Boolean) // .dockerCredentials(java.util.List<DockerCredential>) // .dockerEnabledForSelfMutation(java.lang.Boolean) // .dockerEnabledForSynth(java.lang.Boolean) // .enableKeyRotation(java.lang.Boolean) // .pipelineName(java.lang.String) // .publishAssetsInParallel(java.lang.Boolean) // .reuseCrossRegionSupportStacks(java.lang.Boolean) // .role(IRole) // .selfMutation(java.lang.Boolean) // .selfMutationCodeBuildDefaults(CodeBuildOptions) // .synthCodeBuildDefaults(CodeBuildOptions) // .useChangeSets(java.lang.Boolean) . primarySynthDirectory ( java . lang . String ) . repositoryName ( java . lang . String ) // .codeCommitRemovalPolicy(RemovalPolicy) // .defaultBranchName(java.lang.String) // .sonarCodeScannerConfig(SonarCodeScannerConfig) // .synthShellStepPartialProps(ShellStepProps) . build (); Name Type Description scope software.constructs.Construct No description. id java.lang.String No description. synth software.amazon.awscdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. assetPublishingCodeBuildDefaults software.amazon.awscdk.pipelines.CodeBuildOptions Additional customizations to apply to the asset publishing CodeBuild projects. cliVersion java.lang.String CDK CLI version to use in self-mutation and asset publishing steps. codeBuildDefaults software.amazon.awscdk.pipelines.CodeBuildOptions Customize the CodeBuild projects created for this pipeline. codePipeline software.amazon.awscdk.services.codepipeline.Pipeline An existing Pipeline to be reused and built upon. crossAccountKeys java.lang.Boolean Create KMS keys for the artifact buckets, allowing cross-account deployments. dockerCredentials java.util.List A list of credentials used to authenticate to Docker registries. dockerEnabledForSelfMutation java.lang.Boolean Enable Docker for the self-mutate step. dockerEnabledForSynth java.lang.Boolean Enable Docker for the 'synth' step. enableKeyRotation java.lang.Boolean Enable KMS key rotation for the generated KMS keys. pipelineName java.lang.String The name of the CodePipeline pipeline. publishAssetsInParallel java.lang.Boolean Publish assets in multiple CodeBuild projects. reuseCrossRegionSupportStacks java.lang.Boolean Reuse the same cross region support stack for all pipelines in the App. role software.amazon.awscdk.services.iam.IRole The IAM role to be assumed by this Pipeline. selfMutation java.lang.Boolean Whether the pipeline will update itself. selfMutationCodeBuildDefaults software.amazon.awscdk.pipelines.CodeBuildOptions Additional customizations to apply to the self mutation CodeBuild projects. synthCodeBuildDefaults software.amazon.awscdk.pipelines.CodeBuildOptions Additional customizations to apply to the synthesize CodeBuild projects. useChangeSets java.lang.Boolean Deploy every stack by creating a change set and executing it. primarySynthDirectory java.lang.String Output directory for cdk synthesized artifacts i.e: packages/infra/cdk.out. repositoryName java.lang.String Name of the CodeCommit repository to create. codeCommitRemovalPolicy software.amazon.awscdk.RemovalPolicy Possible values for a resource's Removal Policy The removal policy controls what happens to the resource if it stops being managed by CloudFormation. defaultBranchName java.lang.String Branch to trigger the pipeline execution. sonarCodeScannerConfig SonarCodeScannerConfig Configuration for enabling Sonarqube code scanning on a successful synth. synthShellStepPartialProps software.amazon.awscdk.pipelines.ShellStepProps PDKPipeline by default assumes a NX Monorepo structure for it's codebase and uses sane defaults for the install and run commands. scope Required Type: software.constructs.Construct id Required Type: java.lang.String synth Required Type: software.amazon.awscdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. The primary output of this step needs to be the cdk.out directory generated by the cdk synth command. If you use a ShellStep here and you don't configure an output directory, the output directory will automatically be assumed to be cdk.out . assetPublishingCodeBuildDefaults Optional Type: software.amazon.awscdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the asset publishing CodeBuild projects. cliVersion Optional Type: java.lang.String Default: Latest version CDK CLI version to use in self-mutation and asset publishing steps. If you want to lock the CDK CLI version used in the pipeline, by steps that are automatically generated for you, specify the version here. We recommend you do not specify this value, as not specifying it always uses the latest CLI version which is backwards compatible with old versions. If you do specify it, be aware that this version should always be equal to or higher than the version of the CDK framework used by the CDK app, when the CDK commands are run during your pipeline execution. When you change this version, the next time the SelfMutate step runs it will still be using the CLI of the the previous version that was in this property: it will only start using the new version after SelfMutate completes successfully. That means that if you want to update both framework and CLI version, you should update the CLI version first, commit, push and deploy, and only then update the framework version. codeBuildDefaults Optional Type: software.amazon.awscdk.pipelines.CodeBuildOptions Default: All projects run non-privileged build, SMALL instance, LinuxBuildImage.STANDARD_6_0 Customize the CodeBuild projects created for this pipeline. codePipeline Optional Type: software.amazon.awscdk.services.codepipeline.Pipeline Default: a new underlying pipeline is created. An existing Pipeline to be reused and built upon. [disable-awslint:ref-via-interface] crossAccountKeys Optional Type: java.lang.Boolean Default: false Create KMS keys for the artifact buckets, allowing cross-account deployments. The artifact buckets have to be encrypted to support deploying CDK apps to another account, so if you want to do that or want to have your artifact buckets encrypted, be sure to set this value to true . Be aware there is a cost associated with maintaining the KMS keys. dockerCredentials Optional Type: java.util.List Default: [] A list of credentials used to authenticate to Docker registries. Specify any credentials necessary within the pipeline to build, synth, update, or publish assets. dockerEnabledForSelfMutation Optional Type: java.lang.Boolean Default: false Enable Docker for the self-mutate step. Set this to true if the pipeline itself uses Docker container assets (for example, if you use LinuxBuildImage.fromAsset() as the build image of a CodeBuild step in the pipeline). You do not need to set it if you build Docker image assets in the application Stages and Stacks that are deployed by this pipeline. Configures privileged mode for the self-mutation CodeBuild action. If you are about to turn this on in an already-deployed Pipeline, set the value to true first, commit and allow the pipeline to self-update, and only then use the Docker asset in the pipeline. dockerEnabledForSynth Optional Type: java.lang.Boolean Default: false Enable Docker for the 'synth' step. Set this to true if you are using file assets that require \"bundling\" anywhere in your application (meaning an asset compilation step will be run with the tools provided by a Docker image), both for the Pipeline stack as well as the application stacks. A common way to use bundling assets in your application is by using the @aws-cdk/aws-lambda-nodejs library. Configures privileged mode for the synth CodeBuild action. If you are about to turn this on in an already-deployed Pipeline, set the value to true first, commit and allow the pipeline to self-update, and only then use the bundled asset. enableKeyRotation Optional Type: java.lang.Boolean Default: false (key rotation is disabled) Enable KMS key rotation for the generated KMS keys. By default KMS key rotation is disabled, but will add additional costs when enabled. pipelineName Optional Type: java.lang.String Default: Automatically generated The name of the CodePipeline pipeline. publishAssetsInParallel Optional Type: java.lang.Boolean Default: true Publish assets in multiple CodeBuild projects. If set to false, use one Project per type to publish all assets. Publishing in parallel improves concurrency and may reduce publishing latency, but may also increase overall provisioning time of the CodeBuild projects. Experiment and see what value works best for you. reuseCrossRegionSupportStacks Optional Type: java.lang.Boolean Default: true (Use the same support stack for all pipelines in App) Reuse the same cross region support stack for all pipelines in the App. role Optional Type: software.amazon.awscdk.services.iam.IRole Default: A new role is created The IAM role to be assumed by this Pipeline. selfMutation Optional Type: java.lang.Boolean Default: true Whether the pipeline will update itself. This needs to be set to true to allow the pipeline to reconfigure itself when assets or stages are being added to it, and true is the recommended setting. You can temporarily set this to false while you are iterating on the pipeline itself and prefer to deploy changes using cdk deploy . selfMutationCodeBuildDefaults Optional Type: software.amazon.awscdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the self mutation CodeBuild projects. synthCodeBuildDefaults Optional Type: software.amazon.awscdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the synthesize CodeBuild projects. useChangeSets Optional Type: java.lang.Boolean Default: true Deploy every stack by creating a change set and executing it. When enabled, creates a \"Prepare\" and \"Execute\" action for each stack. Disable to deploy the stack in one pipeline action. primarySynthDirectory Required Type: java.lang.String Output directory for cdk synthesized artifacts i.e: packages/infra/cdk.out. repositoryName Required Type: java.lang.String Name of the CodeCommit repository to create. codeCommitRemovalPolicy Optional Type: software.amazon.awscdk.RemovalPolicy Possible values for a resource's Removal Policy The removal policy controls what happens to the resource if it stops being managed by CloudFormation. defaultBranchName Optional Type: java.lang.String Default: mainline Branch to trigger the pipeline execution. sonarCodeScannerConfig Optional Type: SonarCodeScannerConfig Default: undefined Configuration for enabling Sonarqube code scanning on a successful synth. synthShellStepPartialProps Optional Type: software.amazon.awscdk.pipelines.ShellStepProps PDKPipeline by default assumes a NX Monorepo structure for it's codebase and uses sane defaults for the install and run commands. To override these defaults and/or provide additional inputs, specify env settings, etc you can provide a partial ShellStepProps. Methods Name Description toString Returns a string representation of this construct. addStage Deploy a single Stage by itself. addWave Add a Wave to the pipeline, for deploying multiple Stages in parallel. buildPipeline Send the current pipeline definition to the engine, and construct the pipeline. suppressCDKViolations No description. toString public java . lang . String toString () Returns a string representation of this construct. addStage public StageDeployment addStage ( Stage stage ) public StageDeployment addStage ( Stage stage , AddStageOpts options ) Deploy a single Stage by itself. Add a Stage to the pipeline, to be deployed in sequence with other Stages added to the pipeline. All Stacks in the stage will be deployed in an order automatically determined by their relative dependencies. stage Required Type: software.amazon.awscdk.Stage options Optional Type: software.amazon.awscdk.pipelines.AddStageOpts addWave public Wave addWave ( java . lang . String id ) public Wave addWave ( java . lang . String id , WaveOptions options ) Add a Wave to the pipeline, for deploying multiple Stages in parallel. Use the return object of this method to deploy multiple stages in parallel. Example: declare const pipeline : pipelines.CodePipeline ; const wave = pipeline . addWave ( 'MyWave' ); wave . addStage ( new MyApplicationStage ( this , 'Stage1' )); wave . addStage ( new MyApplicationStage ( this , 'Stage2' )); id Required Type: java.lang.String options Optional Type: software.amazon.awscdk.pipelines.WaveOptions buildPipeline public void buildPipeline () Send the current pipeline definition to the engine, and construct the pipeline. It is not possible to modify the pipeline after calling this method. suppressCDKViolations public void suppressCDKViolations () Static Functions Name Description isConstruct Checks if x is a construct. isPipeline Return whether the given object extends PipelineBase . isConstruct import software.aws.awsprototypingsdk.pipeline.PDKPipeline ; PDKPipeline . isConstruct ( java . lang . Object x ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: java.lang.Object Any object. isPipeline import software.aws.awsprototypingsdk.pipeline.PDKPipeline ; PDKPipeline . isPipeline ( java . lang . Object x ) Return whether the given object extends PipelineBase . We do attribute detection since we can't reliably use 'instanceof'. x Required Type: java.lang.Object Properties Name Type Description node software.constructs.Node The tree node. cloudAssemblyFileSet software.amazon.awscdk.pipelines.FileSet The FileSet tha contains the cloud assembly. synth software.amazon.awscdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. waves java.util.List The waves in this pipeline. pipeline software.amazon.awscdk.services.codepipeline.Pipeline The CodePipeline pipeline that deploys the CDK app. selfMutationEnabled java.lang.Boolean Whether SelfMutation is enabled for this CDK Pipeline. selfMutationProject software.amazon.awscdk.services.codebuild.IProject The CodeBuild project that performs the SelfMutation. synthProject software.amazon.awscdk.services.codebuild.IProject The CodeBuild project that performs the Synth. codeRepository software.amazon.awscdk.services.codecommit.Repository No description. node Required public Node getNode (); Type: software.constructs.Node The tree node. cloudAssemblyFileSet Required public FileSet getCloudAssemblyFileSet (); Type: software.amazon.awscdk.pipelines.FileSet The FileSet tha contains the cloud assembly. This is the primary output of the synth step. synth Required public IFileSetProducer getSynth (); Type: software.amazon.awscdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. waves Required public java . util . List < Wave > getWaves (); Type: java.util.List The waves in this pipeline. pipeline Required public Pipeline getPipeline (); Type: software.amazon.awscdk.services.codepipeline.Pipeline The CodePipeline pipeline that deploys the CDK app. Only available after the pipeline has been built. selfMutationEnabled Required public java . lang . Boolean getSelfMutationEnabled (); Type: java.lang.Boolean Whether SelfMutation is enabled for this CDK Pipeline. selfMutationProject Required public IProject getSelfMutationProject (); Type: software.amazon.awscdk.services.codebuild.IProject The CodeBuild project that performs the SelfMutation. Will throw an error if this is accessed before buildPipeline() is called, or if selfMutation has been disabled. synthProject Required public IProject getSynthProject (); Type: software.amazon.awscdk.services.codebuild.IProject The CodeBuild project that performs the Synth. Only available after the pipeline has been built. codeRepository Required public Repository getCodeRepository (); Type: software.amazon.awscdk.services.codecommit.Repository SonarCodeScanner Initializers import software.aws.awsprototypingsdk.pipeline.SonarCodeScanner ; SonarCodeScanner . Builder . create ( Construct scope , java . lang . String id ) . sonarqubeAuthorizedGroup ( java . lang . String ) . sonarqubeDefaultProfileOrGateName ( java . lang . String ) . sonarqubeEndpoint ( java . lang . String ) . sonarqubeProjectName ( java . lang . String ) // .cdkOutDir(java.lang.String) // .cfnNagIgnorePath(java.lang.String) // .excludeGlobsForScan(java.util.List<java.lang.String>) // .includeGlobsForScan(java.util.List<java.lang.String>) // .preArchiveCommands(java.util.List<java.lang.String>) // .sonarqubeSpecificProfileOrGateName(java.lang.String) // .sonarqubeTags(java.util.List<java.lang.String>) . artifactBucketArn ( java . lang . String ) . synthBuildArn ( java . lang . String ) // .artifactBucketKeyArn(java.lang.String) . build (); Name Type Description scope software.constructs.Construct No description. id java.lang.String No description. sonarqubeAuthorizedGroup java.lang.String Group name in Sonarqube with access to administer this project. sonarqubeDefaultProfileOrGateName java.lang.String Default profile/gate name i.e: your org profile. sonarqubeEndpoint java.lang.String endpoint of the sonarqube instance i.e: https:// . sonarqubeProjectName java.lang.String Name of the project to create in Sonarqube. cdkOutDir java.lang.String directory containing the synthesized cdk resources. cfnNagIgnorePath java.lang.String path to a file containing the cfn nag suppression rules. excludeGlobsForScan java.util.List glob patterns to exclude from sonar scan. includeGlobsForScan java.util.List glob patterns to include from sonar scan. preArchiveCommands java.util.List Hook which allows custom commands to be executed before the process commences the archival process. sonarqubeSpecificProfileOrGateName java.lang.String Specific profile/gate name i.e: language specific. sonarqubeTags java.util.List Tags to associate with this project. artifactBucketArn java.lang.String S3 bucket ARN containing the built artifacts from the synth build. synthBuildArn java.lang.String ARN for the CodeBuild task responsible for executing the synth command. artifactBucketKeyArn java.lang.String Artifact bucket key ARN used to encrypt the artifacts. scope Required Type: software.constructs.Construct id Required Type: java.lang.String sonarqubeAuthorizedGroup Required Type: java.lang.String Group name in Sonarqube with access to administer this project. sonarqubeDefaultProfileOrGateName Required Type: java.lang.String Default profile/gate name i.e: your org profile. Note: These need to be set up in Sonarqube manually. sonarqubeEndpoint Required Type: java.lang.String endpoint of the sonarqube instance i.e: https:// . Note: Ensure a trailing '/' is not included. sonarqubeProjectName Required Type: java.lang.String Name of the project to create in Sonarqube. cdkOutDir Optional Type: java.lang.String directory containing the synthesized cdk resources. cfnNagIgnorePath Optional Type: java.lang.String path to a file containing the cfn nag suppression rules. excludeGlobsForScan Optional Type: java.util.List glob patterns to exclude from sonar scan. includeGlobsForScan Optional Type: java.util.List glob patterns to include from sonar scan. preArchiveCommands Optional Type: java.util.List Hook which allows custom commands to be executed before the process commences the archival process. sonarqubeSpecificProfileOrGateName Optional Type: java.lang.String Specific profile/gate name i.e: language specific. Note: These need to be set up in Sonarqube manually. sonarqubeTags Optional Type: java.util.List Tags to associate with this project. artifactBucketArn Required Type: java.lang.String S3 bucket ARN containing the built artifacts from the synth build. synthBuildArn Required Type: java.lang.String ARN for the CodeBuild task responsible for executing the synth command. artifactBucketKeyArn Optional Type: java.lang.String Artifact bucket key ARN used to encrypt the artifacts. Methods Name Description toString Returns a string representation of this construct. toString public java . lang . String toString () Returns a string representation of this construct. Static Functions Name Description isConstruct Checks if x is a construct. isConstruct import software.aws.awsprototypingsdk.pipeline.SonarCodeScanner ; SonarCodeScanner . isConstruct ( java . lang . Object x ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: java.lang.Object Any object. Properties Name Type Description node software.constructs.Node The tree node. node Required public Node getNode (); Type: software.constructs.Node The tree node. Structs PDKPipelineJavaProjectOptions Configuration options for the PDKPipelineJavaProject. Initializer import software.aws.awsprototypingsdk.pipeline.PDKPipelineJavaProjectOptions ; PDKPipelineJavaProjectOptions . builder () . name ( java . lang . String ) // .commitGenerated(java.lang.Boolean) // .gitOptions(GitOptions) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .renovatebot(java.lang.Boolean) // .renovatebotOptions(RenovatebotOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMerge(java.lang.Boolean) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenCredentials(GithubCredentials) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) . artifactId ( java . lang . String ) . groupId ( java . lang . String ) . version ( java . lang . String ) // .description(java.lang.String) // .packaging(java.lang.String) // .url(java.lang.String) // .compileOptions(MavenCompileOptions) // .deps(java.util.List<java.lang.String>) // .distdir(java.lang.String) // .junit(java.lang.Boolean) // .junitOptions(JunitOptions) // .packagingOptions(MavenPackagingOptions) // .projenrcJava(java.lang.Boolean) // .projenrcJavaOptions(ProjenrcOptions) // .testDeps(java.util.List<java.lang.String>) // .sample(java.lang.Boolean) // .sampleJavaPackage(java.lang.String) // .buildCommand(java.lang.String) // .cdkout(java.lang.String) // .context(java.util.Map<java.lang.String, java.lang.Object>) // .featureFlags(java.lang.Boolean) // .requireApproval(ApprovalLevel) // .watchExcludes(java.util.List<java.lang.String>) // .watchIncludes(java.util.List<java.lang.String>) . cdkVersion ( java . lang . String ) // .cdkAssert(java.lang.Boolean) // .cdkAssertions(java.lang.Boolean) // .cdkDependencies(java.util.List<java.lang.String>) // .cdkDependenciesAsDeps(java.lang.Boolean) // .cdkTestDependencies(java.util.List<java.lang.String>) // .cdkVersionPinning(java.lang.Boolean) // .constructsVersion(java.lang.String) . mainClass ( java . lang . String ) . build (); Properties Name Type Description name java.lang.String This is the name of your project. commitGenerated java.lang.Boolean Whether to commit the managed files by default. gitOptions io.github.cdklabs.projen.GitOptions Configuration options for git. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. renovatebot java.lang.Boolean Use renovatebot to handle dependency upgrades. renovatebotOptions io.github.cdklabs.projen.RenovatebotOptions Options for renovatebot. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge java.lang.Boolean Enable automatic merging on GitHub. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenCredentials io.github.cdklabs.projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. artifactId java.lang.String The artifactId is generally the name that the project is known by. groupId java.lang.String This is generally unique amongst an organization or a project. version java.lang.String This is the last piece of the naming puzzle. description java.lang.String Description of a project is always good. packaging java.lang.String Project packaging format. url java.lang.String The URL, like the name, is not required. compileOptions io.github.cdklabs.projen.java.MavenCompileOptions Compile options. deps java.util.List List of runtime dependencies for this project. distdir java.lang.String Final artifact output directory. junit java.lang.Boolean Include junit tests. junitOptions io.github.cdklabs.projen.java.JunitOptions junit options. packagingOptions io.github.cdklabs.projen.java.MavenPackagingOptions Packaging options. projenrcJava java.lang.Boolean Use projenrc in java. projenrcJavaOptions io.github.cdklabs.projen.java.ProjenrcOptions Options related to projenrc in java. testDeps java.util.List List of test dependencies for this project. sample java.lang.Boolean Include sample code and test if the relevant directories don't exist. sampleJavaPackage java.lang.String The java package to use for the code sample. buildCommand java.lang.String A command to execute before synthesis. cdkout java.lang.String cdk.out directory. context java.util.Map Additional context to include in cdk.json . featureFlags java.lang.Boolean Include all feature flags in cdk.json. requireApproval io.github.cdklabs.projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes java.util.List Glob patterns to exclude from cdk watch . watchIncludes java.util.List Glob patterns to include in cdk watch . cdkVersion java.lang.String Minimum version of the AWS CDK to depend on. cdkAssert java.lang.Boolean Warning: NodeJS only. cdkAssertions java.lang.Boolean Install the assertions library? cdkDependencies java.util.List Which AWS CDKv1 modules this project requires. cdkDependenciesAsDeps java.lang.Boolean If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdkTestDependencies java.util.List AWS CDK modules required for testing. cdkVersionPinning java.lang.Boolean Use pinned version instead of caret version for CDK. constructsVersion java.lang.String Minimum version of the constructs library to depend on. mainClass java.lang.String The name of the Java class with the static main() method. name Required public java . lang . String getName (); Type: java.lang.String Default: $BASEDIR This is the name of your project. commitGenerated Optional public java . lang . Boolean getCommitGenerated (); Type: java.lang.Boolean Default: true Whether to commit the managed files by default. gitOptions Optional public GitOptions getGitOptions (); Type: io.github.cdklabs.projen.GitOptions Configuration options for git. logging Optional public LoggerOptions getLogging (); Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public java . lang . String getOutdir (); Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public java . lang . String getProjenCommand (); Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public java . lang . Boolean getProjenrcJson (); Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public ProjenrcOptions getProjenrcJsonOptions (); Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional public java . lang . Boolean getRenovatebot (); Type: java.lang.Boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional public RenovatebotOptions getRenovatebotOptions (); Type: io.github.cdklabs.projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional public AutoApproveOptions getAutoApproveOptions (); Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional public java . lang . Boolean getAutoMerge (); Type: java.lang.Boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional public AutoMergeOptions getAutoMergeOptions (); Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional public java . lang . Boolean getClobber (); Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public java . lang . Boolean getDevContainer (); Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public java . lang . Boolean getGithub (); Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public GitHubOptions getGithubOptions (); Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public java . lang . Boolean getGitpod (); Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public java . lang . Boolean getMergify (); Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public MergifyOptions getMergifyOptions (); Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional public GithubCredentials getProjenCredentials (); Type: io.github.cdklabs.projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials public java . lang . String getProjenTokenSecret (); Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public SampleReadmeProps getReadme (); Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional public java . lang . Boolean getStale (); Type: java.lang.Boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public StaleOptions getStaleOptions (); Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public java . lang . Boolean getVscode (); Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. artifactId Required public java . lang . String getArtifactId (); Type: java.lang.String Default: \"my-app\" The artifactId is generally the name that the project is known by. Although the groupId is important, people within the group will rarely mention the groupId in discussion (they are often all be the same ID, such as the MojoHaus project groupId: org.codehaus.mojo). It, along with the groupId, creates a key that separates this project from every other project in the world (at least, it should :) ). Along with the groupId, the artifactId fully defines the artifact's living quarters within the repository. In the case of the above project, my-project lives in $M2_REPO/org/codehaus/mojo/my-project. groupId Required public java . lang . String getGroupId (); Type: java.lang.String Default: \"org.acme\" This is generally unique amongst an organization or a project. For example, all core Maven artifacts do (well, should) live under the groupId org.apache.maven. Group ID's do not necessarily use the dot notation, for example, the junit project. Note that the dot-notated groupId does not have to correspond to the package structure that the project contains. It is, however, a good practice to follow. When stored within a repository, the group acts much like the Java packaging structure does in an operating system. The dots are replaced by OS specific directory separators (such as '/' in Unix) which becomes a relative directory structure from the base repository. In the example given, the org.codehaus.mojo group lives within the directory $M2_REPO/org/codehaus/mojo. version Required public java . lang . String getVersion (); Type: java.lang.String Default: \"0.1.0\" This is the last piece of the naming puzzle. groupId:artifactId denotes a single project but they cannot delineate which incarnation of that project we are talking about. Do we want the junit:junit of 2018 (version 4.12), or of 2007 (version 3.8.2)? In short: code changes, those changes should be versioned, and this element keeps those versions in line. It is also used within an artifact's repository to separate versions from each other. my-project version 1.0 files live in the directory structure $M2_REPO/org/codehaus/mojo/my-project/1.0. description Optional public java . lang . String getDescription (); Type: java.lang.String Default: undefined Description of a project is always good. Although this should not replace formal documentation, a quick comment to any readers of the POM is always helpful. packaging Optional public java . lang . String getPackaging (); Type: java.lang.String Default: \"jar\" Project packaging format. url Optional public java . lang . String getUrl (); Type: java.lang.String Default: undefined The URL, like the name, is not required. This is a nice gesture for projects users, however, so that they know where the project lives. compileOptions Optional public MavenCompileOptions getCompileOptions (); Type: io.github.cdklabs.projen.java.MavenCompileOptions Default: defaults Compile options. deps Optional public java . util . List < java . lang . String > getDeps (); Type: java.util.List Default: [] List of runtime dependencies for this project. Dependencies use the format: <groupId>/<artifactId>@<semver> Additional dependencies can be added via project.addDependency() . distdir Optional public java . lang . String getDistdir (); Type: java.lang.String Default: \"dist/java\" Final artifact output directory. junit Optional public java . lang . Boolean getJunit (); Type: java.lang.Boolean Default: true Include junit tests. junitOptions Optional public JunitOptions getJunitOptions (); Type: io.github.cdklabs.projen.java.JunitOptions Default: defaults junit options. packagingOptions Optional public MavenPackagingOptions getPackagingOptions (); Type: io.github.cdklabs.projen.java.MavenPackagingOptions Default: defaults Packaging options. projenrcJava Optional public java . lang . Boolean getProjenrcJava (); Type: java.lang.Boolean Default: true Use projenrc in java. This will install projen as a java dependency and will add a synth task which will compile & execute main() from src/main/java/projenrc.java . projenrcJavaOptions Optional public ProjenrcOptions getProjenrcJavaOptions (); Type: io.github.cdklabs.projen.java.ProjenrcOptions Default: default options Options related to projenrc in java. testDeps Optional public java . util . List < java . lang . String > getTestDeps (); Type: java.util.List Default: [] List of test dependencies for this project. Dependencies use the format: <groupId>/<artifactId>@<semver> Additional dependencies can be added via project.addTestDependency() . sample Optional public java . lang . Boolean getSample (); Type: java.lang.Boolean Default: true Include sample code and test if the relevant directories don't exist. sampleJavaPackage Optional public java . lang . String getSampleJavaPackage (); Type: java.lang.String Default: \"org.acme\" The java package to use for the code sample. buildCommand Optional public java . lang . String getBuildCommand (); Type: java.lang.String Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment. cdkout Optional public java . lang . String getCdkout (); Type: java.lang.String Default: \"cdk.out\" cdk.out directory. context Optional public java . util . Map < java . lang . String , java . lang . Object > getContext (); Type: java.util.Map Default: no additional context Additional context to include in cdk.json . featureFlags Optional public java . lang . Boolean getFeatureFlags (); Type: java.lang.Boolean Default: true Include all feature flags in cdk.json. requireApproval Optional public ApprovalLevel getRequireApproval (); Type: io.github.cdklabs.projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes Optional public java . util . List < java . lang . String > getWatchExcludes (); Type: java.util.List Default: [] Glob patterns to exclude from cdk watch . watchIncludes Optional public java . util . List < java . lang . String > getWatchIncludes (); Type: java.util.List Default: [] Glob patterns to include in cdk watch . cdkVersion Required public java . lang . String getCdkVersion (); Type: java.lang.String Default: \"2.1.0\" Minimum version of the AWS CDK to depend on. ~~ cdkAssert ~~ Optional Deprecated: The public java . lang . Boolean getCdkAssert (); Type: java.lang.Boolean Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library? cdkAssertions Optional public java . lang . Boolean getCdkAssertions (); Type: java.lang.Boolean Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib' ~~ cdkDependencies ~~ Optional Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) public java . util . List < java . lang . String > getCdkDependencies (); Type: java.util.List Which AWS CDKv1 modules this project requires. ~~ cdkDependenciesAsDeps ~~ Optional Deprecated: Not supported in CDK v2. public java . lang . Boolean getCdkDependenciesAsDeps (); Type: java.lang.Boolean Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects ~~ cdkTestDependencies ~~ Optional Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead public java . util . List < java . lang . String > getCdkTestDependencies (); Type: java.util.List AWS CDK modules required for testing. cdkVersionPinning Optional public java . lang . Boolean getCdkVersionPinning (); Type: java.lang.Boolean Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes. constructsVersion Optional public java . lang . String getConstructsVersion (); Type: java.lang.String Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on. mainClass Required public java . lang . String getMainClass (); Type: java.lang.String Default: \"org.acme.MyApp\" The name of the Java class with the static main() method. This method should call app.synth() on the CDK app. PDKPipelineProps Properties to configure the PDKPipeline. Note: Due to limitations with JSII and generic support it should be noted that the synth, synthShellStepPartialProps.input and synthShellStepPartialProps.primaryOutputDirectory properties will be ignored if passed in to this construct. synthShellStepPartialProps.commands is marked as a required field, however if you pass in [] the default commands of this construct will be retained. Initializer import software.aws.awsprototypingsdk.pipeline.PDKPipelineProps ; PDKPipelineProps . builder () . synth ( IFileSetProducer ) // .assetPublishingCodeBuildDefaults(CodeBuildOptions) // .cliVersion(java.lang.String) // .codeBuildDefaults(CodeBuildOptions) // .codePipeline(Pipeline) // .crossAccountKeys(java.lang.Boolean) // .dockerCredentials(java.util.List<DockerCredential>) // .dockerEnabledForSelfMutation(java.lang.Boolean) // .dockerEnabledForSynth(java.lang.Boolean) // .enableKeyRotation(java.lang.Boolean) // .pipelineName(java.lang.String) // .publishAssetsInParallel(java.lang.Boolean) // .reuseCrossRegionSupportStacks(java.lang.Boolean) // .role(IRole) // .selfMutation(java.lang.Boolean) // .selfMutationCodeBuildDefaults(CodeBuildOptions) // .synthCodeBuildDefaults(CodeBuildOptions) // .useChangeSets(java.lang.Boolean) . primarySynthDirectory ( java . lang . String ) . repositoryName ( java . lang . String ) // .codeCommitRemovalPolicy(RemovalPolicy) // .defaultBranchName(java.lang.String) // .sonarCodeScannerConfig(SonarCodeScannerConfig) // .synthShellStepPartialProps(ShellStepProps) . build (); Properties Name Type Description synth software.amazon.awscdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. assetPublishingCodeBuildDefaults software.amazon.awscdk.pipelines.CodeBuildOptions Additional customizations to apply to the asset publishing CodeBuild projects. cliVersion java.lang.String CDK CLI version to use in self-mutation and asset publishing steps. codeBuildDefaults software.amazon.awscdk.pipelines.CodeBuildOptions Customize the CodeBuild projects created for this pipeline. codePipeline software.amazon.awscdk.services.codepipeline.Pipeline An existing Pipeline to be reused and built upon. crossAccountKeys java.lang.Boolean Create KMS keys for the artifact buckets, allowing cross-account deployments. dockerCredentials java.util.List A list of credentials used to authenticate to Docker registries. dockerEnabledForSelfMutation java.lang.Boolean Enable Docker for the self-mutate step. dockerEnabledForSynth java.lang.Boolean Enable Docker for the 'synth' step. enableKeyRotation java.lang.Boolean Enable KMS key rotation for the generated KMS keys. pipelineName java.lang.String The name of the CodePipeline pipeline. publishAssetsInParallel java.lang.Boolean Publish assets in multiple CodeBuild projects. reuseCrossRegionSupportStacks java.lang.Boolean Reuse the same cross region support stack for all pipelines in the App. role software.amazon.awscdk.services.iam.IRole The IAM role to be assumed by this Pipeline. selfMutation java.lang.Boolean Whether the pipeline will update itself. selfMutationCodeBuildDefaults software.amazon.awscdk.pipelines.CodeBuildOptions Additional customizations to apply to the self mutation CodeBuild projects. synthCodeBuildDefaults software.amazon.awscdk.pipelines.CodeBuildOptions Additional customizations to apply to the synthesize CodeBuild projects. useChangeSets java.lang.Boolean Deploy every stack by creating a change set and executing it. primarySynthDirectory java.lang.String Output directory for cdk synthesized artifacts i.e: packages/infra/cdk.out. repositoryName java.lang.String Name of the CodeCommit repository to create. codeCommitRemovalPolicy software.amazon.awscdk.RemovalPolicy Possible values for a resource's Removal Policy The removal policy controls what happens to the resource if it stops being managed by CloudFormation. defaultBranchName java.lang.String Branch to trigger the pipeline execution. sonarCodeScannerConfig SonarCodeScannerConfig Configuration for enabling Sonarqube code scanning on a successful synth. synthShellStepPartialProps software.amazon.awscdk.pipelines.ShellStepProps PDKPipeline by default assumes a NX Monorepo structure for it's codebase and uses sane defaults for the install and run commands. synth Required public IFileSetProducer getSynth (); Type: software.amazon.awscdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. The primary output of this step needs to be the cdk.out directory generated by the cdk synth command. If you use a ShellStep here and you don't configure an output directory, the output directory will automatically be assumed to be cdk.out . assetPublishingCodeBuildDefaults Optional public CodeBuildOptions getAssetPublishingCodeBuildDefaults (); Type: software.amazon.awscdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the asset publishing CodeBuild projects. cliVersion Optional public java . lang . String getCliVersion (); Type: java.lang.String Default: Latest version CDK CLI version to use in self-mutation and asset publishing steps. If you want to lock the CDK CLI version used in the pipeline, by steps that are automatically generated for you, specify the version here. We recommend you do not specify this value, as not specifying it always uses the latest CLI version which is backwards compatible with old versions. If you do specify it, be aware that this version should always be equal to or higher than the version of the CDK framework used by the CDK app, when the CDK commands are run during your pipeline execution. When you change this version, the next time the SelfMutate step runs it will still be using the CLI of the the previous version that was in this property: it will only start using the new version after SelfMutate completes successfully. That means that if you want to update both framework and CLI version, you should update the CLI version first, commit, push and deploy, and only then update the framework version. codeBuildDefaults Optional public CodeBuildOptions getCodeBuildDefaults (); Type: software.amazon.awscdk.pipelines.CodeBuildOptions Default: All projects run non-privileged build, SMALL instance, LinuxBuildImage.STANDARD_6_0 Customize the CodeBuild projects created for this pipeline. codePipeline Optional public Pipeline getCodePipeline (); Type: software.amazon.awscdk.services.codepipeline.Pipeline Default: a new underlying pipeline is created. An existing Pipeline to be reused and built upon. [disable-awslint:ref-via-interface] crossAccountKeys Optional public java . lang . Boolean getCrossAccountKeys (); Type: java.lang.Boolean Default: false Create KMS keys for the artifact buckets, allowing cross-account deployments. The artifact buckets have to be encrypted to support deploying CDK apps to another account, so if you want to do that or want to have your artifact buckets encrypted, be sure to set this value to true . Be aware there is a cost associated with maintaining the KMS keys. dockerCredentials Optional public java . util . List < DockerCredential > getDockerCredentials (); Type: java.util.List Default: [] A list of credentials used to authenticate to Docker registries. Specify any credentials necessary within the pipeline to build, synth, update, or publish assets. dockerEnabledForSelfMutation Optional public java . lang . Boolean getDockerEnabledForSelfMutation (); Type: java.lang.Boolean Default: false Enable Docker for the self-mutate step. Set this to true if the pipeline itself uses Docker container assets (for example, if you use LinuxBuildImage.fromAsset() as the build image of a CodeBuild step in the pipeline). You do not need to set it if you build Docker image assets in the application Stages and Stacks that are deployed by this pipeline. Configures privileged mode for the self-mutation CodeBuild action. If you are about to turn this on in an already-deployed Pipeline, set the value to true first, commit and allow the pipeline to self-update, and only then use the Docker asset in the pipeline. dockerEnabledForSynth Optional public java . lang . Boolean getDockerEnabledForSynth (); Type: java.lang.Boolean Default: false Enable Docker for the 'synth' step. Set this to true if you are using file assets that require \"bundling\" anywhere in your application (meaning an asset compilation step will be run with the tools provided by a Docker image), both for the Pipeline stack as well as the application stacks. A common way to use bundling assets in your application is by using the @aws-cdk/aws-lambda-nodejs library. Configures privileged mode for the synth CodeBuild action. If you are about to turn this on in an already-deployed Pipeline, set the value to true first, commit and allow the pipeline to self-update, and only then use the bundled asset. enableKeyRotation Optional public java . lang . Boolean getEnableKeyRotation (); Type: java.lang.Boolean Default: false (key rotation is disabled) Enable KMS key rotation for the generated KMS keys. By default KMS key rotation is disabled, but will add additional costs when enabled. pipelineName Optional public java . lang . String getPipelineName (); Type: java.lang.String Default: Automatically generated The name of the CodePipeline pipeline. publishAssetsInParallel Optional public java . lang . Boolean getPublishAssetsInParallel (); Type: java.lang.Boolean Default: true Publish assets in multiple CodeBuild projects. If set to false, use one Project per type to publish all assets. Publishing in parallel improves concurrency and may reduce publishing latency, but may also increase overall provisioning time of the CodeBuild projects. Experiment and see what value works best for you. reuseCrossRegionSupportStacks Optional public java . lang . Boolean getReuseCrossRegionSupportStacks (); Type: java.lang.Boolean Default: true (Use the same support stack for all pipelines in App) Reuse the same cross region support stack for all pipelines in the App. role Optional public IRole getRole (); Type: software.amazon.awscdk.services.iam.IRole Default: A new role is created The IAM role to be assumed by this Pipeline. selfMutation Optional public java . lang . Boolean getSelfMutation (); Type: java.lang.Boolean Default: true Whether the pipeline will update itself. This needs to be set to true to allow the pipeline to reconfigure itself when assets or stages are being added to it, and true is the recommended setting. You can temporarily set this to false while you are iterating on the pipeline itself and prefer to deploy changes using cdk deploy . selfMutationCodeBuildDefaults Optional public CodeBuildOptions getSelfMutationCodeBuildDefaults (); Type: software.amazon.awscdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the self mutation CodeBuild projects. synthCodeBuildDefaults Optional public CodeBuildOptions getSynthCodeBuildDefaults (); Type: software.amazon.awscdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the synthesize CodeBuild projects. useChangeSets Optional public java . lang . Boolean getUseChangeSets (); Type: java.lang.Boolean Default: true Deploy every stack by creating a change set and executing it. When enabled, creates a \"Prepare\" and \"Execute\" action for each stack. Disable to deploy the stack in one pipeline action. primarySynthDirectory Required public java . lang . String getPrimarySynthDirectory (); Type: java.lang.String Output directory for cdk synthesized artifacts i.e: packages/infra/cdk.out. repositoryName Required public java . lang . String getRepositoryName (); Type: java.lang.String Name of the CodeCommit repository to create. codeCommitRemovalPolicy Optional public RemovalPolicy getCodeCommitRemovalPolicy (); Type: software.amazon.awscdk.RemovalPolicy Possible values for a resource's Removal Policy The removal policy controls what happens to the resource if it stops being managed by CloudFormation. defaultBranchName Optional public java . lang . String getDefaultBranchName (); Type: java.lang.String Default: mainline Branch to trigger the pipeline execution. sonarCodeScannerConfig Optional public SonarCodeScannerConfig getSonarCodeScannerConfig (); Type: SonarCodeScannerConfig Default: undefined Configuration for enabling Sonarqube code scanning on a successful synth. synthShellStepPartialProps Optional public ShellStepProps getSynthShellStepPartialProps (); Type: software.amazon.awscdk.pipelines.ShellStepProps PDKPipeline by default assumes a NX Monorepo structure for it's codebase and uses sane defaults for the install and run commands. To override these defaults and/or provide additional inputs, specify env settings, etc you can provide a partial ShellStepProps. PDKPipelinePyProjectOptions Configuration options for the PDKPipelinePyProject. Initializer import software.aws.awsprototypingsdk.pipeline.PDKPipelinePyProjectOptions ; PDKPipelinePyProjectOptions . builder () . name ( java . lang . String ) // .commitGenerated(java.lang.Boolean) // .gitOptions(GitOptions) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .renovatebot(java.lang.Boolean) // .renovatebotOptions(RenovatebotOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMerge(java.lang.Boolean) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenCredentials(GithubCredentials) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) . authorEmail ( java . lang . String ) . authorName ( java . lang . String ) . version ( java . lang . String ) // .classifiers(java.util.List<java.lang.String>) // .description(java.lang.String) // .homepage(java.lang.String) // .license(java.lang.String) // .packageName(java.lang.String) // .poetryOptions(PoetryPyprojectOptionsWithoutDeps) // .setupConfig(java.util.Map<java.lang.String, java.lang.Object>) . moduleName ( java . lang . String ) // .deps(java.util.List<java.lang.String>) // .devDeps(java.util.List<java.lang.String>) // .pip(java.lang.Boolean) // .poetry(java.lang.Boolean) // .projenrcJs(java.lang.Boolean) // .projenrcJsOptions(ProjenrcOptions) // .projenrcPython(java.lang.Boolean) // .projenrcPythonOptions(ProjenrcOptions) // .pytest(java.lang.Boolean) // .pytestOptions(PytestOptions) // .sample(java.lang.Boolean) // .setuptools(java.lang.Boolean) // .venv(java.lang.Boolean) // .venvOptions(VenvOptions) // .buildCommand(java.lang.String) // .cdkout(java.lang.String) // .context(java.util.Map<java.lang.String, java.lang.Object>) // .featureFlags(java.lang.Boolean) // .requireApproval(ApprovalLevel) // .watchExcludes(java.util.List<java.lang.String>) // .watchIncludes(java.util.List<java.lang.String>) . cdkVersion ( java . lang . String ) // .cdkAssert(java.lang.Boolean) // .cdkAssertions(java.lang.Boolean) // .cdkDependencies(java.util.List<java.lang.String>) // .cdkDependenciesAsDeps(java.lang.Boolean) // .cdkTestDependencies(java.util.List<java.lang.String>) // .cdkVersionPinning(java.lang.Boolean) // .constructsVersion(java.lang.String) // .appEntrypoint(java.lang.String) // .testdir(java.lang.String) . build (); Properties Name Type Description name java.lang.String This is the name of your project. commitGenerated java.lang.Boolean Whether to commit the managed files by default. gitOptions io.github.cdklabs.projen.GitOptions Configuration options for git. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. renovatebot java.lang.Boolean Use renovatebot to handle dependency upgrades. renovatebotOptions io.github.cdklabs.projen.RenovatebotOptions Options for renovatebot. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge java.lang.Boolean Enable automatic merging on GitHub. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenCredentials io.github.cdklabs.projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. authorEmail java.lang.String Author's e-mail. authorName java.lang.String Author's name. version java.lang.String Version of the package. classifiers java.util.List A list of PyPI trove classifiers that describe the project. description java.lang.String A short description of the package. homepage java.lang.String A URL to the website of the project. license java.lang.String License of this package as an SPDX identifier. packageName java.lang.String Package name. poetryOptions io.github.cdklabs.projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setupConfig java.util.Map Additional fields to pass in the setup() function if using setuptools. moduleName java.lang.String Name of the python package as used in imports and filenames. deps java.util.List List of runtime dependencies for this project. devDeps java.util.List List of dev dependencies for this project. pip java.lang.Boolean Use pip with a requirements.txt file to track project dependencies. poetry java.lang.Boolean Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrcJs java.lang.Boolean Use projenrc in javascript. projenrcJsOptions io.github.cdklabs.projen.javascript.ProjenrcOptions Options related to projenrc in JavaScript. projenrcPython java.lang.Boolean Use projenrc in Python. projenrcPythonOptions io.github.cdklabs.projen.python.ProjenrcOptions Options related to projenrc in python. pytest java.lang.Boolean Include pytest tests. pytestOptions io.github.cdklabs.projen.python.PytestOptions pytest options. sample java.lang.Boolean Include sample code and test if the relevant directories don't exist. setuptools java.lang.Boolean Use setuptools with a setup.py script for packaging and publishing. venv java.lang.Boolean Use venv to manage a virtual environment for installing dependencies inside. venvOptions io.github.cdklabs.projen.python.VenvOptions Venv options. buildCommand java.lang.String A command to execute before synthesis. cdkout java.lang.String cdk.out directory. context java.util.Map Additional context to include in cdk.json . featureFlags java.lang.Boolean Include all feature flags in cdk.json. requireApproval io.github.cdklabs.projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes java.util.List Glob patterns to exclude from cdk watch . watchIncludes java.util.List Glob patterns to include in cdk watch . cdkVersion java.lang.String Minimum version of the AWS CDK to depend on. cdkAssert java.lang.Boolean Warning: NodeJS only. cdkAssertions java.lang.Boolean Install the assertions library? cdkDependencies java.util.List Which AWS CDKv1 modules this project requires. cdkDependenciesAsDeps java.lang.Boolean If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdkTestDependencies java.util.List AWS CDK modules required for testing. cdkVersionPinning java.lang.Boolean Use pinned version instead of caret version for CDK. constructsVersion java.lang.String Minimum version of the constructs library to depend on. appEntrypoint java.lang.String The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). testdir java.lang.String Python sources directory. name Required public java . lang . String getName (); Type: java.lang.String Default: $BASEDIR This is the name of your project. commitGenerated Optional public java . lang . Boolean getCommitGenerated (); Type: java.lang.Boolean Default: true Whether to commit the managed files by default. gitOptions Optional public GitOptions getGitOptions (); Type: io.github.cdklabs.projen.GitOptions Configuration options for git. logging Optional public LoggerOptions getLogging (); Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public java . lang . String getOutdir (); Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public java . lang . String getProjenCommand (); Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public java . lang . Boolean getProjenrcJson (); Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public ProjenrcOptions getProjenrcJsonOptions (); Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional public java . lang . Boolean getRenovatebot (); Type: java.lang.Boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional public RenovatebotOptions getRenovatebotOptions (); Type: io.github.cdklabs.projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional public AutoApproveOptions getAutoApproveOptions (); Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional public java . lang . Boolean getAutoMerge (); Type: java.lang.Boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional public AutoMergeOptions getAutoMergeOptions (); Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional public java . lang . Boolean getClobber (); Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public java . lang . Boolean getDevContainer (); Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public java . lang . Boolean getGithub (); Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public GitHubOptions getGithubOptions (); Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public java . lang . Boolean getGitpod (); Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public java . lang . Boolean getMergify (); Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public MergifyOptions getMergifyOptions (); Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional public GithubCredentials getProjenCredentials (); Type: io.github.cdklabs.projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials public java . lang . String getProjenTokenSecret (); Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public SampleReadmeProps getReadme (); Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional public java . lang . Boolean getStale (); Type: java.lang.Boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public StaleOptions getStaleOptions (); Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public java . lang . Boolean getVscode (); Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. authorEmail Required public java . lang . String getAuthorEmail (); Type: java.lang.String Default: $GIT_USER_EMAIL Author's e-mail. authorName Required public java . lang . String getAuthorName (); Type: java.lang.String Default: $GIT_USER_NAME Author's name. version Required public java . lang . String getVersion (); Type: java.lang.String Default: \"0.1.0\" Version of the package. classifiers Optional public java . util . List < java . lang . String > getClassifiers (); Type: java.util.List A list of PyPI trove classifiers that describe the project. https://pypi.org/classifiers/ description Optional public java . lang . String getDescription (); Type: java.lang.String A short description of the package. homepage Optional public java . lang . String getHomepage (); Type: java.lang.String A URL to the website of the project. license Optional public java . lang . String getLicense (); Type: java.lang.String License of this package as an SPDX identifier. packageName Optional public java . lang . String getPackageName (); Type: java.lang.String Package name. poetryOptions Optional public PoetryPyprojectOptionsWithoutDeps getPoetryOptions (); Type: io.github.cdklabs.projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setupConfig Optional public java . util . Map < java . lang . String , java . lang . Object > getSetupConfig (); Type: java.util.Map Additional fields to pass in the setup() function if using setuptools. moduleName Required public java . lang . String getModuleName (); Type: java.lang.String Default: $PYTHON_MODULE_NAME Name of the python package as used in imports and filenames. Must only consist of alphanumeric characters and underscores. deps Optional public java . util . List < java . lang . String > getDeps (); Type: java.util.List Default: [] List of runtime dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDependency() . devDeps Optional public java . util . List < java . lang . String > getDevDeps (); Type: java.util.List Default: [] List of dev dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDevDependency() . pip Optional public java . lang . Boolean getPip (); Type: java.lang.Boolean Default: true, unless poetry is true, then false Use pip with a requirements.txt file to track project dependencies. poetry Optional public java . lang . Boolean getPoetry (); Type: java.lang.Boolean Default: false Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. This feature is incompatible with pip, setuptools, or venv. If you set this option to true , then pip, setuptools, and venv must be set to false . projenrcJs Optional public java . lang . Boolean getProjenrcJs (); Type: java.lang.Boolean Default: false Use projenrc in javascript. This will install projen as a JavaScript dependency and add a synth task which will run .projenrc.js . projenrcJsOptions Optional public ProjenrcOptions getProjenrcJsOptions (); Type: io.github.cdklabs.projen.javascript.ProjenrcOptions Default: default options Options related to projenrc in JavaScript. projenrcPython Optional public java . lang . Boolean getProjenrcPython (); Type: java.lang.Boolean Default: true Use projenrc in Python. This will install projen as a Python dependency and add a synth task which will run .projenrc.py . projenrcPythonOptions Optional public ProjenrcOptions getProjenrcPythonOptions (); Type: io.github.cdklabs.projen.python.ProjenrcOptions Default: default options Options related to projenrc in python. pytest Optional public java . lang . Boolean getPytest (); Type: java.lang.Boolean Default: true Include pytest tests. pytestOptions Optional public PytestOptions getPytestOptions (); Type: io.github.cdklabs.projen.python.PytestOptions Default: defaults pytest options. sample Optional public java . lang . Boolean getSample (); Type: java.lang.Boolean Default: true Include sample code and test if the relevant directories don't exist. setuptools Optional public java . lang . Boolean getSetuptools (); Type: java.lang.Boolean Default: true, unless poetry is true, then false Use setuptools with a setup.py script for packaging and publishing. venv Optional public java . lang . Boolean getVenv (); Type: java.lang.Boolean Default: true, unless poetry is true, then false Use venv to manage a virtual environment for installing dependencies inside. venvOptions Optional public VenvOptions getVenvOptions (); Type: io.github.cdklabs.projen.python.VenvOptions Default: defaults Venv options. buildCommand Optional public java . lang . String getBuildCommand (); Type: java.lang.String Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment. cdkout Optional public java . lang . String getCdkout (); Type: java.lang.String Default: \"cdk.out\" cdk.out directory. context Optional public java . util . Map < java . lang . String , java . lang . Object > getContext (); Type: java.util.Map Default: no additional context Additional context to include in cdk.json . featureFlags Optional public java . lang . Boolean getFeatureFlags (); Type: java.lang.Boolean Default: true Include all feature flags in cdk.json. requireApproval Optional public ApprovalLevel getRequireApproval (); Type: io.github.cdklabs.projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes Optional public java . util . List < java . lang . String > getWatchExcludes (); Type: java.util.List Default: [] Glob patterns to exclude from cdk watch . watchIncludes Optional public java . util . List < java . lang . String > getWatchIncludes (); Type: java.util.List Default: [] Glob patterns to include in cdk watch . cdkVersion Required public java . lang . String getCdkVersion (); Type: java.lang.String Default: \"2.1.0\" Minimum version of the AWS CDK to depend on. ~~ cdkAssert ~~ Optional Deprecated: The public java . lang . Boolean getCdkAssert (); Type: java.lang.Boolean Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library? cdkAssertions Optional public java . lang . Boolean getCdkAssertions (); Type: java.lang.Boolean Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib' ~~ cdkDependencies ~~ Optional Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) public java . util . List < java . lang . String > getCdkDependencies (); Type: java.util.List Which AWS CDKv1 modules this project requires. ~~ cdkDependenciesAsDeps ~~ Optional Deprecated: Not supported in CDK v2. public java . lang . Boolean getCdkDependenciesAsDeps (); Type: java.lang.Boolean Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects ~~ cdkTestDependencies ~~ Optional Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead public java . util . List < java . lang . String > getCdkTestDependencies (); Type: java.util.List AWS CDK modules required for testing. cdkVersionPinning Optional public java . lang . Boolean getCdkVersionPinning (); Type: java.lang.Boolean Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes. constructsVersion Optional public java . lang . String getConstructsVersion (); Type: java.lang.String Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on. appEntrypoint Optional public java . lang . String getAppEntrypoint (); Type: java.lang.String Default: \"app.py\" The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). testdir Optional public java . lang . String getTestdir (); Type: java.lang.String Default: \"tests\" Python sources directory. PDKPipelineTsProjectOptions Configuration options for the PDKPipelineTsProject. Initializer import software.aws.awsprototypingsdk.pipeline.PDKPipelineTsProjectOptions ; PDKPipelineTsProjectOptions . builder () . name ( java . lang . String ) // .commitGenerated(java.lang.Boolean) // .gitOptions(GitOptions) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .renovatebot(java.lang.Boolean) // .renovatebotOptions(RenovatebotOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMerge(java.lang.Boolean) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenCredentials(GithubCredentials) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) // .allowLibraryDependencies(java.lang.Boolean) // .authorEmail(java.lang.String) // .authorName(java.lang.String) // .authorOrganization(java.lang.Boolean) // .authorUrl(java.lang.String) // .autoDetectBin(java.lang.Boolean) // .bin(java.util.Map<java.lang.String, java.lang.String>) // .bugsEmail(java.lang.String) // .bugsUrl(java.lang.String) // .bundledDeps(java.util.List<java.lang.String>) // .codeArtifactOptions(CodeArtifactOptions) // .deps(java.util.List<java.lang.String>) // .description(java.lang.String) // .devDeps(java.util.List<java.lang.String>) // .entrypoint(java.lang.String) // .homepage(java.lang.String) // .keywords(java.util.List<java.lang.String>) // .license(java.lang.String) // .licensed(java.lang.Boolean) // .maxNodeVersion(java.lang.String) // .minNodeVersion(java.lang.String) // .npmAccess(NpmAccess) // .npmRegistry(java.lang.String) // .npmRegistryUrl(java.lang.String) // .npmTokenSecret(java.lang.String) // .packageManager(NodePackageManager) // .packageName(java.lang.String) // .peerDependencyOptions(PeerDependencyOptions) // .peerDeps(java.util.List<java.lang.String>) // .pnpmVersion(java.lang.String) // .repository(java.lang.String) // .repositoryDirectory(java.lang.String) // .scopedPackagesOptions(java.util.List<ScopedPackagesOptions>) // .scripts(java.util.Map<java.lang.String, java.lang.String>) // .stability(java.lang.String) // .jsiiReleaseVersion(java.lang.String) // .majorVersion(java.lang.Number) // .minMajorVersion(java.lang.Number) // .npmDistTag(java.lang.String) // .postBuildSteps(java.util.List<JobStep>) // .prerelease(java.lang.String) // .publishDryRun(java.lang.Boolean) // .publishTasks(java.lang.Boolean) // .releaseBranches(java.util.Map<java.lang.String, BranchOptions>) // .releaseEveryCommit(java.lang.Boolean) // .releaseFailureIssue(java.lang.Boolean) // .releaseFailureIssueLabel(java.lang.String) // .releaseSchedule(java.lang.String) // .releaseTagPrefix(java.lang.String) // .releaseTrigger(ReleaseTrigger) // .releaseWorkflowName(java.lang.String) // .releaseWorkflowSetupSteps(java.util.List<JobStep>) // .versionrcOptions(java.util.Map<java.lang.String, java.lang.Object>) // .workflowContainerImage(java.lang.String) // .workflowRunsOn(java.util.List<java.lang.String>) . defaultReleaseBranch ( java . lang . String ) // .artifactsDirectory(java.lang.String) // .autoApproveUpgrades(java.lang.Boolean) // .buildWorkflow(java.lang.Boolean) // .buildWorkflowTriggers(Triggers) // .bundlerOptions(BundlerOptions) // .codeCov(java.lang.Boolean) // .codeCovTokenSecret(java.lang.String) // .copyrightOwner(java.lang.String) // .copyrightPeriod(java.lang.String) // .dependabot(java.lang.Boolean) // .dependabotOptions(DependabotOptions) // .depsUpgrade(java.lang.Boolean) // .depsUpgradeOptions(UpgradeDependenciesOptions) // .gitignore(java.util.List<java.lang.String>) // .jest(java.lang.Boolean) // .jestOptions(JestOptions) // .mutableBuild(java.lang.Boolean) // .npmignore(java.util.List<java.lang.String>) // .npmignoreEnabled(java.lang.Boolean) // .package(java.lang.Boolean) // .prettier(java.lang.Boolean) // .prettierOptions(PrettierOptions) // .projenDevDependency(java.lang.Boolean) // .projenrcJs(java.lang.Boolean) // .projenrcJsOptions(ProjenrcOptions) // .projenVersion(java.lang.String) // .pullRequestTemplate(java.lang.Boolean) // .pullRequestTemplateContents(java.util.List<java.lang.String>) // .release(java.lang.Boolean) // .releaseToNpm(java.lang.Boolean) // .releaseWorkflow(java.lang.Boolean) // .workflowBootstrapSteps(java.util.List<JobStep>) // .workflowGitIdentity(GitIdentity) // .workflowNodeVersion(java.lang.String) // .disableTsconfig(java.lang.Boolean) // .docgen(java.lang.Boolean) // .docsDirectory(java.lang.String) // .entrypointTypes(java.lang.String) // .eslint(java.lang.Boolean) // .eslintOptions(EslintOptions) // .libdir(java.lang.String) // .projenrcTs(java.lang.Boolean) // .projenrcTsOptions(ProjenrcOptions) // .sampleCode(java.lang.Boolean) // .srcdir(java.lang.String) // .testdir(java.lang.String) // .tsconfig(TypescriptConfigOptions) // .tsconfigDev(TypescriptConfigOptions) // .tsconfigDevFile(java.lang.String) // .typescriptVersion(java.lang.String) // .buildCommand(java.lang.String) // .cdkout(java.lang.String) // .context(java.util.Map<java.lang.String, java.lang.Object>) // .featureFlags(java.lang.Boolean) // .requireApproval(ApprovalLevel) // .watchExcludes(java.util.List<java.lang.String>) // .watchIncludes(java.util.List<java.lang.String>) . cdkVersion ( java . lang . String ) // .cdkAssert(java.lang.Boolean) // .cdkAssertions(java.lang.Boolean) // .cdkDependencies(java.util.List<java.lang.String>) // .cdkDependenciesAsDeps(java.lang.Boolean) // .cdkTestDependencies(java.util.List<java.lang.String>) // .cdkVersionPinning(java.lang.Boolean) // .constructsVersion(java.lang.String) // .appEntrypoint(java.lang.String) // .edgeLambdaAutoDiscover(java.lang.Boolean) // .integrationTestAutoDiscover(java.lang.Boolean) // .lambdaAutoDiscover(java.lang.Boolean) // .lambdaExtensionAutoDiscover(java.lang.Boolean) // .lambdaOptions(LambdaFunctionCommonOptions) . build (); Properties Name Type Description name java.lang.String This is the name of your project. commitGenerated java.lang.Boolean Whether to commit the managed files by default. gitOptions io.github.cdklabs.projen.GitOptions Configuration options for git. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. renovatebot java.lang.Boolean Use renovatebot to handle dependency upgrades. renovatebotOptions io.github.cdklabs.projen.RenovatebotOptions Options for renovatebot. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge java.lang.Boolean Enable automatic merging on GitHub. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenCredentials io.github.cdklabs.projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. allowLibraryDependencies java.lang.Boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail java.lang.String Author's e-mail. authorName java.lang.String Author's name. authorOrganization java.lang.Boolean Is the author an organization. authorUrl java.lang.String Author's URL / Website. autoDetectBin java.lang.Boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin java.util.Map Binary programs vended with your module. bugsEmail java.lang.String The email address to which issues should be reported. bugsUrl java.lang.String The url to your project's issue tracker. bundledDeps java.util.List List of dependencies to bundle into this module. codeArtifactOptions io.github.cdklabs.projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps java.util.List Runtime dependencies of this module. description java.lang.String The description is just a string that helps people understand the purpose of the package. devDeps java.util.List Build dependencies for this module. entrypoint java.lang.String Module entrypoint ( main in package.json ). homepage java.lang.String Package's Homepage / Website. keywords java.util.List Keywords to include in package.json . license java.lang.String License's SPDX identifier. licensed java.lang.Boolean Indicates if a license should be added. maxNodeVersion java.lang.String Minimum node.js version to require via engines (inclusive). minNodeVersion java.lang.String Minimum Node.js version to require via package.json engines (inclusive). npmAccess io.github.cdklabs.projen.javascript.NpmAccess Access level of the npm package. npmRegistry java.lang.String The host name of the npm registry to publish to. npmRegistryUrl java.lang.String The base URL of the npm package registry. npmTokenSecret java.lang.String GitHub secret which contains the NPM token to use when publishing packages. packageManager io.github.cdklabs.projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName java.lang.String The \"name\" in package.json. peerDependencyOptions io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps java.util.List Peer dependencies for this module. pnpmVersion java.lang.String The version of PNPM to use if using PNPM as a package manager. repository java.lang.String The repository is the location where the actual code for your package lives. repositoryDirectory java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions java.util.List Options for privately hosted scoped packages. scripts java.util.Map npm scripts to include. stability java.lang.String Package's Stability. jsiiReleaseVersion java.lang.String Version requirement of publib which is used to publish modules to npm. majorVersion java.lang.Number Major version to release from the default branch. minMajorVersion java.lang.Number Minimal Major version to release. npmDistTag java.lang.String The npmDistTag to use when publishing from the default branch. postBuildSteps java.util.List Steps to execute after build as part of the release workflow. prerelease java.lang.String Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun java.lang.Boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks java.lang.Boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches java.util.Map Defines additional release branches. releaseEveryCommit java.lang.Boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue java.lang.Boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel java.lang.String The label to apply to issues indicating publish failures. releaseSchedule java.lang.String CRON schedule to trigger new releases. releaseTagPrefix java.lang.String Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger io.github.cdklabs.projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName java.lang.String The name of the default release workflow. releaseWorkflowSetupSteps java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions java.util.Map Custom configuration used when creating changelog with standard-version package. workflowContainerImage java.lang.String Container image to use for GitHub workflows. workflowRunsOn java.util.List Github Runner selection labels. defaultReleaseBranch java.lang.String The name of the main release branch. artifactsDirectory java.lang.String A directory which will contain build artifacts. autoApproveUpgrades java.lang.Boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow java.lang.Boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers io.github.cdklabs.projen.github.workflows.Triggers Build workflow triggers. bundlerOptions io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov java.lang.Boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret java.lang.String Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner java.lang.String License copyright owner. copyrightPeriod java.lang.String The copyright years to put in the LICENSE file. dependabot java.lang.Boolean Use dependabot to handle dependency upgrades. dependabotOptions io.github.cdklabs.projen.github.DependabotOptions Options for dependabot. depsUpgrade java.lang.Boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore java.util.List Additional entries to .gitignore. jest java.lang.Boolean Setup jest unit tests. jestOptions io.github.cdklabs.projen.javascript.JestOptions Jest options. mutableBuild java.lang.Boolean Automatically update files modified during builds to pull-request branches. npmignore java.util.List Additional entries to .npmignore. npmignoreEnabled java.lang.Boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package java.lang.Boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier java.lang.Boolean Setup prettier. prettierOptions io.github.cdklabs.projen.javascript.PrettierOptions Prettier options. projenDevDependency java.lang.Boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs java.lang.Boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions io.github.cdklabs.projen.javascript.ProjenrcOptions Options for .projenrc.js. projenVersion java.lang.String Version of projen to install. pullRequestTemplate java.lang.Boolean Include a GitHub pull request template. pullRequestTemplateContents java.util.List The contents of the pull request template. release java.lang.Boolean Add release management to this project. releaseToNpm java.lang.Boolean Automatically release to npm when new versions are introduced. releaseWorkflow java.lang.Boolean DEPRECATED: renamed to release . workflowBootstrapSteps java.util.List Workflow steps to use in order to bootstrap this repo. workflowGitIdentity io.github.cdklabs.projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion java.lang.String The node version to use in GitHub workflows. disableTsconfig java.lang.Boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen java.lang.Boolean Docgen by Typedoc. docsDirectory java.lang.String Docs directory. entrypointTypes java.lang.String The .d.ts file that includes the type declarations for this module. eslint java.lang.Boolean Setup eslint. eslintOptions io.github.cdklabs.projen.javascript.EslintOptions Eslint options. libdir java.lang.String Typescript artifacts output directory. projenrcTs java.lang.Boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode java.lang.Boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir java.lang.String Typescript sources directory. testdir java.lang.String Jest tests directory. Tests files should be named xxx.test.ts . tsconfig io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile java.lang.String The name of the development tsconfig.json file. typescriptVersion java.lang.String TypeScript version to use. buildCommand java.lang.String A command to execute before synthesis. cdkout java.lang.String cdk.out directory. context java.util.Map Additional context to include in cdk.json . featureFlags java.lang.Boolean Include all feature flags in cdk.json. requireApproval io.github.cdklabs.projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes java.util.List Glob patterns to exclude from cdk watch . watchIncludes java.util.List Glob patterns to include in cdk watch . cdkVersion java.lang.String Minimum version of the AWS CDK to depend on. cdkAssert java.lang.Boolean Warning: NodeJS only. cdkAssertions java.lang.Boolean Install the assertions library? cdkDependencies java.util.List Which AWS CDKv1 modules this project requires. cdkDependenciesAsDeps java.lang.Boolean If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdkTestDependencies java.util.List AWS CDK modules required for testing. cdkVersionPinning java.lang.Boolean Use pinned version instead of caret version for CDK. constructsVersion java.lang.String Minimum version of the constructs library to depend on. appEntrypoint java.lang.String The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). edgeLambdaAutoDiscover java.lang.Boolean Automatically adds an cloudfront.experimental.EdgeFunction for each .edge-lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. integrationTestAutoDiscover java.lang.Boolean Automatically discovers and creates integration tests for each .integ.ts file in under your test directory. lambdaAutoDiscover java.lang.Boolean Automatically adds an awscdk.LambdaFunction for each .lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambdaExtensionAutoDiscover java.lang.Boolean Automatically adds an awscdk.LambdaExtension for each .lambda-extension.ts entrypoint in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambdaOptions io.github.cdklabs.projen.awscdk.LambdaFunctionCommonOptions Common options for all AWS Lambda functions. name Required public java . lang . String getName (); Type: java.lang.String Default: $BASEDIR This is the name of your project. commitGenerated Optional public java . lang . Boolean getCommitGenerated (); Type: java.lang.Boolean Default: true Whether to commit the managed files by default. gitOptions Optional public GitOptions getGitOptions (); Type: io.github.cdklabs.projen.GitOptions Configuration options for git. logging Optional public LoggerOptions getLogging (); Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public java . lang . String getOutdir (); Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public java . lang . String getProjenCommand (); Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public java . lang . Boolean getProjenrcJson (); Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public ProjenrcOptions getProjenrcJsonOptions (); Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional public java . lang . Boolean getRenovatebot (); Type: java.lang.Boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional public RenovatebotOptions getRenovatebotOptions (); Type: io.github.cdklabs.projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional public AutoApproveOptions getAutoApproveOptions (); Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional public java . lang . Boolean getAutoMerge (); Type: java.lang.Boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional public AutoMergeOptions getAutoMergeOptions (); Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional public java . lang . Boolean getClobber (); Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public java . lang . Boolean getDevContainer (); Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public java . lang . Boolean getGithub (); Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public GitHubOptions getGithubOptions (); Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public java . lang . Boolean getGitpod (); Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public java . lang . Boolean getMergify (); Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public MergifyOptions getMergifyOptions (); Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional public GithubCredentials getProjenCredentials (); Type: io.github.cdklabs.projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials public java . lang . String getProjenTokenSecret (); Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public SampleReadmeProps getReadme (); Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional public java . lang . Boolean getStale (); Type: java.lang.Boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public StaleOptions getStaleOptions (); Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public java . lang . Boolean getVscode (); Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allowLibraryDependencies Optional public java . lang . Boolean getAllowLibraryDependencies (); Type: java.lang.Boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. authorEmail Optional public java . lang . String getAuthorEmail (); Type: java.lang.String Author's e-mail. authorName Optional public java . lang . String getAuthorName (); Type: java.lang.String Author's name. authorOrganization Optional public java . lang . Boolean getAuthorOrganization (); Type: java.lang.Boolean Is the author an organization. authorUrl Optional public java . lang . String getAuthorUrl (); Type: java.lang.String Author's URL / Website. autoDetectBin Optional public java . lang . Boolean getAutoDetectBin (); Type: java.lang.Boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional public java . util . Map < java . lang . String , java . lang . String > getBin (); Type: java.util.Map Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugsEmail Optional public java . lang . String getBugsEmail (); Type: java.lang.String The email address to which issues should be reported. bugsUrl Optional public java . lang . String getBugsUrl (); Type: java.lang.String The url to your project's issue tracker. bundledDeps Optional public java . util . List < java . lang . String > getBundledDeps (); Type: java.util.List List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. codeArtifactOptions Optional public CodeArtifactOptions getCodeArtifactOptions (); Type: io.github.cdklabs.projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional public java . util . List < java . lang . String > getDeps (); Type: java.util.List Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ ' express ' , ' lodash ' , ' foo @ ^ 2 ' ] description Optional public java . lang . String getDescription (); Type: java.lang.String The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description devDeps Optional public java . util . List < java . lang . String > getDevDeps (); Type: java.util.List Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ ' typescript ' , ' @types / express ' ] entrypoint Optional public java . lang . String getEntrypoint (); Type: java.lang.String Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional public java . lang . String getHomepage (); Type: java.lang.String Package's Homepage / Website. keywords Optional public java . util . List < java . lang . String > getKeywords (); Type: java.util.List Keywords to include in package.json . license Optional public java . lang . String getLicense (); Type: java.lang.String Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional public java . lang . Boolean getLicensed (); Type: java.lang.Boolean Default: true Indicates if a license should be added. maxNodeVersion Optional public java . lang . String getMaxNodeVersion (); Type: java.lang.String Default: no max Minimum node.js version to require via engines (inclusive). minNodeVersion Optional public java . lang . String getMinNodeVersion (); Type: java.lang.String Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npmAccess Optional public NpmAccess getNpmAccess (); Type: io.github.cdklabs.projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npmRegistry ~~ Optional Deprecated: use npmRegistryUrl instead public java . lang . String getNpmRegistry (); Type: java.lang.String The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npmRegistryUrl Optional public java . lang . String getNpmRegistryUrl (); Type: java.lang.String Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npmTokenSecret Optional public java . lang . String getNpmTokenSecret (); Type: java.lang.String Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. packageManager Optional public NodePackageManager getPackageManager (); Type: io.github.cdklabs.projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. packageName Optional public java . lang . String getPackageName (); Type: java.lang.String Default: defaults to project name The \"name\" in package.json. peerDependencyOptions Optional public PeerDependencyOptions getPeerDependencyOptions (); Type: io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps Optional public java . util . List < java . lang . String > getPeerDeps (); Type: java.util.List Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. pnpmVersion Optional public java . lang . String getPnpmVersion (); Type: java.lang.String Default: \"7\" The version of PNPM to use if using PNPM as a package manager. repository Optional public java . lang . String getRepository (); Type: java.lang.String The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repositoryDirectory Optional public java . lang . String getRepositoryDirectory (); Type: java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions Optional public java . util . List < ScopedPackagesOptions > getScopedPackagesOptions (); Type: java.util.List Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional public java . util . Map < java . lang . String , java . lang . String > getScripts (); Type: java.util.Map Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional public java . lang . String getStability (); Type: java.lang.String Package's Stability. jsiiReleaseVersion Optional public java . lang . String getJsiiReleaseVersion (); Type: java.lang.String Default: \"latest\" Version requirement of publib which is used to publish modules to npm. majorVersion Optional public java . lang . Number getMajorVersion (); Type: java.lang.Number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. minMajorVersion Optional public java . lang . Number getMinMajorVersion (); Type: java.lang.Number Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npmDistTag Optional public java . lang . String getNpmDistTag (); Type: java.lang.String Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. postBuildSteps Optional public java . util . List < JobStep > getPostBuildSteps (); Type: java.util.List Default: [] Steps to execute after build as part of the release workflow. prerelease Optional public java . lang . String getPrerelease (); Type: java.lang.String Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun Optional public java . lang . Boolean getPublishDryRun (); Type: java.lang.Boolean Default: false Instead of actually publishing to package managers, just print the publishing command. publishTasks Optional public java . lang . Boolean getPublishTasks (); Type: java.lang.Boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. releaseBranches Optional public java . util . Map < java . lang . String , BranchOptions > getReleaseBranches (); Type: java.util.Map Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ releaseEveryCommit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead public java . lang . Boolean getReleaseEveryCommit (); Type: java.lang.Boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue Optional public java . lang . Boolean getReleaseFailureIssue (); Type: java.lang.Boolean Default: false Create a github issue on every failed publishing task. releaseFailureIssueLabel Optional public java . lang . String getReleaseFailureIssueLabel (); Type: java.lang.String Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ releaseSchedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead public java . lang . String getReleaseSchedule (); Type: java.lang.String Default: no scheduled releases CRON schedule to trigger new releases. releaseTagPrefix Optional public java . lang . String getReleaseTagPrefix (); Type: java.lang.String Default: \"v\" Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. releaseTrigger Optional public ReleaseTrigger getReleaseTrigger (); Type: io.github.cdklabs.projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. releaseWorkflowName Optional public java . lang . String getReleaseWorkflowName (); Type: java.lang.String Default: \"Release\" The name of the default release workflow. releaseWorkflowSetupSteps Optional public java . util . List < JobStep > getReleaseWorkflowSetupSteps (); Type: java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions Optional public java . util . Map < java . lang . String , java . lang . Object > getVersionrcOptions (); Type: java.util.Map Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflowContainerImage Optional public java . lang . String getWorkflowContainerImage (); Type: java.lang.String Default: default image Container image to use for GitHub workflows. workflowRunsOn Optional public java . util . List < java . lang . String > getWorkflowRunsOn (); Type: java.util.List Default: [\"ubuntu-latest\"] Github Runner selection labels. defaultReleaseBranch Required public java . lang . String getDefaultReleaseBranch (); Type: java.lang.String Default: \"main\" The name of the main release branch. artifactsDirectory Optional public java . lang . String getArtifactsDirectory (); Type: java.lang.String Default: \"dist\" A directory which will contain build artifacts. autoApproveUpgrades Optional public java . lang . Boolean getAutoApproveUpgrades (); Type: java.lang.Boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. buildWorkflow Optional public java . lang . Boolean getBuildWorkflow (); Type: java.lang.Boolean Default: true if not a subproject Define a GitHub workflow for building PRs. buildWorkflowTriggers Optional public Triggers getBuildWorkflowTriggers (); Type: io.github.cdklabs.projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundlerOptions Optional public BundlerOptions getBundlerOptions (); Type: io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov Optional public java . lang . Boolean getCodeCov (); Type: java.lang.Boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret Optional public java . lang . String getCodeCovTokenSecret (); Type: java.lang.String Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner Optional public java . lang . String getCopyrightOwner (); Type: java.lang.String Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyrightPeriod Optional public java . lang . String getCopyrightPeriod (); Type: java.lang.String Default: current year The copyright years to put in the LICENSE file. dependabot Optional public java . lang . Boolean getDependabot (); Type: java.lang.Boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabotOptions Optional public DependabotOptions getDependabotOptions (); Type: io.github.cdklabs.projen.github.DependabotOptions Default: default options Options for dependabot. depsUpgrade Optional public java . lang . Boolean getDepsUpgrade (); Type: java.lang.Boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . depsUpgradeOptions Optional public UpgradeDependenciesOptions getDepsUpgradeOptions (); Type: io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional public java . util . List < java . lang . String > getGitignore (); Type: java.util.List Additional entries to .gitignore. jest Optional public java . lang . Boolean getJest (); Type: java.lang.Boolean Default: true Setup jest unit tests. jestOptions Optional public JestOptions getJestOptions (); Type: io.github.cdklabs.projen.javascript.JestOptions Default: default options Jest options. mutableBuild Optional public java . lang . Boolean getMutableBuild (); Type: java.lang.Boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore public java . util . List < java . lang . String > getNpmignore (); Type: java.util.List Additional entries to .npmignore. npmignoreEnabled Optional public java . lang . Boolean getNpmignoreEnabled (); Type: java.lang.Boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional public java . lang . Boolean getPackage (); Type: java.lang.Boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional public java . lang . Boolean getPrettier (); Type: java.lang.Boolean Default: false Setup prettier. prettierOptions Optional public PrettierOptions getPrettierOptions (); Type: io.github.cdklabs.projen.javascript.PrettierOptions Default: default options Prettier options. projenDevDependency Optional public java . lang . Boolean getProjenDevDependency (); Type: java.lang.Boolean Default: true Indicates of \"projen\" should be installed as a devDependency. projenrcJs Optional public java . lang . Boolean getProjenrcJs (); Type: java.lang.Boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions Optional public ProjenrcOptions getProjenrcJsOptions (); Type: io.github.cdklabs.projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projenVersion Optional public java . lang . String getProjenVersion (); Type: java.lang.String Default: Defaults to the latest version. Version of projen to install. pullRequestTemplate Optional public java . lang . Boolean getPullRequestTemplate (); Type: java.lang.Boolean Default: true Include a GitHub pull request template. pullRequestTemplateContents Optional public java . util . List < java . lang . String > getPullRequestTemplateContents (); Type: java.util.List Default: default content The contents of the pull request template. release Optional public java . lang . Boolean getRelease (); Type: java.lang.Boolean Default: true (false for subprojects) Add release management to this project. releaseToNpm Optional public java . lang . Boolean getReleaseToNpm (); Type: java.lang.Boolean Default: false Automatically release to npm when new versions are introduced. ~~ releaseWorkflow ~~ Optional Deprecated: see release . public java . lang . Boolean getReleaseWorkflow (); Type: java.lang.Boolean Default: true if not a subproject DEPRECATED: renamed to release . workflowBootstrapSteps Optional public java . util . List < JobStep > getWorkflowBootstrapSteps (); Type: java.util.List Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflowGitIdentity Optional public GitIdentity getWorkflowGitIdentity (); Type: io.github.cdklabs.projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflowNodeVersion Optional public java . lang . String getWorkflowNodeVersion (); Type: java.lang.String Default: same as minNodeVersion The node version to use in GitHub workflows. disableTsconfig Optional public java . lang . Boolean getDisableTsconfig (); Type: java.lang.Boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional public java . lang . Boolean getDocgen (); Type: java.lang.Boolean Default: false Docgen by Typedoc. docsDirectory Optional public java . lang . String getDocsDirectory (); Type: java.lang.String Default: \"docs\" Docs directory. entrypointTypes Optional public java . lang . String getEntrypointTypes (); Type: java.lang.String Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional public java . lang . Boolean getEslint (); Type: java.lang.Boolean Default: true Setup eslint. eslintOptions Optional public EslintOptions getEslintOptions (); Type: io.github.cdklabs.projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional public java . lang . String getLibdir (); Type: java.lang.String Default: \"lib\" Typescript artifacts output directory. projenrcTs Optional public java . lang . Boolean getProjenrcTs (); Type: java.lang.Boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions Optional public ProjenrcOptions getProjenrcTsOptions (); Type: io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode Optional public java . lang . Boolean getSampleCode (); Type: java.lang.Boolean Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional public java . lang . String getSrcdir (); Type: java.lang.String Default: \"src\" Typescript sources directory. testdir Optional public java . lang . String getTestdir (); Type: java.lang.String Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional public TypescriptConfigOptions getTsconfig (); Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfigDev Optional public TypescriptConfigOptions getTsconfigDev (); Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile Optional public java . lang . String getTsconfigDevFile (); Type: java.lang.String Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescriptVersion Optional public java . lang . String getTypescriptVersion (); Type: java.lang.String Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). buildCommand Optional public java . lang . String getBuildCommand (); Type: java.lang.String Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment. cdkout Optional public java . lang . String getCdkout (); Type: java.lang.String Default: \"cdk.out\" cdk.out directory. context Optional public java . util . Map < java . lang . String , java . lang . Object > getContext (); Type: java.util.Map Default: no additional context Additional context to include in cdk.json . featureFlags Optional public java . lang . Boolean getFeatureFlags (); Type: java.lang.Boolean Default: true Include all feature flags in cdk.json. requireApproval Optional public ApprovalLevel getRequireApproval (); Type: io.github.cdklabs.projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes Optional public java . util . List < java . lang . String > getWatchExcludes (); Type: java.util.List Default: [] Glob patterns to exclude from cdk watch . watchIncludes Optional public java . util . List < java . lang . String > getWatchIncludes (); Type: java.util.List Default: [] Glob patterns to include in cdk watch . cdkVersion Required public java . lang . String getCdkVersion (); Type: java.lang.String Default: \"2.1.0\" Minimum version of the AWS CDK to depend on. ~~ cdkAssert ~~ Optional Deprecated: The public java . lang . Boolean getCdkAssert (); Type: java.lang.Boolean Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library? cdkAssertions Optional public java . lang . Boolean getCdkAssertions (); Type: java.lang.Boolean Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib' ~~ cdkDependencies ~~ Optional Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) public java . util . List < java . lang . String > getCdkDependencies (); Type: java.util.List Which AWS CDKv1 modules this project requires. ~~ cdkDependenciesAsDeps ~~ Optional Deprecated: Not supported in CDK v2. public java . lang . Boolean getCdkDependenciesAsDeps (); Type: java.lang.Boolean Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects ~~ cdkTestDependencies ~~ Optional Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead public java . util . List < java . lang . String > getCdkTestDependencies (); Type: java.util.List AWS CDK modules required for testing. cdkVersionPinning Optional public java . lang . Boolean getCdkVersionPinning (); Type: java.lang.Boolean Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes. constructsVersion Optional public java . lang . String getConstructsVersion (); Type: java.lang.String Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on. appEntrypoint Optional public java . lang . String getAppEntrypoint (); Type: java.lang.String Default: \"main.ts\" The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). edgeLambdaAutoDiscover Optional public java . lang . Boolean getEdgeLambdaAutoDiscover (); Type: java.lang.Boolean Default: true Automatically adds an cloudfront.experimental.EdgeFunction for each .edge-lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. integrationTestAutoDiscover Optional public java . lang . Boolean getIntegrationTestAutoDiscover (); Type: java.lang.Boolean Default: true Automatically discovers and creates integration tests for each .integ.ts file in under your test directory. lambdaAutoDiscover Optional public java . lang . Boolean getLambdaAutoDiscover (); Type: java.lang.Boolean Default: true Automatically adds an awscdk.LambdaFunction for each .lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambdaExtensionAutoDiscover Optional public java . lang . Boolean getLambdaExtensionAutoDiscover (); Type: java.lang.Boolean Default: true Automatically adds an awscdk.LambdaExtension for each .lambda-extension.ts entrypoint in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambdaOptions Optional public LambdaFunctionCommonOptions getLambdaOptions (); Type: io.github.cdklabs.projen.awscdk.LambdaFunctionCommonOptions Default: default options Common options for all AWS Lambda functions. SonarCodeScannerConfig Initializer import software.aws.awsprototypingsdk.pipeline.SonarCodeScannerConfig ; SonarCodeScannerConfig . builder () . sonarqubeAuthorizedGroup ( java . lang . String ) . sonarqubeDefaultProfileOrGateName ( java . lang . String ) . sonarqubeEndpoint ( java . lang . String ) . sonarqubeProjectName ( java . lang . String ) // .cdkOutDir(java.lang.String) // .cfnNagIgnorePath(java.lang.String) // .excludeGlobsForScan(java.util.List<java.lang.String>) // .includeGlobsForScan(java.util.List<java.lang.String>) // .preArchiveCommands(java.util.List<java.lang.String>) // .sonarqubeSpecificProfileOrGateName(java.lang.String) // .sonarqubeTags(java.util.List<java.lang.String>) . build (); Properties Name Type Description sonarqubeAuthorizedGroup java.lang.String Group name in Sonarqube with access to administer this project. sonarqubeDefaultProfileOrGateName java.lang.String Default profile/gate name i.e: your org profile. sonarqubeEndpoint java.lang.String endpoint of the sonarqube instance i.e: https:// . sonarqubeProjectName java.lang.String Name of the project to create in Sonarqube. cdkOutDir java.lang.String directory containing the synthesized cdk resources. cfnNagIgnorePath java.lang.String path to a file containing the cfn nag suppression rules. excludeGlobsForScan java.util.List glob patterns to exclude from sonar scan. includeGlobsForScan java.util.List glob patterns to include from sonar scan. preArchiveCommands java.util.List Hook which allows custom commands to be executed before the process commences the archival process. sonarqubeSpecificProfileOrGateName java.lang.String Specific profile/gate name i.e: language specific. sonarqubeTags java.util.List Tags to associate with this project. sonarqubeAuthorizedGroup Required public java . lang . String getSonarqubeAuthorizedGroup (); Type: java.lang.String Group name in Sonarqube with access to administer this project. sonarqubeDefaultProfileOrGateName Required public java . lang . String getSonarqubeDefaultProfileOrGateName (); Type: java.lang.String Default profile/gate name i.e: your org profile. Note: These need to be set up in Sonarqube manually. sonarqubeEndpoint Required public java . lang . String getSonarqubeEndpoint (); Type: java.lang.String endpoint of the sonarqube instance i.e: https:// . Note: Ensure a trailing '/' is not included. sonarqubeProjectName Required public java . lang . String getSonarqubeProjectName (); Type: java.lang.String Name of the project to create in Sonarqube. cdkOutDir Optional public java . lang . String getCdkOutDir (); Type: java.lang.String directory containing the synthesized cdk resources. cfnNagIgnorePath Optional public java . lang . String getCfnNagIgnorePath (); Type: java.lang.String path to a file containing the cfn nag suppression rules. excludeGlobsForScan Optional public java . util . List < java . lang . String > getExcludeGlobsForScan (); Type: java.util.List glob patterns to exclude from sonar scan. includeGlobsForScan Optional public java . util . List < java . lang . String > getIncludeGlobsForScan (); Type: java.util.List glob patterns to include from sonar scan. preArchiveCommands Optional public java . util . List < java . lang . String > getPreArchiveCommands (); Type: java.util.List Hook which allows custom commands to be executed before the process commences the archival process. sonarqubeSpecificProfileOrGateName Optional public java . lang . String getSonarqubeSpecificProfileOrGateName (); Type: java.lang.String Specific profile/gate name i.e: language specific. Note: These need to be set up in Sonarqube manually. sonarqubeTags Optional public java . util . List < java . lang . String > getSonarqubeTags (); Type: java.util.List Tags to associate with this project. SonarCodeScannerProps SonarCodeScanners properties. Initializer import software.aws.awsprototypingsdk.pipeline.SonarCodeScannerProps ; SonarCodeScannerProps . builder () . sonarqubeAuthorizedGroup ( java . lang . String ) . sonarqubeDefaultProfileOrGateName ( java . lang . String ) . sonarqubeEndpoint ( java . lang . String ) . sonarqubeProjectName ( java . lang . String ) // .cdkOutDir(java.lang.String) // .cfnNagIgnorePath(java.lang.String) // .excludeGlobsForScan(java.util.List<java.lang.String>) // .includeGlobsForScan(java.util.List<java.lang.String>) // .preArchiveCommands(java.util.List<java.lang.String>) // .sonarqubeSpecificProfileOrGateName(java.lang.String) // .sonarqubeTags(java.util.List<java.lang.String>) . artifactBucketArn ( java . lang . String ) . synthBuildArn ( java . lang . String ) // .artifactBucketKeyArn(java.lang.String) . build (); Properties Name Type Description sonarqubeAuthorizedGroup java.lang.String Group name in Sonarqube with access to administer this project. sonarqubeDefaultProfileOrGateName java.lang.String Default profile/gate name i.e: your org profile. sonarqubeEndpoint java.lang.String endpoint of the sonarqube instance i.e: https:// . sonarqubeProjectName java.lang.String Name of the project to create in Sonarqube. cdkOutDir java.lang.String directory containing the synthesized cdk resources. cfnNagIgnorePath java.lang.String path to a file containing the cfn nag suppression rules. excludeGlobsForScan java.util.List glob patterns to exclude from sonar scan. includeGlobsForScan java.util.List glob patterns to include from sonar scan. preArchiveCommands java.util.List Hook which allows custom commands to be executed before the process commences the archival process. sonarqubeSpecificProfileOrGateName java.lang.String Specific profile/gate name i.e: language specific. sonarqubeTags java.util.List Tags to associate with this project. artifactBucketArn java.lang.String S3 bucket ARN containing the built artifacts from the synth build. synthBuildArn java.lang.String ARN for the CodeBuild task responsible for executing the synth command. artifactBucketKeyArn java.lang.String Artifact bucket key ARN used to encrypt the artifacts. sonarqubeAuthorizedGroup Required public java . lang . String getSonarqubeAuthorizedGroup (); Type: java.lang.String Group name in Sonarqube with access to administer this project. sonarqubeDefaultProfileOrGateName Required public java . lang . String getSonarqubeDefaultProfileOrGateName (); Type: java.lang.String Default profile/gate name i.e: your org profile. Note: These need to be set up in Sonarqube manually. sonarqubeEndpoint Required public java . lang . String getSonarqubeEndpoint (); Type: java.lang.String endpoint of the sonarqube instance i.e: https:// . Note: Ensure a trailing '/' is not included. sonarqubeProjectName Required public java . lang . String getSonarqubeProjectName (); Type: java.lang.String Name of the project to create in Sonarqube. cdkOutDir Optional public java . lang . String getCdkOutDir (); Type: java.lang.String directory containing the synthesized cdk resources. cfnNagIgnorePath Optional public java . lang . String getCfnNagIgnorePath (); Type: java.lang.String path to a file containing the cfn nag suppression rules. excludeGlobsForScan Optional public java . util . List < java . lang . String > getExcludeGlobsForScan (); Type: java.util.List glob patterns to exclude from sonar scan. includeGlobsForScan Optional public java . util . List < java . lang . String > getIncludeGlobsForScan (); Type: java.util.List glob patterns to include from sonar scan. preArchiveCommands Optional public java . util . List < java . lang . String > getPreArchiveCommands (); Type: java.util.List Hook which allows custom commands to be executed before the process commences the archival process. sonarqubeSpecificProfileOrGateName Optional public java . lang . String getSonarqubeSpecificProfileOrGateName (); Type: java.lang.String Specific profile/gate name i.e: language specific. Note: These need to be set up in Sonarqube manually. sonarqubeTags Optional public java . util . List < java . lang . String > getSonarqubeTags (); Type: java.util.List Tags to associate with this project. artifactBucketArn Required public java . lang . String getArtifactBucketArn (); Type: java.lang.String S3 bucket ARN containing the built artifacts from the synth build. synthBuildArn Required public java . lang . String getSynthBuildArn (); Type: java.lang.String ARN for the CodeBuild task responsible for executing the synth command. artifactBucketKeyArn Optional public java . lang . String getArtifactBucketKeyArn (); Type: java.lang.String Artifact bucket key ARN used to encrypt the artifacts. Classes PDKPipelineJavaProject Synthesizes a Java Project with a CI/CD pipeline. Initializers import software.aws.awsprototypingsdk.pipeline.PDKPipelineJavaProject ; PDKPipelineJavaProject . Builder . create () . name ( java . lang . String ) // .commitGenerated(java.lang.Boolean) // .gitOptions(GitOptions) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .renovatebot(java.lang.Boolean) // .renovatebotOptions(RenovatebotOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMerge(java.lang.Boolean) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenCredentials(GithubCredentials) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) . artifactId ( java . lang . String ) . groupId ( java . lang . String ) . version ( java . lang . String ) // .description(java.lang.String) // .packaging(java.lang.String) // .url(java.lang.String) // .compileOptions(MavenCompileOptions) // .deps(java.util.List<java.lang.String>) // .distdir(java.lang.String) // .junit(java.lang.Boolean) // .junitOptions(JunitOptions) // .packagingOptions(MavenPackagingOptions) // .projenrcJava(java.lang.Boolean) // .projenrcJavaOptions(ProjenrcOptions) // .testDeps(java.util.List<java.lang.String>) // .sample(java.lang.Boolean) // .sampleJavaPackage(java.lang.String) // .buildCommand(java.lang.String) // .cdkout(java.lang.String) // .context(java.util.Map<java.lang.String, java.lang.Object>) // .featureFlags(java.lang.Boolean) // .requireApproval(ApprovalLevel) // .watchExcludes(java.util.List<java.lang.String>) // .watchIncludes(java.util.List<java.lang.String>) . cdkVersion ( java . lang . String ) // .cdkAssert(java.lang.Boolean) // .cdkAssertions(java.lang.Boolean) // .cdkDependencies(java.util.List<java.lang.String>) // .cdkDependenciesAsDeps(java.lang.Boolean) // .cdkTestDependencies(java.util.List<java.lang.String>) // .cdkVersionPinning(java.lang.Boolean) // .constructsVersion(java.lang.String) . mainClass ( java . lang . String ) . build (); Name Type Description name java.lang.String This is the name of your project. commitGenerated java.lang.Boolean Whether to commit the managed files by default. gitOptions io.github.cdklabs.projen.GitOptions Configuration options for git. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. renovatebot java.lang.Boolean Use renovatebot to handle dependency upgrades. renovatebotOptions io.github.cdklabs.projen.RenovatebotOptions Options for renovatebot. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge java.lang.Boolean Enable automatic merging on GitHub. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenCredentials io.github.cdklabs.projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. artifactId java.lang.String The artifactId is generally the name that the project is known by. groupId java.lang.String This is generally unique amongst an organization or a project. version java.lang.String This is the last piece of the naming puzzle. description java.lang.String Description of a project is always good. packaging java.lang.String Project packaging format. url java.lang.String The URL, like the name, is not required. compileOptions io.github.cdklabs.projen.java.MavenCompileOptions Compile options. deps java.util.List List of runtime dependencies for this project. distdir java.lang.String Final artifact output directory. junit java.lang.Boolean Include junit tests. junitOptions io.github.cdklabs.projen.java.JunitOptions junit options. packagingOptions io.github.cdklabs.projen.java.MavenPackagingOptions Packaging options. projenrcJava java.lang.Boolean Use projenrc in java. projenrcJavaOptions io.github.cdklabs.projen.java.ProjenrcOptions Options related to projenrc in java. testDeps java.util.List List of test dependencies for this project. sample java.lang.Boolean Include sample code and test if the relevant directories don't exist. sampleJavaPackage java.lang.String The java package to use for the code sample. buildCommand java.lang.String A command to execute before synthesis. cdkout java.lang.String cdk.out directory. context java.util.Map Additional context to include in cdk.json . featureFlags java.lang.Boolean Include all feature flags in cdk.json. requireApproval io.github.cdklabs.projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes java.util.List Glob patterns to exclude from cdk watch . watchIncludes java.util.List Glob patterns to include in cdk watch . cdkVersion java.lang.String Minimum version of the AWS CDK to depend on. cdkAssert java.lang.Boolean Warning: NodeJS only. cdkAssertions java.lang.Boolean Install the assertions library? cdkDependencies java.util.List Which AWS CDKv1 modules this project requires. cdkDependenciesAsDeps java.lang.Boolean If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdkTestDependencies java.util.List AWS CDK modules required for testing. cdkVersionPinning java.lang.Boolean Use pinned version instead of caret version for CDK. constructsVersion java.lang.String Minimum version of the constructs library to depend on. mainClass java.lang.String The name of the Java class with the static main() method. name Required Type: java.lang.String Default: $BASEDIR This is the name of your project. commitGenerated Optional Type: java.lang.Boolean Default: true Whether to commit the managed files by default. gitOptions Optional Type: io.github.cdklabs.projen.GitOptions Configuration options for git. logging Optional Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional Type: java.lang.Boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional Type: io.github.cdklabs.projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional Type: java.lang.Boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional Type: io.github.cdklabs.projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional Type: java.lang.Boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. artifactId Required Type: java.lang.String Default: \"my-app\" The artifactId is generally the name that the project is known by. Although the groupId is important, people within the group will rarely mention the groupId in discussion (they are often all be the same ID, such as the MojoHaus project groupId: org.codehaus.mojo). It, along with the groupId, creates a key that separates this project from every other project in the world (at least, it should :) ). Along with the groupId, the artifactId fully defines the artifact's living quarters within the repository. In the case of the above project, my-project lives in $M2_REPO/org/codehaus/mojo/my-project. groupId Required Type: java.lang.String Default: \"org.acme\" This is generally unique amongst an organization or a project. For example, all core Maven artifacts do (well, should) live under the groupId org.apache.maven. Group ID's do not necessarily use the dot notation, for example, the junit project. Note that the dot-notated groupId does not have to correspond to the package structure that the project contains. It is, however, a good practice to follow. When stored within a repository, the group acts much like the Java packaging structure does in an operating system. The dots are replaced by OS specific directory separators (such as '/' in Unix) which becomes a relative directory structure from the base repository. In the example given, the org.codehaus.mojo group lives within the directory $M2_REPO/org/codehaus/mojo. version Required Type: java.lang.String Default: \"0.1.0\" This is the last piece of the naming puzzle. groupId:artifactId denotes a single project but they cannot delineate which incarnation of that project we are talking about. Do we want the junit:junit of 2018 (version 4.12), or of 2007 (version 3.8.2)? In short: code changes, those changes should be versioned, and this element keeps those versions in line. It is also used within an artifact's repository to separate versions from each other. my-project version 1.0 files live in the directory structure $M2_REPO/org/codehaus/mojo/my-project/1.0. description Optional Type: java.lang.String Default: undefined Description of a project is always good. Although this should not replace formal documentation, a quick comment to any readers of the POM is always helpful. packaging Optional Type: java.lang.String Default: \"jar\" Project packaging format. url Optional Type: java.lang.String Default: undefined The URL, like the name, is not required. This is a nice gesture for projects users, however, so that they know where the project lives. compileOptions Optional Type: io.github.cdklabs.projen.java.MavenCompileOptions Default: defaults Compile options. deps Optional Type: java.util.List Default: [] List of runtime dependencies for this project. Dependencies use the format: <groupId>/<artifactId>@<semver> Additional dependencies can be added via project.addDependency() . distdir Optional Type: java.lang.String Default: \"dist/java\" Final artifact output directory. junit Optional Type: java.lang.Boolean Default: true Include junit tests. junitOptions Optional Type: io.github.cdklabs.projen.java.JunitOptions Default: defaults junit options. packagingOptions Optional Type: io.github.cdklabs.projen.java.MavenPackagingOptions Default: defaults Packaging options. projenrcJava Optional Type: java.lang.Boolean Default: true Use projenrc in java. This will install projen as a java dependency and will add a synth task which will compile & execute main() from src/main/java/projenrc.java . projenrcJavaOptions Optional Type: io.github.cdklabs.projen.java.ProjenrcOptions Default: default options Options related to projenrc in java. testDeps Optional Type: java.util.List Default: [] List of test dependencies for this project. Dependencies use the format: <groupId>/<artifactId>@<semver> Additional dependencies can be added via project.addTestDependency() . sample Optional Type: java.lang.Boolean Default: true Include sample code and test if the relevant directories don't exist. sampleJavaPackage Optional Type: java.lang.String Default: \"org.acme\" The java package to use for the code sample. buildCommand Optional Type: java.lang.String Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment. cdkout Optional Type: java.lang.String Default: \"cdk.out\" cdk.out directory. context Optional Type: java.util.Map Default: no additional context Additional context to include in cdk.json . featureFlags Optional Type: java.lang.Boolean Default: true Include all feature flags in cdk.json. requireApproval Optional Type: io.github.cdklabs.projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes Optional Type: java.util.List Default: [] Glob patterns to exclude from cdk watch . watchIncludes Optional Type: java.util.List Default: [] Glob patterns to include in cdk watch . cdkVersion Required Type: java.lang.String Default: \"2.1.0\" Minimum version of the AWS CDK to depend on. ~~ cdkAssert ~~ Optional Deprecated: The Type: java.lang.Boolean Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library? cdkAssertions Optional Type: java.lang.Boolean Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib' ~~ cdkDependencies ~~ Optional Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) Type: java.util.List Which AWS CDKv1 modules this project requires. ~~ cdkDependenciesAsDeps ~~ Optional Deprecated: Not supported in CDK v2. Type: java.lang.Boolean Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects ~~ cdkTestDependencies ~~ Optional Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead Type: java.util.List AWS CDK modules required for testing. cdkVersionPinning Optional Type: java.lang.Boolean Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes. constructsVersion Optional Type: java.lang.String Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on. mainClass Required Type: java.lang.String Default: \"org.acme.MyApp\" The name of the Java class with the static main() method. This method should call app.synth() on the CDK app. Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. tryRemoveFile Finds a file at the specified relative path within this project and removes it. addDependency Adds a runtime dependency. addPlugin Adds a build plugin to the pom. addTestDependency Adds a test dependency. addCdkDependency Adds an AWS CDK module dependencies. addExcludeFromCleanup public void addExcludeFromCleanup ( java . lang . String globs ) Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: java.lang.String The glob patterns to match. addGitIgnore public void addGitIgnore ( java . lang . String pattern ) Adds a .gitignore pattern. pattern Required Type: java.lang.String The glob pattern to ignore. addPackageIgnore public void addPackageIgnore ( java . lang . String _pattern ) Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . _pattern Required Type: java.lang.String The glob pattern to exclude. addTask public Task addTask ( java . lang . String name ) public Task addTask ( java . lang . String name , TaskOptions props ) Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: java.lang.String The task name to add. props Optional Type: io.github.cdklabs.projen.TaskOptions Task properties. ~~ addTip ~~ public void addTip ( java . lang . String message ) Prints a \"tip\" message during synthesis. message Required Type: java.lang.String The message. annotateGenerated public void annotateGenerated ( java . lang . String glob ) Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: java.lang.String the glob pattern to match (could be a file path). postSynthesize public void postSynthesize () Called after all components are synthesized. Order is not guaranteed. preSynthesize public void preSynthesize () Called before all components are synthesized. removeTask public Task removeTask ( java . lang . String name ) Removes a task from a project. name Required Type: java.lang.String The name of the task to remove. runTaskCommand public java . lang . String runTaskCommand ( Task task ) Returns the shell command to execute in order to run a task. By default, this is npx projen@<version> <task> task Required Type: io.github.cdklabs.projen.Task The task for which the command is required. synth public void synth () Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" tryFindFile public FileBase tryFindFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public JsonFile tryFindJsonFile ( java . lang . String filePath ) Finds a json file by name. filePath Required Type: java.lang.String The file path. tryFindObjectFile public ObjectFile tryFindObjectFile ( java . lang . String filePath ) Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: java.lang.String The file path. tryRemoveFile public FileBase tryRemoveFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and removes it. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. addDependency public void addDependency ( java . lang . String spec ) Adds a runtime dependency. spec Required Type: java.lang.String Format <groupId>/<artifactId>@<semver> . addPlugin public Dependency addPlugin ( java . lang . String spec ) public Dependency addPlugin ( java . lang . String spec , PluginOptions options ) Adds a build plugin to the pom. The plug in is also added as a BUILD dep to the project. spec Required Type: java.lang.String dependency spec ( group/artifact@version ). options Optional Type: io.github.cdklabs.projen.java.PluginOptions plugin options. addTestDependency public void addTestDependency ( java . lang . String spec ) Adds a test dependency. spec Required Type: java.lang.String Format <groupId>/<artifactId>@<semver> . ~~ addCdkDependency ~~ public void addCdkDependency ( java . lang . String modules ) Adds an AWS CDK module dependencies. modules Required Type: java.lang.String The list of modules to depend on (e.g. \"software.amazon.awscdk/aws-lambda\", \"software.amazon.awscdk/aws-iam\", etc). Properties Name Type Description buildTask io.github.cdklabs.projen.Task No description. commitGenerated java.lang.Boolean Whether to commit the managed files by default. compileTask io.github.cdklabs.projen.Task No description. components java.util.List Returns all the components within this project. deps io.github.cdklabs.projen.Dependencies Project dependencies. ejected java.lang.Boolean Whether or not the project is being ejected. files java.util.List All files in this project. gitattributes io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore io.github.cdklabs.projen.IgnoreFile .gitignore. logger io.github.cdklabs.projen.Logger Logging utilities. name java.lang.String Project name. outdir java.lang.String Absolute output directory of this project. packageTask io.github.cdklabs.projen.Task No description. postCompileTask io.github.cdklabs.projen.Task No description. preCompileTask io.github.cdklabs.projen.Task No description. projectBuild io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand java.lang.String The command to use in order to run the projen CLI. root io.github.cdklabs.projen.Project The root project. tasks io.github.cdklabs.projen.Tasks Project tasks. testTask io.github.cdklabs.projen.Task No description. defaultTask io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". initProject io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . parent io.github.cdklabs.projen.Project A parent project. projectType io.github.cdklabs.projen.ProjectType No description. autoApprove io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github io.github.cdklabs.projen.github.GitHub Access all github components. gitpod io.github.cdklabs.projen.Gitpod Access for Gitpod. vscode io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. compile io.github.cdklabs.projen.java.MavenCompile Compile component. distdir java.lang.String Maven artifact output directory. packaging io.github.cdklabs.projen.java.MavenPackaging Packaging component. pom io.github.cdklabs.projen.java.Pom API for managing pom.xml . junit io.github.cdklabs.projen.java.Junit JUnit component. projenrc io.github.cdklabs.projen.java.Projenrc Projenrc component. cdkConfig io.github.cdklabs.projen.awscdk.CdkConfig The cdk.json file. cdkDeps io.github.cdklabs.projen.awscdk.AwsCdkDeps CDK dependency management helper class. cdkTasks io.github.cdklabs.projen.awscdk.CdkTasks CDK tasks. mainClass java.lang.String The full name of the main class of the java app (package.Class). mainClassName java.lang.String The name of the Java class with the static main() method. mainPackage java.lang.String The name of the Java package that includes the main class. buildTask Required public Task getBuildTask (); Type: io.github.cdklabs.projen.Task commitGenerated Required public java . lang . Boolean getCommitGenerated (); Type: java.lang.Boolean Whether to commit the managed files by default. compileTask Required public Task getCompileTask (); Type: io.github.cdklabs.projen.Task components Required public java . util . List < Component > getComponents (); Type: java.util.List Returns all the components within this project. deps Required public Dependencies getDeps (); Type: io.github.cdklabs.projen.Dependencies Project dependencies. ejected Required public java . lang . Boolean getEjected (); Type: java.lang.Boolean Whether or not the project is being ejected. files Required public java . util . List < FileBase > getFiles (); Type: java.util.List All files in this project. gitattributes Required public GitAttributesFile getGitattributes (); Type: io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public IgnoreFile getGitignore (); Type: io.github.cdklabs.projen.IgnoreFile .gitignore. logger Required public Logger getLogger (); Type: io.github.cdklabs.projen.Logger Logging utilities. name Required public java . lang . String getName (); Type: java.lang.String Project name. outdir Required public java . lang . String getOutdir (); Type: java.lang.String Absolute output directory of this project. packageTask Required public Task getPackageTask (); Type: io.github.cdklabs.projen.Task postCompileTask Required public Task getPostCompileTask (); Type: io.github.cdklabs.projen.Task preCompileTask Required public Task getPreCompileTask (); Type: io.github.cdklabs.projen.Task projectBuild Required public ProjectBuild getProjectBuild (); Type: io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand Required public java . lang . String getProjenCommand (); Type: java.lang.String The command to use in order to run the projen CLI. root Required public Project getRoot (); Type: io.github.cdklabs.projen.Project The root project. tasks Required public Tasks getTasks (); Type: io.github.cdklabs.projen.Tasks Project tasks. testTask Required public Task getTestTask (); Type: io.github.cdklabs.projen.Task defaultTask Optional public Task getDefaultTask (); Type: io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public InitProject getInitProject (); Type: io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project A parent project. If undefined, this is the root project. projectType Required public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType autoApprove Optional public AutoApprove getAutoApprove (); Type: io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public DevContainer getDevContainer (); Type: io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public GitHub getGithub (); Type: io.github.cdklabs.projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public Gitpod getGitpod (); Type: io.github.cdklabs.projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public VsCode getVscode (); Type: io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. compile Required public MavenCompile getCompile (); Type: io.github.cdklabs.projen.java.MavenCompile Compile component. distdir Required public java . lang . String getDistdir (); Type: java.lang.String Maven artifact output directory. packaging Required public MavenPackaging getPackaging (); Type: io.github.cdklabs.projen.java.MavenPackaging Packaging component. pom Required public Pom getPom (); Type: io.github.cdklabs.projen.java.Pom API for managing pom.xml . junit Optional public Junit getJunit (); Type: io.github.cdklabs.projen.java.Junit JUnit component. projenrc Optional public Projenrc getProjenrc (); Type: io.github.cdklabs.projen.java.Projenrc Projenrc component. cdkConfig Required public CdkConfig getCdkConfig (); Type: io.github.cdklabs.projen.awscdk.CdkConfig The cdk.json file. cdkDeps Required public AwsCdkDeps getCdkDeps (); Type: io.github.cdklabs.projen.awscdk.AwsCdkDeps CDK dependency management helper class. cdkTasks Required public CdkTasks getCdkTasks (); Type: io.github.cdklabs.projen.awscdk.CdkTasks CDK tasks. mainClass Required public java . lang . String getMainClass (); Type: java.lang.String The full name of the main class of the java app (package.Class). mainClassName Required public java . lang . String getMainClassName (); Type: java.lang.String The name of the Java class with the static main() method. mainPackage Required public java . lang . String getMainPackage (); Type: java.lang.String The name of the Java package that includes the main class. Constants Name Type Description DEFAULT_TASK java.lang.String The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public java . lang . String getDefaultTask (); Type: java.lang.String The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. PDKPipelinePyProject Synthesizes a Python Project with a CI/CD pipeline. Initializers import software.aws.awsprototypingsdk.pipeline.PDKPipelinePyProject ; PDKPipelinePyProject . Builder . create () . name ( java . lang . String ) // .commitGenerated(java.lang.Boolean) // .gitOptions(GitOptions) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .renovatebot(java.lang.Boolean) // .renovatebotOptions(RenovatebotOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMerge(java.lang.Boolean) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenCredentials(GithubCredentials) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) . authorEmail ( java . lang . String ) . authorName ( java . lang . String ) . version ( java . lang . String ) // .classifiers(java.util.List<java.lang.String>) // .description(java.lang.String) // .homepage(java.lang.String) // .license(java.lang.String) // .packageName(java.lang.String) // .poetryOptions(PoetryPyprojectOptionsWithoutDeps) // .setupConfig(java.util.Map<java.lang.String, java.lang.Object>) . moduleName ( java . lang . String ) // .deps(java.util.List<java.lang.String>) // .devDeps(java.util.List<java.lang.String>) // .pip(java.lang.Boolean) // .poetry(java.lang.Boolean) // .projenrcJs(java.lang.Boolean) // .projenrcJsOptions(ProjenrcOptions) // .projenrcPython(java.lang.Boolean) // .projenrcPythonOptions(ProjenrcOptions) // .pytest(java.lang.Boolean) // .pytestOptions(PytestOptions) // .sample(java.lang.Boolean) // .setuptools(java.lang.Boolean) // .venv(java.lang.Boolean) // .venvOptions(VenvOptions) // .buildCommand(java.lang.String) // .cdkout(java.lang.String) // .context(java.util.Map<java.lang.String, java.lang.Object>) // .featureFlags(java.lang.Boolean) // .requireApproval(ApprovalLevel) // .watchExcludes(java.util.List<java.lang.String>) // .watchIncludes(java.util.List<java.lang.String>) . cdkVersion ( java . lang . String ) // .cdkAssert(java.lang.Boolean) // .cdkAssertions(java.lang.Boolean) // .cdkDependencies(java.util.List<java.lang.String>) // .cdkDependenciesAsDeps(java.lang.Boolean) // .cdkTestDependencies(java.util.List<java.lang.String>) // .cdkVersionPinning(java.lang.Boolean) // .constructsVersion(java.lang.String) // .appEntrypoint(java.lang.String) // .testdir(java.lang.String) . build (); Name Type Description name java.lang.String This is the name of your project. commitGenerated java.lang.Boolean Whether to commit the managed files by default. gitOptions io.github.cdklabs.projen.GitOptions Configuration options for git. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. renovatebot java.lang.Boolean Use renovatebot to handle dependency upgrades. renovatebotOptions io.github.cdklabs.projen.RenovatebotOptions Options for renovatebot. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge java.lang.Boolean Enable automatic merging on GitHub. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenCredentials io.github.cdklabs.projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. authorEmail java.lang.String Author's e-mail. authorName java.lang.String Author's name. version java.lang.String Version of the package. classifiers java.util.List A list of PyPI trove classifiers that describe the project. description java.lang.String A short description of the package. homepage java.lang.String A URL to the website of the project. license java.lang.String License of this package as an SPDX identifier. packageName java.lang.String Package name. poetryOptions io.github.cdklabs.projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setupConfig java.util.Map Additional fields to pass in the setup() function if using setuptools. moduleName java.lang.String Name of the python package as used in imports and filenames. deps java.util.List List of runtime dependencies for this project. devDeps java.util.List List of dev dependencies for this project. pip java.lang.Boolean Use pip with a requirements.txt file to track project dependencies. poetry java.lang.Boolean Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrcJs java.lang.Boolean Use projenrc in javascript. projenrcJsOptions io.github.cdklabs.projen.javascript.ProjenrcOptions Options related to projenrc in JavaScript. projenrcPython java.lang.Boolean Use projenrc in Python. projenrcPythonOptions io.github.cdklabs.projen.python.ProjenrcOptions Options related to projenrc in python. pytest java.lang.Boolean Include pytest tests. pytestOptions io.github.cdklabs.projen.python.PytestOptions pytest options. sample java.lang.Boolean Include sample code and test if the relevant directories don't exist. setuptools java.lang.Boolean Use setuptools with a setup.py script for packaging and publishing. venv java.lang.Boolean Use venv to manage a virtual environment for installing dependencies inside. venvOptions io.github.cdklabs.projen.python.VenvOptions Venv options. buildCommand java.lang.String A command to execute before synthesis. cdkout java.lang.String cdk.out directory. context java.util.Map Additional context to include in cdk.json . featureFlags java.lang.Boolean Include all feature flags in cdk.json. requireApproval io.github.cdklabs.projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes java.util.List Glob patterns to exclude from cdk watch . watchIncludes java.util.List Glob patterns to include in cdk watch . cdkVersion java.lang.String Minimum version of the AWS CDK to depend on. cdkAssert java.lang.Boolean Warning: NodeJS only. cdkAssertions java.lang.Boolean Install the assertions library? cdkDependencies java.util.List Which AWS CDKv1 modules this project requires. cdkDependenciesAsDeps java.lang.Boolean If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdkTestDependencies java.util.List AWS CDK modules required for testing. cdkVersionPinning java.lang.Boolean Use pinned version instead of caret version for CDK. constructsVersion java.lang.String Minimum version of the constructs library to depend on. appEntrypoint java.lang.String The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). testdir java.lang.String Python sources directory. name Required Type: java.lang.String Default: $BASEDIR This is the name of your project. commitGenerated Optional Type: java.lang.Boolean Default: true Whether to commit the managed files by default. gitOptions Optional Type: io.github.cdklabs.projen.GitOptions Configuration options for git. logging Optional Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional Type: java.lang.Boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional Type: io.github.cdklabs.projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional Type: java.lang.Boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional Type: io.github.cdklabs.projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional Type: java.lang.Boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. authorEmail Required Type: java.lang.String Default: $GIT_USER_EMAIL Author's e-mail. authorName Required Type: java.lang.String Default: $GIT_USER_NAME Author's name. version Required Type: java.lang.String Default: \"0.1.0\" Version of the package. classifiers Optional Type: java.util.List A list of PyPI trove classifiers that describe the project. https://pypi.org/classifiers/ description Optional Type: java.lang.String A short description of the package. homepage Optional Type: java.lang.String A URL to the website of the project. license Optional Type: java.lang.String License of this package as an SPDX identifier. packageName Optional Type: java.lang.String Package name. poetryOptions Optional Type: io.github.cdklabs.projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setupConfig Optional Type: java.util.Map Additional fields to pass in the setup() function if using setuptools. moduleName Required Type: java.lang.String Default: $PYTHON_MODULE_NAME Name of the python package as used in imports and filenames. Must only consist of alphanumeric characters and underscores. deps Optional Type: java.util.List Default: [] List of runtime dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDependency() . devDeps Optional Type: java.util.List Default: [] List of dev dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDevDependency() . pip Optional Type: java.lang.Boolean Default: true, unless poetry is true, then false Use pip with a requirements.txt file to track project dependencies. poetry Optional Type: java.lang.Boolean Default: false Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. This feature is incompatible with pip, setuptools, or venv. If you set this option to true , then pip, setuptools, and venv must be set to false . projenrcJs Optional Type: java.lang.Boolean Default: false Use projenrc in javascript. This will install projen as a JavaScript dependency and add a synth task which will run .projenrc.js . projenrcJsOptions Optional Type: io.github.cdklabs.projen.javascript.ProjenrcOptions Default: default options Options related to projenrc in JavaScript. projenrcPython Optional Type: java.lang.Boolean Default: true Use projenrc in Python. This will install projen as a Python dependency and add a synth task which will run .projenrc.py . projenrcPythonOptions Optional Type: io.github.cdklabs.projen.python.ProjenrcOptions Default: default options Options related to projenrc in python. pytest Optional Type: java.lang.Boolean Default: true Include pytest tests. pytestOptions Optional Type: io.github.cdklabs.projen.python.PytestOptions Default: defaults pytest options. sample Optional Type: java.lang.Boolean Default: true Include sample code and test if the relevant directories don't exist. setuptools Optional Type: java.lang.Boolean Default: true, unless poetry is true, then false Use setuptools with a setup.py script for packaging and publishing. venv Optional Type: java.lang.Boolean Default: true, unless poetry is true, then false Use venv to manage a virtual environment for installing dependencies inside. venvOptions Optional Type: io.github.cdklabs.projen.python.VenvOptions Default: defaults Venv options. buildCommand Optional Type: java.lang.String Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment. cdkout Optional Type: java.lang.String Default: \"cdk.out\" cdk.out directory. context Optional Type: java.util.Map Default: no additional context Additional context to include in cdk.json . featureFlags Optional Type: java.lang.Boolean Default: true Include all feature flags in cdk.json. requireApproval Optional Type: io.github.cdklabs.projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes Optional Type: java.util.List Default: [] Glob patterns to exclude from cdk watch . watchIncludes Optional Type: java.util.List Default: [] Glob patterns to include in cdk watch . cdkVersion Required Type: java.lang.String Default: \"2.1.0\" Minimum version of the AWS CDK to depend on. ~~ cdkAssert ~~ Optional Deprecated: The Type: java.lang.Boolean Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library? cdkAssertions Optional Type: java.lang.Boolean Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib' ~~ cdkDependencies ~~ Optional Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) Type: java.util.List Which AWS CDKv1 modules this project requires. ~~ cdkDependenciesAsDeps ~~ Optional Deprecated: Not supported in CDK v2. Type: java.lang.Boolean Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects ~~ cdkTestDependencies ~~ Optional Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead Type: java.util.List AWS CDK modules required for testing. cdkVersionPinning Optional Type: java.lang.Boolean Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes. constructsVersion Optional Type: java.lang.String Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on. appEntrypoint Optional Type: java.lang.String Default: \"app.py\" The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). testdir Optional Type: java.lang.String Default: \"tests\" Python sources directory. Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. tryRemoveFile Finds a file at the specified relative path within this project and removes it. addDependency Adds a runtime dependency. addDevDependency Adds a dev dependency. addExcludeFromCleanup public void addExcludeFromCleanup ( java . lang . String globs ) Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: java.lang.String The glob patterns to match. addGitIgnore public void addGitIgnore ( java . lang . String pattern ) Adds a .gitignore pattern. pattern Required Type: java.lang.String The glob pattern to ignore. addPackageIgnore public void addPackageIgnore ( java . lang . String _pattern ) Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . _pattern Required Type: java.lang.String The glob pattern to exclude. addTask public Task addTask ( java . lang . String name ) public Task addTask ( java . lang . String name , TaskOptions props ) Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: java.lang.String The task name to add. props Optional Type: io.github.cdklabs.projen.TaskOptions Task properties. ~~ addTip ~~ public void addTip ( java . lang . String message ) Prints a \"tip\" message during synthesis. message Required Type: java.lang.String The message. annotateGenerated public void annotateGenerated ( java . lang . String glob ) Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: java.lang.String the glob pattern to match (could be a file path). postSynthesize public void postSynthesize () Called after all components are synthesized. Order is not guaranteed. preSynthesize public void preSynthesize () Called before all components are synthesized. removeTask public Task removeTask ( java . lang . String name ) Removes a task from a project. name Required Type: java.lang.String The name of the task to remove. runTaskCommand public java . lang . String runTaskCommand ( Task task ) Returns the shell command to execute in order to run a task. By default, this is npx projen@<version> <task> task Required Type: io.github.cdklabs.projen.Task The task for which the command is required. synth public void synth () Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" tryFindFile public FileBase tryFindFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public JsonFile tryFindJsonFile ( java . lang . String filePath ) Finds a json file by name. filePath Required Type: java.lang.String The file path. tryFindObjectFile public ObjectFile tryFindObjectFile ( java . lang . String filePath ) Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: java.lang.String The file path. tryRemoveFile public FileBase tryRemoveFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and removes it. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. addDependency public void addDependency ( java . lang . String spec ) Adds a runtime dependency. spec Required Type: java.lang.String Format <module>@<semver> . addDevDependency public void addDevDependency ( java . lang . String spec ) Adds a dev dependency. spec Required Type: java.lang.String Format <module>@<semver> . Properties Name Type Description buildTask io.github.cdklabs.projen.Task No description. commitGenerated java.lang.Boolean Whether to commit the managed files by default. compileTask io.github.cdklabs.projen.Task No description. components java.util.List Returns all the components within this project. deps io.github.cdklabs.projen.Dependencies Project dependencies. ejected java.lang.Boolean Whether or not the project is being ejected. files java.util.List All files in this project. gitattributes io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore io.github.cdklabs.projen.IgnoreFile .gitignore. logger io.github.cdklabs.projen.Logger Logging utilities. name java.lang.String Project name. outdir java.lang.String Absolute output directory of this project. packageTask io.github.cdklabs.projen.Task No description. postCompileTask io.github.cdklabs.projen.Task No description. preCompileTask io.github.cdklabs.projen.Task No description. projectBuild io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand java.lang.String The command to use in order to run the projen CLI. root io.github.cdklabs.projen.Project The root project. tasks io.github.cdklabs.projen.Tasks Project tasks. testTask io.github.cdklabs.projen.Task No description. defaultTask io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". initProject io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . parent io.github.cdklabs.projen.Project A parent project. projectType io.github.cdklabs.projen.ProjectType No description. autoApprove io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github io.github.cdklabs.projen.github.GitHub Access all github components. gitpod io.github.cdklabs.projen.Gitpod Access for Gitpod. vscode io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. depsManager io.github.cdklabs.projen.python.IPythonDeps API for managing dependencies. envManager io.github.cdklabs.projen.python.IPythonEnv API for mangaging the Python runtime environment. moduleName java.lang.String Python module name (the project name, with any hyphens or periods replaced with underscores). version java.lang.String Version of the package for distribution (should follow semver). packagingManager io.github.cdklabs.projen.python.IPythonPackaging API for managing packaging the project as a library. pytest io.github.cdklabs.projen.python.Pytest Pytest component. appEntrypoint java.lang.String The CDK app entrypoint. cdkConfig io.github.cdklabs.projen.awscdk.CdkConfig cdk.json configuration. cdkDeps io.github.cdklabs.projen.awscdk.AwsCdkDeps No description. cdkTasks io.github.cdklabs.projen.awscdk.CdkTasks Common CDK tasks. cdkVersion java.lang.String The CDK version this app is using. testdir java.lang.String The directory in which the python tests reside. buildTask Required public Task getBuildTask (); Type: io.github.cdklabs.projen.Task commitGenerated Required public java . lang . Boolean getCommitGenerated (); Type: java.lang.Boolean Whether to commit the managed files by default. compileTask Required public Task getCompileTask (); Type: io.github.cdklabs.projen.Task components Required public java . util . List < Component > getComponents (); Type: java.util.List Returns all the components within this project. deps Required public Dependencies getDeps (); Type: io.github.cdklabs.projen.Dependencies Project dependencies. ejected Required public java . lang . Boolean getEjected (); Type: java.lang.Boolean Whether or not the project is being ejected. files Required public java . util . List < FileBase > getFiles (); Type: java.util.List All files in this project. gitattributes Required public GitAttributesFile getGitattributes (); Type: io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public IgnoreFile getGitignore (); Type: io.github.cdklabs.projen.IgnoreFile .gitignore. logger Required public Logger getLogger (); Type: io.github.cdklabs.projen.Logger Logging utilities. name Required public java . lang . String getName (); Type: java.lang.String Project name. outdir Required public java . lang . String getOutdir (); Type: java.lang.String Absolute output directory of this project. packageTask Required public Task getPackageTask (); Type: io.github.cdklabs.projen.Task postCompileTask Required public Task getPostCompileTask (); Type: io.github.cdklabs.projen.Task preCompileTask Required public Task getPreCompileTask (); Type: io.github.cdklabs.projen.Task projectBuild Required public ProjectBuild getProjectBuild (); Type: io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand Required public java . lang . String getProjenCommand (); Type: java.lang.String The command to use in order to run the projen CLI. root Required public Project getRoot (); Type: io.github.cdklabs.projen.Project The root project. tasks Required public Tasks getTasks (); Type: io.github.cdklabs.projen.Tasks Project tasks. testTask Required public Task getTestTask (); Type: io.github.cdklabs.projen.Task defaultTask Optional public Task getDefaultTask (); Type: io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public InitProject getInitProject (); Type: io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project A parent project. If undefined, this is the root project. projectType Required public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType autoApprove Optional public AutoApprove getAutoApprove (); Type: io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public DevContainer getDevContainer (); Type: io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public GitHub getGithub (); Type: io.github.cdklabs.projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public Gitpod getGitpod (); Type: io.github.cdklabs.projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public VsCode getVscode (); Type: io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. depsManager Required public IPythonDeps getDepsManager (); Type: io.github.cdklabs.projen.python.IPythonDeps API for managing dependencies. envManager Required public IPythonEnv getEnvManager (); Type: io.github.cdklabs.projen.python.IPythonEnv API for mangaging the Python runtime environment. moduleName Required public java . lang . String getModuleName (); Type: java.lang.String Python module name (the project name, with any hyphens or periods replaced with underscores). version Required public java . lang . String getVersion (); Type: java.lang.String Version of the package for distribution (should follow semver). packagingManager Optional public IPythonPackaging getPackagingManager (); Type: io.github.cdklabs.projen.python.IPythonPackaging API for managing packaging the project as a library. Only applies when the projectType is LIB. pytest Optional public Pytest getPytest (); Type: io.github.cdklabs.projen.python.Pytest Pytest component. appEntrypoint Required public java . lang . String getAppEntrypoint (); Type: java.lang.String The CDK app entrypoint. cdkConfig Required public CdkConfig getCdkConfig (); Type: io.github.cdklabs.projen.awscdk.CdkConfig cdk.json configuration. cdkDeps Required public AwsCdkDeps getCdkDeps (); Type: io.github.cdklabs.projen.awscdk.AwsCdkDeps cdkTasks Required public CdkTasks getCdkTasks (); Type: io.github.cdklabs.projen.awscdk.CdkTasks Common CDK tasks. cdkVersion Required public java . lang . String getCdkVersion (); Type: java.lang.String The CDK version this app is using. testdir Required public java . lang . String getTestdir (); Type: java.lang.String The directory in which the python tests reside. Constants Name Type Description DEFAULT_TASK java.lang.String The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public java . lang . String getDefaultTask (); Type: java.lang.String The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. PDKPipelineTsProject Synthesizes a Typescript Project with a CI/CD pipeline. Initializers import software.aws.awsprototypingsdk.pipeline.PDKPipelineTsProject ; PDKPipelineTsProject . Builder . create () . name ( java . lang . String ) // .commitGenerated(java.lang.Boolean) // .gitOptions(GitOptions) // .logging(LoggerOptions) // .outdir(java.lang.String) // .parent(Project) // .projenCommand(java.lang.String) // .projenrcJson(java.lang.Boolean) // .projenrcJsonOptions(ProjenrcOptions) // .renovatebot(java.lang.Boolean) // .renovatebotOptions(RenovatebotOptions) // .autoApproveOptions(AutoApproveOptions) // .autoMerge(java.lang.Boolean) // .autoMergeOptions(AutoMergeOptions) // .clobber(java.lang.Boolean) // .devContainer(java.lang.Boolean) // .github(java.lang.Boolean) // .githubOptions(GitHubOptions) // .gitpod(java.lang.Boolean) // .mergify(java.lang.Boolean) // .mergifyOptions(MergifyOptions) // .projectType(ProjectType) // .projenCredentials(GithubCredentials) // .projenTokenSecret(java.lang.String) // .readme(SampleReadmeProps) // .stale(java.lang.Boolean) // .staleOptions(StaleOptions) // .vscode(java.lang.Boolean) // .allowLibraryDependencies(java.lang.Boolean) // .authorEmail(java.lang.String) // .authorName(java.lang.String) // .authorOrganization(java.lang.Boolean) // .authorUrl(java.lang.String) // .autoDetectBin(java.lang.Boolean) // .bin(java.util.Map<java.lang.String, java.lang.String>) // .bugsEmail(java.lang.String) // .bugsUrl(java.lang.String) // .bundledDeps(java.util.List<java.lang.String>) // .codeArtifactOptions(CodeArtifactOptions) // .deps(java.util.List<java.lang.String>) // .description(java.lang.String) // .devDeps(java.util.List<java.lang.String>) // .entrypoint(java.lang.String) // .homepage(java.lang.String) // .keywords(java.util.List<java.lang.String>) // .license(java.lang.String) // .licensed(java.lang.Boolean) // .maxNodeVersion(java.lang.String) // .minNodeVersion(java.lang.String) // .npmAccess(NpmAccess) // .npmRegistry(java.lang.String) // .npmRegistryUrl(java.lang.String) // .npmTokenSecret(java.lang.String) // .packageManager(NodePackageManager) // .packageName(java.lang.String) // .peerDependencyOptions(PeerDependencyOptions) // .peerDeps(java.util.List<java.lang.String>) // .pnpmVersion(java.lang.String) // .repository(java.lang.String) // .repositoryDirectory(java.lang.String) // .scopedPackagesOptions(java.util.List<ScopedPackagesOptions>) // .scripts(java.util.Map<java.lang.String, java.lang.String>) // .stability(java.lang.String) // .jsiiReleaseVersion(java.lang.String) // .majorVersion(java.lang.Number) // .minMajorVersion(java.lang.Number) // .npmDistTag(java.lang.String) // .postBuildSteps(java.util.List<JobStep>) // .prerelease(java.lang.String) // .publishDryRun(java.lang.Boolean) // .publishTasks(java.lang.Boolean) // .releaseBranches(java.util.Map<java.lang.String, BranchOptions>) // .releaseEveryCommit(java.lang.Boolean) // .releaseFailureIssue(java.lang.Boolean) // .releaseFailureIssueLabel(java.lang.String) // .releaseSchedule(java.lang.String) // .releaseTagPrefix(java.lang.String) // .releaseTrigger(ReleaseTrigger) // .releaseWorkflowName(java.lang.String) // .releaseWorkflowSetupSteps(java.util.List<JobStep>) // .versionrcOptions(java.util.Map<java.lang.String, java.lang.Object>) // .workflowContainerImage(java.lang.String) // .workflowRunsOn(java.util.List<java.lang.String>) . defaultReleaseBranch ( java . lang . String ) // .artifactsDirectory(java.lang.String) // .autoApproveUpgrades(java.lang.Boolean) // .buildWorkflow(java.lang.Boolean) // .buildWorkflowTriggers(Triggers) // .bundlerOptions(BundlerOptions) // .codeCov(java.lang.Boolean) // .codeCovTokenSecret(java.lang.String) // .copyrightOwner(java.lang.String) // .copyrightPeriod(java.lang.String) // .dependabot(java.lang.Boolean) // .dependabotOptions(DependabotOptions) // .depsUpgrade(java.lang.Boolean) // .depsUpgradeOptions(UpgradeDependenciesOptions) // .gitignore(java.util.List<java.lang.String>) // .jest(java.lang.Boolean) // .jestOptions(JestOptions) // .mutableBuild(java.lang.Boolean) // .npmignore(java.util.List<java.lang.String>) // .npmignoreEnabled(java.lang.Boolean) // .package(java.lang.Boolean) // .prettier(java.lang.Boolean) // .prettierOptions(PrettierOptions) // .projenDevDependency(java.lang.Boolean) // .projenrcJs(java.lang.Boolean) // .projenrcJsOptions(ProjenrcOptions) // .projenVersion(java.lang.String) // .pullRequestTemplate(java.lang.Boolean) // .pullRequestTemplateContents(java.util.List<java.lang.String>) // .release(java.lang.Boolean) // .releaseToNpm(java.lang.Boolean) // .releaseWorkflow(java.lang.Boolean) // .workflowBootstrapSteps(java.util.List<JobStep>) // .workflowGitIdentity(GitIdentity) // .workflowNodeVersion(java.lang.String) // .disableTsconfig(java.lang.Boolean) // .docgen(java.lang.Boolean) // .docsDirectory(java.lang.String) // .entrypointTypes(java.lang.String) // .eslint(java.lang.Boolean) // .eslintOptions(EslintOptions) // .libdir(java.lang.String) // .projenrcTs(java.lang.Boolean) // .projenrcTsOptions(ProjenrcOptions) // .sampleCode(java.lang.Boolean) // .srcdir(java.lang.String) // .testdir(java.lang.String) // .tsconfig(TypescriptConfigOptions) // .tsconfigDev(TypescriptConfigOptions) // .tsconfigDevFile(java.lang.String) // .typescriptVersion(java.lang.String) // .buildCommand(java.lang.String) // .cdkout(java.lang.String) // .context(java.util.Map<java.lang.String, java.lang.Object>) // .featureFlags(java.lang.Boolean) // .requireApproval(ApprovalLevel) // .watchExcludes(java.util.List<java.lang.String>) // .watchIncludes(java.util.List<java.lang.String>) . cdkVersion ( java . lang . String ) // .cdkAssert(java.lang.Boolean) // .cdkAssertions(java.lang.Boolean) // .cdkDependencies(java.util.List<java.lang.String>) // .cdkDependenciesAsDeps(java.lang.Boolean) // .cdkTestDependencies(java.util.List<java.lang.String>) // .cdkVersionPinning(java.lang.Boolean) // .constructsVersion(java.lang.String) // .appEntrypoint(java.lang.String) // .edgeLambdaAutoDiscover(java.lang.Boolean) // .integrationTestAutoDiscover(java.lang.Boolean) // .lambdaAutoDiscover(java.lang.Boolean) // .lambdaExtensionAutoDiscover(java.lang.Boolean) // .lambdaOptions(LambdaFunctionCommonOptions) . build (); Name Type Description name java.lang.String This is the name of your project. commitGenerated java.lang.Boolean Whether to commit the managed files by default. gitOptions io.github.cdklabs.projen.GitOptions Configuration options for git. logging io.github.cdklabs.projen.LoggerOptions Configure logging options such as verbosity. outdir java.lang.String The root directory of the project. parent io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand java.lang.String The shell command to use in order to run the projen CLI. projenrcJson java.lang.Boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions io.github.cdklabs.projen.ProjenrcOptions Options for .projenrc.json. renovatebot java.lang.Boolean Use renovatebot to handle dependency upgrades. renovatebotOptions io.github.cdklabs.projen.RenovatebotOptions Options for renovatebot. autoApproveOptions io.github.cdklabs.projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge java.lang.Boolean Enable automatic merging on GitHub. autoMergeOptions io.github.cdklabs.projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber java.lang.Boolean Add a clobber task which resets the repo to origin. devContainer java.lang.Boolean Add a VSCode development environment (used for GitHub Codespaces). github java.lang.Boolean Enable GitHub integration. githubOptions io.github.cdklabs.projen.github.GitHubOptions Options for GitHub integration. gitpod java.lang.Boolean Add a Gitpod development environment. mergify java.lang.Boolean Whether mergify should be enabled on this repository or not. mergifyOptions io.github.cdklabs.projen.github.MergifyOptions Options for mergify. projectType io.github.cdklabs.projen.ProjectType Which type of project this is (library/app). projenCredentials io.github.cdklabs.projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret java.lang.String The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme io.github.cdklabs.projen.SampleReadmeProps The README setup. stale java.lang.Boolean Auto-close of stale issues and pull request. staleOptions io.github.cdklabs.projen.github.StaleOptions Auto-close stale issues and pull requests. vscode java.lang.Boolean Enable VSCode integration. allowLibraryDependencies java.lang.Boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail java.lang.String Author's e-mail. authorName java.lang.String Author's name. authorOrganization java.lang.Boolean Is the author an organization. authorUrl java.lang.String Author's URL / Website. autoDetectBin java.lang.Boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin java.util.Map Binary programs vended with your module. bugsEmail java.lang.String The email address to which issues should be reported. bugsUrl java.lang.String The url to your project's issue tracker. bundledDeps java.util.List List of dependencies to bundle into this module. codeArtifactOptions io.github.cdklabs.projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps java.util.List Runtime dependencies of this module. description java.lang.String The description is just a string that helps people understand the purpose of the package. devDeps java.util.List Build dependencies for this module. entrypoint java.lang.String Module entrypoint ( main in package.json ). homepage java.lang.String Package's Homepage / Website. keywords java.util.List Keywords to include in package.json . license java.lang.String License's SPDX identifier. licensed java.lang.Boolean Indicates if a license should be added. maxNodeVersion java.lang.String Minimum node.js version to require via engines (inclusive). minNodeVersion java.lang.String Minimum Node.js version to require via package.json engines (inclusive). npmAccess io.github.cdklabs.projen.javascript.NpmAccess Access level of the npm package. npmRegistry java.lang.String The host name of the npm registry to publish to. npmRegistryUrl java.lang.String The base URL of the npm package registry. npmTokenSecret java.lang.String GitHub secret which contains the NPM token to use when publishing packages. packageManager io.github.cdklabs.projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName java.lang.String The \"name\" in package.json. peerDependencyOptions io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps java.util.List Peer dependencies for this module. pnpmVersion java.lang.String The version of PNPM to use if using PNPM as a package manager. repository java.lang.String The repository is the location where the actual code for your package lives. repositoryDirectory java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions java.util.List Options for privately hosted scoped packages. scripts java.util.Map npm scripts to include. stability java.lang.String Package's Stability. jsiiReleaseVersion java.lang.String Version requirement of publib which is used to publish modules to npm. majorVersion java.lang.Number Major version to release from the default branch. minMajorVersion java.lang.Number Minimal Major version to release. npmDistTag java.lang.String The npmDistTag to use when publishing from the default branch. postBuildSteps java.util.List Steps to execute after build as part of the release workflow. prerelease java.lang.String Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun java.lang.Boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks java.lang.Boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches java.util.Map Defines additional release branches. releaseEveryCommit java.lang.Boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue java.lang.Boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel java.lang.String The label to apply to issues indicating publish failures. releaseSchedule java.lang.String CRON schedule to trigger new releases. releaseTagPrefix java.lang.String Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger io.github.cdklabs.projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName java.lang.String The name of the default release workflow. releaseWorkflowSetupSteps java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions java.util.Map Custom configuration used when creating changelog with standard-version package. workflowContainerImage java.lang.String Container image to use for GitHub workflows. workflowRunsOn java.util.List Github Runner selection labels. defaultReleaseBranch java.lang.String The name of the main release branch. artifactsDirectory java.lang.String A directory which will contain build artifacts. autoApproveUpgrades java.lang.Boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow java.lang.Boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers io.github.cdklabs.projen.github.workflows.Triggers Build workflow triggers. bundlerOptions io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov java.lang.Boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret java.lang.String Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner java.lang.String License copyright owner. copyrightPeriod java.lang.String The copyright years to put in the LICENSE file. dependabot java.lang.Boolean Use dependabot to handle dependency upgrades. dependabotOptions io.github.cdklabs.projen.github.DependabotOptions Options for dependabot. depsUpgrade java.lang.Boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore java.util.List Additional entries to .gitignore. jest java.lang.Boolean Setup jest unit tests. jestOptions io.github.cdklabs.projen.javascript.JestOptions Jest options. mutableBuild java.lang.Boolean Automatically update files modified during builds to pull-request branches. npmignore java.util.List Additional entries to .npmignore. npmignoreEnabled java.lang.Boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package java.lang.Boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier java.lang.Boolean Setup prettier. prettierOptions io.github.cdklabs.projen.javascript.PrettierOptions Prettier options. projenDevDependency java.lang.Boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs java.lang.Boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions io.github.cdklabs.projen.javascript.ProjenrcOptions Options for .projenrc.js. projenVersion java.lang.String Version of projen to install. pullRequestTemplate java.lang.Boolean Include a GitHub pull request template. pullRequestTemplateContents java.util.List The contents of the pull request template. release java.lang.Boolean Add release management to this project. releaseToNpm java.lang.Boolean Automatically release to npm when new versions are introduced. releaseWorkflow java.lang.Boolean DEPRECATED: renamed to release . workflowBootstrapSteps java.util.List Workflow steps to use in order to bootstrap this repo. workflowGitIdentity io.github.cdklabs.projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion java.lang.String The node version to use in GitHub workflows. disableTsconfig java.lang.Boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen java.lang.Boolean Docgen by Typedoc. docsDirectory java.lang.String Docs directory. entrypointTypes java.lang.String The .d.ts file that includes the type declarations for this module. eslint java.lang.Boolean Setup eslint. eslintOptions io.github.cdklabs.projen.javascript.EslintOptions Eslint options. libdir java.lang.String Typescript artifacts output directory. projenrcTs java.lang.Boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode java.lang.Boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir java.lang.String Typescript sources directory. testdir java.lang.String Jest tests directory. Tests files should be named xxx.test.ts . tsconfig io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev io.github.cdklabs.projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile java.lang.String The name of the development tsconfig.json file. typescriptVersion java.lang.String TypeScript version to use. buildCommand java.lang.String A command to execute before synthesis. cdkout java.lang.String cdk.out directory. context java.util.Map Additional context to include in cdk.json . featureFlags java.lang.Boolean Include all feature flags in cdk.json. requireApproval io.github.cdklabs.projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes java.util.List Glob patterns to exclude from cdk watch . watchIncludes java.util.List Glob patterns to include in cdk watch . cdkVersion java.lang.String Minimum version of the AWS CDK to depend on. cdkAssert java.lang.Boolean Warning: NodeJS only. cdkAssertions java.lang.Boolean Install the assertions library? cdkDependencies java.util.List Which AWS CDKv1 modules this project requires. cdkDependenciesAsDeps java.lang.Boolean If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdkTestDependencies java.util.List AWS CDK modules required for testing. cdkVersionPinning java.lang.Boolean Use pinned version instead of caret version for CDK. constructsVersion java.lang.String Minimum version of the constructs library to depend on. appEntrypoint java.lang.String The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). edgeLambdaAutoDiscover java.lang.Boolean Automatically adds an cloudfront.experimental.EdgeFunction for each .edge-lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. integrationTestAutoDiscover java.lang.Boolean Automatically discovers and creates integration tests for each .integ.ts file in under your test directory. lambdaAutoDiscover java.lang.Boolean Automatically adds an awscdk.LambdaFunction for each .lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambdaExtensionAutoDiscover java.lang.Boolean Automatically adds an awscdk.LambdaExtension for each .lambda-extension.ts entrypoint in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambdaOptions io.github.cdklabs.projen.awscdk.LambdaFunctionCommonOptions Common options for all AWS Lambda functions. name Required Type: java.lang.String Default: $BASEDIR This is the name of your project. commitGenerated Optional Type: java.lang.Boolean Default: true Whether to commit the managed files by default. gitOptions Optional Type: io.github.cdklabs.projen.GitOptions Configuration options for git. logging Optional Type: io.github.cdklabs.projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: java.lang.String Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: io.github.cdklabs.projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional Type: java.lang.String Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional Type: java.lang.Boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional Type: io.github.cdklabs.projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional Type: java.lang.Boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional Type: io.github.cdklabs.projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional Type: io.github.cdklabs.projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional Type: java.lang.Boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional Type: io.github.cdklabs.projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional Type: java.lang.Boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional Type: java.lang.Boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: java.lang.Boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional Type: io.github.cdklabs.projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: java.lang.Boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: java.lang.Boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: io.github.cdklabs.projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level Type: io.github.cdklabs.projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional Type: io.github.cdklabs.projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials Type: java.lang.String Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: io.github.cdklabs.projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional Type: java.lang.Boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional Type: io.github.cdklabs.projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: java.lang.Boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allowLibraryDependencies Optional Type: java.lang.Boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. authorEmail Optional Type: java.lang.String Author's e-mail. authorName Optional Type: java.lang.String Author's name. authorOrganization Optional Type: java.lang.Boolean Is the author an organization. authorUrl Optional Type: java.lang.String Author's URL / Website. autoDetectBin Optional Type: java.lang.Boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional Type: java.util.Map Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugsEmail Optional Type: java.lang.String The email address to which issues should be reported. bugsUrl Optional Type: java.lang.String The url to your project's issue tracker. bundledDeps Optional Type: java.util.List List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. codeArtifactOptions Optional Type: io.github.cdklabs.projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional Type: java.util.List Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ ' express ' , ' lodash ' , ' foo @ ^ 2 ' ] description Optional Type: java.lang.String The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description devDeps Optional Type: java.util.List Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ ' typescript ' , ' @types / express ' ] entrypoint Optional Type: java.lang.String Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional Type: java.lang.String Package's Homepage / Website. keywords Optional Type: java.util.List Keywords to include in package.json . license Optional Type: java.lang.String Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional Type: java.lang.Boolean Default: true Indicates if a license should be added. maxNodeVersion Optional Type: java.lang.String Default: no max Minimum node.js version to require via engines (inclusive). minNodeVersion Optional Type: java.lang.String Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npmAccess Optional Type: io.github.cdklabs.projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npmRegistry ~~ Optional Deprecated: use npmRegistryUrl instead Type: java.lang.String The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npmRegistryUrl Optional Type: java.lang.String Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npmTokenSecret Optional Type: java.lang.String Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. packageManager Optional Type: io.github.cdklabs.projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. packageName Optional Type: java.lang.String Default: defaults to project name The \"name\" in package.json. peerDependencyOptions Optional Type: io.github.cdklabs.projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps Optional Type: java.util.List Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. pnpmVersion Optional Type: java.lang.String Default: \"7\" The version of PNPM to use if using PNPM as a package manager. repository Optional Type: java.lang.String The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repositoryDirectory Optional Type: java.lang.String If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions Optional Type: java.util.List Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional Type: java.util.Map Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional Type: java.lang.String Package's Stability. jsiiReleaseVersion Optional Type: java.lang.String Default: \"latest\" Version requirement of publib which is used to publish modules to npm. majorVersion Optional Type: java.lang.Number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. minMajorVersion Optional Type: java.lang.Number Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npmDistTag Optional Type: java.lang.String Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. postBuildSteps Optional Type: java.util.List Default: [] Steps to execute after build as part of the release workflow. prerelease Optional Type: java.lang.String Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun Optional Type: java.lang.Boolean Default: false Instead of actually publishing to package managers, just print the publishing command. publishTasks Optional Type: java.lang.Boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. releaseBranches Optional Type: java.util.Map Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ releaseEveryCommit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead Type: java.lang.Boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue Optional Type: java.lang.Boolean Default: false Create a github issue on every failed publishing task. releaseFailureIssueLabel Optional Type: java.lang.String Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ releaseSchedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead Type: java.lang.String Default: no scheduled releases CRON schedule to trigger new releases. releaseTagPrefix Optional Type: java.lang.String Default: \"v\" Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. releaseTrigger Optional Type: io.github.cdklabs.projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. releaseWorkflowName Optional Type: java.lang.String Default: \"Release\" The name of the default release workflow. releaseWorkflowSetupSteps Optional Type: java.util.List A set of workflow steps to execute in order to setup the workflow container. versionrcOptions Optional Type: java.util.Map Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflowContainerImage Optional Type: java.lang.String Default: default image Container image to use for GitHub workflows. workflowRunsOn Optional Type: java.util.List Default: [\"ubuntu-latest\"] Github Runner selection labels. defaultReleaseBranch Required Type: java.lang.String Default: \"main\" The name of the main release branch. artifactsDirectory Optional Type: java.lang.String Default: \"dist\" A directory which will contain build artifacts. autoApproveUpgrades Optional Type: java.lang.Boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. buildWorkflow Optional Type: java.lang.Boolean Default: true if not a subproject Define a GitHub workflow for building PRs. buildWorkflowTriggers Optional Type: io.github.cdklabs.projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundlerOptions Optional Type: io.github.cdklabs.projen.javascript.BundlerOptions Options for Bundler . codeCov Optional Type: java.lang.Boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret Optional Type: java.lang.String Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner Optional Type: java.lang.String Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyrightPeriod Optional Type: java.lang.String Default: current year The copyright years to put in the LICENSE file. dependabot Optional Type: java.lang.Boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabotOptions Optional Type: io.github.cdklabs.projen.github.DependabotOptions Default: default options Options for dependabot. depsUpgrade Optional Type: java.lang.Boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . depsUpgradeOptions Optional Type: io.github.cdklabs.projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional Type: java.util.List Additional entries to .gitignore. jest Optional Type: java.lang.Boolean Default: true Setup jest unit tests. jestOptions Optional Type: io.github.cdklabs.projen.javascript.JestOptions Default: default options Jest options. mutableBuild Optional Type: java.lang.Boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore Type: java.util.List Additional entries to .npmignore. npmignoreEnabled Optional Type: java.lang.Boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional Type: java.lang.Boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional Type: java.lang.Boolean Default: false Setup prettier. prettierOptions Optional Type: io.github.cdklabs.projen.javascript.PrettierOptions Default: default options Prettier options. projenDevDependency Optional Type: java.lang.Boolean Default: true Indicates of \"projen\" should be installed as a devDependency. projenrcJs Optional Type: java.lang.Boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions Optional Type: io.github.cdklabs.projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projenVersion Optional Type: java.lang.String Default: Defaults to the latest version. Version of projen to install. pullRequestTemplate Optional Type: java.lang.Boolean Default: true Include a GitHub pull request template. pullRequestTemplateContents Optional Type: java.util.List Default: default content The contents of the pull request template. release Optional Type: java.lang.Boolean Default: true (false for subprojects) Add release management to this project. releaseToNpm Optional Type: java.lang.Boolean Default: false Automatically release to npm when new versions are introduced. ~~ releaseWorkflow ~~ Optional Deprecated: see release . Type: java.lang.Boolean Default: true if not a subproject DEPRECATED: renamed to release . workflowBootstrapSteps Optional Type: java.util.List Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflowGitIdentity Optional Type: io.github.cdklabs.projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflowNodeVersion Optional Type: java.lang.String Default: same as minNodeVersion The node version to use in GitHub workflows. disableTsconfig Optional Type: java.lang.Boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional Type: java.lang.Boolean Default: false Docgen by Typedoc. docsDirectory Optional Type: java.lang.String Default: \"docs\" Docs directory. entrypointTypes Optional Type: java.lang.String Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional Type: java.lang.Boolean Default: true Setup eslint. eslintOptions Optional Type: io.github.cdklabs.projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional Type: java.lang.String Default: \"lib\" Typescript artifacts output directory. projenrcTs Optional Type: java.lang.Boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions Optional Type: io.github.cdklabs.projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode Optional Type: java.lang.Boolean Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional Type: java.lang.String Default: \"src\" Typescript sources directory. testdir Optional Type: java.lang.String Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfigDev Optional Type: io.github.cdklabs.projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile Optional Type: java.lang.String Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescriptVersion Optional Type: java.lang.String Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). buildCommand Optional Type: java.lang.String Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment. cdkout Optional Type: java.lang.String Default: \"cdk.out\" cdk.out directory. context Optional Type: java.util.Map Default: no additional context Additional context to include in cdk.json . featureFlags Optional Type: java.lang.Boolean Default: true Include all feature flags in cdk.json. requireApproval Optional Type: io.github.cdklabs.projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes Optional Type: java.util.List Default: [] Glob patterns to exclude from cdk watch . watchIncludes Optional Type: java.util.List Default: [] Glob patterns to include in cdk watch . cdkVersion Required Type: java.lang.String Default: \"2.1.0\" Minimum version of the AWS CDK to depend on. ~~ cdkAssert ~~ Optional Deprecated: The Type: java.lang.Boolean Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library? cdkAssertions Optional Type: java.lang.Boolean Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib' ~~ cdkDependencies ~~ Optional Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) Type: java.util.List Which AWS CDKv1 modules this project requires. ~~ cdkDependenciesAsDeps ~~ Optional Deprecated: Not supported in CDK v2. Type: java.lang.Boolean Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects ~~ cdkTestDependencies ~~ Optional Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead Type: java.util.List AWS CDK modules required for testing. cdkVersionPinning Optional Type: java.lang.Boolean Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes. constructsVersion Optional Type: java.lang.String Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on. appEntrypoint Optional Type: java.lang.String Default: \"main.ts\" The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). edgeLambdaAutoDiscover Optional Type: java.lang.Boolean Default: true Automatically adds an cloudfront.experimental.EdgeFunction for each .edge-lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. integrationTestAutoDiscover Optional Type: java.lang.Boolean Default: true Automatically discovers and creates integration tests for each .integ.ts file in under your test directory. lambdaAutoDiscover Optional Type: java.lang.Boolean Default: true Automatically adds an awscdk.LambdaFunction for each .lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambdaExtensionAutoDiscover Optional Type: java.lang.Boolean Default: true Automatically adds an awscdk.LambdaExtension for each .lambda-extension.ts entrypoint in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambdaOptions Optional Type: io.github.cdklabs.projen.awscdk.LambdaFunctionCommonOptions Default: default options Common options for all AWS Lambda functions. Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. tryRemoveFile Finds a file at the specified relative path within this project and removes it. addBins No description. addBundledDeps Defines bundled dependencies. addCompileCommand DEPRECATED. addDeps Defines normal dependencies. addDevDeps Defines development/test dependencies. addFields Directly set fields in package.json . addKeywords Adds keywords to package.json (deduplicated). addPeerDeps Defines peer dependencies. addTestCommand DEPRECATED. hasScript Indicates if a script by the name name is defined. removeScript Removes the npm script (always successful). renderWorkflowSetup Returns the set of workflow steps which should be executed to bootstrap a workflow. setScript Replaces the contents of an npm package.json script. addCdkDependency Adds an AWS CDK module dependencies. addExcludeFromCleanup public void addExcludeFromCleanup ( java . lang . String globs ) Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: java.lang.String The glob patterns to match. addGitIgnore public void addGitIgnore ( java . lang . String pattern ) Adds a .gitignore pattern. pattern Required Type: java.lang.String The glob pattern to ignore. addPackageIgnore public void addPackageIgnore ( java . lang . String pattern ) Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . pattern Required Type: java.lang.String addTask public Task addTask ( java . lang . String name ) public Task addTask ( java . lang . String name , TaskOptions props ) Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: java.lang.String The task name to add. props Optional Type: io.github.cdklabs.projen.TaskOptions Task properties. ~~ addTip ~~ public void addTip ( java . lang . String message ) Prints a \"tip\" message during synthesis. message Required Type: java.lang.String The message. annotateGenerated public void annotateGenerated ( java . lang . String glob ) Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: java.lang.String the glob pattern to match (could be a file path). postSynthesize public void postSynthesize () Called after all components are synthesized. Order is not guaranteed. preSynthesize public void preSynthesize () Called before all components are synthesized. removeTask public Task removeTask ( java . lang . String name ) Removes a task from a project. name Required Type: java.lang.String The name of the task to remove. runTaskCommand public java . lang . String runTaskCommand ( Task task ) Returns the shell command to execute in order to run a task. This will typically be npx projen TASK . task Required Type: io.github.cdklabs.projen.Task The task for which the command is required. synth public void synth () Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" tryFindFile public FileBase tryFindFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public JsonFile tryFindJsonFile ( java . lang . String filePath ) Finds a json file by name. filePath Required Type: java.lang.String The file path. tryFindObjectFile public ObjectFile tryFindObjectFile ( java . lang . String filePath ) Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: java.lang.String The file path. tryRemoveFile public FileBase tryRemoveFile ( java . lang . String filePath ) Finds a file at the specified relative path within this project and removes it. filePath Required Type: java.lang.String The file path. If this path is relative, it will be resolved from the root of this project. addBins public void addBins ( java . util . Map < java . lang . String , java . lang . String > bins ) bins Required Type: java.util.Map addBundledDeps public void addBundledDeps ( java . lang . String deps ) Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json . deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addCompileCommand ~~ public void addCompileCommand ( java . lang . String commands ) DEPRECATED. commands Required Type: java.lang.String addDeps public void addDeps ( java . lang . String deps ) Defines normal dependencies. deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addDevDeps public void addDevDeps ( java . lang . String deps ) Defines development/test dependencies. deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addFields public void addFields ( java . util . Map < java . lang . String , java . lang . Object > fields ) Directly set fields in package.json . fields Required Type: java.util.Map The fields to set. addKeywords public void addKeywords ( java . lang . String keywords ) Adds keywords to package.json (deduplicated). keywords Required Type: java.lang.String The keywords to add. addPeerDeps public void addPeerDeps ( java . lang . String deps ) Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers. deps Required Type: java.lang.String Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addTestCommand ~~ public void addTestCommand ( java . lang . String commands ) DEPRECATED. commands Required Type: java.lang.String hasScript public java . lang . Boolean hasScript ( java . lang . String name ) Indicates if a script by the name name is defined. name Required Type: java.lang.String The name of the script. removeScript public void removeScript ( java . lang . String name ) Removes the npm script (always successful). name Required Type: java.lang.String The name of the script. renderWorkflowSetup public java . util . List < JobStep > renderWorkflowSetup () public java . util . List < JobStep > renderWorkflowSetup ( RenderWorkflowSetupOptions options ) Returns the set of workflow steps which should be executed to bootstrap a workflow. options Optional Type: io.github.cdklabs.projen.javascript.RenderWorkflowSetupOptions Options. setScript public void setScript ( java . lang . String name , java . lang . String command ) Replaces the contents of an npm package.json script. name Required Type: java.lang.String The script name. command Required Type: java.lang.String The command to execute. addCdkDependency public void addCdkDependency ( java . lang . String modules ) Adds an AWS CDK module dependencies. modules Required Type: java.lang.String The list of modules to depend on. Properties Name Type Description buildTask io.github.cdklabs.projen.Task No description. commitGenerated java.lang.Boolean Whether to commit the managed files by default. compileTask io.github.cdklabs.projen.Task No description. components java.util.List Returns all the components within this project. deps io.github.cdklabs.projen.Dependencies Project dependencies. ejected java.lang.Boolean Whether or not the project is being ejected. files java.util.List All files in this project. gitattributes io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore io.github.cdklabs.projen.IgnoreFile .gitignore. logger io.github.cdklabs.projen.Logger Logging utilities. name java.lang.String Project name. outdir java.lang.String Absolute output directory of this project. packageTask io.github.cdklabs.projen.Task No description. postCompileTask io.github.cdklabs.projen.Task No description. preCompileTask io.github.cdklabs.projen.Task No description. projectBuild io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand java.lang.String The command to use in order to run the projen CLI. root io.github.cdklabs.projen.Project The root project. tasks io.github.cdklabs.projen.Tasks Project tasks. testTask io.github.cdklabs.projen.Task No description. defaultTask io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". initProject io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . parent io.github.cdklabs.projen.Project A parent project. projectType io.github.cdklabs.projen.ProjectType No description. autoApprove io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github io.github.cdklabs.projen.github.GitHub Access all github components. gitpod io.github.cdklabs.projen.Gitpod Access for Gitpod. vscode io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. allowLibraryDependencies java.lang.Boolean No description. artifactsDirectory java.lang.String The build output directory. artifactsJavascriptDirectory java.lang.String The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler io.github.cdklabs.projen.javascript.Bundler No description. entrypoint java.lang.String No description. manifest java.lang.Object No description. package io.github.cdklabs.projen.javascript.NodePackage API for managing the node package. packageManager io.github.cdklabs.projen.javascript.NodePackageManager The package manager to use. runScriptCommand java.lang.String The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge io.github.cdklabs.projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. buildWorkflow io.github.cdklabs.projen.build.BuildWorkflow The PR build GitHub workflow. buildWorkflowJobId java.lang.String The job ID of the build workflow. jest io.github.cdklabs.projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion java.lang.String Maximum node version required by this package. minNodeVersion java.lang.String Minimum node.js version required by this package. npmignore io.github.cdklabs.projen.IgnoreFile The .npmignore file. prettier io.github.cdklabs.projen.javascript.Prettier No description. publisher io.github.cdklabs.projen.release.Publisher Package publisher. release io.github.cdklabs.projen.release.Release Release management. upgradeWorkflow io.github.cdklabs.projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory java.lang.String No description. libdir java.lang.String The directory in which compiled .js files reside. srcdir java.lang.String The directory in which the .ts sources reside. testdir java.lang.String The directory in which tests reside. tsconfigDev io.github.cdklabs.projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask io.github.cdklabs.projen.Task The \"watch\" task. docgen java.lang.Boolean No description. eslint io.github.cdklabs.projen.javascript.Eslint No description. tsconfig io.github.cdklabs.projen.javascript.TypescriptConfig No description. tsconfigEslint io.github.cdklabs.projen.javascript.TypescriptConfig No description. appEntrypoint java.lang.String The CDK app entrypoint. cdkConfig io.github.cdklabs.projen.awscdk.CdkConfig cdk.json configuration. cdkDeps io.github.cdklabs.projen.awscdk.AwsCdkDeps No description. cdkTasks io.github.cdklabs.projen.awscdk.CdkTasks Common CDK tasks. cdkVersion java.lang.String The CDK version this app is using. buildTask Required public Task getBuildTask (); Type: io.github.cdklabs.projen.Task commitGenerated Required public java . lang . Boolean getCommitGenerated (); Type: java.lang.Boolean Whether to commit the managed files by default. compileTask Required public Task getCompileTask (); Type: io.github.cdklabs.projen.Task components Required public java . util . List < Component > getComponents (); Type: java.util.List Returns all the components within this project. deps Required public Dependencies getDeps (); Type: io.github.cdklabs.projen.Dependencies Project dependencies. ejected Required public java . lang . Boolean getEjected (); Type: java.lang.Boolean Whether or not the project is being ejected. files Required public java . util . List < FileBase > getFiles (); Type: java.util.List All files in this project. gitattributes Required public GitAttributesFile getGitattributes (); Type: io.github.cdklabs.projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public IgnoreFile getGitignore (); Type: io.github.cdklabs.projen.IgnoreFile .gitignore. logger Required public Logger getLogger (); Type: io.github.cdklabs.projen.Logger Logging utilities. name Required public java . lang . String getName (); Type: java.lang.String Project name. outdir Required public java . lang . String getOutdir (); Type: java.lang.String Absolute output directory of this project. packageTask Required public Task getPackageTask (); Type: io.github.cdklabs.projen.Task postCompileTask Required public Task getPostCompileTask (); Type: io.github.cdklabs.projen.Task preCompileTask Required public Task getPreCompileTask (); Type: io.github.cdklabs.projen.Task projectBuild Required public ProjectBuild getProjectBuild (); Type: io.github.cdklabs.projen.ProjectBuild Manages the build process of the project. projenCommand Required public java . lang . String getProjenCommand (); Type: java.lang.String The command to use in order to run the projen CLI. root Required public Project getRoot (); Type: io.github.cdklabs.projen.Project The root project. tasks Required public Tasks getTasks (); Type: io.github.cdklabs.projen.Tasks Project tasks. testTask Required public Task getTestTask (); Type: io.github.cdklabs.projen.Task defaultTask Optional public Task getDefaultTask (); Type: io.github.cdklabs.projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public InitProject getInitProject (); Type: io.github.cdklabs.projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public Project getParent (); Type: io.github.cdklabs.projen.Project A parent project. If undefined, this is the root project. projectType Required public ProjectType getProjectType (); Type: io.github.cdklabs.projen.ProjectType autoApprove Optional public AutoApprove getAutoApprove (); Type: io.github.cdklabs.projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public DevContainer getDevContainer (); Type: io.github.cdklabs.projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public GitHub getGithub (); Type: io.github.cdklabs.projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public Gitpod getGitpod (); Type: io.github.cdklabs.projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public VsCode getVscode (); Type: io.github.cdklabs.projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. ~~ allowLibraryDependencies ~~ Required Deprecated: use package.allowLibraryDependencies public java . lang . Boolean getAllowLibraryDependencies (); Type: java.lang.Boolean artifactsDirectory Required public java . lang . String getArtifactsDirectory (); Type: java.lang.String The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg . artifactsJavascriptDirectory Required public java . lang . String getArtifactsJavascriptDirectory (); Type: java.lang.String The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler Required public Bundler getBundler (); Type: io.github.cdklabs.projen.javascript.Bundler ~~ entrypoint ~~ Required Deprecated: use package.entrypoint public java . lang . String getEntrypoint (); Type: java.lang.String ~~ manifest ~~ Required Deprecated: use package.addField(x, y) public java . lang . Object getManifest (); Type: java.lang.Object package Required public NodePackage getPackage (); Type: io.github.cdklabs.projen.javascript.NodePackage API for managing the node package. ~~ packageManager ~~ Required Deprecated: use package.packageManager public NodePackageManager getPackageManager (); Type: io.github.cdklabs.projen.javascript.NodePackageManager The package manager to use. runScriptCommand Required public java . lang . String getRunScriptCommand (); Type: java.lang.String The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge Optional public AutoMerge getAutoMerge (); Type: io.github.cdklabs.projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. buildWorkflow Optional public BuildWorkflow getBuildWorkflow (); Type: io.github.cdklabs.projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled. buildWorkflowJobId Optional public java . lang . String getBuildWorkflowJobId (); Type: java.lang.String The job ID of the build workflow. jest Optional public Jest getJest (); Type: io.github.cdklabs.projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion Optional public java . lang . String getMaxNodeVersion (); Type: java.lang.String Maximum node version required by this package. minNodeVersion Optional public java . lang . String getMinNodeVersion (); Type: java.lang.String Minimum node.js version required by this package. npmignore Optional public IgnoreFile getNpmignore (); Type: io.github.cdklabs.projen.IgnoreFile The .npmignore file. prettier Optional public Prettier getPrettier (); Type: io.github.cdklabs.projen.javascript.Prettier ~~ publisher ~~ Optional Deprecated: use release.publisher . public Publisher getPublisher (); Type: io.github.cdklabs.projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow. release Optional public Release getRelease (); Type: io.github.cdklabs.projen.release.Release Release management. upgradeWorkflow Optional public UpgradeDependencies getUpgradeWorkflow (); Type: io.github.cdklabs.projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory Required public java . lang . String getDocsDirectory (); Type: java.lang.String libdir Required public java . lang . String getLibdir (); Type: java.lang.String The directory in which compiled .js files reside. srcdir Required public java . lang . String getSrcdir (); Type: java.lang.String The directory in which the .ts sources reside. testdir Required public java . lang . String getTestdir (); Type: java.lang.String The directory in which tests reside. tsconfigDev Required public TypescriptConfig getTsconfigDev (); Type: io.github.cdklabs.projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask Required public Task getWatchTask (); Type: io.github.cdklabs.projen.Task The \"watch\" task. docgen Optional public java . lang . Boolean getDocgen (); Type: java.lang.Boolean eslint Optional public Eslint getEslint (); Type: io.github.cdklabs.projen.javascript.Eslint tsconfig Optional public TypescriptConfig getTsconfig (); Type: io.github.cdklabs.projen.javascript.TypescriptConfig tsconfigEslint Optional public TypescriptConfig getTsconfigEslint (); Type: io.github.cdklabs.projen.javascript.TypescriptConfig appEntrypoint Required public java . lang . String getAppEntrypoint (); Type: java.lang.String The CDK app entrypoint. cdkConfig Required public CdkConfig getCdkConfig (); Type: io.github.cdklabs.projen.awscdk.CdkConfig cdk.json configuration. cdkDeps Required public AwsCdkDeps getCdkDeps (); Type: io.github.cdklabs.projen.awscdk.AwsCdkDeps cdkTasks Required public CdkTasks getCdkTasks (); Type: io.github.cdklabs.projen.awscdk.CdkTasks Common CDK tasks. cdkVersion Required public java . lang . String getCdkVersion (); Type: java.lang.String The CDK version this app is using. Constants Name Type Description DEFAULT_TASK java.lang.String The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public java . lang . String getDefaultTask (); Type: java.lang.String The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files.","title":"Index"},{"location":"java/pipeline/index.html#cdk-nag","text":"In order to keep CDK Nag happy, make sure you build the pipeline before synth as per aws-cdk#18440 .","title":"CDK Nag"},{"location":"java/pipeline/index.html#api-reference","text":"","title":"API Reference "},{"location":"java/pipeline/index.html#constructs","text":"","title":"Constructs "},{"location":"java/pipeline/index.html#pdkpipeline","text":"An extension to CodePipeline which configures sane defaults for a NX Monorepo codebase. In addition to this, it also creates a CodeCommit repository with automated PR builds and approvals.","title":"PDKPipeline "},{"location":"java/pipeline/index.html#sonarcodescanner","text":"","title":"SonarCodeScanner "},{"location":"java/pipeline/index.html#structs","text":"","title":"Structs "},{"location":"java/pipeline/index.html#pdkpipelinejavaprojectoptions","text":"Configuration options for the PDKPipelineJavaProject.","title":"PDKPipelineJavaProjectOptions "},{"location":"java/pipeline/index.html#pdkpipelineprops","text":"Properties to configure the PDKPipeline. Note: Due to limitations with JSII and generic support it should be noted that the synth, synthShellStepPartialProps.input and synthShellStepPartialProps.primaryOutputDirectory properties will be ignored if passed in to this construct. synthShellStepPartialProps.commands is marked as a required field, however if you pass in [] the default commands of this construct will be retained.","title":"PDKPipelineProps "},{"location":"java/pipeline/index.html#pdkpipelinepyprojectoptions","text":"Configuration options for the PDKPipelinePyProject.","title":"PDKPipelinePyProjectOptions "},{"location":"java/pipeline/index.html#pdkpipelinetsprojectoptions","text":"Configuration options for the PDKPipelineTsProject.","title":"PDKPipelineTsProjectOptions "},{"location":"java/pipeline/index.html#sonarcodescannerconfig","text":"","title":"SonarCodeScannerConfig "},{"location":"java/pipeline/index.html#sonarcodescannerprops","text":"SonarCodeScanners properties.","title":"SonarCodeScannerProps "},{"location":"java/pipeline/index.html#classes","text":"","title":"Classes "},{"location":"java/pipeline/index.html#pdkpipelinejavaproject","text":"Synthesizes a Java Project with a CI/CD pipeline.","title":"PDKPipelineJavaProject "},{"location":"java/pipeline/index.html#pdkpipelinepyproject","text":"Synthesizes a Python Project with a CI/CD pipeline.","title":"PDKPipelinePyProject "},{"location":"java/pipeline/index.html#pdkpipelinetsproject","text":"Synthesizes a Typescript Project with a CI/CD pipeline.","title":"PDKPipelineTsProject "},{"location":"java/static-website/index.html","text":"Experimental Warning This is packaged in a separate module while the API is being stabilized. This package is subject to non-backward compatible changes or removal in any future version. Breaking changes will be announced in the release notes. Whilst you may use this package, you may need to update your source code when upgrading to a newer version. Once we stabilize the module, it will be included into the stable aws-prototyping-sdk library. Experimental Usage To use this package, add a dependency on: software.aws.awsprototypingsdk/static-website The static-website module is able to deploy your pre-packaged static website content into an S3 Bucket, fronted by Cloudfront. This module uses an Origin Access Identity to ensure your Bucket can only be accessed via Cloudfront and is configured to only allow HTTPS requests by default. Custom runtime configurations can also be specified which will emit a runtime-config.json file along with your website content. Typically this includes resource Arns, Id's etc which may need to be referenced from your website. This package uses sane defaults and at a minimum only requires the path to your website assets. Below is a conceptual view of the default architecture this module creates: Cloudfront Distribution (HTTPS only) -> S3 Bucket (Private via OAI) |_ WAF V2 ACL |_ index.html (+ other website files and assets) |_ runtime-config.json A typical use case is to create a static website with AuthN. To accomplish this, we can leverage the UserIdentity to create the User Pool (Cognito by default) and Identity Pool. We can then pipe the respective pool id's as runtimeOptions into the StaticWebsite. After the website is deployed, these values can be interrogated from the runtime-config.json deployed alongside the website in order to perform authentication within the app using something like the Amplify Auth API . // Example automatically generated from non-compiling source. May contain errors. Object userIdentity = new UserIdentity ( this , \"UserIdentity\" ); StaticWebsite . Builder . create ( this , \"StaticWebsite\" ) . websiteContentPath ( \"<relative>/<path>/<to>/<built>/<website>\" ) . runtimeOptions ( Map . of ( \"jsonPayload\" , Map . of ( \"region\" , Stack . of ( this ). getRegion (), \"identityPoolId\" , userIdentity . getIdentityPool (). getIdentityPoolId (), \"userPoolId\" , userIdentity . getUserPool (). getUserPoolId (), \"userPoolWebClientId\" , userIdentity . getUserPoolClient (). getUserPoolClientId ()))) . build (); API Reference Constructs CloudfrontWebAcl This construct creates a WAFv2 Web ACL for cloudfront in the us-east-1 region (required for cloudfront) no matter the region of the parent cdk stack. Initializers import software.aws.awsprototypingsdk.staticwebsite.CloudfrontWebAcl ; CloudfrontWebAcl . Builder . create ( Construct scope , java . lang . String id ) // .cidrAllowList(CidrAllowList) // .managedRules(java.util.List<ManagedRule>) . build (); Name Type Description scope software.constructs.Construct No description. id java.lang.String No description. cidrAllowList CidrAllowList List of cidr ranges to allow. managedRules java.util.List< ManagedRule > List of managed rules to apply to the web acl. scope Required Type: software.constructs.Construct id Required Type: java.lang.String cidrAllowList Optional Type: CidrAllowList Default: undefined List of cidr ranges to allow. managedRules Optional Type: java.util.List< ManagedRule > Default: [{ vendor: \"AWS\", name: \"AWSManagedRulesCommonRuleSet\" }] List of managed rules to apply to the web acl. Methods Name Description toString Returns a string representation of this construct. toString public java . lang . String toString () Returns a string representation of this construct. Static Functions Name Description isConstruct Checks if x is a construct. isConstruct import software.aws.awsprototypingsdk.staticwebsite.CloudfrontWebAcl ; CloudfrontWebAcl . isConstruct ( java . lang . Object x ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: java.lang.Object Any object. Properties Name Type Description node software.constructs.Node The tree node. webAclArn java.lang.String No description. webAclId java.lang.String No description. node Required public Node getNode (); Type: software.constructs.Node The tree node. webAclArn Required public java . lang . String getWebAclArn (); Type: java.lang.String webAclId Required public java . lang . String getWebAclId (); Type: java.lang.String StaticWebsite Deploys a Static Website using by default a private S3 bucket as an origin and Cloudfront as the entrypoint. This construct configures a webAcl containing rules that are generally applicable to web applications. This provides protection against exploitation of a wide range of vulnerabilities, including some of the high risk and commonly occurring vulnerabilities described in OWASP publications such as OWASP Top 10. Initializers import software.aws.awsprototypingsdk.staticwebsite.StaticWebsite ; StaticWebsite . Builder . create ( Construct scope , java . lang . String id ) . websiteContentPath ( java . lang . String ) // .defaultWebsiteBucketEncryption(BucketEncryption) // .defaultWebsiteBucketEncryptionKey(Key) // .distributionProps(DistributionProps) // .runtimeOptions(RuntimeOptions) // .webAclProps(CloudFrontWebAclProps) // .websiteBucket(IBucket) . build (); Name Type Description scope software.constructs.Construct No description. id java.lang.String No description. websiteContentPath java.lang.String Path to the directory containing the static website files and assets. defaultWebsiteBucketEncryption software.amazon.awscdk.services.s3.BucketEncryption Bucket encryption to use for the default bucket. defaultWebsiteBucketEncryptionKey software.amazon.awscdk.services.kms.Key A predefined KMS customer encryption key to use for the default bucket that gets created. distributionProps software.amazon.awscdk.services.cloudfront.DistributionProps Custom distribution properties. runtimeOptions RuntimeOptions Dynamic configuration which gets resolved only during deployment. webAclProps CloudFrontWebAclProps Limited configuration settings for the generated webAcl. websiteBucket software.amazon.awscdk.services.s3.IBucket Predefined bucket to deploy the website into. scope Required Type: software.constructs.Construct id Required Type: java.lang.String websiteContentPath Required Type: java.lang.String Path to the directory containing the static website files and assets. This directory must contain an index.html file. defaultWebsiteBucketEncryption Optional Type: software.amazon.awscdk.services.s3.BucketEncryption Default: \"S3MANAGED\" Bucket encryption to use for the default bucket. Supported options are KMS or S3MANAGED. Note: If planning to use KMS, ensure you associate a Lambda Edge function to sign requests to S3 as OAI does not currently support KMS encryption. Refer to { @link https://aws.amazon.com/blogs/networking-and-content-delivery/serving-sse-kms-encrypted-content-from-s3-using-cloudfront/ } defaultWebsiteBucketEncryptionKey Optional Type: software.amazon.awscdk.services.kms.Key A predefined KMS customer encryption key to use for the default bucket that gets created. Note: This is only used if the websiteBucket is left undefined, otherwise all settings from the provided websiteBucket will be used. distributionProps Optional Type: software.amazon.awscdk.services.cloudfront.DistributionProps Custom distribution properties. Note: defaultBehaviour.origin is a required parameter, however it will not be used as this construct will wire it on your behalf. You will need to pass in an instance of StaticWebsiteOrigin (NoOp) to keep the compiler happy. runtimeOptions Optional Type: RuntimeOptions Dynamic configuration which gets resolved only during deployment. webAclProps Optional Type: CloudFrontWebAclProps Limited configuration settings for the generated webAcl. For more advanced settings, create your own ACL and pass in the webAclId as a param to distributionProps. Note: If pass in your own ACL, make sure the SCOPE is CLOUDFRONT and it is created in us-east-1. websiteBucket Optional Type: software.amazon.awscdk.services.s3.IBucket Predefined bucket to deploy the website into. Methods Name Description toString Returns a string representation of this construct. toString public java . lang . String toString () Returns a string representation of this construct. Static Functions Name Description isConstruct Checks if x is a construct. isConstruct import software.aws.awsprototypingsdk.staticwebsite.StaticWebsite ; StaticWebsite . isConstruct ( java . lang . Object x ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: java.lang.Object Any object. Properties Name Type Description node software.constructs.Node The tree node. bucketDeployment software.amazon.awscdk.services.s3.deployment.BucketDeployment No description. cloudFrontDistribution software.amazon.awscdk.services.cloudfront.Distribution No description. websiteBucket software.amazon.awscdk.services.s3.IBucket No description. node Required public Node getNode (); Type: software.constructs.Node The tree node. bucketDeployment Required public BucketDeployment getBucketDeployment (); Type: software.amazon.awscdk.services.s3.deployment.BucketDeployment cloudFrontDistribution Required public Distribution getCloudFrontDistribution (); Type: software.amazon.awscdk.services.cloudfront.Distribution websiteBucket Required public IBucket getWebsiteBucket (); Type: software.amazon.awscdk.services.s3.IBucket Structs CidrAllowList Representation of a CIDR range. Initializer import software.aws.awsprototypingsdk.staticwebsite.CidrAllowList ; CidrAllowList . builder () . cidrRanges ( java . util . List < java . lang . String > ) . cidrType ( java . lang . String ) . build (); Properties Name Type Description cidrRanges java.util.List Specify an IPv4 address by using CIDR notation. cidrType java.lang.String Type of CIDR range. cidrRanges Required public java . util . List < java . lang . String > getCidrRanges (); Type: java.util.List Specify an IPv4 address by using CIDR notation. For example: To configure AWS WAF to allow, block, or count requests that originated from the IP address 192.0.2.44, specify 192.0.2.44/32 . To configure AWS WAF to allow, block, or count requests that originated from IP addresses from 192.0.2.0 to 192.0.2.255, specify 192.0.2.0/24 . For more information about CIDR notation, see the Wikipedia entry Classless Inter-Domain Routing . Specify an IPv6 address by using CIDR notation. For example: To configure AWS WAF to allow, block, or count requests that originated from the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify 1111:0000:0000:0000:0000:0000:0000:0111/128 . To configure AWS WAF to allow, block, or count requests that originated from IP addresses 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify 1111:0000:0000:0000:0000:0000:0000:0000/64 . cidrType Required public java . lang . String getCidrType (); Type: java.lang.String Type of CIDR range. CloudFrontWebAclProps Properties to configure the web acl. Initializer import software.aws.awsprototypingsdk.staticwebsite.CloudFrontWebAclProps ; CloudFrontWebAclProps . builder () // .cidrAllowList(CidrAllowList) // .managedRules(java.util.List<ManagedRule>) . build (); Properties Name Type Description cidrAllowList CidrAllowList List of cidr ranges to allow. managedRules java.util.List< ManagedRule > List of managed rules to apply to the web acl. cidrAllowList Optional public CidrAllowList getCidrAllowList (); Type: CidrAllowList Default: undefined List of cidr ranges to allow. managedRules Optional public java . util . List < ManagedRule > getManagedRules (); Type: java.util.List< ManagedRule > Default: [{ vendor: \"AWS\", name: \"AWSManagedRulesCommonRuleSet\" }] List of managed rules to apply to the web acl. ManagedRule Represents a WAF V2 managed rule. Initializer import software.aws.awsprototypingsdk.staticwebsite.ManagedRule ; ManagedRule . builder () . name ( java . lang . String ) . vendor ( java . lang . String ) . build (); Properties Name Type Description name java.lang.String The name of the managed rule group. vendor java.lang.String The name of the managed rule group vendor. name Required public java . lang . String getName (); Type: java.lang.String The name of the managed rule group. You use this, along with the vendor name, to identify the rule group. vendor Required public java . lang . String getVendor (); Type: java.lang.String The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group. RuntimeOptions Dynamic configuration which gets resolved only during deployment. Example // Example automatically generated from non-compiling source. May contain errors. // Will store a JSON file called runtime-config.json in the root of the StaticWebsite S3 bucket containing any // and all resolved values. Map < String , Map < String , Object >> runtimeConfig = Map . of ( \"jsonPayload\" , Map . of ( \"bucketArn\" , s3Bucket . getBucketArn ())); StaticWebsite . Builder . create ( scope , \"StaticWebsite\" ). websiteContentPath ( \"path/to/website\" ). runtimeConfig ( runtimeConfig ). build (); Initializer import software.aws.awsprototypingsdk.staticwebsite.RuntimeOptions ; RuntimeOptions . builder () . jsonPayload ( java . lang . Object ) // .jsonFileName(java.lang.String) . build (); Properties Name Type Description jsonPayload java.lang.Object Arbitrary JSON payload containing runtime values to deploy. jsonFileName java.lang.String File name to store runtime configuration (jsonPayload). jsonPayload Required public java . lang . Object getJsonPayload (); Type: java.lang.Object Arbitrary JSON payload containing runtime values to deploy. Typically this contains resourceArns, etc which are only known at deploy time. Example // Example automatically generated from non-compiling source. May contain errors. { userPoolId : some . userPool . userPoolId , someResourceArnsome . getResource (). getArn (); } jsonFileName Optional public java . lang . String getJsonFileName (); Type: java.lang.String Default: \"runtime-config.json\" File name to store runtime configuration (jsonPayload). Must follow pattern: '*.json' StaticWebsiteProps Properties for configuring the StaticWebsite. Initializer import software.aws.awsprototypingsdk.staticwebsite.StaticWebsiteProps ; StaticWebsiteProps . builder () . websiteContentPath ( java . lang . String ) // .defaultWebsiteBucketEncryption(BucketEncryption) // .defaultWebsiteBucketEncryptionKey(Key) // .distributionProps(DistributionProps) // .runtimeOptions(RuntimeOptions) // .webAclProps(CloudFrontWebAclProps) // .websiteBucket(IBucket) . build (); Properties Name Type Description websiteContentPath java.lang.String Path to the directory containing the static website files and assets. defaultWebsiteBucketEncryption software.amazon.awscdk.services.s3.BucketEncryption Bucket encryption to use for the default bucket. defaultWebsiteBucketEncryptionKey software.amazon.awscdk.services.kms.Key A predefined KMS customer encryption key to use for the default bucket that gets created. distributionProps software.amazon.awscdk.services.cloudfront.DistributionProps Custom distribution properties. runtimeOptions RuntimeOptions Dynamic configuration which gets resolved only during deployment. webAclProps CloudFrontWebAclProps Limited configuration settings for the generated webAcl. websiteBucket software.amazon.awscdk.services.s3.IBucket Predefined bucket to deploy the website into. websiteContentPath Required public java . lang . String getWebsiteContentPath (); Type: java.lang.String Path to the directory containing the static website files and assets. This directory must contain an index.html file. defaultWebsiteBucketEncryption Optional public BucketEncryption getDefaultWebsiteBucketEncryption (); Type: software.amazon.awscdk.services.s3.BucketEncryption Default: \"S3MANAGED\" Bucket encryption to use for the default bucket. Supported options are KMS or S3MANAGED. Note: If planning to use KMS, ensure you associate a Lambda Edge function to sign requests to S3 as OAI does not currently support KMS encryption. Refer to { @link https://aws.amazon.com/blogs/networking-and-content-delivery/serving-sse-kms-encrypted-content-from-s3-using-cloudfront/ } defaultWebsiteBucketEncryptionKey Optional public Key getDefaultWebsiteBucketEncryptionKey (); Type: software.amazon.awscdk.services.kms.Key A predefined KMS customer encryption key to use for the default bucket that gets created. Note: This is only used if the websiteBucket is left undefined, otherwise all settings from the provided websiteBucket will be used. distributionProps Optional public DistributionProps getDistributionProps (); Type: software.amazon.awscdk.services.cloudfront.DistributionProps Custom distribution properties. Note: defaultBehaviour.origin is a required parameter, however it will not be used as this construct will wire it on your behalf. You will need to pass in an instance of StaticWebsiteOrigin (NoOp) to keep the compiler happy. runtimeOptions Optional public RuntimeOptions getRuntimeOptions (); Type: RuntimeOptions Dynamic configuration which gets resolved only during deployment. webAclProps Optional public CloudFrontWebAclProps getWebAclProps (); Type: CloudFrontWebAclProps Limited configuration settings for the generated webAcl. For more advanced settings, create your own ACL and pass in the webAclId as a param to distributionProps. Note: If pass in your own ACL, make sure the SCOPE is CLOUDFRONT and it is created in us-east-1. websiteBucket Optional public IBucket getWebsiteBucket (); Type: software.amazon.awscdk.services.s3.IBucket Predefined bucket to deploy the website into. Classes StaticWebsiteOrigin Implements: software.amazon.awscdk.services.cloudfront.IOrigin If passing in distributionProps, the default behaviour.origin is a required parameter. An instance of this class can be passed in to make the compiler happy. Initializers import software.aws.awsprototypingsdk.staticwebsite.StaticWebsiteOrigin ; new StaticWebsiteOrigin (); Name Type Description Methods Name Description bind The method called when a given Origin is added (for the first time) to a Distribution. bind public OriginBindConfig bind ( Construct _scope , OriginBindOptions _options ) The method called when a given Origin is added (for the first time) to a Distribution. _scope Required Type: software.constructs.Construct _options Required Type: software.amazon.awscdk.services.cloudfront.OriginBindOptions","title":"Index"},{"location":"java/static-website/index.html#api-reference","text":"","title":"API Reference "},{"location":"java/static-website/index.html#constructs","text":"","title":"Constructs "},{"location":"java/static-website/index.html#cloudfrontwebacl","text":"This construct creates a WAFv2 Web ACL for cloudfront in the us-east-1 region (required for cloudfront) no matter the region of the parent cdk stack.","title":"CloudfrontWebAcl "},{"location":"java/static-website/index.html#staticwebsite","text":"Deploys a Static Website using by default a private S3 bucket as an origin and Cloudfront as the entrypoint. This construct configures a webAcl containing rules that are generally applicable to web applications. This provides protection against exploitation of a wide range of vulnerabilities, including some of the high risk and commonly occurring vulnerabilities described in OWASP publications such as OWASP Top 10.","title":"StaticWebsite "},{"location":"java/static-website/index.html#structs","text":"","title":"Structs "},{"location":"java/static-website/index.html#cidrallowlist","text":"Representation of a CIDR range.","title":"CidrAllowList "},{"location":"java/static-website/index.html#cloudfrontwebaclprops","text":"Properties to configure the web acl.","title":"CloudFrontWebAclProps "},{"location":"java/static-website/index.html#managedrule","text":"Represents a WAF V2 managed rule.","title":"ManagedRule "},{"location":"java/static-website/index.html#runtimeoptions","text":"Dynamic configuration which gets resolved only during deployment. Example // Example automatically generated from non-compiling source. May contain errors. // Will store a JSON file called runtime-config.json in the root of the StaticWebsite S3 bucket containing any // and all resolved values. Map < String , Map < String , Object >> runtimeConfig = Map . of ( \"jsonPayload\" , Map . of ( \"bucketArn\" , s3Bucket . getBucketArn ())); StaticWebsite . Builder . create ( scope , \"StaticWebsite\" ). websiteContentPath ( \"path/to/website\" ). runtimeConfig ( runtimeConfig ). build ();","title":"RuntimeOptions "},{"location":"java/static-website/index.html#staticwebsiteprops","text":"Properties for configuring the StaticWebsite.","title":"StaticWebsiteProps "},{"location":"java/static-website/index.html#classes","text":"","title":"Classes "},{"location":"java/static-website/index.html#staticwebsiteorigin","text":"Implements: software.amazon.awscdk.services.cloudfront.IOrigin If passing in distributionProps, the default behaviour.origin is a required parameter. An instance of this class can be passed in to make the compiler happy.","title":"StaticWebsiteOrigin "},{"location":"python/aws-arch/index.html","text":"Experimental Warning This is packaged in a separate module while the API is being stabilized. This package is subject to non-backward compatible changes or removal in any future version. Breaking changes will be announced in the release notes. Whilst you may use this package, you may need to update your source code when upgrading to a newer version. Once we stabilize the module, it will be included into the stable aws-prototyping-sdk library. Experimental Usage To use this package, add a dependency on: aws_prototyping_sdk.aws_arch aws-arch (AWS Architecture) Library to provide metadata for AWS Services and AWS Resources. This package generates mappings between @aws-cdk/cfnspec and AWS Architecture Icons , and resolves resource metadata between these systems to infer a normalized definition of an AwsService and AwsResource . The primary aim of this package is to provide a consistent mechanism for other libraries to retrieve naming and assets associated with CloudFormation resources, and by extension CDK resources. Get Started yarn add '@aws-prototyping-sdk/aws-arch' # Example automatically generated from non-compiling source. May contain errors. from aws_prototyping_sdk.aws_arch import AwsArchitecture s3_bucket = AwsArchitecture . get_resource ( \"AWS::S3::Bucket\" ) s3_service = AwsArchitecture . get_service ( s3_bucket . service ) print ( s3_bucket ) print ( s3_service ) // => console.log(s3Bucket); { \"name\" : \"Amazon Simple Storage Service Bucket\" , \"cfnType\" : \"AWS::S3::Bucket\" , \"awsAssetName\" : \"Amazon-Simple-Storage-Service_Bucket\" , \"awsAssetIcon\" : \"resources/Amazon-Simple-Storage-Service_Bucket.png\" , \"service\" : \"S3\" } // => console.log(s3Service); { \"provider\" : \"AWS\" , \"name\" : \"Amazon Simple Storage Service\" , \"cfnName\" : \"S3\" , \"awsAssetIcon\" : \"services/Amazon-Simple-Storage-Service.png\" , \"awsAssetName\" : \"Amazon-Simple-Storage-Service\" } Aws Achritecture Icons Retrieve category , service , and resource AWS Architecture Icons . Icon methods return relative asset key paths, as most frameworks have the concept of a base path (imagepaths). Use AwsArchitecture.resolveAssetPath(...) to get absolute path. Retrieve icon based on CloudFormation Resource Type Resource Icon # Example automatically generated from non-compiling source. May contain errors. s3_bucket = AwsArchitecture . get_resource ( \"AWS::S3::Bucket\" ) s3_bucket_png = s3_bucket . icon ( \"png\" ) # => \"storage/s3/bucket.png\" s3_bucket_svg = s3_bucket . icon ( \"svg\" ) # => \"storage/s3/bucket.svg\" # Resolve absolute path for icons AwsArchitecture . resolve_asset_path ( s3_bucket_png ) Service Icon # Example automatically generated from non-compiling source. May contain errors. s3_service = AwsArchitecture . get_resource ( \"AWS::S3::Bucket\" ) . service # equivalent to: `AwsArchitecture.getService(\"S3\")` s3_service_png = s3_service . icon ( \"png\" ) # => \"storage/s3/service_icon.png\" s3_service_svg = s3_service . icon ( \"svg\" ) # => \"storage/s3/service_icon.svg\" # Resolve absolute path for icons AwsArchitecture . resolve_asset_path ( s3_service_png ) Category Icon # Example automatically generated from non-compiling source. May contain errors. storage_category = AwsArchitecture . get_resource ( \"AWS::S3::Bucket\" ) . service . category # equivalent to: `AwsArchitecture.getCategory(\"storage\")` storage_category_png = storage_category . icon ( \"png\" ) # => \"storage/category_icon.png\" storage_category_svg = storage_category . icon ( \"svg\" ) # => \"storage/category_icon.svg\" # Resolve absolute path for icons AwsArchitecture . resolve_asset_path ( storage_category_png ) Development This package auto-generates many types and asset files from external sources, which are then auto mapped based on common patterns and explict mappings for edge-cases. The auto-generation is handled by /scripts files which can be run via corresponding package scripts (eg: npx projen generate:assets => /scripts/generate-assets.ts ). There is an implicit sequential order the scripts must be called in due to dependencies, which is handled by npx projen generate script. The generate script is also invoked prior to npx projen build if generated asset directory does not exist. For local development of packages that depend on aws-arch package, you will need to call npx projen generate && npx projen compile (or npx projen build ) prior to locally importing this package. To update AWS Architecture Icons , change the url in ASSET_PACKAGE_ZIP_URL . API Reference Structs ArrowFormat Theme arrow format definition. Initializer from aws_prototyping_sdk import aws_arch aws_arch . ArrowFormat ( color : typing . Union [ str , bool ], head : str , style : str , tail : str , width : typing . Union [ int , float ] ) Properties Name Type Description color typing.Union[str, bool] No description. head str No description. style str No description. tail str No description. width typing.Union[int, float] No description. color Required color : typing . Union [ str , bool ] Type: typing.Union[str, bool] head Required head : str Type: str style Required style : str Type: str tail Required tail : str Type: str width Required width : typing . Union [ int , float ] Type: typing.Union[int, float] AwsCategoryDefinition Category definition. Initializer from aws_prototyping_sdk import aws_arch aws_arch . AwsCategoryDefinition ( fill_color : str , gradient_color : str , id : str , name : str , font_color : str = None , variants : typing . List [ str ] = None ) Properties Name Type Description fill_color str No description. gradient_color str No description. id str No description. name str No description. font_color str No description. variants typing.List[str] No description. fill_color Required fill_color : str Type: str gradient_color Required gradient_color : str Type: str id Required id : str Type: str name Required name : str Type: str font_color Optional font_color : str Type: str variants Optional variants : typing . List [ str ] Type: typing.List[str] AwsDrawioResourceIconStyle Drawio resource icon style definition for AWS Resources. Initializer import aws_prototyping_sdk.aws_arch aws_prototyping_sdk . aws_arch . AwsDrawioResourceIconStyle ( align : str , aspect : str , dashed : typing . Union [ int , float ], font_size : typing . Union [ int , float ], font_style : typing . Union [ str , typing . Union [ int , float ]], gradient_direction : str , html : typing . Union [ int , float ], outline_connect : typing . Union [ int , float ], stroke_color : str , vertical_align : str , vertical_label_position : str , pointer_event : typing . Union [ int , float ] = None , fill_color : str , font_color : str , gradient_color : str , res_icon : ShapeNames , shape : DrawioAws4ParentShapes ) Properties Name Type Description align str No description. aspect str No description. dashed typing.Union[int, float] No description. font_size typing.Union[int, float] No description. font_style typing.Union[str, typing.Union[int, float]] No description. gradient_direction str No description. html typing.Union[int, float] No description. outline_connect typing.Union[int, float] No description. stroke_color str No description. vertical_align str No description. vertical_label_position str No description. pointer_event typing.Union[int, float] No description. fill_color str No description. font_color str No description. gradient_color str No description. res_icon aws_prototyping_sdk.aws_arch.DrawioSpec.Aws4.ShapeNames No description. shape aws_prototyping_sdk.aws_arch.DrawioAws4ParentShapes No description. align Required align : str Type: str aspect Required aspect : str Type: str dashed Required dashed : typing . Union [ int , float ] Type: typing.Union[int, float] font_size Required font_size : typing . Union [ int , float ] Type: typing.Union[int, float] font_style Required font_style : typing . Union [ str , typing . Union [ int , float ]] Type: typing.Union[str, typing.Union[int, float]] gradient_direction Required gradient_direction : str Type: str html Required html : typing . Union [ int , float ] Type: typing.Union[int, float] outline_connect Required outline_connect : typing . Union [ int , float ] Type: typing.Union[int, float] stroke_color Required stroke_color : str Type: str vertical_align Required vertical_align : str Type: str vertical_label_position Required vertical_label_position : str Type: str pointer_event Optional pointer_event : typing . Union [ int , float ] Type: typing.Union[int, float] fill_color Required fill_color : str Type: str font_color Required font_color : str Type: str gradient_color Required gradient_color : str Type: str res_icon Required res_icon : ShapeNames Type: aws_prototyping_sdk.aws_arch.DrawioSpec.Aws4.ShapeNames shape Required shape : DrawioAws4ParentShapes Type: aws_prototyping_sdk.aws_arch.DrawioAws4ParentShapes AwsDrawioShapeStyle Drawio shape based style definition. Initializer import aws_prototyping_sdk.aws_arch aws_prototyping_sdk . aws_arch . AwsDrawioShapeStyle ( align : str , aspect : str , dashed : typing . Union [ int , float ], font_size : typing . Union [ int , float ], font_style : typing . Union [ str , typing . Union [ int , float ]], gradient_direction : str , html : typing . Union [ int , float ], outline_connect : typing . Union [ int , float ], stroke_color : str , vertical_align : str , vertical_label_position : str , pointer_event : typing . Union [ int , float ] = None , fill_color : str , font_color : str , gradient_color : str , shape : ShapeNames ) Properties Name Type Description align str No description. aspect str No description. dashed typing.Union[int, float] No description. font_size typing.Union[int, float] No description. font_style typing.Union[str, typing.Union[int, float]] No description. gradient_direction str No description. html typing.Union[int, float] No description. outline_connect typing.Union[int, float] No description. stroke_color str No description. vertical_align str No description. vertical_label_position str No description. pointer_event typing.Union[int, float] No description. fill_color str No description. font_color str No description. gradient_color str No description. shape aws_prototyping_sdk.aws_arch.DrawioSpec.Aws4.ShapeNames No description. align Required align : str Type: str aspect Required aspect : str Type: str dashed Required dashed : typing . Union [ int , float ] Type: typing.Union[int, float] font_size Required font_size : typing . Union [ int , float ] Type: typing.Union[int, float] font_style Required font_style : typing . Union [ str , typing . Union [ int , float ]] Type: typing.Union[str, typing.Union[int, float]] gradient_direction Required gradient_direction : str Type: str html Required html : typing . Union [ int , float ] Type: typing.Union[int, float] outline_connect Required outline_connect : typing . Union [ int , float ] Type: typing.Union[int, float] stroke_color Required stroke_color : str Type: str vertical_align Required vertical_align : str Type: str vertical_label_position Required vertical_label_position : str Type: str pointer_event Optional pointer_event : typing . Union [ int , float ] Type: typing.Union[int, float] fill_color Required fill_color : str Type: str font_color Required font_color : str Type: str gradient_color Required gradient_color : str Type: str shape Required shape : ShapeNames Type: aws_prototyping_sdk.aws_arch.DrawioSpec.Aws4.ShapeNames DrawioAwsResourceIconStyleBase Based style definition for drawio aws resource icon. Initializer from aws_prototyping_sdk import aws_arch aws_arch . DrawioAwsResourceIconStyleBase ( align : str , aspect : str , dashed : typing . Union [ int , float ], font_size : typing . Union [ int , float ], font_style : typing . Union [ str , typing . Union [ int , float ]], gradient_direction : str , html : typing . Union [ int , float ], outline_connect : typing . Union [ int , float ], stroke_color : str , vertical_align : str , vertical_label_position : str , pointer_event : typing . Union [ int , float ] = None , fill_color : str , font_color : str , gradient_color : str ) Properties Name Type Description align str No description. aspect str No description. dashed typing.Union[int, float] No description. font_size typing.Union[int, float] No description. font_style typing.Union[str, typing.Union[int, float]] No description. gradient_direction str No description. html typing.Union[int, float] No description. outline_connect typing.Union[int, float] No description. stroke_color str No description. vertical_align str No description. vertical_label_position str No description. pointer_event typing.Union[int, float] No description. fill_color str No description. font_color str No description. gradient_color str No description. align Required align : str Type: str aspect Required aspect : str Type: str dashed Required dashed : typing . Union [ int , float ] Type: typing.Union[int, float] font_size Required font_size : typing . Union [ int , float ] Type: typing.Union[int, float] font_style Required font_style : typing . Union [ str , typing . Union [ int , float ]] Type: typing.Union[str, typing.Union[int, float]] gradient_direction Required gradient_direction : str Type: str html Required html : typing . Union [ int , float ] Type: typing.Union[int, float] outline_connect Required outline_connect : typing . Union [ int , float ] Type: typing.Union[int, float] stroke_color Required stroke_color : str Type: str vertical_align Required vertical_align : str Type: str vertical_label_position Required vertical_label_position : str Type: str pointer_event Optional pointer_event : typing . Union [ int , float ] Type: typing.Union[int, float] fill_color Required fill_color : str Type: str font_color Required font_color : str Type: str gradient_color Required gradient_color : str Type: str DrawioAwsShapeStyleBase Base definition of drawio aws shape style. Initializer from aws_prototyping_sdk import aws_arch aws_arch . DrawioAwsShapeStyleBase ( align : str , aspect : str , dashed : typing . Union [ int , float ], font_size : typing . Union [ int , float ], font_style : typing . Union [ str , typing . Union [ int , float ]], gradient_direction : str , html : typing . Union [ int , float ], outline_connect : typing . Union [ int , float ], stroke_color : str , vertical_align : str , vertical_label_position : str , pointer_event : typing . Union [ int , float ] = None ) Properties Name Type Description align str No description. aspect str No description. dashed typing.Union[int, float] No description. font_size typing.Union[int, float] No description. font_style typing.Union[str, typing.Union[int, float]] No description. gradient_direction str No description. html typing.Union[int, float] No description. outline_connect typing.Union[int, float] No description. stroke_color str No description. vertical_align str No description. vertical_label_position str No description. pointer_event typing.Union[int, float] No description. align Required align : str Type: str aspect Required aspect : str Type: str dashed Required dashed : typing . Union [ int , float ] Type: typing.Union[int, float] font_size Required font_size : typing . Union [ int , float ] Type: typing.Union[int, float] font_style Required font_style : typing . Union [ str , typing . Union [ int , float ]] Type: typing.Union[str, typing.Union[int, float]] gradient_direction Required gradient_direction : str Type: str html Required html : typing . Union [ int , float ] Type: typing.Union[int, float] outline_connect Required outline_connect : typing . Union [ int , float ] Type: typing.Union[int, float] stroke_color Required stroke_color : str Type: str vertical_align Required vertical_align : str Type: str vertical_label_position Required vertical_label_position : str Type: str pointer_event Optional pointer_event : typing . Union [ int , float ] Type: typing.Union[int, float] GroupFormat Theme group format definition. Initializer from aws_prototyping_sdk import aws_arch aws_arch . GroupFormat ( bgcolor : typing . Union [ str , bool ], border_color : typing . Union [ str , bool ], border_style : str , color : typing . Union [ str , bool ], icon_png : str = None , label_location : str = None ) Properties Name Type Description bgcolor typing.Union[str, bool] No description. border_color typing.Union[str, bool] No description. border_style str No description. color typing.Union[str, bool] No description. icon_png str No description. label_location str No description. bgcolor Required bgcolor : typing . Union [ str , bool ] Type: typing.Union[str, bool] border_color Required border_color : typing . Union [ str , bool ] Type: typing.Union[str, bool] border_style Required border_style : str Type: str color Required color : typing . Union [ str , bool ] Type: typing.Union[str, bool] icon_png Optional icon_png : str Type: str label_location Optional label_location : str Type: str ParsedAssetKey Parsed asset key. Initializer import aws_prototyping_sdk.aws_arch aws_prototyping_sdk . aws_arch . ParsedAssetKey ( asset_key : str , basename : str , category : str , instance_type : str = None , iot_thing : str = None , resource : str = None , service : str = None ) Properties Name Type Description asset_key str Reference to the full key that was parsed. basename str The last segment of the key (which is the nested icon). category str Category id. instance_type str The instance type if key is for an ec2 instance. iot_thing str The iot thing if key is for an iot thing. resource str Resource id if key is for a resource. service str Service id if key is partitioned by resource. asset_key Required asset_key : str Type: str Reference to the full key that was parsed. basename Required basename : str Type: str The last segment of the key (which is the nested icon). For instances and things this includes the dir prefix. category Required category : str Type: str Category id. instance_type Optional instance_type : str Type: str The instance type if key is for an ec2 instance. iot_thing Optional iot_thing : str Type: str The iot thing if key is for an iot thing. resource Optional resource : str Type: str Resource id if key is for a resource. service Optional service : str Type: str Service id if key is partitioned by resource. ParsedAssetKey Parsed asset key. Initializer from aws_prototyping_sdk import aws_arch aws_arch . ParsedAssetKey ( asset_key : str , basename : str , category : str , instance_type : str = None , iot_thing : str = None , resource : str = None , service : str = None ) Properties Name Type Description asset_key str Reference to the full key that was parsed. basename str The last segment of the key (which is the nested icon). category str Category id. instance_type str The instance type if key is for an ec2 instance. iot_thing str The iot thing if key is for an iot thing. resource str Resource id if key is for a resource. service str Service id if key is partitioned by resource. asset_key Required asset_key : str Type: str Reference to the full key that was parsed. basename Required basename : str Type: str The last segment of the key (which is the nested icon). For instances and things this includes the dir prefix. category Required category : str Type: str Category id. instance_type Optional instance_type : str Type: str The instance type if key is for an ec2 instance. iot_thing Optional iot_thing : str Type: str The iot thing if key is for an iot thing. resource Optional resource : str Type: str Resource id if key is for a resource. service Optional service : str Type: str Service id if key is partitioned by resource. Theme Theme definition. Initializer from aws_prototyping_sdk import aws_arch aws_arch . Theme ( arrows : ThemeArrows , backgrounds : ThemeBackgrounds , groups : ThemeGroups , id : str , text : ThemeText ) Properties Name Type Description arrows aws_prototyping_sdk.aws_arch.ThemeArrows No description. backgrounds aws_prototyping_sdk.aws_arch.ThemeBackgrounds No description. groups aws_prototyping_sdk.aws_arch.ThemeGroups No description. id str No description. text aws_prototyping_sdk.aws_arch.ThemeText No description. arrows Required arrows : ThemeArrows Type: aws_prototyping_sdk.aws_arch.ThemeArrows backgrounds Required backgrounds : ThemeBackgrounds Type: aws_prototyping_sdk.aws_arch.ThemeBackgrounds groups Required groups : ThemeGroups Type: aws_prototyping_sdk.aws_arch.ThemeGroups id Required id : str Type: str text Required text : ThemeText Type: aws_prototyping_sdk.aws_arch.ThemeText ThemeArrows Theme arrow dictionary. Initializer from aws_prototyping_sdk import aws_arch aws_arch . ThemeArrows ( child : ArrowFormat , default : ArrowFormat , dependency : ArrowFormat , reference : ArrowFormat ) Properties Name Type Description child aws_prototyping_sdk.aws_arch.ArrowFormat No description. default aws_prototyping_sdk.aws_arch.ArrowFormat No description. dependency aws_prototyping_sdk.aws_arch.ArrowFormat No description. reference aws_prototyping_sdk.aws_arch.ArrowFormat No description. child Required child : ArrowFormat Type: aws_prototyping_sdk.aws_arch.ArrowFormat default Required default : ArrowFormat Type: aws_prototyping_sdk.aws_arch.ArrowFormat dependency Required dependency : ArrowFormat Type: aws_prototyping_sdk.aws_arch.ArrowFormat reference Required reference : ArrowFormat Type: aws_prototyping_sdk.aws_arch.ArrowFormat ThemeBackgrounds Theme background dictionary. Initializer from aws_prototyping_sdk import aws_arch aws_arch . ThemeBackgrounds ( base : str , generic : str , private : str , public : str ) Properties Name Type Description base str No description. generic str No description. private str No description. public str No description. base Required base : str Type: str generic Required generic : str Type: str private Required private : str Type: str public Required public : str Type: str ThemeGroups Theme group dicionary. Initializer from aws_prototyping_sdk import aws_arch aws_arch . ThemeGroups ( auto_scaling_group : GroupFormat , availability_zone : GroupFormat , aws_account : GroupFormat , aws_io_t_greengrass : GroupFormat , aws_io_t_greengrass_deployment : GroupFormat , aws_step_functions_workflow : GroupFormat , cloud : GroupFormat , cloud_alt : GroupFormat , corporate_data_center : GroupFormat , ec2_instance_contents : GroupFormat , elastic_beanstalk_container : GroupFormat , generic : GroupFormat , generic_alt : GroupFormat , private_subnet : GroupFormat , public_subnet : GroupFormat , region : GroupFormat , security_group : GroupFormat , server_contents : GroupFormat , spot_fleet : GroupFormat , vpc : GroupFormat ) Properties Name Type Description auto_scaling_group aws_prototyping_sdk.aws_arch.GroupFormat No description. availability_zone aws_prototyping_sdk.aws_arch.GroupFormat No description. aws_account aws_prototyping_sdk.aws_arch.GroupFormat No description. aws_io_t_greengrass aws_prototyping_sdk.aws_arch.GroupFormat No description. aws_io_t_greengrass_deployment aws_prototyping_sdk.aws_arch.GroupFormat No description. aws_step_functions_workflow aws_prototyping_sdk.aws_arch.GroupFormat No description. cloud aws_prototyping_sdk.aws_arch.GroupFormat No description. cloud_alt aws_prototyping_sdk.aws_arch.GroupFormat No description. corporate_data_center aws_prototyping_sdk.aws_arch.GroupFormat No description. ec2_instance_contents aws_prototyping_sdk.aws_arch.GroupFormat No description. elastic_beanstalk_container aws_prototyping_sdk.aws_arch.GroupFormat No description. generic aws_prototyping_sdk.aws_arch.GroupFormat No description. generic_alt aws_prototyping_sdk.aws_arch.GroupFormat No description. private_subnet aws_prototyping_sdk.aws_arch.GroupFormat No description. public_subnet aws_prototyping_sdk.aws_arch.GroupFormat No description. region aws_prototyping_sdk.aws_arch.GroupFormat No description. security_group aws_prototyping_sdk.aws_arch.GroupFormat No description. server_contents aws_prototyping_sdk.aws_arch.GroupFormat No description. spot_fleet aws_prototyping_sdk.aws_arch.GroupFormat No description. vpc aws_prototyping_sdk.aws_arch.GroupFormat No description. auto_scaling_group Required auto_scaling_group : GroupFormat Type: aws_prototyping_sdk.aws_arch.GroupFormat availability_zone Required availability_zone : GroupFormat Type: aws_prototyping_sdk.aws_arch.GroupFormat aws_account Required aws_account : GroupFormat Type: aws_prototyping_sdk.aws_arch.GroupFormat aws_io_t_greengrass Required aws_io_t_greengrass : GroupFormat Type: aws_prototyping_sdk.aws_arch.GroupFormat aws_io_t_greengrass_deployment Required aws_io_t_greengrass_deployment : GroupFormat Type: aws_prototyping_sdk.aws_arch.GroupFormat aws_step_functions_workflow Required aws_step_functions_workflow : GroupFormat Type: aws_prototyping_sdk.aws_arch.GroupFormat cloud Required cloud : GroupFormat Type: aws_prototyping_sdk.aws_arch.GroupFormat cloud_alt Required cloud_alt : GroupFormat Type: aws_prototyping_sdk.aws_arch.GroupFormat corporate_data_center Required corporate_data_center : GroupFormat Type: aws_prototyping_sdk.aws_arch.GroupFormat ec2_instance_contents Required ec2_instance_contents : GroupFormat Type: aws_prototyping_sdk.aws_arch.GroupFormat elastic_beanstalk_container Required elastic_beanstalk_container : GroupFormat Type: aws_prototyping_sdk.aws_arch.GroupFormat generic Required generic : GroupFormat Type: aws_prototyping_sdk.aws_arch.GroupFormat generic_alt Required generic_alt : GroupFormat Type: aws_prototyping_sdk.aws_arch.GroupFormat private_subnet Required private_subnet : GroupFormat Type: aws_prototyping_sdk.aws_arch.GroupFormat public_subnet Required public_subnet : GroupFormat Type: aws_prototyping_sdk.aws_arch.GroupFormat region Required region : GroupFormat Type: aws_prototyping_sdk.aws_arch.GroupFormat security_group Required security_group : GroupFormat Type: aws_prototyping_sdk.aws_arch.GroupFormat server_contents Required server_contents : GroupFormat Type: aws_prototyping_sdk.aws_arch.GroupFormat spot_fleet Required spot_fleet : GroupFormat Type: aws_prototyping_sdk.aws_arch.GroupFormat vpc Required vpc : GroupFormat Type: aws_prototyping_sdk.aws_arch.GroupFormat ThemeText Theme text dictionary. Initializer from aws_prototyping_sdk import aws_arch aws_arch . ThemeText ( default : str , primary : str , secondary : str , tertiary : str ) Properties Name Type Description default str No description. primary str No description. secondary str No description. tertiary str No description. default Required default : str Type: str primary Required primary : str Type: str secondary Required secondary : str Type: str tertiary Required tertiary : str Type: str Classes AwsArchitecture AwsArchitecture provides an interface for retrieving the inferred normalization between @aws-cdk/cfnspec and AWS Architecture Icons systems for all CloudFormation \"services\" and \"resources\". Static Functions Name Description format_asset_path Gets formatted asset path including extension and theme. get_category Get specific category based on id. get_instance_type_icon Get icon for EC2 instance type. get_rds_instance_type_icon Get icon for RDS instance type. get_resource Get resource based on Cfn Resource Type (eg: AWS::S3::Bucket). get_service Get specific service based on identifier (eg: S3, AWS::S3, AWS::S3::Bucket). parse_asset_path Parse assets path into part descriptor. resolve_asset_path Resolve relative asset path to absolute asset path. resolve_asset_svg_data_url Resolve relative asset path as SVG Data URL . format_asset_path import aws_prototyping_sdk.aws_arch aws_prototyping_sdk . aws_arch . AwsArchitecture . format_asset_path ( qualified_asset_key : str , format : str , theme : str = None ) Gets formatted asset path including extension and theme. qualified_asset_key Required Type: str The qualified asset key (eg: compute/ec2/service_icon, storage/s3/bucket). format Required Type: str The format to return (eg: png, svg). theme Optional Type: str (Optional) The theme to use, if not specific or now matching asset for the them, the default theme is used. get_category import aws_prototyping_sdk.aws_arch aws_prototyping_sdk . aws_arch . AwsArchitecture . get_category ( category : str ) Get specific category based on id. {@link AwsCategory.getCategory} category Required Type: str get_instance_type_icon import aws_prototyping_sdk.aws_arch aws_prototyping_sdk . aws_arch . AwsArchitecture . get_instance_type_icon ( instance_type : str , format : str = None , theme : str = None ) Get icon for EC2 instance type. instance_type Required Type: str The { @link AwsAsset.InstanceType} to get icon for. format Optional Type: str The format of icon. theme Optional Type: str Optional theme. get_rds_instance_type_icon import aws_prototyping_sdk.aws_arch aws_prototyping_sdk . aws_arch . AwsArchitecture . get_rds_instance_type_icon ( instance_type : str , format : str = None , theme : str = None ) Get icon for RDS instance type. instance_type Required Type: str The { @link AwsAsset.RdsInstanceType} to get icon for. format Optional Type: str The format of icon. theme Optional Type: str Optional theme. get_resource import aws_prototyping_sdk.aws_arch aws_prototyping_sdk . aws_arch . AwsArchitecture . get_resource ( cfn_type : str ) Get resource based on Cfn Resource Type (eg: AWS::S3::Bucket). {@link AwsResource.getResource} cfn_type Required Type: str get_service import aws_prototyping_sdk.aws_arch aws_prototyping_sdk . aws_arch . AwsArchitecture . get_service ( identifier : str ) Get specific service based on identifier (eg: S3, AWS::S3, AWS::S3::Bucket). {@link AwsSerfice.getService} identifier Required Type: str parse_asset_path import aws_prototyping_sdk.aws_arch aws_prototyping_sdk . aws_arch . AwsArchitecture . parse_asset_path ( asset_path : str ) Parse assets path into part descriptor. asset_path Required Type: str Absolute or relative asset file path to parse. resolve_asset_path import aws_prototyping_sdk.aws_arch aws_prototyping_sdk . aws_arch . AwsArchitecture . resolve_asset_path ( asset_path : str ) Resolve relative asset path to absolute asset path. asset_path Required Type: str The relative asset path to resolve. resolve_asset_svg_data_url import aws_prototyping_sdk.aws_arch aws_prototyping_sdk . aws_arch . AwsArchitecture . resolve_asset_svg_data_url ( svg_asset_path : str ) Resolve relative asset path as SVG Data URL . data:image/svg+xml;base64,... svg_asset_path Required Type: str The relative path of svg asset to resolve. Properties Name Type Description asset_directory str The absolute directory where AWS Architecture Icons are stored and retrieved. categories typing.Mapping[ AwsCategory ] Get all categories. resources typing.Mapping[ AwsResource ] Get all resources. services typing.Mapping[ AwsService ] Get all services. asset_directory Required asset_directory : str Type: str The absolute directory where AWS Architecture Icons are stored and retrieved. categories Required categories : typing . Mapping [ AwsCategory ] Type: typing.Mapping[ AwsCategory ] Get all categories. {@link AwsCategory.categories} resources Required resources : typing . Mapping [ AwsResource ] Type: typing.Mapping[ AwsResource ] Get all resources. {@link AwsResource.resources} services Required services : typing . Mapping [ AwsService ] Type: typing.Mapping[ AwsService ] Get all services. {@link AwsService.services} AwsCategory AwsCategory class provides an interface for normalizing category metadata between mapped systems. Methods Name Description category_services Gets a list of all services within this category. icon Retrieves a well-formatted relative path to the icon for this given category in the specified format. category_services def category_services () -> typing . List [ AwsService ] Gets a list of all services within this category. icon def icon ( format : str , theme : str = None ) -> str Retrieves a well-formatted relative path to the icon for this given category in the specified format. format Required Type: str theme Optional Type: str Static Functions Name Description get_category Get { @link AwsCategory} based on { @link AwsCategoryId}. get_category import aws_prototyping_sdk.aws_arch aws_prototyping_sdk . aws_arch . AwsCategory . get_category ( id : str ) Get { @link AwsCategory} based on { @link AwsCategoryId}. id Required Type: str The id of the category to retrieve. Properties Name Type Description categories typing.Mapping[ AwsCategory ] Get record of all categories keyed by category id. fill_color str Fill color for the category. font_color str Font color for the category. gradient_color str Gradien color for the category. id str The unique id of the category. name str The proper name of the category. variants typing.List[str] Alternative names used to identity this category. drawio_styles AwsCategoryDrawioStyles Drawio style definition for this category. categories Required categories : typing . Mapping [ AwsCategory ] Type: typing.Mapping[ AwsCategory ] Get record of all categories keyed by category id. fill_color Required fill_color : str Type: str Fill color for the category. font_color Required font_color : str Type: str Font color for the category. gradient_color Required gradient_color : str Type: str Gradien color for the category. id Required id : str Type: str The unique id of the category. Example \"security_identity_compliance\" name Required name : str Type: str The proper name of the category. Example \"Security, Identity, & Compliance\" variants Required variants : typing . List [ str ] Type: typing.List[str] Alternative names used to identity this category. drawio_styles Optional drawio_styles : AwsCategoryDrawioStyles Type: AwsCategoryDrawioStyles Drawio style definition for this category. AwsCategoryDrawioStyles AwsCategoryDrawioStyles is a utility class for constructing drawio shape styles for services and resources. Initializers import aws_prototyping_sdk.aws_arch aws_prototyping_sdk . aws_arch . AwsCategoryDrawioStyles ( category_shape : ShapeNames , align : str , aspect : str , dashed : typing . Union [ int , float ], font_size : typing . Union [ int , float ], font_style : typing . Union [ str , typing . Union [ int , float ]], gradient_direction : str , html : typing . Union [ int , float ], outline_connect : typing . Union [ int , float ], stroke_color : str , vertical_align : str , vertical_label_position : str , pointer_event : typing . Union [ int , float ] = None , fill_color : str , font_color : str , gradient_color : str ) Name Type Description category_shape aws_prototyping_sdk.aws_arch.DrawioSpec.Aws4.ShapeNames No description. align str No description. aspect str No description. dashed typing.Union[int, float] No description. font_size typing.Union[int, float] No description. font_style typing.Union[str, typing.Union[int, float]] No description. gradient_direction str No description. html typing.Union[int, float] No description. outline_connect typing.Union[int, float] No description. stroke_color str No description. vertical_align str No description. vertical_label_position str No description. pointer_event typing.Union[int, float] No description. fill_color str No description. font_color str No description. gradient_color str No description. category_shape Required Type: aws_prototyping_sdk.aws_arch.DrawioSpec.Aws4.ShapeNames align Required Type: str aspect Required Type: str dashed Required Type: typing.Union[int, float] font_size Required Type: typing.Union[int, float] font_style Required Type: typing.Union[str, typing.Union[int, float]] gradient_direction Required Type: str html Required Type: typing.Union[int, float] outline_connect Required Type: typing.Union[int, float] stroke_color Required Type: str vertical_align Required Type: str vertical_label_position Required Type: str pointer_event Optional Type: typing.Union[int, float] fill_color Required Type: str font_color Required Type: str gradient_color Required Type: str Methods Name Description get_resource_style Gets the drawio style for a resource based on the category style. get_service_style Gets the drawio style for a service based on the category style. get_resource_style def get_resource_style ( resource_shape : ShapeNames ) -> AwsDrawioShapeStyle Gets the drawio style for a resource based on the category style. resource_shape Required Type: aws_prototyping_sdk.aws_arch.DrawioSpec.Aws4.ShapeNames The resource shape to style based on category. get_service_style def get_service_style ( service_shape : ShapeNames ) -> AwsDrawioResourceIconStyle Gets the drawio style for a service based on the category style. service_shape Required Type: aws_prototyping_sdk.aws_arch.DrawioSpec.Aws4.ShapeNames The service shape to style based on category. Properties Name Type Description base aws_prototyping_sdk.aws_arch.DrawioAwsResourceIconStyleBase No description. category_shape aws_prototyping_sdk.aws_arch.DrawioSpec.Aws4.ShapeNames No description. category_style AwsDrawioResourceIconStyle Get the drawio style for this category. base Required base : DrawioAwsResourceIconStyleBase Type: aws_prototyping_sdk.aws_arch.DrawioAwsResourceIconStyleBase category_shape Required category_shape : ShapeNames Type: aws_prototyping_sdk.aws_arch.DrawioSpec.Aws4.ShapeNames category_style Required category_style : AwsDrawioResourceIconStyle Type: AwsDrawioResourceIconStyle Get the drawio style for this category. AwsResource AwsResource class provides an interface for normalizing resource metadata between mapped systems. Methods Name Description drawio_style Gets the draiwio style for the resource. get_category_icon Gets the category icon for the resource. get_general_icon Gets the general icon for the resource if available. get_resource_icon Gets the resource specific icon for the resource. get_service_icon Gets the service icon for the resource. icon Gets the best icon match for the resource following the order of: 1. drawio_style def drawio_style () -> AwsDrawioShapeStyle Gets the draiwio style for the resource. get_category_icon def get_category_icon ( format : str , theme : str = None ) -> str Gets the category icon for the resource. This maybe different than { @link AwsResource.service.category.icon} based on mappings overrides, which if do not exist will fallback to { @link AwsResource.service.category.icon}. {@link AwsService.icon} format Required Type: str The format of icon. theme Optional Type: str Optional theme. get_general_icon def get_general_icon ( format : str , theme : str = None ) -> str Gets the general icon for the resource if available. format Required Type: str The format of icon. theme Optional Type: str Optional theme. get_resource_icon def get_resource_icon ( format : str , theme : str = None ) -> str Gets the resource specific icon for the resource. format Required Type: str The format of icon. theme Optional Type: str Optional theme. get_service_icon def get_service_icon ( format : str , theme : str = None ) -> str Gets the service icon for the resource. This maybe different than { @link AwsResource.service.icon} based on mappings overrides, which if do not exist will fallback to { @link AwsResource.service.icon}. {@link AwsService.icon} format Required Type: str The format of icon. theme Optional Type: str Optional theme. icon def icon ( format : str , theme : str = None ) -> str Gets the best icon match for the resource following the order of: 1. explicit resource icon 2. general icon 3. service icon format Required Type: str The format of icon. theme Optional Type: str Optional theme. Static Functions Name Description find_resource Find { @link AwsResource} associated with given value. get_resource Get { @link AwsResource} by CloudFormation resource type. find_resource import aws_prototyping_sdk.aws_arch aws_prototyping_sdk . aws_arch . AwsResource . find_resource ( value : str ) Find { @link AwsResource} associated with given value. value Required Type: str The value to match { @link AwsResource}; can be id, asset key, full name, etc. get_resource import aws_prototyping_sdk.aws_arch aws_prototyping_sdk . aws_arch . AwsResource . get_resource ( cfn_resource_type : str ) Get { @link AwsResource} by CloudFormation resource type. cfn_resource_type Required Type: str Fully qualifief CloudFormation resource type (eg: AWS:S3:Bucket). Properties Name Type Description resources typing.Mapping[ AwsResource ] Get record of all resources keyed by resource id. cfn_resource_type str Fully-qualified CloudFormation resource type (eg: \"AWS:S3:Bucket\"). service AwsService The { @link AwsService} the resource belongs to. drawio_shape aws_prototyping_sdk.aws_arch.DrawioSpec.Aws4.ShapeNames The drawio shape mapped to this resource, or undefined if no mapping. full_name str The proper full name of the resource. resources Required resources : typing . Mapping [ AwsResource ] Type: typing.Mapping[ AwsResource ] Get record of all resources keyed by resource id. cfn_resource_type Required cfn_resource_type : str Type: str Fully-qualified CloudFormation resource type (eg: \"AWS:S3:Bucket\"). service Required service : AwsService Type: AwsService The { @link AwsService} the resource belongs to. drawio_shape Optional drawio_shape : ShapeNames Type: aws_prototyping_sdk.aws_arch.DrawioSpec.Aws4.ShapeNames The drawio shape mapped to this resource, or undefined if no mapping. full_name Optional full_name : str Type: str The proper full name of the resource. Example # Example automatically generated from non-compiling source. May contain errors. \"Bucket\" , \"Amazon S3 on Outposts\" AwsService AwsService class provides an interface for normalizing service metadata between mapped systems. Methods Name Description drawio_style Get drawio style for this service. icon Get relative asset icon for the service for a given format and optional theme. service_resources List all resources of this service. drawio_style def drawio_style () -> AwsDrawioResourceIconStyle Get drawio style for this service. icon def icon ( format : str , theme : str = None ) -> str Get relative asset icon for the service for a given format and optional theme. format Required Type: str The format of icon. theme Optional Type: str Optional theme. service_resources def service_resources () -> typing . List [ AwsResource ] List all resources of this service. Static Functions Name Description find_service Finds the { @link AwsService} associated with a given value. get_service Get { @link AwsService} by CloudFormation \"service\" name, where service name is expressed as <provider>::<service>::<resource> . find_service import aws_prototyping_sdk.aws_arch aws_prototyping_sdk . aws_arch . AwsService . find_service ( value : str ) Finds the { @link AwsService} associated with a given value. value Required Type: str Value to match { @link AwsService}, which can be id , assetKey , fullName , etc. get_service import aws_prototyping_sdk.aws_arch aws_prototyping_sdk . aws_arch . AwsService . get_service ( cfn_service : str ) Get { @link AwsService} by CloudFormation \"service\" name, where service name is expressed as <provider>::<service>::<resource> . cfn_service Required Type: str The service name to retrieve { @link AwsService} for. Properties Name Type Description services typing.Mapping[ AwsService ] Get record of all { @link AwsService}s keyed by id . cfn_provider str The CloudFormation \"provider\" for the service, as expressed by <provicer>::<service>::<resource> . cfn_service str The CloudFormation \"service\" for the service, as expressed by <provicer>::<service>::<resource> . full_name str The proper full name of the service. category AwsCategory The category the service belongs to, or undefined if does not belong to a category. drawio_shape aws_prototyping_sdk.aws_arch.DrawioSpec.Aws4.ShapeNames Drawio shape associated with this service, or undefined if service not mapped to draiwio shape. pricing_metadata aws_prototyping_sdk.aws_arch.PricingManifest.Service Get service pricing metadata. pricing_service_code str The pricing serviceCode associated with this service, or undefined if service not mapped to pricing. services Required services : typing . Mapping [ AwsService ] Type: typing.Mapping[ AwsService ] Get record of all { @link AwsService}s keyed by id . cfn_provider Required cfn_provider : str Type: str The CloudFormation \"provider\" for the service, as expressed by <provicer>::<service>::<resource> . cfn_service Required cfn_service : str Type: str The CloudFormation \"service\" for the service, as expressed by <provicer>::<service>::<resource> . full_name Required full_name : str Type: str The proper full name of the service. Example # Example automatically generated from non-compiling source. May contain errors. \"AWS Glue\" , \"Amazon S3\" category Optional category : AwsCategory Type: AwsCategory The category the service belongs to, or undefined if does not belong to a category. drawio_shape Optional drawio_shape : ShapeNames Type: aws_prototyping_sdk.aws_arch.DrawioSpec.Aws4.ShapeNames Drawio shape associated with this service, or undefined if service not mapped to draiwio shape. pricing_metadata Optional pricing_metadata : Service Type: aws_prototyping_sdk.aws_arch.PricingManifest.Service Get service pricing metadata. pricing_service_code Optional pricing_service_code : str Type: str The pricing serviceCode associated with this service, or undefined if service not mapped to pricing. Enums DarkPalette Dark theme color palette. Members Name Description PUBLIC No description. PRIVATE No description. GENERIC No description. PRIMARY No description. SECONDARY No description. TERTIARY No description. PUBLIC PRIVATE GENERIC PRIMARY SECONDARY TERTIARY DrawioAws4ParentShapes Draiwio aws4 parent shapes enum. Members Name Description RESOURCE_ICON No description. RESOURCE_ICON LightPalette Light theme color palette. Members Name Description PUBLIC No description. PRIVATE No description. GENERIC No description. PRIMARY No description. SECONDARY No description. TERTIARY No description. PUBLIC PRIVATE GENERIC PRIMARY SECONDARY TERTIARY","title":"Index"},{"location":"python/aws-arch/index.html#aws-arch-aws-architecture","text":"Library to provide metadata for AWS Services and AWS Resources. This package generates mappings between @aws-cdk/cfnspec and AWS Architecture Icons , and resolves resource metadata between these systems to infer a normalized definition of an AwsService and AwsResource . The primary aim of this package is to provide a consistent mechanism for other libraries to retrieve naming and assets associated with CloudFormation resources, and by extension CDK resources.","title":"aws-arch (AWS Architecture)"},{"location":"python/aws-arch/index.html#get-started","text":"yarn add '@aws-prototyping-sdk/aws-arch' # Example automatically generated from non-compiling source. May contain errors. from aws_prototyping_sdk.aws_arch import AwsArchitecture s3_bucket = AwsArchitecture . get_resource ( \"AWS::S3::Bucket\" ) s3_service = AwsArchitecture . get_service ( s3_bucket . service ) print ( s3_bucket ) print ( s3_service ) // => console.log(s3Bucket); { \"name\" : \"Amazon Simple Storage Service Bucket\" , \"cfnType\" : \"AWS::S3::Bucket\" , \"awsAssetName\" : \"Amazon-Simple-Storage-Service_Bucket\" , \"awsAssetIcon\" : \"resources/Amazon-Simple-Storage-Service_Bucket.png\" , \"service\" : \"S3\" } // => console.log(s3Service); { \"provider\" : \"AWS\" , \"name\" : \"Amazon Simple Storage Service\" , \"cfnName\" : \"S3\" , \"awsAssetIcon\" : \"services/Amazon-Simple-Storage-Service.png\" , \"awsAssetName\" : \"Amazon-Simple-Storage-Service\" }","title":"Get Started"},{"location":"python/aws-arch/index.html#aws-achritecture-icons","text":"Retrieve category , service , and resource AWS Architecture Icons . Icon methods return relative asset key paths, as most frameworks have the concept of a base path (imagepaths). Use AwsArchitecture.resolveAssetPath(...) to get absolute path.","title":"Aws Achritecture Icons"},{"location":"python/aws-arch/index.html#development","text":"This package auto-generates many types and asset files from external sources, which are then auto mapped based on common patterns and explict mappings for edge-cases. The auto-generation is handled by /scripts files which can be run via corresponding package scripts (eg: npx projen generate:assets => /scripts/generate-assets.ts ). There is an implicit sequential order the scripts must be called in due to dependencies, which is handled by npx projen generate script. The generate script is also invoked prior to npx projen build if generated asset directory does not exist. For local development of packages that depend on aws-arch package, you will need to call npx projen generate && npx projen compile (or npx projen build ) prior to locally importing this package. To update AWS Architecture Icons , change the url in ASSET_PACKAGE_ZIP_URL .","title":"Development"},{"location":"python/aws-arch/index.html#api-reference","text":"","title":"API Reference "},{"location":"python/aws-arch/index.html#structs","text":"","title":"Structs "},{"location":"python/aws-arch/index.html#arrowformat","text":"Theme arrow format definition.","title":"ArrowFormat "},{"location":"python/aws-arch/index.html#awscategorydefinition","text":"Category definition.","title":"AwsCategoryDefinition "},{"location":"python/aws-arch/index.html#awsdrawioresourceiconstyle","text":"Drawio resource icon style definition for AWS Resources.","title":"AwsDrawioResourceIconStyle "},{"location":"python/aws-arch/index.html#awsdrawioshapestyle","text":"Drawio shape based style definition.","title":"AwsDrawioShapeStyle "},{"location":"python/aws-arch/index.html#drawioawsresourceiconstylebase","text":"Based style definition for drawio aws resource icon.","title":"DrawioAwsResourceIconStyleBase "},{"location":"python/aws-arch/index.html#drawioawsshapestylebase","text":"Base definition of drawio aws shape style.","title":"DrawioAwsShapeStyleBase "},{"location":"python/aws-arch/index.html#groupformat","text":"Theme group format definition.","title":"GroupFormat "},{"location":"python/aws-arch/index.html#parsedassetkey","text":"Parsed asset key.","title":"ParsedAssetKey "},{"location":"python/aws-arch/index.html#parsedassetkey_1","text":"Parsed asset key.","title":"ParsedAssetKey "},{"location":"python/aws-arch/index.html#theme","text":"Theme definition.","title":"Theme "},{"location":"python/aws-arch/index.html#themearrows","text":"Theme arrow dictionary.","title":"ThemeArrows "},{"location":"python/aws-arch/index.html#themebackgrounds","text":"Theme background dictionary.","title":"ThemeBackgrounds "},{"location":"python/aws-arch/index.html#themegroups","text":"Theme group dicionary.","title":"ThemeGroups "},{"location":"python/aws-arch/index.html#themetext","text":"Theme text dictionary.","title":"ThemeText "},{"location":"python/aws-arch/index.html#classes","text":"","title":"Classes "},{"location":"python/aws-arch/index.html#awsarchitecture","text":"AwsArchitecture provides an interface for retrieving the inferred normalization between @aws-cdk/cfnspec and AWS Architecture Icons systems for all CloudFormation \"services\" and \"resources\".","title":"AwsArchitecture "},{"location":"python/aws-arch/index.html#awscategory","text":"AwsCategory class provides an interface for normalizing category metadata between mapped systems.","title":"AwsCategory "},{"location":"python/aws-arch/index.html#awscategorydrawiostyles","text":"AwsCategoryDrawioStyles is a utility class for constructing drawio shape styles for services and resources.","title":"AwsCategoryDrawioStyles "},{"location":"python/aws-arch/index.html#awsresource","text":"AwsResource class provides an interface for normalizing resource metadata between mapped systems.","title":"AwsResource "},{"location":"python/aws-arch/index.html#awsservice","text":"AwsService class provides an interface for normalizing service metadata between mapped systems.","title":"AwsService "},{"location":"python/aws-arch/index.html#enums","text":"","title":"Enums "},{"location":"python/aws-arch/index.html#darkpalette","text":"Dark theme color palette.","title":"DarkPalette "},{"location":"python/aws-arch/index.html#drawioaws4parentshapes","text":"Draiwio aws4 parent shapes enum.","title":"DrawioAws4ParentShapes "},{"location":"python/aws-arch/index.html#lightpalette","text":"Light theme color palette.","title":"LightPalette "},{"location":"python/cloudscape-react-ts-website/index.html","text":"Experimental Warning This is packaged in a separate module while the API is being stabilized. This package is subject to non-backward compatible changes or removal in any future version. Breaking changes will be announced in the release notes. Whilst you may use this package, you may need to update your source code when upgrading to a newer version. Once we stabilize the module, it will be included into the stable aws-prototyping-sdk library. Experimental Usage To use this package, add a dependency on: aws_prototyping_sdk.cloudscape_react_ts_website Getting started To create a new Cloudscape React Typescript Project, there are a couple of options: Via Projen CLI npx projen new --from @aws-prototyping-sdk/cloudscape-react-ts-website cloudscape-react-ts-website [--application-name <your-app>] Programmatically # Example automatically generated from non-compiling source. May contain errors. CloudscapeReactTsWebsiteProject ( default_release_branch = \"mainline\" , name = \"<name-of-package>\" , application_name = \"<name-of-app>\" ) Running your synthesized Application To run your synthesized application locally, run npx projen dev . Developer Notes To enable Cognito auth, ensure you have a runtime-config.json file in the root of your deployed project which at least contains the following: { \"region\" : \"<aws-region>\" , \"identityPoolId\" : \"<identity-pool-id>\" , \"userPoolId\" : \"<user-pool-id>\" , \"userPoolWebClientId\" : \"<user-pool-web-client-id>\" } The easiest way to get this set up is to use the static-website + identity packages to deploy your website. An example of how to do this is as follows: # Example automatically generated from non-compiling source. May contain errors. user_identity = UserIdentity ( self , \"UserIdentity\" ) StaticWebsite ( self , \"StaticWebsite\" , website_content_path = \"<relative>/<path>/<to>/<built>/<website>\" , runtime_options = { \"json_payload\" : { \"region\" : Stack . of ( self ) . region , \"identity_pool_id\" : user_identity . identity_pool . identity_pool_id , \"user_pool_id\" : user_identity . user_pool . user_pool_id , \"user_pool_web_client_id\" : user_identity . user_pool_client . user_pool_client_id } } ) For local development, you will need to copy the generated runtime-config.json file into your /public directory. An example on how to do this is as follows: curl https://dxxxxxxxxxx.cloudfront.net/runtime-config.json > public/runtime-config.json API Reference Structs CloudscapeReactTsWebsiteProjectOptions Configuration options for the CloudscapeReactTsWebsiteProject. Initializer import aws_prototyping_sdk.cloudscape_react_ts_website aws_prototyping_sdk . cloudscape_react_ts_website . CloudscapeReactTsWebsiteProjectOptions ( name : str , commit_generated : bool = None , git_options : GitOptions = None , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , renovatebot : bool = None , renovatebot_options : RenovatebotOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge : bool = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_credentials : GithubCredentials = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , allow_library_dependencies : bool = None , author_email : str = None , author_name : str = None , author_organization : bool = None , author_url : str = None , auto_detect_bin : bool = None , bin : typing . Mapping [ str ] = None , bugs_email : str = None , bugs_url : str = None , bundled_deps : typing . List [ str ] = None , code_artifact_options : CodeArtifactOptions = None , deps : typing . List [ str ] = None , description : str = None , dev_deps : typing . List [ str ] = None , entrypoint : str = None , homepage : str = None , keywords : typing . List [ str ] = None , license : str = None , licensed : bool = None , max_node_version : str = None , min_node_version : str = None , npm_access : NpmAccess = None , npm_registry : str = None , npm_registry_url : str = None , npm_token_secret : str = None , package_manager : NodePackageManager = None , package_name : str = None , peer_dependency_options : PeerDependencyOptions = None , peer_deps : typing . List [ str ] = None , pnpm_version : str = None , repository : str = None , repository_directory : str = None , scoped_packages_options : typing . List [ ScopedPackagesOptions ] = None , scripts : typing . Mapping [ str ] = None , stability : str = None , jsii_release_version : str = None , major_version : typing . Union [ int , float ] = None , min_major_version : typing . Union [ int , float ] = None , npm_dist_tag : str = None , post_build_steps : typing . List [ JobStep ] = None , prerelease : str = None , publish_dry_run : bool = None , publish_tasks : bool = None , release_branches : typing . Mapping [ BranchOptions ] = None , release_every_commit : bool = None , release_failure_issue : bool = None , release_failure_issue_label : str = None , release_schedule : str = None , release_tag_prefix : str = None , release_trigger : ReleaseTrigger = None , release_workflow_name : str = None , release_workflow_setup_steps : typing . List [ JobStep ] = None , versionrc_options : typing . Mapping [ typing . Any ] = None , workflow_container_image : str = None , workflow_runs_on : typing . List [ str ] = None , default_release_branch : str , artifacts_directory : str = None , auto_approve_upgrades : bool = None , build_workflow : bool = None , build_workflow_triggers : Triggers = None , bundler_options : BundlerOptions = None , code_cov : bool = None , code_cov_token_secret : str = None , copyright_owner : str = None , copyright_period : str = None , dependabot : bool = None , dependabot_options : DependabotOptions = None , deps_upgrade : bool = None , deps_upgrade_options : UpgradeDependenciesOptions = None , gitignore : typing . List [ str ] = None , jest : bool = None , jest_options : JestOptions = None , mutable_build : bool = None , npmignore : typing . List [ str ] = None , npmignore_enabled : bool = None , package : bool = None , prettier : bool = None , prettier_options : PrettierOptions = None , projen_dev_dependency : bool = None , projenrc_js : bool = None , projenrc_js_options : ProjenrcOptions = None , projen_version : str = None , pull_request_template : bool = None , pull_request_template_contents : typing . List [ str ] = None , release : bool = None , release_to_npm : bool = None , release_workflow : bool = None , workflow_bootstrap_steps : typing . List [ JobStep ] = None , workflow_git_identity : GitIdentity = None , workflow_node_version : str = None , disable_tsconfig : bool = None , docgen : bool = None , docs_directory : str = None , entrypoint_types : str = None , eslint : bool = None , eslint_options : EslintOptions = None , libdir : str = None , projenrc_ts : bool = None , projenrc_ts_options : ProjenrcOptions = None , sample_code : bool = None , srcdir : str = None , testdir : str = None , tsconfig : TypescriptConfigOptions = None , tsconfig_dev : TypescriptConfigOptions = None , tsconfig_dev_file : str = None , typescript_version : str = None , rewire : typing . Mapping [ typing . Any ] = None , application_name : str = None , public_dir : str = None ) Properties Name Type Description name str This is the name of your project. commit_generated bool Whether to commit the managed files by default. git_options projen.GitOptions Configuration options for git. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. renovatebot bool Use renovatebot to handle dependency upgrades. renovatebot_options projen.RenovatebotOptions Options for renovatebot. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge bool Enable automatic merging on GitHub. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_credentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. allow_library_dependencies bool Allow the project to include peerDependencies and bundledDependencies . author_email str Author's e-mail. author_name str Author's name. author_organization bool Is the author an organization. author_url str Author's URL / Website. auto_detect_bin bool Automatically add all executables under the bin directory to your package.json file under the bin section. bin typing.Mapping[str] Binary programs vended with your module. bugs_email str The email address to which issues should be reported. bugs_url str The url to your project's issue tracker. bundled_deps typing.List[str] List of dependencies to bundle into this module. code_artifact_options projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps typing.List[str] Runtime dependencies of this module. description str The description is just a string that helps people understand the purpose of the package. dev_deps typing.List[str] Build dependencies for this module. entrypoint str Module entrypoint ( main in package.json ). homepage str Package's Homepage / Website. keywords typing.List[str] Keywords to include in package.json . license str License's SPDX identifier. licensed bool Indicates if a license should be added. max_node_version str Minimum node.js version to require via engines (inclusive). min_node_version str Minimum Node.js version to require via package.json engines (inclusive). npm_access projen.javascript.NpmAccess Access level of the npm package. npm_registry str The host name of the npm registry to publish to. npm_registry_url str The base URL of the npm package registry. npm_token_secret str GitHub secret which contains the NPM token to use when publishing packages. package_manager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. package_name str The \"name\" in package.json. peer_dependency_options projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps typing.List[str] Peer dependencies for this module. pnpm_version str The version of PNPM to use if using PNPM as a package manager. repository str The repository is the location where the actual code for your package lives. repository_directory str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scoped_packages_options typing.List[projen.javascript.ScopedPackagesOptions] Options for privately hosted scoped packages. scripts typing.Mapping[str] npm scripts to include. stability str Package's Stability. jsii_release_version str Version requirement of publib which is used to publish modules to npm. major_version typing.Union[int, float] Major version to release from the default branch. min_major_version typing.Union[int, float] Minimal Major version to release. npm_dist_tag str The npmDistTag to use when publishing from the default branch. post_build_steps typing.List[projen.github.workflows.JobStep] Steps to execute after build as part of the release workflow. prerelease str Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run bool Instead of actually publishing to package managers, just print the publishing command. publish_tasks bool Define publishing tasks that can be executed manually as well as workflows. release_branches typing.Mapping[projen.release.BranchOptions] Defines additional release branches. release_every_commit bool Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue bool Create a github issue on every failed publishing task. release_failure_issue_label str The label to apply to issues indicating publish failures. release_schedule str CRON schedule to trigger new releases. release_tag_prefix str Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. release_trigger projen.release.ReleaseTrigger The release trigger to use. release_workflow_name str The name of the default release workflow. release_workflow_setup_steps typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options typing.Mapping[typing.Any] Custom configuration used when creating changelog with standard-version package. workflow_container_image str Container image to use for GitHub workflows. workflow_runs_on typing.List[str] Github Runner selection labels. default_release_branch str The name of the main release branch. artifacts_directory str A directory which will contain build artifacts. auto_approve_upgrades bool Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). build_workflow bool Define a GitHub workflow for building PRs. build_workflow_triggers projen.github.workflows.Triggers Build workflow triggers. bundler_options projen.javascript.BundlerOptions Options for Bundler . code_cov bool Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret str Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner str License copyright owner. copyright_period str The copyright years to put in the LICENSE file. dependabot bool Use dependabot to handle dependency upgrades. dependabot_options projen.github.DependabotOptions Options for dependabot. deps_upgrade bool Use github workflows to handle dependency upgrades. deps_upgrade_options projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore typing.List[str] Additional entries to .gitignore. jest bool Setup jest unit tests. jest_options projen.javascript.JestOptions Jest options. mutable_build bool Automatically update files modified during builds to pull-request branches. npmignore typing.List[str] Additional entries to .npmignore. npmignore_enabled bool Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package bool Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier bool Setup prettier. prettier_options projen.javascript.PrettierOptions Prettier options. projen_dev_dependency bool Indicates of \"projen\" should be installed as a devDependency. projenrc_js bool Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options projen.javascript.ProjenrcOptions Options for .projenrc.js. projen_version str Version of projen to install. pull_request_template bool Include a GitHub pull request template. pull_request_template_contents typing.List[str] The contents of the pull request template. release bool Add release management to this project. release_to_npm bool Automatically release to npm when new versions are introduced. release_workflow bool DEPRECATED: renamed to release . workflow_bootstrap_steps typing.List[projen.github.workflows.JobStep] Workflow steps to use in order to bootstrap this repo. workflow_git_identity projen.github.GitIdentity The git identity to use in workflows. workflow_node_version str The node version to use in GitHub workflows. disable_tsconfig bool Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen bool Docgen by Typedoc. docs_directory str Docs directory. entrypoint_types str The .d.ts file that includes the type declarations for this module. eslint bool Setup eslint. eslint_options projen.javascript.EslintOptions Eslint options. libdir str Typescript artifacts output directory. projenrc_ts bool Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code bool Generate one-time sample in src/ and test/ if there are no files there. srcdir str Typescript sources directory. testdir str Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfig_dev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file str The name of the development tsconfig.json file. typescript_version str TypeScript version to use. rewire typing.Mapping[typing.Any] Rewire webpack configuration. application_name str Name of the application name. public_dir str Public directory. name Required name : str Type: str Default: $BASEDIR This is the name of your project. commit_generated Optional commit_generated : bool Type: bool Default: true Whether to commit the managed files by default. git_options Optional git_options : GitOptions Type: projen.GitOptions Configuration options for git. logging Optional logging : LoggerOptions Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional outdir : str Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional parent : Project Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional projen_command : str Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional projenrc_json : bool Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional projenrc_json_options : ProjenrcOptions Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional renovatebot : bool Type: bool Default: false Use renovatebot to handle dependency upgrades. renovatebot_options Optional renovatebot_options : RenovatebotOptions Type: projen.RenovatebotOptions Default: default options Options for renovatebot. auto_approve_options Optional auto_approve_options : AutoApproveOptions Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge Optional auto_merge : bool Type: bool Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. auto_merge_options Optional auto_merge_options : AutoMergeOptions Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional clobber : bool Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional dev_container : bool Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional github : bool Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional github_options : GitHubOptions Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional gitpod : bool Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead mergify : bool Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead mergify_options : MergifyOptions Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level project_type : ProjectType Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_credentials Optional projen_credentials : GithubCredentials Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projen_token_secret ~~ Optional Deprecated: use projenCredentials projen_token_secret : str Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional readme : SampleReadmeProps Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional stale : bool Type: bool Default: false Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional stale_options : StaleOptions Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional vscode : bool Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allow_library_dependencies Optional allow_library_dependencies : bool Type: bool Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. author_email Optional author_email : str Type: str Author's e-mail. author_name Optional author_name : str Type: str Author's name. author_organization Optional author_organization : bool Type: bool Is the author an organization. author_url Optional author_url : str Type: str Author's URL / Website. auto_detect_bin Optional auto_detect_bin : bool Type: bool Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional bin : typing . Mapping [ str ] Type: typing.Mapping[str] Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugs_email Optional bugs_email : str Type: str The email address to which issues should be reported. bugs_url Optional bugs_url : str Type: str The url to your project's issue tracker. bundled_deps Optional bundled_deps : typing . List [ str ] Type: typing.List[str] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. code_artifact_options Optional code_artifact_options : CodeArtifactOptions Type: projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional deps : typing . List [ str ] Type: typing.List[str] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'express' , 'lodash' , 'foo@^2' ] description Optional description : str Type: str The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description dev_deps Optional dev_deps : typing . List [ str ] Type: typing.List[str] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'typescript' , '@types/express' ] entrypoint Optional entrypoint : str Type: str Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional homepage : str Type: str Package's Homepage / Website. keywords Optional keywords : typing . List [ str ] Type: typing.List[str] Keywords to include in package.json . license Optional license : str Type: str Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional licensed : bool Type: bool Default: true Indicates if a license should be added. max_node_version Optional max_node_version : str Type: str Default: no max Minimum node.js version to require via engines (inclusive). min_node_version Optional min_node_version : str Type: str Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npm_access Optional npm_access : NpmAccess Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npm_registry ~~ Optional Deprecated: use npmRegistryUrl instead npm_registry : str Type: str The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npm_registry_url Optional npm_registry_url : str Type: str Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npm_token_secret Optional npm_token_secret : str Type: str Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. package_manager Optional package_manager : NodePackageManager Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. package_name Optional package_name : str Type: str Default: defaults to project name The \"name\" in package.json. peer_dependency_options Optional peer_dependency_options : PeerDependencyOptions Type: projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps Optional peer_deps : typing . List [ str ] Type: typing.List[str] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. pnpm_version Optional pnpm_version : str Type: str Default: \"7\" The version of PNPM to use if using PNPM as a package manager. repository Optional repository : str Type: str The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repository_directory Optional repository_directory : str Type: str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scoped_packages_options Optional scoped_packages_options : typing . List [ ScopedPackagesOptions ] Type: typing.List[projen.javascript.ScopedPackagesOptions] Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional scripts : typing . Mapping [ str ] Type: typing.Mapping[str] Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional stability : str Type: str Package's Stability. jsii_release_version Optional jsii_release_version : str Type: str Default: \"latest\" Version requirement of publib which is used to publish modules to npm. major_version Optional major_version : typing . Union [ int , float ] Type: typing.Union[int, float] Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. min_major_version Optional min_major_version : typing . Union [ int , float ] Type: typing.Union[int, float] Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npm_dist_tag Optional npm_dist_tag : str Type: str Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. post_build_steps Optional post_build_steps : typing . List [ JobStep ] Type: typing.List[projen.github.workflows.JobStep] Default: [] Steps to execute after build as part of the release workflow. prerelease Optional prerelease : str Type: str Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run Optional publish_dry_run : bool Type: bool Default: false Instead of actually publishing to package managers, just print the publishing command. publish_tasks Optional publish_tasks : bool Type: bool Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. release_branches Optional release_branches : typing . Mapping [ BranchOptions ] Type: typing.Mapping[projen.release.BranchOptions] Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ release_every_commit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead release_every_commit : bool Type: bool Default: true Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue Optional release_failure_issue : bool Type: bool Default: false Create a github issue on every failed publishing task. release_failure_issue_label Optional release_failure_issue_label : str Type: str Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ release_schedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead release_schedule : str Type: str Default: no scheduled releases CRON schedule to trigger new releases. release_tag_prefix Optional release_tag_prefix : str Type: str Default: \"v\" Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. release_trigger Optional release_trigger : ReleaseTrigger Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. release_workflow_name Optional release_workflow_name : str Type: str Default: \"Release\" The name of the default release workflow. release_workflow_setup_steps Optional release_workflow_setup_steps : typing . List [ JobStep ] Type: typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options Optional versionrc_options : typing . Mapping [ typing . Any ] Type: typing.Mapping[typing.Any] Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflow_container_image Optional workflow_container_image : str Type: str Default: default image Container image to use for GitHub workflows. workflow_runs_on Optional workflow_runs_on : typing . List [ str ] Type: typing.List[str] Default: [\"ubuntu-latest\"] Github Runner selection labels. default_release_branch Required default_release_branch : str Type: str Default: \"main\" The name of the main release branch. artifacts_directory Optional artifacts_directory : str Type: str Default: \"dist\" A directory which will contain build artifacts. auto_approve_upgrades Optional auto_approve_upgrades : bool Type: bool Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. build_workflow Optional build_workflow : bool Type: bool Default: true if not a subproject Define a GitHub workflow for building PRs. build_workflow_triggers Optional build_workflow_triggers : Triggers Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundler_options Optional bundler_options : BundlerOptions Type: projen.javascript.BundlerOptions Options for Bundler . code_cov Optional code_cov : bool Type: bool Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret Optional code_cov_token_secret : str Type: str Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner Optional copyright_owner : str Type: str Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyright_period Optional copyright_period : str Type: str Default: current year The copyright years to put in the LICENSE file. dependabot Optional dependabot : bool Type: bool Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabot_options Optional dependabot_options : DependabotOptions Type: projen.github.DependabotOptions Default: default options Options for dependabot. deps_upgrade Optional deps_upgrade : bool Type: bool Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . deps_upgrade_options Optional deps_upgrade_options : UpgradeDependenciesOptions Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional gitignore : typing . List [ str ] Type: typing.List[str] Additional entries to .gitignore. jest Optional jest : bool Type: bool Default: true Setup jest unit tests. jest_options Optional jest_options : JestOptions Type: projen.javascript.JestOptions Default: default options Jest options. mutable_build Optional mutable_build : bool Type: bool Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore npmignore : typing . List [ str ] Type: typing.List[str] Additional entries to .npmignore. npmignore_enabled Optional npmignore_enabled : bool Type: bool Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional package : bool Type: bool Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional prettier : bool Type: bool Default: false Setup prettier. prettier_options Optional prettier_options : PrettierOptions Type: projen.javascript.PrettierOptions Default: default options Prettier options. projen_dev_dependency Optional projen_dev_dependency : bool Type: bool Default: true Indicates of \"projen\" should be installed as a devDependency. projenrc_js Optional projenrc_js : bool Type: bool Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options Optional projenrc_js_options : ProjenrcOptions Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projen_version Optional projen_version : str Type: str Default: Defaults to the latest version. Version of projen to install. pull_request_template Optional pull_request_template : bool Type: bool Default: true Include a GitHub pull request template. pull_request_template_contents Optional pull_request_template_contents : typing . List [ str ] Type: typing.List[str] Default: default content The contents of the pull request template. release Optional release : bool Type: bool Default: true (false for subprojects) Add release management to this project. release_to_npm Optional release_to_npm : bool Type: bool Default: false Automatically release to npm when new versions are introduced. ~~ release_workflow ~~ Optional Deprecated: see release . release_workflow : bool Type: bool Default: true if not a subproject DEPRECATED: renamed to release . workflow_bootstrap_steps Optional workflow_bootstrap_steps : typing . List [ JobStep ] Type: typing.List[projen.github.workflows.JobStep] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflow_git_identity Optional workflow_git_identity : GitIdentity Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflow_node_version Optional workflow_node_version : str Type: str Default: same as minNodeVersion The node version to use in GitHub workflows. disable_tsconfig Optional disable_tsconfig : bool Type: bool Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional docgen : bool Type: bool Default: false Docgen by Typedoc. docs_directory Optional docs_directory : str Type: str Default: \"docs\" Docs directory. entrypoint_types Optional entrypoint_types : str Type: str Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional eslint : bool Type: bool Default: true Setup eslint. eslint_options Optional eslint_options : EslintOptions Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional libdir : str Type: str Default: \"lib\" Typescript artifacts output directory. projenrc_ts Optional projenrc_ts : bool Type: bool Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options Optional projenrc_ts_options : ProjenrcOptions Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code Optional sample_code : bool Type: bool Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional srcdir : str Type: str Default: \"src\" Typescript sources directory. testdir Optional testdir : str Type: str Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional tsconfig : TypescriptConfigOptions Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfig_dev Optional tsconfig_dev : TypescriptConfigOptions Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file Optional tsconfig_dev_file : str Type: str Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescript_version Optional typescript_version : str Type: str Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). rewire Optional rewire : typing . Mapping [ typing . Any ] Type: typing.Mapping[typing.Any] Default: No rewired config. Rewire webpack configuration. Use this property to override webpack configuration properties provided by create-react-app, without needing to eject. This property will create a config-overrides.js file in your root directory, which will contain the desired rewiring code. To override the configuration, you can provide simple key value pairs. Keys take the form of js code directives that traverse to the desired property. Values should be JSON serializable objects. For example, the following config: rewire : { \"module.unknownContextCritical\" : false } Will translate to the following config-overrides.js file: module . exports = function override ( config , env ) { config . module . unknownContextCritical = false ; } timarney/react-app-rewired application_name Optional application_name : str Type: str Default: \"Sample App\" Name of the application name. public_dir Optional public_dir : str Type: str Default: \"public\" Public directory. Classes CloudscapeReactTsWebsiteProject Synthesizes a Cloudscape React Typescript Website Project. Initializers import aws_prototyping_sdk.cloudscape_react_ts_website aws_prototyping_sdk . cloudscape_react_ts_website . CloudscapeReactTsWebsiteProject ( name : str , commit_generated : bool = None , git_options : GitOptions = None , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , renovatebot : bool = None , renovatebot_options : RenovatebotOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge : bool = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_credentials : GithubCredentials = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , allow_library_dependencies : bool = None , author_email : str = None , author_name : str = None , author_organization : bool = None , author_url : str = None , auto_detect_bin : bool = None , bin : typing . Mapping [ str ] = None , bugs_email : str = None , bugs_url : str = None , bundled_deps : typing . List [ str ] = None , code_artifact_options : CodeArtifactOptions = None , deps : typing . List [ str ] = None , description : str = None , dev_deps : typing . List [ str ] = None , entrypoint : str = None , homepage : str = None , keywords : typing . List [ str ] = None , license : str = None , licensed : bool = None , max_node_version : str = None , min_node_version : str = None , npm_access : NpmAccess = None , npm_registry : str = None , npm_registry_url : str = None , npm_token_secret : str = None , package_manager : NodePackageManager = None , package_name : str = None , peer_dependency_options : PeerDependencyOptions = None , peer_deps : typing . List [ str ] = None , pnpm_version : str = None , repository : str = None , repository_directory : str = None , scoped_packages_options : typing . List [ ScopedPackagesOptions ] = None , scripts : typing . Mapping [ str ] = None , stability : str = None , jsii_release_version : str = None , major_version : typing . Union [ int , float ] = None , min_major_version : typing . Union [ int , float ] = None , npm_dist_tag : str = None , post_build_steps : typing . List [ JobStep ] = None , prerelease : str = None , publish_dry_run : bool = None , publish_tasks : bool = None , release_branches : typing . Mapping [ BranchOptions ] = None , release_every_commit : bool = None , release_failure_issue : bool = None , release_failure_issue_label : str = None , release_schedule : str = None , release_tag_prefix : str = None , release_trigger : ReleaseTrigger = None , release_workflow_name : str = None , release_workflow_setup_steps : typing . List [ JobStep ] = None , versionrc_options : typing . Mapping [ typing . Any ] = None , workflow_container_image : str = None , workflow_runs_on : typing . List [ str ] = None , default_release_branch : str , artifacts_directory : str = None , auto_approve_upgrades : bool = None , build_workflow : bool = None , build_workflow_triggers : Triggers = None , bundler_options : BundlerOptions = None , code_cov : bool = None , code_cov_token_secret : str = None , copyright_owner : str = None , copyright_period : str = None , dependabot : bool = None , dependabot_options : DependabotOptions = None , deps_upgrade : bool = None , deps_upgrade_options : UpgradeDependenciesOptions = None , gitignore : typing . List [ str ] = None , jest : bool = None , jest_options : JestOptions = None , mutable_build : bool = None , npmignore : typing . List [ str ] = None , npmignore_enabled : bool = None , package : bool = None , prettier : bool = None , prettier_options : PrettierOptions = None , projen_dev_dependency : bool = None , projenrc_js : bool = None , projenrc_js_options : ProjenrcOptions = None , projen_version : str = None , pull_request_template : bool = None , pull_request_template_contents : typing . List [ str ] = None , release : bool = None , release_to_npm : bool = None , release_workflow : bool = None , workflow_bootstrap_steps : typing . List [ JobStep ] = None , workflow_git_identity : GitIdentity = None , workflow_node_version : str = None , disable_tsconfig : bool = None , docgen : bool = None , docs_directory : str = None , entrypoint_types : str = None , eslint : bool = None , eslint_options : EslintOptions = None , libdir : str = None , projenrc_ts : bool = None , projenrc_ts_options : ProjenrcOptions = None , sample_code : bool = None , srcdir : str = None , testdir : str = None , tsconfig : TypescriptConfigOptions = None , tsconfig_dev : TypescriptConfigOptions = None , tsconfig_dev_file : str = None , typescript_version : str = None , rewire : typing . Mapping [ typing . Any ] = None , application_name : str = None , public_dir : str = None ) Name Type Description name str This is the name of your project. commit_generated bool Whether to commit the managed files by default. git_options projen.GitOptions Configuration options for git. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. renovatebot bool Use renovatebot to handle dependency upgrades. renovatebot_options projen.RenovatebotOptions Options for renovatebot. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge bool Enable automatic merging on GitHub. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_credentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. allow_library_dependencies bool Allow the project to include peerDependencies and bundledDependencies . author_email str Author's e-mail. author_name str Author's name. author_organization bool Is the author an organization. author_url str Author's URL / Website. auto_detect_bin bool Automatically add all executables under the bin directory to your package.json file under the bin section. bin typing.Mapping[str] Binary programs vended with your module. bugs_email str The email address to which issues should be reported. bugs_url str The url to your project's issue tracker. bundled_deps typing.List[str] List of dependencies to bundle into this module. code_artifact_options projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps typing.List[str] Runtime dependencies of this module. description str The description is just a string that helps people understand the purpose of the package. dev_deps typing.List[str] Build dependencies for this module. entrypoint str Module entrypoint ( main in package.json ). homepage str Package's Homepage / Website. keywords typing.List[str] Keywords to include in package.json . license str License's SPDX identifier. licensed bool Indicates if a license should be added. max_node_version str Minimum node.js version to require via engines (inclusive). min_node_version str Minimum Node.js version to require via package.json engines (inclusive). npm_access projen.javascript.NpmAccess Access level of the npm package. npm_registry str The host name of the npm registry to publish to. npm_registry_url str The base URL of the npm package registry. npm_token_secret str GitHub secret which contains the NPM token to use when publishing packages. package_manager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. package_name str The \"name\" in package.json. peer_dependency_options projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps typing.List[str] Peer dependencies for this module. pnpm_version str The version of PNPM to use if using PNPM as a package manager. repository str The repository is the location where the actual code for your package lives. repository_directory str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scoped_packages_options typing.List[projen.javascript.ScopedPackagesOptions] Options for privately hosted scoped packages. scripts typing.Mapping[str] npm scripts to include. stability str Package's Stability. jsii_release_version str Version requirement of publib which is used to publish modules to npm. major_version typing.Union[int, float] Major version to release from the default branch. min_major_version typing.Union[int, float] Minimal Major version to release. npm_dist_tag str The npmDistTag to use when publishing from the default branch. post_build_steps typing.List[projen.github.workflows.JobStep] Steps to execute after build as part of the release workflow. prerelease str Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run bool Instead of actually publishing to package managers, just print the publishing command. publish_tasks bool Define publishing tasks that can be executed manually as well as workflows. release_branches typing.Mapping[projen.release.BranchOptions] Defines additional release branches. release_every_commit bool Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue bool Create a github issue on every failed publishing task. release_failure_issue_label str The label to apply to issues indicating publish failures. release_schedule str CRON schedule to trigger new releases. release_tag_prefix str Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. release_trigger projen.release.ReleaseTrigger The release trigger to use. release_workflow_name str The name of the default release workflow. release_workflow_setup_steps typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options typing.Mapping[typing.Any] Custom configuration used when creating changelog with standard-version package. workflow_container_image str Container image to use for GitHub workflows. workflow_runs_on typing.List[str] Github Runner selection labels. default_release_branch str The name of the main release branch. artifacts_directory str A directory which will contain build artifacts. auto_approve_upgrades bool Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). build_workflow bool Define a GitHub workflow for building PRs. build_workflow_triggers projen.github.workflows.Triggers Build workflow triggers. bundler_options projen.javascript.BundlerOptions Options for Bundler . code_cov bool Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret str Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner str License copyright owner. copyright_period str The copyright years to put in the LICENSE file. dependabot bool Use dependabot to handle dependency upgrades. dependabot_options projen.github.DependabotOptions Options for dependabot. deps_upgrade bool Use github workflows to handle dependency upgrades. deps_upgrade_options projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore typing.List[str] Additional entries to .gitignore. jest bool Setup jest unit tests. jest_options projen.javascript.JestOptions Jest options. mutable_build bool Automatically update files modified during builds to pull-request branches. npmignore typing.List[str] Additional entries to .npmignore. npmignore_enabled bool Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package bool Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier bool Setup prettier. prettier_options projen.javascript.PrettierOptions Prettier options. projen_dev_dependency bool Indicates of \"projen\" should be installed as a devDependency. projenrc_js bool Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options projen.javascript.ProjenrcOptions Options for .projenrc.js. projen_version str Version of projen to install. pull_request_template bool Include a GitHub pull request template. pull_request_template_contents typing.List[str] The contents of the pull request template. release bool Add release management to this project. release_to_npm bool Automatically release to npm when new versions are introduced. release_workflow bool DEPRECATED: renamed to release . workflow_bootstrap_steps typing.List[projen.github.workflows.JobStep] Workflow steps to use in order to bootstrap this repo. workflow_git_identity projen.github.GitIdentity The git identity to use in workflows. workflow_node_version str The node version to use in GitHub workflows. disable_tsconfig bool Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen bool Docgen by Typedoc. docs_directory str Docs directory. entrypoint_types str The .d.ts file that includes the type declarations for this module. eslint bool Setup eslint. eslint_options projen.javascript.EslintOptions Eslint options. libdir str Typescript artifacts output directory. projenrc_ts bool Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code bool Generate one-time sample in src/ and test/ if there are no files there. srcdir str Typescript sources directory. testdir str Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfig_dev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file str The name of the development tsconfig.json file. typescript_version str TypeScript version to use. rewire typing.Mapping[typing.Any] Rewire webpack configuration. application_name str Name of the application name. public_dir str Public directory. name Required Type: str Default: $BASEDIR This is the name of your project. commit_generated Optional Type: bool Default: true Whether to commit the managed files by default. git_options Optional Type: projen.GitOptions Configuration options for git. logging Optional Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional Type: bool Default: false Use renovatebot to handle dependency upgrades. renovatebot_options Optional Type: projen.RenovatebotOptions Default: default options Options for renovatebot. auto_approve_options Optional Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge Optional Type: bool Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. auto_merge_options Optional Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_credentials Optional Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projen_token_secret ~~ Optional Deprecated: use projenCredentials Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional Type: bool Default: false Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allow_library_dependencies Optional Type: bool Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. author_email Optional Type: str Author's e-mail. author_name Optional Type: str Author's name. author_organization Optional Type: bool Is the author an organization. author_url Optional Type: str Author's URL / Website. auto_detect_bin Optional Type: bool Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional Type: typing.Mapping[str] Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugs_email Optional Type: str The email address to which issues should be reported. bugs_url Optional Type: str The url to your project's issue tracker. bundled_deps Optional Type: typing.List[str] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. code_artifact_options Optional Type: projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional Type: typing.List[str] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'express' , 'lodash' , 'foo@^2' ] description Optional Type: str The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description dev_deps Optional Type: typing.List[str] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'typescript' , '@types/express' ] entrypoint Optional Type: str Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional Type: str Package's Homepage / Website. keywords Optional Type: typing.List[str] Keywords to include in package.json . license Optional Type: str Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional Type: bool Default: true Indicates if a license should be added. max_node_version Optional Type: str Default: no max Minimum node.js version to require via engines (inclusive). min_node_version Optional Type: str Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npm_access Optional Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npm_registry ~~ Optional Deprecated: use npmRegistryUrl instead Type: str The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npm_registry_url Optional Type: str Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npm_token_secret Optional Type: str Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. package_manager Optional Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. package_name Optional Type: str Default: defaults to project name The \"name\" in package.json. peer_dependency_options Optional Type: projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps Optional Type: typing.List[str] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. pnpm_version Optional Type: str Default: \"7\" The version of PNPM to use if using PNPM as a package manager. repository Optional Type: str The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repository_directory Optional Type: str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scoped_packages_options Optional Type: typing.List[projen.javascript.ScopedPackagesOptions] Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional Type: typing.Mapping[str] Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional Type: str Package's Stability. jsii_release_version Optional Type: str Default: \"latest\" Version requirement of publib which is used to publish modules to npm. major_version Optional Type: typing.Union[int, float] Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. min_major_version Optional Type: typing.Union[int, float] Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npm_dist_tag Optional Type: str Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. post_build_steps Optional Type: typing.List[projen.github.workflows.JobStep] Default: [] Steps to execute after build as part of the release workflow. prerelease Optional Type: str Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run Optional Type: bool Default: false Instead of actually publishing to package managers, just print the publishing command. publish_tasks Optional Type: bool Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. release_branches Optional Type: typing.Mapping[projen.release.BranchOptions] Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ release_every_commit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead Type: bool Default: true Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue Optional Type: bool Default: false Create a github issue on every failed publishing task. release_failure_issue_label Optional Type: str Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ release_schedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead Type: str Default: no scheduled releases CRON schedule to trigger new releases. release_tag_prefix Optional Type: str Default: \"v\" Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. release_trigger Optional Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. release_workflow_name Optional Type: str Default: \"Release\" The name of the default release workflow. release_workflow_setup_steps Optional Type: typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options Optional Type: typing.Mapping[typing.Any] Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflow_container_image Optional Type: str Default: default image Container image to use for GitHub workflows. workflow_runs_on Optional Type: typing.List[str] Default: [\"ubuntu-latest\"] Github Runner selection labels. default_release_branch Required Type: str Default: \"main\" The name of the main release branch. artifacts_directory Optional Type: str Default: \"dist\" A directory which will contain build artifacts. auto_approve_upgrades Optional Type: bool Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. build_workflow Optional Type: bool Default: true if not a subproject Define a GitHub workflow for building PRs. build_workflow_triggers Optional Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundler_options Optional Type: projen.javascript.BundlerOptions Options for Bundler . code_cov Optional Type: bool Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret Optional Type: str Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner Optional Type: str Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyright_period Optional Type: str Default: current year The copyright years to put in the LICENSE file. dependabot Optional Type: bool Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabot_options Optional Type: projen.github.DependabotOptions Default: default options Options for dependabot. deps_upgrade Optional Type: bool Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . deps_upgrade_options Optional Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional Type: typing.List[str] Additional entries to .gitignore. jest Optional Type: bool Default: true Setup jest unit tests. jest_options Optional Type: projen.javascript.JestOptions Default: default options Jest options. mutable_build Optional Type: bool Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore Type: typing.List[str] Additional entries to .npmignore. npmignore_enabled Optional Type: bool Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional Type: bool Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional Type: bool Default: false Setup prettier. prettier_options Optional Type: projen.javascript.PrettierOptions Default: default options Prettier options. projen_dev_dependency Optional Type: bool Default: true Indicates of \"projen\" should be installed as a devDependency. projenrc_js Optional Type: bool Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options Optional Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projen_version Optional Type: str Default: Defaults to the latest version. Version of projen to install. pull_request_template Optional Type: bool Default: true Include a GitHub pull request template. pull_request_template_contents Optional Type: typing.List[str] Default: default content The contents of the pull request template. release Optional Type: bool Default: true (false for subprojects) Add release management to this project. release_to_npm Optional Type: bool Default: false Automatically release to npm when new versions are introduced. ~~ release_workflow ~~ Optional Deprecated: see release . Type: bool Default: true if not a subproject DEPRECATED: renamed to release . workflow_bootstrap_steps Optional Type: typing.List[projen.github.workflows.JobStep] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflow_git_identity Optional Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflow_node_version Optional Type: str Default: same as minNodeVersion The node version to use in GitHub workflows. disable_tsconfig Optional Type: bool Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional Type: bool Default: false Docgen by Typedoc. docs_directory Optional Type: str Default: \"docs\" Docs directory. entrypoint_types Optional Type: str Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional Type: bool Default: true Setup eslint. eslint_options Optional Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional Type: str Default: \"lib\" Typescript artifacts output directory. projenrc_ts Optional Type: bool Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options Optional Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code Optional Type: bool Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional Type: str Default: \"src\" Typescript sources directory. testdir Optional Type: str Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfig_dev Optional Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file Optional Type: str Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescript_version Optional Type: str Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). rewire Optional Type: typing.Mapping[typing.Any] Default: No rewired config. Rewire webpack configuration. Use this property to override webpack configuration properties provided by create-react-app, without needing to eject. This property will create a config-overrides.js file in your root directory, which will contain the desired rewiring code. To override the configuration, you can provide simple key value pairs. Keys take the form of js code directives that traverse to the desired property. Values should be JSON serializable objects. For example, the following config: rewire : { \"module.unknownContextCritical\" : false } Will translate to the following config-overrides.js file: module . exports = function override ( config , env ) { config . module . unknownContextCritical = false ; } timarney/react-app-rewired application_name Optional Type: str Default: \"Sample App\" Name of the application name. public_dir Optional Type: str Default: \"public\" Public directory. Methods Name Description add_exclude_from_cleanup Exclude the matching files from pre-synth cleanup. add_git_ignore Adds a .gitignore pattern. add_package_ignore Exclude these files from the bundled package. add_task Adds a new task to this project. add_tip Prints a \"tip\" message during synthesis. annotate_generated Marks the provided file(s) as being generated. post_synthesize Called after all components are synthesized. pre_synthesize Called before all components are synthesized. remove_task Removes a task from a project. run_task_command Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . try_find_file Finds a file at the specified relative path within this project and all its subprojects. try_find_json_file Finds a json file by name. try_find_object_file Finds an object file (like JsonFile, YamlFile, etc.) by name. try_remove_file Finds a file at the specified relative path within this project and removes it. add_bins No description. add_bundled_deps Defines bundled dependencies. add_compile_command DEPRECATED. add_deps Defines normal dependencies. add_dev_deps Defines development/test dependencies. add_fields Directly set fields in package.json . add_keywords Adds keywords to package.json (deduplicated). add_peer_deps Defines peer dependencies. add_test_command DEPRECATED. has_script Indicates if a script by the name name is defined. remove_script Removes the npm script (always successful). render_workflow_setup Returns the set of workflow steps which should be executed to bootstrap a workflow. set_script Replaces the contents of an npm package.json script. add_exclude_from_cleanup def add_exclude_from_cleanup ( globs : str ) -> None Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: str The glob patterns to match. add_git_ignore def add_git_ignore ( pattern : str ) -> None Adds a .gitignore pattern. pattern Required Type: str The glob pattern to ignore. add_package_ignore def add_package_ignore ( pattern : str ) -> None Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . pattern Required Type: str add_task def add_task ( name : str , condition : str = None , cwd : str = None , description : str = None , env : typing . Mapping [ str ] = None , required_env : typing . List [ str ] = None , exec : str = None , receive_args : bool = None , steps : typing . List [ TaskStep ] = None ) -> Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: str The task name to add. condition Optional Type: str A shell command which determines if the this task should be executed. If the program exits with a zero exit code, steps will be executed. A non-zero code means that task will be skipped. cwd Optional Type: str Default: process.cwd() The working directory for all steps in this task (unless overridden by the step). description Optional Type: str Default: the task name The description of this build command. env Optional Type: typing.Mapping[str] Default: {} Defines environment variables for the execution of this task. Values in this map will be evaluated in a shell, so you can do stuff like $(echo \"foo\") . required_env Optional Type: typing.List[str] A set of environment variables that must be defined in order to execute this task. Task execution will fail if one of these is not defined. exec Optional Type: str Default: add steps using task.exec(command) or task.spawn(subtask) Shell command to execute as the first command of the task. receive_args Optional Type: bool Default: false Should the provided exec shell command receive args passed to the task. {@link TaskStepOptions.receiveArgs} steps Optional Type: typing.List[projen.TaskStep] List of task steps to run. ~~ add_tip ~~ def add_tip ( message : str ) -> None Prints a \"tip\" message during synthesis. message Required Type: str The message. annotate_generated def annotate_generated ( glob : str ) -> None Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: str the glob pattern to match (could be a file path). post_synthesize def post_synthesize () -> None Called after all components are synthesized. Order is not guaranteed. pre_synthesize def pre_synthesize () -> None Called before all components are synthesized. remove_task def remove_task ( name : str ) -> Task Removes a task from a project. name Required Type: str The name of the task to remove. run_task_command def run_task_command ( task : Task ) -> str Returns the shell command to execute in order to run a task. This will typically be npx projen TASK . task Required Type: projen.Task The task for which the command is required. synth def synth () -> None Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" try_find_file def try_find_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and all its subprojects. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. ~~ try_find_json_file ~~ def try_find_json_file ( file_path : str ) -> JsonFile Finds a json file by name. file_path Required Type: str The file path. try_find_object_file def try_find_object_file ( file_path : str ) -> ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. file_path Required Type: str The file path. try_remove_file def try_remove_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and removes it. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. add_bins def add_bins ( bins : typing . Mapping [ str ] ) -> None bins Required Type: typing.Mapping[str] add_bundled_deps def add_bundled_deps ( deps : str ) -> None Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json . deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ add_compile_command ~~ def add_compile_command ( commands : str ) -> None DEPRECATED. commands Required Type: str add_deps def add_deps ( deps : str ) -> None Defines normal dependencies. deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . add_dev_deps def add_dev_deps ( deps : str ) -> None Defines development/test dependencies. deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . add_fields def add_fields ( fields : typing . Mapping [ typing . Any ] ) -> None Directly set fields in package.json . fields Required Type: typing.Mapping[typing.Any] The fields to set. add_keywords def add_keywords ( keywords : str ) -> None Adds keywords to package.json (deduplicated). keywords Required Type: str The keywords to add. add_peer_deps def add_peer_deps ( deps : str ) -> None Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers. deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ add_test_command ~~ def add_test_command ( commands : str ) -> None DEPRECATED. commands Required Type: str has_script def has_script ( name : str ) -> bool Indicates if a script by the name name is defined. name Required Type: str The name of the script. remove_script def remove_script ( name : str ) -> None Removes the npm script (always successful). name Required Type: str The name of the script. render_workflow_setup def render_workflow_setup ( mutable : bool = None ) -> typing . List [ JobStep ] Returns the set of workflow steps which should be executed to bootstrap a workflow. mutable Optional Type: bool Default: false Should the pacakge lockfile be updated? set_script def set_script ( name : str , command : str ) -> None Replaces the contents of an npm package.json script. name Required Type: str The script name. command Required Type: str The command to execute. Properties Name Type Description build_task projen.Task No description. commit_generated bool Whether to commit the managed files by default. compile_task projen.Task No description. components typing.List[projen.Component] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected bool Whether or not the project is being ejected. files typing.List[projen.FileBase] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name str Project name. outdir str Absolute output directory of this project. package_task projen.Task No description. post_compile_task projen.Task No description. pre_compile_task projen.Task No description. project_build projen.ProjectBuild Manages the build process of the project. projen_command str The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. test_task projen.Task No description. default_task projen.Task This is the \"default\" task, the one that executes \"projen\". init_project projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. project_type projen.ProjectType No description. auto_approve projen.github.AutoApprove Auto approve set up for this project. dev_container projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. allow_library_dependencies bool No description. artifacts_directory str The build output directory. artifacts_javascript_directory str The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler projen.javascript.Bundler No description. entrypoint str No description. manifest typing.Any No description. package projen.javascript.NodePackage API for managing the node package. package_manager projen.javascript.NodePackageManager The package manager to use. run_script_command str The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). auto_merge projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. build_workflow projen.build.BuildWorkflow The PR build GitHub workflow. build_workflow_job_id str The job ID of the build workflow. jest projen.javascript.Jest The Jest configuration (if enabled). max_node_version str Maximum node version required by this package. min_node_version str Minimum node.js version required by this package. npmignore projen.IgnoreFile The .npmignore file. prettier projen.javascript.Prettier No description. publisher projen.release.Publisher Package publisher. release projen.release.Release Release management. upgrade_workflow projen.javascript.UpgradeDependencies The upgrade workflow. docs_directory str No description. libdir str The directory in which compiled .js files reside. srcdir str The directory in which source files reside. testdir str The directory in which tests reside. tsconfig_dev projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watch_task projen.Task The \"watch\" task. docgen bool No description. eslint projen.javascript.Eslint No description. tsconfig projen.javascript.TypescriptConfig No description. tsconfig_eslint projen.javascript.TypescriptConfig No description. application_name str No description. public_dir str No description. build_task Required build_task : Task Type: projen.Task commit_generated Required commit_generated : bool Type: bool Whether to commit the managed files by default. compile_task Required compile_task : Task Type: projen.Task components Required components : typing . List [ Component ] Type: typing.List[projen.Component] Returns all the components within this project. deps Required deps : Dependencies Type: projen.Dependencies Project dependencies. ejected Required ejected : bool Type: bool Whether or not the project is being ejected. files Required files : typing . List [ FileBase ] Type: typing.List[projen.FileBase] All files in this project. gitattributes Required gitattributes : GitAttributesFile Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required gitignore : IgnoreFile Type: projen.IgnoreFile .gitignore. logger Required logger : Logger Type: projen.Logger Logging utilities. name Required name : str Type: str Project name. outdir Required outdir : str Type: str Absolute output directory of this project. package_task Required package_task : Task Type: projen.Task post_compile_task Required post_compile_task : Task Type: projen.Task pre_compile_task Required pre_compile_task : Task Type: projen.Task project_build Required project_build : ProjectBuild Type: projen.ProjectBuild Manages the build process of the project. projen_command Required projen_command : str Type: str The command to use in order to run the projen CLI. root Required root : Project Type: projen.Project The root project. tasks Required tasks : Tasks Type: projen.Tasks Project tasks. test_task Required test_task : Task Type: projen.Task default_task Optional default_task : Task Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. init_project Optional init_project : InitProject Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional parent : Project Type: projen.Project A parent project. If undefined, this is the root project. project_type Required project_type : ProjectType Type: projen.ProjectType auto_approve Optional auto_approve : AutoApprove Type: projen.github.AutoApprove Auto approve set up for this project. dev_container Optional dev_container : DevContainer Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional github : GitHub Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional gitpod : Gitpod Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional vscode : VsCode Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. ~~ allow_library_dependencies ~~ Required Deprecated: use package.allowLibraryDependencies allow_library_dependencies : bool Type: bool artifacts_directory Required artifacts_directory : str Type: str The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg . artifacts_javascript_directory Required artifacts_javascript_directory : str Type: str The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler Required bundler : Bundler Type: projen.javascript.Bundler ~~ entrypoint ~~ Required Deprecated: use package.entrypoint entrypoint : str Type: str ~~ manifest ~~ Required Deprecated: use package.addField(x, y) manifest : typing . Any Type: typing.Any package Required package : NodePackage Type: projen.javascript.NodePackage API for managing the node package. ~~ package_manager ~~ Required Deprecated: use package.packageManager package_manager : NodePackageManager Type: projen.javascript.NodePackageManager The package manager to use. run_script_command Required run_script_command : str Type: str The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). auto_merge Optional auto_merge : AutoMerge Type: projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. build_workflow Optional build_workflow : BuildWorkflow Type: projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled. build_workflow_job_id Optional build_workflow_job_id : str Type: str The job ID of the build workflow. jest Optional jest : Jest Type: projen.javascript.Jest The Jest configuration (if enabled). max_node_version Optional max_node_version : str Type: str Maximum node version required by this package. min_node_version Optional min_node_version : str Type: str Minimum node.js version required by this package. npmignore Optional npmignore : IgnoreFile Type: projen.IgnoreFile The .npmignore file. prettier Optional prettier : Prettier Type: projen.javascript.Prettier ~~ publisher ~~ Optional Deprecated: use release.publisher . publisher : Publisher Type: projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow. release Optional release : Release Type: projen.release.Release Release management. upgrade_workflow Optional upgrade_workflow : UpgradeDependencies Type: projen.javascript.UpgradeDependencies The upgrade workflow. docs_directory Required docs_directory : str Type: str libdir Required libdir : str Type: str The directory in which compiled .js files reside. srcdir Required srcdir : str Type: str The directory in which source files reside. testdir Required testdir : str Type: str The directory in which tests reside. tsconfig_dev Required tsconfig_dev : TypescriptConfig Type: projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watch_task Required watch_task : Task Type: projen.Task The \"watch\" task. docgen Optional docgen : bool Type: bool eslint Optional eslint : Eslint Type: projen.javascript.Eslint tsconfig Optional tsconfig : TypescriptConfig Type: projen.javascript.TypescriptConfig tsconfig_eslint Optional tsconfig_eslint : TypescriptConfig Type: projen.javascript.TypescriptConfig application_name Required application_name : str Type: str public_dir Required public_dir : str Type: str Constants Name Type Description DEFAULT_TASK str The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required DEFAULT_TASK : str Type: str The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files.","title":"Index"},{"location":"python/cloudscape-react-ts-website/index.html#getting-started","text":"To create a new Cloudscape React Typescript Project, there are a couple of options:","title":"Getting started"},{"location":"python/cloudscape-react-ts-website/index.html#via-projen-cli","text":"npx projen new --from @aws-prototyping-sdk/cloudscape-react-ts-website cloudscape-react-ts-website [--application-name <your-app>]","title":"Via Projen CLI"},{"location":"python/cloudscape-react-ts-website/index.html#programmatically","text":"# Example automatically generated from non-compiling source. May contain errors. CloudscapeReactTsWebsiteProject ( default_release_branch = \"mainline\" , name = \"<name-of-package>\" , application_name = \"<name-of-app>\" )","title":"Programmatically"},{"location":"python/cloudscape-react-ts-website/index.html#running-your-synthesized-application","text":"To run your synthesized application locally, run npx projen dev .","title":"Running your synthesized Application"},{"location":"python/cloudscape-react-ts-website/index.html#developer-notes","text":"To enable Cognito auth, ensure you have a runtime-config.json file in the root of your deployed project which at least contains the following: { \"region\" : \"<aws-region>\" , \"identityPoolId\" : \"<identity-pool-id>\" , \"userPoolId\" : \"<user-pool-id>\" , \"userPoolWebClientId\" : \"<user-pool-web-client-id>\" } The easiest way to get this set up is to use the static-website + identity packages to deploy your website. An example of how to do this is as follows: # Example automatically generated from non-compiling source. May contain errors. user_identity = UserIdentity ( self , \"UserIdentity\" ) StaticWebsite ( self , \"StaticWebsite\" , website_content_path = \"<relative>/<path>/<to>/<built>/<website>\" , runtime_options = { \"json_payload\" : { \"region\" : Stack . of ( self ) . region , \"identity_pool_id\" : user_identity . identity_pool . identity_pool_id , \"user_pool_id\" : user_identity . user_pool . user_pool_id , \"user_pool_web_client_id\" : user_identity . user_pool_client . user_pool_client_id } } ) For local development, you will need to copy the generated runtime-config.json file into your /public directory. An example on how to do this is as follows: curl https://dxxxxxxxxxx.cloudfront.net/runtime-config.json > public/runtime-config.json","title":"Developer Notes"},{"location":"python/cloudscape-react-ts-website/index.html#api-reference","text":"","title":"API Reference "},{"location":"python/cloudscape-react-ts-website/index.html#structs","text":"","title":"Structs "},{"location":"python/cloudscape-react-ts-website/index.html#cloudscapereacttswebsiteprojectoptions","text":"Configuration options for the CloudscapeReactTsWebsiteProject.","title":"CloudscapeReactTsWebsiteProjectOptions "},{"location":"python/cloudscape-react-ts-website/index.html#classes","text":"","title":"Classes "},{"location":"python/cloudscape-react-ts-website/index.html#cloudscapereacttswebsiteproject","text":"Synthesizes a Cloudscape React Typescript Website Project.","title":"CloudscapeReactTsWebsiteProject "},{"location":"python/identity/index.html","text":"Experimental Warning This is packaged in a separate module while the API is being stabilized. This package is subject to non-backward compatible changes or removal in any future version. Breaking changes will be announced in the release notes. Whilst you may use this package, you may need to update your source code when upgrading to a newer version. Once we stabilize the module, it will be included into the stable aws-prototyping-sdk library. Experimental Usage To use this package, add a dependency on: aws_prototyping_sdk.identity This module by default deploys a configurable Identity Provider with a default Cognito User Pool. These resources can be used by your website to restrict access to only authenticated users if needed. All settings are configurable and the creation of these AuthN resources can be disabled if needed or configured to use custom AuthN providers i.e. Facebook, Google, etc. Below is a conceptual view of the default architecture this module creates: Cognito User Pool --------------------> Identity Pool |_ User Pool Client |_ Unauthenticated IAM Role |_ Authenticated IAM Role API Reference Constructs UserIdentity Creates an Identity Pool with sane defaults configured. Initializers import aws_prototyping_sdk.identity aws_prototyping_sdk . identity . UserIdentity ( scope : Construct , id : str , identity_pool_options : IdentityPoolProps = None , user_pool : UserPool = None ) Name Type Description scope constructs.Construct No description. id str No description. identity_pool_options aws_cdk.aws_cognito_identitypool_alpha.IdentityPoolProps Configuration for the Identity Pool. user_pool aws_cdk.aws_cognito.UserPool User provided Cognito UserPool. scope Required Type: constructs.Construct id Required Type: str identity_pool_options Optional Type: aws_cdk.aws_cognito_identitypool_alpha.IdentityPoolProps Configuration for the Identity Pool. user_pool Optional Type: aws_cdk.aws_cognito.UserPool Default: a userpool will be created. User provided Cognito UserPool. Methods Name Description to_string Returns a string representation of this construct. to_string def to_string () -> str Returns a string representation of this construct. Static Functions Name Description is_construct Checks if x is a construct. is_construct import aws_prototyping_sdk.identity aws_prototyping_sdk . identity . UserIdentity . is_construct ( x : typing . Any ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: typing.Any Any object. Properties Name Type Description node constructs.Node The tree node. identity_pool aws_cdk.aws_cognito_identitypool_alpha.IdentityPool No description. user_pool aws_cdk.aws_cognito.UserPool No description. user_pool_client aws_cdk.aws_cognito.UserPoolClient No description. node Required node : Node Type: constructs.Node The tree node. identity_pool Required identity_pool : IdentityPool Type: aws_cdk.aws_cognito_identitypool_alpha.IdentityPool user_pool Required user_pool : UserPool Type: aws_cdk.aws_cognito.UserPool user_pool_client Optional user_pool_client : UserPoolClient Type: aws_cdk.aws_cognito.UserPoolClient Structs UserIdentityProps Properties which configures the Identity Pool. Initializer import aws_prototyping_sdk.identity aws_prototyping_sdk . identity . UserIdentityProps ( identity_pool_options : IdentityPoolProps = None , user_pool : UserPool = None ) Properties Name Type Description identity_pool_options aws_cdk.aws_cognito_identitypool_alpha.IdentityPoolProps Configuration for the Identity Pool. user_pool aws_cdk.aws_cognito.UserPool User provided Cognito UserPool. identity_pool_options Optional identity_pool_options : IdentityPoolProps Type: aws_cdk.aws_cognito_identitypool_alpha.IdentityPoolProps Configuration for the Identity Pool. user_pool Optional user_pool : UserPool Type: aws_cdk.aws_cognito.UserPool Default: a userpool will be created. User provided Cognito UserPool.","title":"Index"},{"location":"python/identity/index.html#api-reference","text":"","title":"API Reference "},{"location":"python/identity/index.html#constructs","text":"","title":"Constructs "},{"location":"python/identity/index.html#useridentity","text":"Creates an Identity Pool with sane defaults configured.","title":"UserIdentity "},{"location":"python/identity/index.html#structs","text":"","title":"Structs "},{"location":"python/identity/index.html#useridentityprops","text":"Properties which configures the Identity Pool.","title":"UserIdentityProps "},{"location":"python/nx-monorepo/index.html","text":"The nx-monorepo package vends a NxMonorepoProject Projen construct that adds NX monorepo support and manages your yarn/npm/pnpm workspaces on your behalf. This construct enables polyglot builds (and inter language build dependencies), build caching, dependency visualization and much, much more. The PDK itself uses the nx-monorepo project itself and is a good reference for seeing how a complex, polyglot monorepo can be set up. BREAKING CHANGES (pre-release) - v0.13.0: WorkspaceConfig.nxConfig type NxConfig => Nx.WorkspaceConfig , and overrideProjectTargets removed in favor of PDKProject.nx config to manage Nx project configurations. See PR 231 . To get started simply run the following command in an empty directory: npx projen new --from aws-prototyping-sdk nx-monorepo This will bootstrap a new Projen monorepo and contain the following in the .projenrc.ts: import { nx_monorepo } from \"aws-prototyping-sdk\" ; const project = new nx_monorepo . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , deps : [ \"aws-cdk-lib\" , \"constructs\" , \"cdk-nag\" ], devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-package\" , }); project . synth (); To add new packages to the monorepo, you can simply add them as a child to the monorepo. To demonstrate, lets add a PDK Pipeline TS Project as a child as follows: import { nx_monorepo } from \"aws-prototyping-sdk\" ; const project = new nx_monorepo . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , deps : [ \"aws-cdk-lib\" , \"constructs\" , \"cdk-nag\" ], devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-package\" , }); new PDKPipelineTsProject ({ parent : project , outdir : \"packages/cicd\" , defaultReleaseBranch : \"mainline\" , name : \"cicd\" , cdkVersion : \"2.1.0\" }); project . synth (); Once added, run npx projen from the root directory. You will now notice a new TS package has been created under the packages/cicd path. Now let's add a python project to the monorepo and add an inter-language build dependency. import { nx_monorepo } from \"aws-prototyping-sdk\" ; import { PDKPipelineTsProject } from \"aws-prototyping-sdk/pipeline\" ; import { PythonProject } from \"projen/lib/python\" ; const project = new nx_monorepo . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , deps : [ \"aws-cdk-lib\" , \"constructs\" , \"cdk-nag\" ], devDeps : [ \"aws-prototyping-sdk\" ], name : \"test\" , }); const pipelineProject = new PDKPipelineTsProject ({ parent : project , outdir : \"packages/cicd\" , defaultReleaseBranch : \"mainline\" , name : \"cicd\" , cdkVersion : \"2.1.0\" }); // Standard Projen projects also work here const pythonlib = new PythonProject ({ parent : project , outdir : \"packages/pythonlib\" , authorEmail : \"\" , authorName : \"\" , module Name : \"pythonlib\" , name : \"pythonlib\" , version : \"0.0.0\" }); // Pipeline project depends on pythonlib to build first project . addImplicitDependency ( pipelineProject , pythonlib ); project . synth (); Run npx projen from the root directory. You will now notice a new Python package has been created under packages/pythonlib. To visualize our dependency graph, run the following command from the root directory: npx nx graph . Now lets test building our project, from the root directory run npx nx run-many --target=build --nx-bail . As you can see, the pythonlib was built first followed by the cicd package. This is equivalent to running yarn build , pnpm build , or npm run build depending on your node package manager, and similarly yarn build also accepts the same Nx Run-Many options (eg: yarn build --projects=cicd ). The NxMonorepoProject also manages your yarn/pnpm workspaces for you and synthesizes these into your package.json pnpm-workspace.yml respectively. For more information on NX commands, refer to this documentation . Homogenous Dependencies As well as adding implicit dependencies, you can add dependencies between projects of the same language in order to have one project consume another project's code. Typescript Since the NxMonorepoProject manages a yarn/npm/pnpm workspace, configuring dependencies between Typescript projects is as straightforward as referencing them in deps . Note that dependencies cannot be added in the same project synthesis ( npx projen ) as when projects are created. This means a two-pass approach is recommended, first to create your new projects, and then to add the dependencies. For example: First add your new projects: new TypeScriptProject ({ parent : monorepo , outdir : \"packages/a\" , defaultReleaseBranch : \"main\" , name : \"project-a\" }); new TypeScriptProject ({ parent : monorepo , outdir : \"packages/b\" , defaultReleaseBranch : \"main\" , name : \"project-b\" , }); Synthesise, then you can set up your dependency: const a = new TypeScriptProject ({ parent : monorepo , outdir : \"packages/a\" , defaultReleaseBranch : \"main\" , name : \"project-a\" }); new TypeScriptProject ({ parent : monorepo , outdir : \"packages/b\" , defaultReleaseBranch : \"main\" , name : \"project-b\" , // B depends on A deps : [ a . package . packageName ], }); Python The recommended way to configure dependencies between python projects within your monorepo is to use a single shared virtual environment. You can then install packages you wish to depend on into that environment using pip's Editable Installs . You will also need to add an implicit dependency to tell the monorepo the correct build order for your packages. For example: const sharedEnv : VenvOptions = { envdir : '../../.env' , }; const a = new PythonProject ({ parent : monorepo , outdir : 'packages/a' , module Name : 'a' , name : 'a' , authorName : 'jack' , authorEmail : 'me@example.com' , version : '1.0.0' , venvOptions : sharedEnv , }); // Install A into the virtual env since it is consumed by B a . tasks . tryFind ( 'install' ) ! . exec ( 'pip install --editable .' ); const b = new PythonProject ({ parent : monorepo , outdir : 'packages/b' , module Name : 'b' , name : 'b' , authorName : 'jack' , authorEmail : 'me@example.com' , version : '1.0.0' , venvOptions : sharedEnv , // B depends on A deps : [ a . module Name ], }); // Add the implicit dependency so that the monorepo will build A before B monorepo . addImplicitDependency ( b , a ); Java The recommended way to configure dependencies between java projects within your monorepo is to use shared maven repositories. The default java project build will already create a distributable in the correct format for a maven repository in its dist/java folder, so you can use this as a repository. For example: const a = new JavaProject ({ parent : monorepo , outdir : 'packages/a' , groupId : 'com.mycompany' , artifactId : 'a' , name : 'a' , version : '1.0.0' , }); const b = new JavaProject ({ parent : monorepo , outdir : 'packages/b' , groupId : 'com.mycompany' , artifactId : 'b' , name : 'b' , version : '1.0.0' , // Declare the dependency on A deps : [ ` ${ a . pom . groupId } / ${ a . pom . artifactId } @ ${ a . pom . version } ` ], }); // Add the repository b . pom . addRepository ({ url : 'file://../a/dist/java' , id : 'dependency-on-a' , }); // Add the implicit dependency to control build order monorepo . addImplicitDependency ( b , a ); API Reference Structs MonorepoUpgradeDepsOptions Configuration for Monorepo Upgrade Deps task. Initializer from aws_prototyping_sdk import nx_monorepo nx_monorepo . MonorepoUpgradeDepsOptions ( syncpack_config : SyncpackConfig = None , task_name : str = None ) Properties Name Type Description syncpack_config SyncpackConfig Syncpack configuration. task_name str Name of the task to create. syncpack_config Optional syncpack_config : SyncpackConfig Type: SyncpackConfig Default: SyncpackConfig.DEFAULT_CONFIG Syncpack configuration. No merging is performed and as such a complete syncpackConfig is required if supplied. task_name Optional task_name : str Type: str Default: upgrade-deps Name of the task to create. NxMonorepoProjectOptions Configuration options for the NxMonorepoProject. Initializer from aws_prototyping_sdk import nx_monorepo nx_monorepo . NxMonorepoProjectOptions ( name : str , commit_generated : bool = None , git_options : GitOptions = None , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , renovatebot : bool = None , renovatebot_options : RenovatebotOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge : bool = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_credentials : GithubCredentials = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , allow_library_dependencies : bool = None , author_email : str = None , author_name : str = None , author_organization : bool = None , author_url : str = None , auto_detect_bin : bool = None , bin : typing . Mapping [ str ] = None , bugs_email : str = None , bugs_url : str = None , bundled_deps : typing . List [ str ] = None , code_artifact_options : CodeArtifactOptions = None , deps : typing . List [ str ] = None , description : str = None , dev_deps : typing . List [ str ] = None , entrypoint : str = None , homepage : str = None , keywords : typing . List [ str ] = None , license : str = None , licensed : bool = None , max_node_version : str = None , min_node_version : str = None , npm_access : NpmAccess = None , npm_registry : str = None , npm_registry_url : str = None , npm_token_secret : str = None , package_manager : NodePackageManager = None , package_name : str = None , peer_dependency_options : PeerDependencyOptions = None , peer_deps : typing . List [ str ] = None , pnpm_version : str = None , repository : str = None , repository_directory : str = None , scoped_packages_options : typing . List [ ScopedPackagesOptions ] = None , scripts : typing . Mapping [ str ] = None , stability : str = None , jsii_release_version : str = None , major_version : typing . Union [ int , float ] = None , min_major_version : typing . Union [ int , float ] = None , npm_dist_tag : str = None , post_build_steps : typing . List [ JobStep ] = None , prerelease : str = None , publish_dry_run : bool = None , publish_tasks : bool = None , release_branches : typing . Mapping [ BranchOptions ] = None , release_every_commit : bool = None , release_failure_issue : bool = None , release_failure_issue_label : str = None , release_schedule : str = None , release_tag_prefix : str = None , release_trigger : ReleaseTrigger = None , release_workflow_name : str = None , release_workflow_setup_steps : typing . List [ JobStep ] = None , versionrc_options : typing . Mapping [ typing . Any ] = None , workflow_container_image : str = None , workflow_runs_on : typing . List [ str ] = None , default_release_branch : str , artifacts_directory : str = None , auto_approve_upgrades : bool = None , build_workflow : bool = None , build_workflow_triggers : Triggers = None , bundler_options : BundlerOptions = None , code_cov : bool = None , code_cov_token_secret : str = None , copyright_owner : str = None , copyright_period : str = None , dependabot : bool = None , dependabot_options : DependabotOptions = None , deps_upgrade : bool = None , deps_upgrade_options : UpgradeDependenciesOptions = None , gitignore : typing . List [ str ] = None , jest : bool = None , jest_options : JestOptions = None , mutable_build : bool = None , npmignore : typing . List [ str ] = None , npmignore_enabled : bool = None , package : bool = None , prettier : bool = None , prettier_options : PrettierOptions = None , projen_dev_dependency : bool = None , projenrc_js : bool = None , projenrc_js_options : ProjenrcOptions = None , projen_version : str = None , pull_request_template : bool = None , pull_request_template_contents : typing . List [ str ] = None , release : bool = None , release_to_npm : bool = None , release_workflow : bool = None , workflow_bootstrap_steps : typing . List [ JobStep ] = None , workflow_git_identity : GitIdentity = None , workflow_node_version : str = None , disable_tsconfig : bool = None , docgen : bool = None , docs_directory : str = None , entrypoint_types : str = None , eslint : bool = None , eslint_options : EslintOptions = None , libdir : str = None , projenrc_ts : bool = None , projenrc_ts_options : ProjenrcOptions = None , sample_code : bool = None , srcdir : str = None , testdir : str = None , tsconfig : TypescriptConfigOptions = None , tsconfig_dev : TypescriptConfigOptions = None , tsconfig_dev_file : str = None , typescript_version : str = None , monorepo_upgrade_deps : bool = None , monorepo_upgrade_deps_options : MonorepoUpgradeDepsOptions = None , nx_config : WorkspaceConfig = None , workspace_config : WorkspaceConfig = None ) Properties Name Type Description name str This is the name of your project. commit_generated bool Whether to commit the managed files by default. git_options projen.GitOptions Configuration options for git. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. renovatebot bool Use renovatebot to handle dependency upgrades. renovatebot_options projen.RenovatebotOptions Options for renovatebot. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge bool Enable automatic merging on GitHub. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_credentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. allow_library_dependencies bool Allow the project to include peerDependencies and bundledDependencies . author_email str Author's e-mail. author_name str Author's name. author_organization bool Is the author an organization. author_url str Author's URL / Website. auto_detect_bin bool Automatically add all executables under the bin directory to your package.json file under the bin section. bin typing.Mapping[str] Binary programs vended with your module. bugs_email str The email address to which issues should be reported. bugs_url str The url to your project's issue tracker. bundled_deps typing.List[str] List of dependencies to bundle into this module. code_artifact_options projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps typing.List[str] Runtime dependencies of this module. description str The description is just a string that helps people understand the purpose of the package. dev_deps typing.List[str] Build dependencies for this module. entrypoint str Module entrypoint ( main in package.json ). homepage str Package's Homepage / Website. keywords typing.List[str] Keywords to include in package.json . license str License's SPDX identifier. licensed bool Indicates if a license should be added. max_node_version str Minimum node.js version to require via engines (inclusive). min_node_version str Minimum Node.js version to require via package.json engines (inclusive). npm_access projen.javascript.NpmAccess Access level of the npm package. npm_registry str The host name of the npm registry to publish to. npm_registry_url str The base URL of the npm package registry. npm_token_secret str GitHub secret which contains the NPM token to use when publishing packages. package_manager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. package_name str The \"name\" in package.json. peer_dependency_options projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps typing.List[str] Peer dependencies for this module. pnpm_version str The version of PNPM to use if using PNPM as a package manager. repository str The repository is the location where the actual code for your package lives. repository_directory str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scoped_packages_options typing.List[projen.javascript.ScopedPackagesOptions] Options for privately hosted scoped packages. scripts typing.Mapping[str] npm scripts to include. stability str Package's Stability. jsii_release_version str Version requirement of publib which is used to publish modules to npm. major_version typing.Union[int, float] Major version to release from the default branch. min_major_version typing.Union[int, float] Minimal Major version to release. npm_dist_tag str The npmDistTag to use when publishing from the default branch. post_build_steps typing.List[projen.github.workflows.JobStep] Steps to execute after build as part of the release workflow. prerelease str Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run bool Instead of actually publishing to package managers, just print the publishing command. publish_tasks bool Define publishing tasks that can be executed manually as well as workflows. release_branches typing.Mapping[projen.release.BranchOptions] Defines additional release branches. release_every_commit bool Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue bool Create a github issue on every failed publishing task. release_failure_issue_label str The label to apply to issues indicating publish failures. release_schedule str CRON schedule to trigger new releases. release_tag_prefix str Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. release_trigger projen.release.ReleaseTrigger The release trigger to use. release_workflow_name str The name of the default release workflow. release_workflow_setup_steps typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options typing.Mapping[typing.Any] Custom configuration used when creating changelog with standard-version package. workflow_container_image str Container image to use for GitHub workflows. workflow_runs_on typing.List[str] Github Runner selection labels. default_release_branch str The name of the main release branch. artifacts_directory str A directory which will contain build artifacts. auto_approve_upgrades bool Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). build_workflow bool Define a GitHub workflow for building PRs. build_workflow_triggers projen.github.workflows.Triggers Build workflow triggers. bundler_options projen.javascript.BundlerOptions Options for Bundler . code_cov bool Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret str Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner str License copyright owner. copyright_period str The copyright years to put in the LICENSE file. dependabot bool Use dependabot to handle dependency upgrades. dependabot_options projen.github.DependabotOptions Options for dependabot. deps_upgrade bool Use github workflows to handle dependency upgrades. deps_upgrade_options projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore typing.List[str] Additional entries to .gitignore. jest bool Setup jest unit tests. jest_options projen.javascript.JestOptions Jest options. mutable_build bool Automatically update files modified during builds to pull-request branches. npmignore typing.List[str] Additional entries to .npmignore. npmignore_enabled bool Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package bool Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier bool Setup prettier. prettier_options projen.javascript.PrettierOptions Prettier options. projen_dev_dependency bool Indicates of \"projen\" should be installed as a devDependency. projenrc_js bool Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options projen.javascript.ProjenrcOptions Options for .projenrc.js. projen_version str Version of projen to install. pull_request_template bool Include a GitHub pull request template. pull_request_template_contents typing.List[str] The contents of the pull request template. release bool Add release management to this project. release_to_npm bool Automatically release to npm when new versions are introduced. release_workflow bool DEPRECATED: renamed to release . workflow_bootstrap_steps typing.List[projen.github.workflows.JobStep] Workflow steps to use in order to bootstrap this repo. workflow_git_identity projen.github.GitIdentity The git identity to use in workflows. workflow_node_version str The node version to use in GitHub workflows. disable_tsconfig bool Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen bool Docgen by Typedoc. docs_directory str Docs directory. entrypoint_types str The .d.ts file that includes the type declarations for this module. eslint bool Setup eslint. eslint_options projen.javascript.EslintOptions Eslint options. libdir str Typescript artifacts output directory. projenrc_ts bool Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code bool Generate one-time sample in src/ and test/ if there are no files there. srcdir str Typescript sources directory. testdir str Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfig_dev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file str The name of the development tsconfig.json file. typescript_version str TypeScript version to use. monorepo_upgrade_deps bool Whether to include an upgrade-deps task at the root of the monorepo which will upgrade all dependencies. monorepo_upgrade_deps_options MonorepoUpgradeDepsOptions Monorepo Upgrade Deps options. nx_config WorkspaceConfig Configuration for NX. workspace_config WorkspaceConfig Configuration for workspace. name Required name : str Type: str Default: $BASEDIR This is the name of your project. commit_generated Optional commit_generated : bool Type: bool Default: true Whether to commit the managed files by default. git_options Optional git_options : GitOptions Type: projen.GitOptions Configuration options for git. logging Optional logging : LoggerOptions Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional outdir : str Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional parent : Project Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional projen_command : str Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional projenrc_json : bool Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional projenrc_json_options : ProjenrcOptions Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional renovatebot : bool Type: bool Default: false Use renovatebot to handle dependency upgrades. renovatebot_options Optional renovatebot_options : RenovatebotOptions Type: projen.RenovatebotOptions Default: default options Options for renovatebot. auto_approve_options Optional auto_approve_options : AutoApproveOptions Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge Optional auto_merge : bool Type: bool Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. auto_merge_options Optional auto_merge_options : AutoMergeOptions Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional clobber : bool Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional dev_container : bool Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional github : bool Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional github_options : GitHubOptions Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional gitpod : bool Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead mergify : bool Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead mergify_options : MergifyOptions Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level project_type : ProjectType Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_credentials Optional projen_credentials : GithubCredentials Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projen_token_secret ~~ Optional Deprecated: use projenCredentials projen_token_secret : str Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional readme : SampleReadmeProps Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional stale : bool Type: bool Default: false Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional stale_options : StaleOptions Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional vscode : bool Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allow_library_dependencies Optional allow_library_dependencies : bool Type: bool Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. author_email Optional author_email : str Type: str Author's e-mail. author_name Optional author_name : str Type: str Author's name. author_organization Optional author_organization : bool Type: bool Is the author an organization. author_url Optional author_url : str Type: str Author's URL / Website. auto_detect_bin Optional auto_detect_bin : bool Type: bool Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional bin : typing . Mapping [ str ] Type: typing.Mapping[str] Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugs_email Optional bugs_email : str Type: str The email address to which issues should be reported. bugs_url Optional bugs_url : str Type: str The url to your project's issue tracker. bundled_deps Optional bundled_deps : typing . List [ str ] Type: typing.List[str] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. code_artifact_options Optional code_artifact_options : CodeArtifactOptions Type: projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional deps : typing . List [ str ] Type: typing.List[str] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'express' , 'lodash' , 'foo@^2' ] description Optional description : str Type: str The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description dev_deps Optional dev_deps : typing . List [ str ] Type: typing.List[str] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'typescript' , '@types/express' ] entrypoint Optional entrypoint : str Type: str Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional homepage : str Type: str Package's Homepage / Website. keywords Optional keywords : typing . List [ str ] Type: typing.List[str] Keywords to include in package.json . license Optional license : str Type: str Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional licensed : bool Type: bool Default: true Indicates if a license should be added. max_node_version Optional max_node_version : str Type: str Default: no max Minimum node.js version to require via engines (inclusive). min_node_version Optional min_node_version : str Type: str Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npm_access Optional npm_access : NpmAccess Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npm_registry ~~ Optional Deprecated: use npmRegistryUrl instead npm_registry : str Type: str The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npm_registry_url Optional npm_registry_url : str Type: str Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npm_token_secret Optional npm_token_secret : str Type: str Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. package_manager Optional package_manager : NodePackageManager Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. package_name Optional package_name : str Type: str Default: defaults to project name The \"name\" in package.json. peer_dependency_options Optional peer_dependency_options : PeerDependencyOptions Type: projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps Optional peer_deps : typing . List [ str ] Type: typing.List[str] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. pnpm_version Optional pnpm_version : str Type: str Default: \"7\" The version of PNPM to use if using PNPM as a package manager. repository Optional repository : str Type: str The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repository_directory Optional repository_directory : str Type: str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scoped_packages_options Optional scoped_packages_options : typing . List [ ScopedPackagesOptions ] Type: typing.List[projen.javascript.ScopedPackagesOptions] Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional scripts : typing . Mapping [ str ] Type: typing.Mapping[str] Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional stability : str Type: str Package's Stability. jsii_release_version Optional jsii_release_version : str Type: str Default: \"latest\" Version requirement of publib which is used to publish modules to npm. major_version Optional major_version : typing . Union [ int , float ] Type: typing.Union[int, float] Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. min_major_version Optional min_major_version : typing . Union [ int , float ] Type: typing.Union[int, float] Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npm_dist_tag Optional npm_dist_tag : str Type: str Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. post_build_steps Optional post_build_steps : typing . List [ JobStep ] Type: typing.List[projen.github.workflows.JobStep] Default: [] Steps to execute after build as part of the release workflow. prerelease Optional prerelease : str Type: str Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run Optional publish_dry_run : bool Type: bool Default: false Instead of actually publishing to package managers, just print the publishing command. publish_tasks Optional publish_tasks : bool Type: bool Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. release_branches Optional release_branches : typing . Mapping [ BranchOptions ] Type: typing.Mapping[projen.release.BranchOptions] Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ release_every_commit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead release_every_commit : bool Type: bool Default: true Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue Optional release_failure_issue : bool Type: bool Default: false Create a github issue on every failed publishing task. release_failure_issue_label Optional release_failure_issue_label : str Type: str Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ release_schedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead release_schedule : str Type: str Default: no scheduled releases CRON schedule to trigger new releases. release_tag_prefix Optional release_tag_prefix : str Type: str Default: \"v\" Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. release_trigger Optional release_trigger : ReleaseTrigger Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. release_workflow_name Optional release_workflow_name : str Type: str Default: \"Release\" The name of the default release workflow. release_workflow_setup_steps Optional release_workflow_setup_steps : typing . List [ JobStep ] Type: typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options Optional versionrc_options : typing . Mapping [ typing . Any ] Type: typing.Mapping[typing.Any] Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflow_container_image Optional workflow_container_image : str Type: str Default: default image Container image to use for GitHub workflows. workflow_runs_on Optional workflow_runs_on : typing . List [ str ] Type: typing.List[str] Default: [\"ubuntu-latest\"] Github Runner selection labels. default_release_branch Required default_release_branch : str Type: str Default: \"main\" The name of the main release branch. artifacts_directory Optional artifacts_directory : str Type: str Default: \"dist\" A directory which will contain build artifacts. auto_approve_upgrades Optional auto_approve_upgrades : bool Type: bool Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. build_workflow Optional build_workflow : bool Type: bool Default: true if not a subproject Define a GitHub workflow for building PRs. build_workflow_triggers Optional build_workflow_triggers : Triggers Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundler_options Optional bundler_options : BundlerOptions Type: projen.javascript.BundlerOptions Options for Bundler . code_cov Optional code_cov : bool Type: bool Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret Optional code_cov_token_secret : str Type: str Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner Optional copyright_owner : str Type: str Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyright_period Optional copyright_period : str Type: str Default: current year The copyright years to put in the LICENSE file. dependabot Optional dependabot : bool Type: bool Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabot_options Optional dependabot_options : DependabotOptions Type: projen.github.DependabotOptions Default: default options Options for dependabot. deps_upgrade Optional deps_upgrade : bool Type: bool Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . deps_upgrade_options Optional deps_upgrade_options : UpgradeDependenciesOptions Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional gitignore : typing . List [ str ] Type: typing.List[str] Additional entries to .gitignore. jest Optional jest : bool Type: bool Default: true Setup jest unit tests. jest_options Optional jest_options : JestOptions Type: projen.javascript.JestOptions Default: default options Jest options. mutable_build Optional mutable_build : bool Type: bool Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore npmignore : typing . List [ str ] Type: typing.List[str] Additional entries to .npmignore. npmignore_enabled Optional npmignore_enabled : bool Type: bool Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional package : bool Type: bool Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional prettier : bool Type: bool Default: false Setup prettier. prettier_options Optional prettier_options : PrettierOptions Type: projen.javascript.PrettierOptions Default: default options Prettier options. projen_dev_dependency Optional projen_dev_dependency : bool Type: bool Default: true Indicates of \"projen\" should be installed as a devDependency. projenrc_js Optional projenrc_js : bool Type: bool Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options Optional projenrc_js_options : ProjenrcOptions Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projen_version Optional projen_version : str Type: str Default: Defaults to the latest version. Version of projen to install. pull_request_template Optional pull_request_template : bool Type: bool Default: true Include a GitHub pull request template. pull_request_template_contents Optional pull_request_template_contents : typing . List [ str ] Type: typing.List[str] Default: default content The contents of the pull request template. release Optional release : bool Type: bool Default: true (false for subprojects) Add release management to this project. release_to_npm Optional release_to_npm : bool Type: bool Default: false Automatically release to npm when new versions are introduced. ~~ release_workflow ~~ Optional Deprecated: see release . release_workflow : bool Type: bool Default: true if not a subproject DEPRECATED: renamed to release . workflow_bootstrap_steps Optional workflow_bootstrap_steps : typing . List [ JobStep ] Type: typing.List[projen.github.workflows.JobStep] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflow_git_identity Optional workflow_git_identity : GitIdentity Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflow_node_version Optional workflow_node_version : str Type: str Default: same as minNodeVersion The node version to use in GitHub workflows. disable_tsconfig Optional disable_tsconfig : bool Type: bool Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional docgen : bool Type: bool Default: false Docgen by Typedoc. docs_directory Optional docs_directory : str Type: str Default: \"docs\" Docs directory. entrypoint_types Optional entrypoint_types : str Type: str Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional eslint : bool Type: bool Default: true Setup eslint. eslint_options Optional eslint_options : EslintOptions Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional libdir : str Type: str Default: \"lib\" Typescript artifacts output directory. projenrc_ts Optional projenrc_ts : bool Type: bool Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options Optional projenrc_ts_options : ProjenrcOptions Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code Optional sample_code : bool Type: bool Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional srcdir : str Type: str Default: \"src\" Typescript sources directory. testdir Optional testdir : str Type: str Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional tsconfig : TypescriptConfigOptions Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfig_dev Optional tsconfig_dev : TypescriptConfigOptions Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file Optional tsconfig_dev_file : str Type: str Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescript_version Optional typescript_version : str Type: str Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). monorepo_upgrade_deps Optional monorepo_upgrade_deps : bool Type: bool Default: true Whether to include an upgrade-deps task at the root of the monorepo which will upgrade all dependencies. monorepo_upgrade_deps_options Optional monorepo_upgrade_deps_options : MonorepoUpgradeDepsOptions Type: MonorepoUpgradeDepsOptions Default: undefined Monorepo Upgrade Deps options. This is only used if monorepoUpgradeDeps is true. nx_config Optional nx_config : WorkspaceConfig Type: WorkspaceConfig Configuration for NX. workspace_config Optional workspace_config : WorkspaceConfig Type: WorkspaceConfig Configuration for workspace. NxRunManyOptions https://nx.dev/packages/nx/documents/run-many#options Initializer from aws_prototyping_sdk import nx_monorepo nx_monorepo . NxRunManyOptions ( target : str , configuration : str = None , exclude : str = None , ignore_cycles : bool = None , no_bail : bool = None , output_style : str = None , parallel : typing . Union [ int , float ] = None , projects : typing . List [ str ] = None , runner : str = None , skip_cache : bool = None , verbose : bool = None ) Properties Name Type Description target str Task to run for affected projects. configuration str This is the configuration to use when performing tasks on projects. exclude str Exclude certain projects from being processed. ignore_cycles bool Ignore cycles in the task graph. no_bail bool Do not stop command execution after the first failed task. output_style str Defines how Nx emits outputs tasks logs. parallel typing.Union[int, float] Max number of parallel processes. projects typing.List[str] Project to run as list project names and/or patterns. runner str This is the name of the tasks runner configuration in nx.json. skip_cache bool Rerun the tasks even when the results are available in the cache. verbose bool Prints additional information about the commands (e.g. stack traces). target Required target : str Type: str Task to run for affected projects. configuration Optional configuration : str Type: str This is the configuration to use when performing tasks on projects. exclude Optional exclude : str Type: str Exclude certain projects from being processed. ignore_cycles Optional ignore_cycles : bool Type: bool Ignore cycles in the task graph. no_bail Optional no_bail : bool Type: bool Do not stop command execution after the first failed task. output_style Optional output_style : str Type: str Default: \"stream\" Defines how Nx emits outputs tasks logs. parallel Optional parallel : typing . Union [ int , float ] Type: typing.Union[int, float] Default: 3 Max number of parallel processes. projects Optional projects : typing . List [ str ] Type: typing.List[str] Project to run as list project names and/or patterns. runner Optional runner : str Type: str This is the name of the tasks runner configuration in nx.json. skip_cache Optional skip_cache : bool Type: bool Rerun the tasks even when the results are available in the cache. verbose Optional verbose : bool Type: bool Prints additional information about the commands (e.g. stack traces). SemverGroup Initializer from aws_prototyping_sdk import nx_monorepo nx_monorepo . SemverGroup ( dependencies : typing . List [ str ], packages : typing . List [ str ], range : str , dependency_types : typing . List [ str ] = None ) Properties Name Type Description dependencies typing.List[str] the names of the dependencies (eg. packages typing.List[str] the names of packages in your monorepo which belong to this group, taken from the \"name\" field in package.json, not the package directory name. range str the semver range which dependencies in this group should use. dependency_types typing.List[str] optionally only apply this group to dependencies of the provided types. dependencies Required dependencies : typing . List [ str ] Type: typing.List[str] the names of the dependencies (eg. \"lodash\") which belong to this group packages Required packages : typing . List [ str ] Type: typing.List[str] the names of packages in your monorepo which belong to this group, taken from the \"name\" field in package.json, not the package directory name. range Required range : str Type: str the semver range which dependencies in this group should use. dependency_types Optional dependency_types : typing . List [ str ] Type: typing.List[str] optionally only apply this group to dependencies of the provided types. SyncpackConfig Initializer from aws_prototyping_sdk import nx_monorepo nx_monorepo . SyncpackConfig ( dependency_types : typing . List [ str ], dev : bool , filter : str , indent : str , overrides : bool , peer : bool , pnpm_overrides : bool , prod : bool , resolutions : bool , semver_groups : typing . List [ SemverGroup ], semver_range : str , sort_az : typing . List [ str ], sort_first : typing . List [ str ], source : typing . List [ str ], version_groups : typing . List [ VersionGroup ], workspace : bool ) Properties Name Type Description dependency_types typing.List[str] which dependency properties to search within. dev bool whether to search within devDependencies. filter str a string which will be passed to new RegExp() to match against package names that should be included. indent str the character(s) to be used to indent your package.json files when writing to disk. overrides bool whether to search within npm overrides. peer bool whether to search within peerDependencies. pnpm_overrides bool whether to search within pnpm overrides. prod bool whether to search within dependencies. resolutions bool whether to search within yarn resolutions. semver_groups typing.List[ SemverGroup ] No description. semver_range str defaults to \"\" to ensure that exact dependency versions are used instead of loose ranges. sort_az typing.List[str] which fields within package.json files should be sorted alphabetically. sort_first typing.List[str] which fields within package.json files should appear at the top, and in what order. source typing.List[str] glob patterns for package.json file locations. version_groups typing.List[ VersionGroup ] No description. workspace bool whether to include the versions of the --source packages developed in your workspace/monorepo as part of the search for versions to sync. dependency_types Required dependency_types : typing . List [ str ] Type: typing.List[str] which dependency properties to search within. dev Required dev : bool Type: bool whether to search within devDependencies. filter Required filter : str Type: str a string which will be passed to new RegExp() to match against package names that should be included. indent Required indent : str Type: str the character(s) to be used to indent your package.json files when writing to disk. overrides Required overrides : bool Type: bool whether to search within npm overrides. peer Required peer : bool Type: bool whether to search within peerDependencies. pnpm_overrides Required pnpm_overrides : bool Type: bool whether to search within pnpm overrides. prod Required prod : bool Type: bool whether to search within dependencies. resolutions Required resolutions : bool Type: bool whether to search within yarn resolutions. semver_groups Required semver_groups : typing . List [ SemverGroup ] Type: typing.List[ SemverGroup ] semver_range Required semver_range : str Type: str defaults to \"\" to ensure that exact dependency versions are used instead of loose ranges. sort_az Required sort_az : typing . List [ str ] Type: typing.List[str] which fields within package.json files should be sorted alphabetically. sort_first Required sort_first : typing . List [ str ] Type: typing.List[str] which fields within package.json files should appear at the top, and in what order. source Required source : typing . List [ str ] Type: typing.List[str] glob patterns for package.json file locations. version_groups Required version_groups : typing . List [ VersionGroup ] Type: typing.List[ VersionGroup ] workspace Required workspace : bool Type: bool whether to include the versions of the --source packages developed in your workspace/monorepo as part of the search for versions to sync. VersionGroup Initializer from aws_prototyping_sdk import nx_monorepo nx_monorepo . VersionGroup ( dependencies : typing . List [ str ], packages : typing . List [ str ], dependency_types : typing . List [ str ] = None , is_banned : bool = None , pin_version : str = None ) Properties Name Type Description dependencies typing.List[str] the names of the dependencies (eg. packages typing.List[str] the names of packages in your monorepo which belong to this group, taken from the \"name\" field in package.json, not the package directory name. dependency_types typing.List[str] optionally only apply this group to dependencies of the provided types. is_banned bool optionally force all dependencies in this group to be removed. pin_version str optionally force all dependencies in this group to have this version. dependencies Required dependencies : typing . List [ str ] Type: typing.List[str] the names of the dependencies (eg. \"lodash\") which belong to this group packages Required packages : typing . List [ str ] Type: typing.List[str] the names of packages in your monorepo which belong to this group, taken from the \"name\" field in package.json, not the package directory name. dependency_types Optional dependency_types : typing . List [ str ] Type: typing.List[str] optionally only apply this group to dependencies of the provided types. is_banned Optional is_banned : bool Type: bool optionally force all dependencies in this group to be removed. pin_version Optional pin_version : str Type: str optionally force all dependencies in this group to have this version. WorkspaceConfig Workspace configurations. https://classic.yarnpkg.com/lang/en/docs/workspaces/ Initializer from aws_prototyping_sdk import nx_monorepo nx_monorepo . WorkspaceConfig ( additional_packages : typing . List [ str ] = None , disable_no_hoist_bundled : bool = None , no_hoist : typing . List [ str ] = None ) Properties Name Type Description additional_packages typing.List[str] List of additional package globs to include in the workspace. disable_no_hoist_bundled bool Disable automatically applying noHoist logic for all sub-project \"bundledDependencies\". no_hoist typing.List[str] List of package globs to exclude from hoisting in the workspace. additional_packages Optional additional_packages : typing . List [ str ] Type: typing.List[str] List of additional package globs to include in the workspace. All packages which are parented by the monorepo are automatically added to the workspace, but you can use this property to specify any additional paths to packages which may not be managed by projen. disable_no_hoist_bundled Optional disable_no_hoist_bundled : bool Type: bool Default: false Disable automatically applying noHoist logic for all sub-project \"bundledDependencies\". no_hoist Optional no_hoist : typing . List [ str ] Type: typing.List[str] List of package globs to exclude from hoisting in the workspace. https://classic.yarnpkg.com/blog/2018/02/15/nohoist/ Classes NxMonorepoProject This project type will bootstrap a NX based monorepo with support for polygot builds, build caching, dependency graph visualization and much more. Initializers from aws_prototyping_sdk import nx_monorepo nx_monorepo . NxMonorepoProject ( name : str , commit_generated : bool = None , git_options : GitOptions = None , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , renovatebot : bool = None , renovatebot_options : RenovatebotOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge : bool = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_credentials : GithubCredentials = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , allow_library_dependencies : bool = None , author_email : str = None , author_name : str = None , author_organization : bool = None , author_url : str = None , auto_detect_bin : bool = None , bin : typing . Mapping [ str ] = None , bugs_email : str = None , bugs_url : str = None , bundled_deps : typing . List [ str ] = None , code_artifact_options : CodeArtifactOptions = None , deps : typing . List [ str ] = None , description : str = None , dev_deps : typing . List [ str ] = None , entrypoint : str = None , homepage : str = None , keywords : typing . List [ str ] = None , license : str = None , licensed : bool = None , max_node_version : str = None , min_node_version : str = None , npm_access : NpmAccess = None , npm_registry : str = None , npm_registry_url : str = None , npm_token_secret : str = None , package_manager : NodePackageManager = None , package_name : str = None , peer_dependency_options : PeerDependencyOptions = None , peer_deps : typing . List [ str ] = None , pnpm_version : str = None , repository : str = None , repository_directory : str = None , scoped_packages_options : typing . List [ ScopedPackagesOptions ] = None , scripts : typing . Mapping [ str ] = None , stability : str = None , jsii_release_version : str = None , major_version : typing . Union [ int , float ] = None , min_major_version : typing . Union [ int , float ] = None , npm_dist_tag : str = None , post_build_steps : typing . List [ JobStep ] = None , prerelease : str = None , publish_dry_run : bool = None , publish_tasks : bool = None , release_branches : typing . Mapping [ BranchOptions ] = None , release_every_commit : bool = None , release_failure_issue : bool = None , release_failure_issue_label : str = None , release_schedule : str = None , release_tag_prefix : str = None , release_trigger : ReleaseTrigger = None , release_workflow_name : str = None , release_workflow_setup_steps : typing . List [ JobStep ] = None , versionrc_options : typing . Mapping [ typing . Any ] = None , workflow_container_image : str = None , workflow_runs_on : typing . List [ str ] = None , default_release_branch : str , artifacts_directory : str = None , auto_approve_upgrades : bool = None , build_workflow : bool = None , build_workflow_triggers : Triggers = None , bundler_options : BundlerOptions = None , code_cov : bool = None , code_cov_token_secret : str = None , copyright_owner : str = None , copyright_period : str = None , dependabot : bool = None , dependabot_options : DependabotOptions = None , deps_upgrade : bool = None , deps_upgrade_options : UpgradeDependenciesOptions = None , gitignore : typing . List [ str ] = None , jest : bool = None , jest_options : JestOptions = None , mutable_build : bool = None , npmignore : typing . List [ str ] = None , npmignore_enabled : bool = None , package : bool = None , prettier : bool = None , prettier_options : PrettierOptions = None , projen_dev_dependency : bool = None , projenrc_js : bool = None , projenrc_js_options : ProjenrcOptions = None , projen_version : str = None , pull_request_template : bool = None , pull_request_template_contents : typing . List [ str ] = None , release : bool = None , release_to_npm : bool = None , release_workflow : bool = None , workflow_bootstrap_steps : typing . List [ JobStep ] = None , workflow_git_identity : GitIdentity = None , workflow_node_version : str = None , disable_tsconfig : bool = None , docgen : bool = None , docs_directory : str = None , entrypoint_types : str = None , eslint : bool = None , eslint_options : EslintOptions = None , libdir : str = None , projenrc_ts : bool = None , projenrc_ts_options : ProjenrcOptions = None , sample_code : bool = None , srcdir : str = None , testdir : str = None , tsconfig : TypescriptConfigOptions = None , tsconfig_dev : TypescriptConfigOptions = None , tsconfig_dev_file : str = None , typescript_version : str = None , monorepo_upgrade_deps : bool = None , monorepo_upgrade_deps_options : MonorepoUpgradeDepsOptions = None , nx_config : WorkspaceConfig = None , workspace_config : WorkspaceConfig = None ) Name Type Description name str This is the name of your project. commit_generated bool Whether to commit the managed files by default. git_options projen.GitOptions Configuration options for git. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. renovatebot bool Use renovatebot to handle dependency upgrades. renovatebot_options projen.RenovatebotOptions Options for renovatebot. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge bool Enable automatic merging on GitHub. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_credentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. allow_library_dependencies bool Allow the project to include peerDependencies and bundledDependencies . author_email str Author's e-mail. author_name str Author's name. author_organization bool Is the author an organization. author_url str Author's URL / Website. auto_detect_bin bool Automatically add all executables under the bin directory to your package.json file under the bin section. bin typing.Mapping[str] Binary programs vended with your module. bugs_email str The email address to which issues should be reported. bugs_url str The url to your project's issue tracker. bundled_deps typing.List[str] List of dependencies to bundle into this module. code_artifact_options projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps typing.List[str] Runtime dependencies of this module. description str The description is just a string that helps people understand the purpose of the package. dev_deps typing.List[str] Build dependencies for this module. entrypoint str Module entrypoint ( main in package.json ). homepage str Package's Homepage / Website. keywords typing.List[str] Keywords to include in package.json . license str License's SPDX identifier. licensed bool Indicates if a license should be added. max_node_version str Minimum node.js version to require via engines (inclusive). min_node_version str Minimum Node.js version to require via package.json engines (inclusive). npm_access projen.javascript.NpmAccess Access level of the npm package. npm_registry str The host name of the npm registry to publish to. npm_registry_url str The base URL of the npm package registry. npm_token_secret str GitHub secret which contains the NPM token to use when publishing packages. package_manager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. package_name str The \"name\" in package.json. peer_dependency_options projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps typing.List[str] Peer dependencies for this module. pnpm_version str The version of PNPM to use if using PNPM as a package manager. repository str The repository is the location where the actual code for your package lives. repository_directory str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scoped_packages_options typing.List[projen.javascript.ScopedPackagesOptions] Options for privately hosted scoped packages. scripts typing.Mapping[str] npm scripts to include. stability str Package's Stability. jsii_release_version str Version requirement of publib which is used to publish modules to npm. major_version typing.Union[int, float] Major version to release from the default branch. min_major_version typing.Union[int, float] Minimal Major version to release. npm_dist_tag str The npmDistTag to use when publishing from the default branch. post_build_steps typing.List[projen.github.workflows.JobStep] Steps to execute after build as part of the release workflow. prerelease str Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run bool Instead of actually publishing to package managers, just print the publishing command. publish_tasks bool Define publishing tasks that can be executed manually as well as workflows. release_branches typing.Mapping[projen.release.BranchOptions] Defines additional release branches. release_every_commit bool Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue bool Create a github issue on every failed publishing task. release_failure_issue_label str The label to apply to issues indicating publish failures. release_schedule str CRON schedule to trigger new releases. release_tag_prefix str Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. release_trigger projen.release.ReleaseTrigger The release trigger to use. release_workflow_name str The name of the default release workflow. release_workflow_setup_steps typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options typing.Mapping[typing.Any] Custom configuration used when creating changelog with standard-version package. workflow_container_image str Container image to use for GitHub workflows. workflow_runs_on typing.List[str] Github Runner selection labels. default_release_branch str The name of the main release branch. artifacts_directory str A directory which will contain build artifacts. auto_approve_upgrades bool Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). build_workflow bool Define a GitHub workflow for building PRs. build_workflow_triggers projen.github.workflows.Triggers Build workflow triggers. bundler_options projen.javascript.BundlerOptions Options for Bundler . code_cov bool Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret str Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner str License copyright owner. copyright_period str The copyright years to put in the LICENSE file. dependabot bool Use dependabot to handle dependency upgrades. dependabot_options projen.github.DependabotOptions Options for dependabot. deps_upgrade bool Use github workflows to handle dependency upgrades. deps_upgrade_options projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore typing.List[str] Additional entries to .gitignore. jest bool Setup jest unit tests. jest_options projen.javascript.JestOptions Jest options. mutable_build bool Automatically update files modified during builds to pull-request branches. npmignore typing.List[str] Additional entries to .npmignore. npmignore_enabled bool Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package bool Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier bool Setup prettier. prettier_options projen.javascript.PrettierOptions Prettier options. projen_dev_dependency bool Indicates of \"projen\" should be installed as a devDependency. projenrc_js bool Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options projen.javascript.ProjenrcOptions Options for .projenrc.js. projen_version str Version of projen to install. pull_request_template bool Include a GitHub pull request template. pull_request_template_contents typing.List[str] The contents of the pull request template. release bool Add release management to this project. release_to_npm bool Automatically release to npm when new versions are introduced. release_workflow bool DEPRECATED: renamed to release . workflow_bootstrap_steps typing.List[projen.github.workflows.JobStep] Workflow steps to use in order to bootstrap this repo. workflow_git_identity projen.github.GitIdentity The git identity to use in workflows. workflow_node_version str The node version to use in GitHub workflows. disable_tsconfig bool Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen bool Docgen by Typedoc. docs_directory str Docs directory. entrypoint_types str The .d.ts file that includes the type declarations for this module. eslint bool Setup eslint. eslint_options projen.javascript.EslintOptions Eslint options. libdir str Typescript artifacts output directory. projenrc_ts bool Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code bool Generate one-time sample in src/ and test/ if there are no files there. srcdir str Typescript sources directory. testdir str Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfig_dev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file str The name of the development tsconfig.json file. typescript_version str TypeScript version to use. monorepo_upgrade_deps bool Whether to include an upgrade-deps task at the root of the monorepo which will upgrade all dependencies. monorepo_upgrade_deps_options MonorepoUpgradeDepsOptions Monorepo Upgrade Deps options. nx_config WorkspaceConfig Configuration for NX. workspace_config WorkspaceConfig Configuration for workspace. name Required Type: str Default: $BASEDIR This is the name of your project. commit_generated Optional Type: bool Default: true Whether to commit the managed files by default. git_options Optional Type: projen.GitOptions Configuration options for git. logging Optional Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional Type: bool Default: false Use renovatebot to handle dependency upgrades. renovatebot_options Optional Type: projen.RenovatebotOptions Default: default options Options for renovatebot. auto_approve_options Optional Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge Optional Type: bool Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. auto_merge_options Optional Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_credentials Optional Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projen_token_secret ~~ Optional Deprecated: use projenCredentials Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional Type: bool Default: false Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allow_library_dependencies Optional Type: bool Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. author_email Optional Type: str Author's e-mail. author_name Optional Type: str Author's name. author_organization Optional Type: bool Is the author an organization. author_url Optional Type: str Author's URL / Website. auto_detect_bin Optional Type: bool Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional Type: typing.Mapping[str] Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugs_email Optional Type: str The email address to which issues should be reported. bugs_url Optional Type: str The url to your project's issue tracker. bundled_deps Optional Type: typing.List[str] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. code_artifact_options Optional Type: projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional Type: typing.List[str] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'express' , 'lodash' , 'foo@^2' ] description Optional Type: str The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description dev_deps Optional Type: typing.List[str] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'typescript' , '@types/express' ] entrypoint Optional Type: str Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional Type: str Package's Homepage / Website. keywords Optional Type: typing.List[str] Keywords to include in package.json . license Optional Type: str Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional Type: bool Default: true Indicates if a license should be added. max_node_version Optional Type: str Default: no max Minimum node.js version to require via engines (inclusive). min_node_version Optional Type: str Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npm_access Optional Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npm_registry ~~ Optional Deprecated: use npmRegistryUrl instead Type: str The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npm_registry_url Optional Type: str Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npm_token_secret Optional Type: str Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. package_manager Optional Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. package_name Optional Type: str Default: defaults to project name The \"name\" in package.json. peer_dependency_options Optional Type: projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps Optional Type: typing.List[str] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. pnpm_version Optional Type: str Default: \"7\" The version of PNPM to use if using PNPM as a package manager. repository Optional Type: str The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repository_directory Optional Type: str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scoped_packages_options Optional Type: typing.List[projen.javascript.ScopedPackagesOptions] Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional Type: typing.Mapping[str] Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional Type: str Package's Stability. jsii_release_version Optional Type: str Default: \"latest\" Version requirement of publib which is used to publish modules to npm. major_version Optional Type: typing.Union[int, float] Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. min_major_version Optional Type: typing.Union[int, float] Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npm_dist_tag Optional Type: str Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. post_build_steps Optional Type: typing.List[projen.github.workflows.JobStep] Default: [] Steps to execute after build as part of the release workflow. prerelease Optional Type: str Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run Optional Type: bool Default: false Instead of actually publishing to package managers, just print the publishing command. publish_tasks Optional Type: bool Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. release_branches Optional Type: typing.Mapping[projen.release.BranchOptions] Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ release_every_commit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead Type: bool Default: true Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue Optional Type: bool Default: false Create a github issue on every failed publishing task. release_failure_issue_label Optional Type: str Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ release_schedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead Type: str Default: no scheduled releases CRON schedule to trigger new releases. release_tag_prefix Optional Type: str Default: \"v\" Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. release_trigger Optional Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. release_workflow_name Optional Type: str Default: \"Release\" The name of the default release workflow. release_workflow_setup_steps Optional Type: typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options Optional Type: typing.Mapping[typing.Any] Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflow_container_image Optional Type: str Default: default image Container image to use for GitHub workflows. workflow_runs_on Optional Type: typing.List[str] Default: [\"ubuntu-latest\"] Github Runner selection labels. default_release_branch Required Type: str Default: \"main\" The name of the main release branch. artifacts_directory Optional Type: str Default: \"dist\" A directory which will contain build artifacts. auto_approve_upgrades Optional Type: bool Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. build_workflow Optional Type: bool Default: true if not a subproject Define a GitHub workflow for building PRs. build_workflow_triggers Optional Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundler_options Optional Type: projen.javascript.BundlerOptions Options for Bundler . code_cov Optional Type: bool Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret Optional Type: str Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner Optional Type: str Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyright_period Optional Type: str Default: current year The copyright years to put in the LICENSE file. dependabot Optional Type: bool Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabot_options Optional Type: projen.github.DependabotOptions Default: default options Options for dependabot. deps_upgrade Optional Type: bool Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . deps_upgrade_options Optional Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional Type: typing.List[str] Additional entries to .gitignore. jest Optional Type: bool Default: true Setup jest unit tests. jest_options Optional Type: projen.javascript.JestOptions Default: default options Jest options. mutable_build Optional Type: bool Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore Type: typing.List[str] Additional entries to .npmignore. npmignore_enabled Optional Type: bool Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional Type: bool Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional Type: bool Default: false Setup prettier. prettier_options Optional Type: projen.javascript.PrettierOptions Default: default options Prettier options. projen_dev_dependency Optional Type: bool Default: true Indicates of \"projen\" should be installed as a devDependency. projenrc_js Optional Type: bool Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options Optional Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projen_version Optional Type: str Default: Defaults to the latest version. Version of projen to install. pull_request_template Optional Type: bool Default: true Include a GitHub pull request template. pull_request_template_contents Optional Type: typing.List[str] Default: default content The contents of the pull request template. release Optional Type: bool Default: true (false for subprojects) Add release management to this project. release_to_npm Optional Type: bool Default: false Automatically release to npm when new versions are introduced. ~~ release_workflow ~~ Optional Deprecated: see release . Type: bool Default: true if not a subproject DEPRECATED: renamed to release . workflow_bootstrap_steps Optional Type: typing.List[projen.github.workflows.JobStep] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflow_git_identity Optional Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflow_node_version Optional Type: str Default: same as minNodeVersion The node version to use in GitHub workflows. disable_tsconfig Optional Type: bool Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional Type: bool Default: false Docgen by Typedoc. docs_directory Optional Type: str Default: \"docs\" Docs directory. entrypoint_types Optional Type: str Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional Type: bool Default: true Setup eslint. eslint_options Optional Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional Type: str Default: \"lib\" Typescript artifacts output directory. projenrc_ts Optional Type: bool Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options Optional Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code Optional Type: bool Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional Type: str Default: \"src\" Typescript sources directory. testdir Optional Type: str Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfig_dev Optional Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file Optional Type: str Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescript_version Optional Type: str Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). monorepo_upgrade_deps Optional Type: bool Default: true Whether to include an upgrade-deps task at the root of the monorepo which will upgrade all dependencies. monorepo_upgrade_deps_options Optional Type: MonorepoUpgradeDepsOptions Default: undefined Monorepo Upgrade Deps options. This is only used if monorepoUpgradeDeps is true. nx_config Optional Type: WorkspaceConfig Configuration for NX. workspace_config Optional Type: WorkspaceConfig Configuration for workspace. Methods Name Description add_exclude_from_cleanup Exclude the matching files from pre-synth cleanup. add_git_ignore Adds a .gitignore pattern. add_package_ignore Exclude these files from the bundled package. add_task Adds a new task to this project. add_tip Prints a \"tip\" message during synthesis. annotate_generated Marks the provided file(s) as being generated. post_synthesize Called after all components are synthesized. pre_synthesize Called before all components are synthesized. remove_task Removes a task from a project. run_task_command Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . try_find_file Finds a file at the specified relative path within this project and all its subprojects. try_find_json_file Finds a json file by name. try_find_object_file Finds an object file (like JsonFile, YamlFile, etc.) by name. try_remove_file Finds a file at the specified relative path within this project and removes it. add_bins No description. add_bundled_deps Defines bundled dependencies. add_compile_command DEPRECATED. add_deps Defines normal dependencies. add_dev_deps Defines development/test dependencies. add_fields Directly set fields in package.json . add_keywords Adds keywords to package.json (deduplicated). add_peer_deps Defines peer dependencies. add_test_command DEPRECATED. has_script Indicates if a script by the name name is defined. remove_script Removes the npm script (always successful). render_workflow_setup Returns the set of workflow steps which should be executed to bootstrap a workflow. set_script Replaces the contents of an npm package.json script. add_implicit_dependency Create an implicit dependency between two Project's. add_nx_run_many_task Add project task that executes npx nx run-many ... style command. add_workspace_packages Add one or more additional package globs to the workspace. format_nx_run_many_command Helper to format npx nx run-many ... style command. add_exclude_from_cleanup def add_exclude_from_cleanup ( globs : str ) -> None Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: str The glob patterns to match. add_git_ignore def add_git_ignore ( pattern : str ) -> None Adds a .gitignore pattern. pattern Required Type: str The glob pattern to ignore. add_package_ignore def add_package_ignore ( pattern : str ) -> None Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . pattern Required Type: str add_task def add_task ( name : str , condition : str = None , cwd : str = None , description : str = None , env : typing . Mapping [ str ] = None , required_env : typing . List [ str ] = None , exec : str = None , receive_args : bool = None , steps : typing . List [ TaskStep ] = None ) -> Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: str The task name to add. condition Optional Type: str A shell command which determines if the this task should be executed. If the program exits with a zero exit code, steps will be executed. A non-zero code means that task will be skipped. cwd Optional Type: str Default: process.cwd() The working directory for all steps in this task (unless overridden by the step). description Optional Type: str Default: the task name The description of this build command. env Optional Type: typing.Mapping[str] Default: {} Defines environment variables for the execution of this task. Values in this map will be evaluated in a shell, so you can do stuff like $(echo \"foo\") . required_env Optional Type: typing.List[str] A set of environment variables that must be defined in order to execute this task. Task execution will fail if one of these is not defined. exec Optional Type: str Default: add steps using task.exec(command) or task.spawn(subtask) Shell command to execute as the first command of the task. receive_args Optional Type: bool Default: false Should the provided exec shell command receive args passed to the task. {@link TaskStepOptions.receiveArgs} steps Optional Type: typing.List[projen.TaskStep] List of task steps to run. ~~ add_tip ~~ def add_tip ( message : str ) -> None Prints a \"tip\" message during synthesis. message Required Type: str The message. annotate_generated def annotate_generated ( glob : str ) -> None Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: str the glob pattern to match (could be a file path). post_synthesize def post_synthesize () -> None Called after all components are synthesized. Order is not guaranteed. pre_synthesize def pre_synthesize () -> None Called before all components are synthesized. remove_task def remove_task ( name : str ) -> Task Removes a task from a project. name Required Type: str The name of the task to remove. run_task_command def run_task_command ( task : Task ) -> str Returns the shell command to execute in order to run a task. This will typically be npx projen TASK . task Required Type: projen.Task The task for which the command is required. synth def synth () -> None Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" try_find_file def try_find_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and all its subprojects. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. ~~ try_find_json_file ~~ def try_find_json_file ( file_path : str ) -> JsonFile Finds a json file by name. file_path Required Type: str The file path. try_find_object_file def try_find_object_file ( file_path : str ) -> ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. file_path Required Type: str The file path. try_remove_file def try_remove_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and removes it. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. add_bins def add_bins ( bins : typing . Mapping [ str ] ) -> None bins Required Type: typing.Mapping[str] add_bundled_deps def add_bundled_deps ( deps : str ) -> None Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json . deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ add_compile_command ~~ def add_compile_command ( commands : str ) -> None DEPRECATED. commands Required Type: str add_deps def add_deps ( deps : str ) -> None Defines normal dependencies. deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . add_dev_deps def add_dev_deps ( deps : str ) -> None Defines development/test dependencies. deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . add_fields def add_fields ( fields : typing . Mapping [ typing . Any ] ) -> None Directly set fields in package.json . fields Required Type: typing.Mapping[typing.Any] The fields to set. add_keywords def add_keywords ( keywords : str ) -> None Adds keywords to package.json (deduplicated). keywords Required Type: str The keywords to add. add_peer_deps def add_peer_deps ( deps : str ) -> None Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers. deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ add_test_command ~~ def add_test_command ( commands : str ) -> None DEPRECATED. commands Required Type: str has_script def has_script ( name : str ) -> bool Indicates if a script by the name name is defined. name Required Type: str The name of the script. remove_script def remove_script ( name : str ) -> None Removes the npm script (always successful). name Required Type: str The name of the script. render_workflow_setup def render_workflow_setup ( mutable : bool = None ) -> typing . List [ JobStep ] Returns the set of workflow steps which should be executed to bootstrap a workflow. mutable Optional Type: bool Default: false Should the pacakge lockfile be updated? set_script def set_script ( name : str , command : str ) -> None Replaces the contents of an npm package.json script. name Required Type: str The script name. command Required Type: str The command to execute. add_implicit_dependency def add_implicit_dependency ( dependent : Project , dependee : Project ) -> None Create an implicit dependency between two Project's. This is typically used in polygot repos where a Typescript project wants a build dependency on a Python project as an example. dependent Required Type: projen.Project project you want to have the dependency. dependee Required Type: projen.Project project you wish to depend on. add_nx_run_many_task def add_nx_run_many_task ( name : str , target : str , configuration : str = None , exclude : str = None , ignore_cycles : bool = None , no_bail : bool = None , output_style : str = None , parallel : typing . Union [ int , float ] = None , projects : typing . List [ str ] = None , runner : str = None , skip_cache : bool = None , verbose : bool = None ) -> Task Add project task that executes npx nx run-many ... style command. name Required Type: str target Required Type: str Task to run for affected projects. configuration Optional Type: str This is the configuration to use when performing tasks on projects. exclude Optional Type: str Exclude certain projects from being processed. ignore_cycles Optional Type: bool Ignore cycles in the task graph. no_bail Optional Type: bool Do not stop command execution after the first failed task. output_style Optional Type: str Default: \"stream\" Defines how Nx emits outputs tasks logs. parallel Optional Type: typing.Union[int, float] Default: 3 Max number of parallel processes. projects Optional Type: typing.List[str] Project to run as list project names and/or patterns. runner Optional Type: str This is the name of the tasks runner configuration in nx.json. skip_cache Optional Type: bool Rerun the tasks even when the results are available in the cache. verbose Optional Type: bool Prints additional information about the commands (e.g. stack traces). add_workspace_packages def add_workspace_packages ( package_globs : str ) -> None Add one or more additional package globs to the workspace. package_globs Required Type: str paths to the package to include in the workspace (for example packages/my-package). format_nx_run_many_command def format_nx_run_many_command ( target : str , configuration : str = None , exclude : str = None , ignore_cycles : bool = None , no_bail : bool = None , output_style : str = None , parallel : typing . Union [ int , float ] = None , projects : typing . List [ str ] = None , runner : str = None , skip_cache : bool = None , verbose : bool = None ) -> str Helper to format npx nx run-many ... style command. target Required Type: str Task to run for affected projects. configuration Optional Type: str This is the configuration to use when performing tasks on projects. exclude Optional Type: str Exclude certain projects from being processed. ignore_cycles Optional Type: bool Ignore cycles in the task graph. no_bail Optional Type: bool Do not stop command execution after the first failed task. output_style Optional Type: str Default: \"stream\" Defines how Nx emits outputs tasks logs. parallel Optional Type: typing.Union[int, float] Default: 3 Max number of parallel processes. projects Optional Type: typing.List[str] Project to run as list project names and/or patterns. runner Optional Type: str This is the name of the tasks runner configuration in nx.json. skip_cache Optional Type: bool Rerun the tasks even when the results are available in the cache. verbose Optional Type: bool Prints additional information about the commands (e.g. stack traces). Properties Name Type Description build_task projen.Task No description. commit_generated bool Whether to commit the managed files by default. compile_task projen.Task No description. components typing.List[projen.Component] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected bool Whether or not the project is being ejected. files typing.List[projen.FileBase] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name str Project name. outdir str Absolute output directory of this project. package_task projen.Task No description. post_compile_task projen.Task No description. pre_compile_task projen.Task No description. project_build projen.ProjectBuild Manages the build process of the project. projen_command str The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. test_task projen.Task No description. default_task projen.Task This is the \"default\" task, the one that executes \"projen\". init_project projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. project_type projen.ProjectType No description. auto_approve projen.github.AutoApprove Auto approve set up for this project. dev_container projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. allow_library_dependencies bool No description. artifacts_directory str The build output directory. artifacts_javascript_directory str The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler projen.javascript.Bundler No description. entrypoint str No description. manifest typing.Any No description. package projen.javascript.NodePackage API for managing the node package. package_manager projen.javascript.NodePackageManager The package manager to use. run_script_command str The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). auto_merge projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. build_workflow projen.build.BuildWorkflow The PR build GitHub workflow. build_workflow_job_id str The job ID of the build workflow. jest projen.javascript.Jest The Jest configuration (if enabled). max_node_version str Maximum node version required by this package. min_node_version str Minimum node.js version required by this package. npmignore projen.IgnoreFile The .npmignore file. prettier projen.javascript.Prettier No description. publisher projen.release.Publisher Package publisher. release projen.release.Release Release management. upgrade_workflow projen.javascript.UpgradeDependencies The upgrade workflow. docs_directory str No description. libdir str The directory in which compiled .js files reside. srcdir str The directory in which the .ts sources reside. testdir str The directory in which tests reside. tsconfig_dev projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watch_task projen.Task The \"watch\" task. docgen bool No description. eslint projen.javascript.Eslint No description. tsconfig projen.javascript.TypescriptConfig No description. tsconfig_eslint projen.javascript.TypescriptConfig No description. sub_projects typing.List[projen.Project] No description. build_task Required build_task : Task Type: projen.Task commit_generated Required commit_generated : bool Type: bool Whether to commit the managed files by default. compile_task Required compile_task : Task Type: projen.Task components Required components : typing . List [ Component ] Type: typing.List[projen.Component] Returns all the components within this project. deps Required deps : Dependencies Type: projen.Dependencies Project dependencies. ejected Required ejected : bool Type: bool Whether or not the project is being ejected. files Required files : typing . List [ FileBase ] Type: typing.List[projen.FileBase] All files in this project. gitattributes Required gitattributes : GitAttributesFile Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required gitignore : IgnoreFile Type: projen.IgnoreFile .gitignore. logger Required logger : Logger Type: projen.Logger Logging utilities. name Required name : str Type: str Project name. outdir Required outdir : str Type: str Absolute output directory of this project. package_task Required package_task : Task Type: projen.Task post_compile_task Required post_compile_task : Task Type: projen.Task pre_compile_task Required pre_compile_task : Task Type: projen.Task project_build Required project_build : ProjectBuild Type: projen.ProjectBuild Manages the build process of the project. projen_command Required projen_command : str Type: str The command to use in order to run the projen CLI. root Required root : Project Type: projen.Project The root project. tasks Required tasks : Tasks Type: projen.Tasks Project tasks. test_task Required test_task : Task Type: projen.Task default_task Optional default_task : Task Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. init_project Optional init_project : InitProject Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional parent : Project Type: projen.Project A parent project. If undefined, this is the root project. project_type Required project_type : ProjectType Type: projen.ProjectType auto_approve Optional auto_approve : AutoApprove Type: projen.github.AutoApprove Auto approve set up for this project. dev_container Optional dev_container : DevContainer Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional github : GitHub Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional gitpod : Gitpod Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional vscode : VsCode Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. ~~ allow_library_dependencies ~~ Required Deprecated: use package.allowLibraryDependencies allow_library_dependencies : bool Type: bool artifacts_directory Required artifacts_directory : str Type: str The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg . artifacts_javascript_directory Required artifacts_javascript_directory : str Type: str The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler Required bundler : Bundler Type: projen.javascript.Bundler ~~ entrypoint ~~ Required Deprecated: use package.entrypoint entrypoint : str Type: str ~~ manifest ~~ Required Deprecated: use package.addField(x, y) manifest : typing . Any Type: typing.Any package Required package : NodePackage Type: projen.javascript.NodePackage API for managing the node package. ~~ package_manager ~~ Required Deprecated: use package.packageManager package_manager : NodePackageManager Type: projen.javascript.NodePackageManager The package manager to use. run_script_command Required run_script_command : str Type: str The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). auto_merge Optional auto_merge : AutoMerge Type: projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. build_workflow Optional build_workflow : BuildWorkflow Type: projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled. build_workflow_job_id Optional build_workflow_job_id : str Type: str The job ID of the build workflow. jest Optional jest : Jest Type: projen.javascript.Jest The Jest configuration (if enabled). max_node_version Optional max_node_version : str Type: str Maximum node version required by this package. min_node_version Optional min_node_version : str Type: str Minimum node.js version required by this package. npmignore Optional npmignore : IgnoreFile Type: projen.IgnoreFile The .npmignore file. prettier Optional prettier : Prettier Type: projen.javascript.Prettier ~~ publisher ~~ Optional Deprecated: use release.publisher . publisher : Publisher Type: projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow. release Optional release : Release Type: projen.release.Release Release management. upgrade_workflow Optional upgrade_workflow : UpgradeDependencies Type: projen.javascript.UpgradeDependencies The upgrade workflow. docs_directory Required docs_directory : str Type: str libdir Required libdir : str Type: str The directory in which compiled .js files reside. srcdir Required srcdir : str Type: str The directory in which the .ts sources reside. testdir Required testdir : str Type: str The directory in which tests reside. tsconfig_dev Required tsconfig_dev : TypescriptConfig Type: projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watch_task Required watch_task : Task Type: projen.Task The \"watch\" task. docgen Optional docgen : bool Type: bool eslint Optional eslint : Eslint Type: projen.javascript.Eslint tsconfig Optional tsconfig : TypescriptConfig Type: projen.javascript.TypescriptConfig tsconfig_eslint Optional tsconfig_eslint : TypescriptConfig Type: projen.javascript.TypescriptConfig sub_projects Required sub_projects : typing . List [ Project ] Type: typing.List[projen.Project] Constants Name Type Description DEFAULT_TASK str The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required DEFAULT_TASK : str Type: str The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files.","title":"Index"},{"location":"python/nx-monorepo/index.html#homogenous-dependencies","text":"As well as adding implicit dependencies, you can add dependencies between projects of the same language in order to have one project consume another project's code.","title":"Homogenous Dependencies"},{"location":"python/nx-monorepo/index.html#api-reference","text":"","title":"API Reference "},{"location":"python/nx-monorepo/index.html#structs","text":"","title":"Structs "},{"location":"python/nx-monorepo/index.html#monorepoupgradedepsoptions","text":"Configuration for Monorepo Upgrade Deps task.","title":"MonorepoUpgradeDepsOptions "},{"location":"python/nx-monorepo/index.html#nxmonorepoprojectoptions","text":"Configuration options for the NxMonorepoProject.","title":"NxMonorepoProjectOptions "},{"location":"python/nx-monorepo/index.html#nxrunmanyoptions","text":"https://nx.dev/packages/nx/documents/run-many#options","title":"NxRunManyOptions "},{"location":"python/nx-monorepo/index.html#semvergroup","text":"","title":"SemverGroup "},{"location":"python/nx-monorepo/index.html#syncpackconfig","text":"","title":"SyncpackConfig "},{"location":"python/nx-monorepo/index.html#versiongroup","text":"","title":"VersionGroup "},{"location":"python/nx-monorepo/index.html#workspaceconfig","text":"Workspace configurations. https://classic.yarnpkg.com/lang/en/docs/workspaces/","title":"WorkspaceConfig "},{"location":"python/nx-monorepo/index.html#classes","text":"","title":"Classes "},{"location":"python/nx-monorepo/index.html#nxmonorepoproject","text":"This project type will bootstrap a NX based monorepo with support for polygot builds, build caching, dependency graph visualization and much more.","title":"NxMonorepoProject "},{"location":"python/open-api-gateway/index.html","text":"Experimental Warning This is packaged in a separate module while the API is being stabilized. This package is subject to non-backward compatible changes or removal in any future version. Breaking changes will be announced in the release notes. Whilst you may use this package, you may need to update your source code when upgrading to a newer version. Once we stabilize the module, it will be included into the stable aws-prototyping-sdk library. Experimental Usage To use this package, add a dependency on: aws_prototyping_sdk.open_api_gateway OpenAPI Gateway Define your APIs using Smithy or OpenAPI v3 , and leverage the power of generated clients and documentation, automatic input validation, and type safe client and server code! This package vends a projen project type which allows you to define an API using either Smithy or OpenAPI v3 , and a construct which manages deploying this API in API Gateway, given an integration (eg a lambda) for every operation. The project will generate models and clients from your api definition in your desired languages, and can be utilised both client side or server side in lambda handlers. The project type also generates a wrapper construct which adds type safety to ensure an integration is provided for every API operation. When you change your API specification, just run npx projen again to regenerate all of this! Project Use the provided projen project types to get started with your API quickly! There are options for TypeScript, Python and Java: Smithy SmithyApiGatewayTsProject SmithyApiGatewayPythonProject SmithyApiGatewayJavaProject OpenAPI OpenApiGatewayTsProject OpenApiGatewayPythonProject OpenApiGatewayJavaProject We recommend using the Smithy-based projects, given that Smithy has a less verbose and more powerful IDL (Interface Definition Language). Choose the project type based on the language you'd like to write your CDK infrastructure in . Whichever option above you choose, you can still write your server-side code in any language. It's recommended that these projects are used as part of an nx-monorepo project, as it makes setting up dependencies much easier, and you will not need to manage the build order of generated clients. Typescript OpenAPI While it is recommended to use the project within an nx-monorepo , you can still use this as a standalone project if you like (eg npx projen new --from @aws-prototyping-sdk/open-api-gateway open-api-gateway-ts ), however you will need to manage build order (ie building the generated client first, followed by the project). For usage in a monorepo: Create the project in your .projenrc: # Example automatically generated from non-compiling source. May contain errors. from aws_prototyping_sdk.open_api_gateway import ClientLanguage , DocumentationFormat , OpenApiGatewayTsProject OpenApiGatewayTsProject ( parent = my_nx_monorepo , default_release_branch = \"mainline\" , name = \"my-api\" , outdir = \"packages/api\" , client_languages = [ ClientLanguage . TYPESCRIPT , ClientLanguage . PYTHON , ClientLanguage . JAVA ], documentation_formats = [ DocumentationFormat . HTML2 , DocumentationFormat . PLANTUML , DocumentationFormat . MARKDOWN ] ) In the output directory ( outdir ), you'll find a few files to get you started. |_ src/ |_ spec/ |_ spec.yaml - The OpenAPI specification - edit this to define your API |_ .parsed-spec.json - A json spec generated from your spec.yaml. |_ api/ |_ api.ts - A CDK construct which defines the API Gateway resources to deploy your API. | This wraps the OpenApiGatewayRestApi construct and provides typed interfaces for integrations specific | to your API. You shouldn't need to modify this, instead just extend it as in sample-api.ts. |_ sample-api.ts - Example usage of the construct defined in api.ts. |_ sample-api.say-hello.ts - An example lambda handler for the operation defined in spec.yaml, making use of the generated lambda handler wrappers for marshalling and type safety. |_ generated/ |_ typescript/ - A generated typescript API client. |_ python/ - A generated python API client. |_ java/ - A generated java API client. |_ documentation/ |_ html2/ - Generated html documentation |_ markdown/ - Generated markdown documentation |_ plantuml/ - Generated plant uml documentation If you would prefer to not generate the sample code, you can pass sampleCode: false to OpenApiGatewayTsProject . To make changes to your api, simply update spec.yaml and run npx projen to synthesize all the typesafe client/server code! The SampleApi construct uses NodejsFunction to declare the example lambda, but you are free to change this! Smithy To create a project with Smithy as your interface definition language (IDL), you can use the SmithyApiGatewayTsProject : # Example automatically generated from non-compiling source. May contain errors. from aws_prototyping_sdk.open_api_gateway import ClientLanguage , DocumentationFormat , SmithyApiGatewayTsProject SmithyApiGatewayTsProject ( parent = my_nx_monorepo , default_release_branch = \"mainline\" , name = \"my-api\" , outdir = \"packages/api\" , service_name = { \"namespace\" : \"com.mycompany\" , \"service_name\" : \"MyService\" }, client_languages = [ ClientLanguage . TYPESCRIPT , ClientLanguage . PYTHON , ClientLanguage . JAVA ], documentation_formats = [ DocumentationFormat . HTML2 , DocumentationFormat . PLANTUML , DocumentationFormat . MARKDOWN ] ) This will result in a directory structure similar to the following: |_ smithy/ |_ src/ |_ main/ |_ smithy - The Smithy model used to define your API. You can define as many .smithy files in here as you like. |_ build.gradle - Smithy build gradle file - use this to add dependencies/plugins used in your smithy build |_ settings.gradle - Setup for the Smithy gradle project |_ smithy-build.json - Smithy build configuration - managed via options on the projen project |_ src/ |_ spec/ |_ .parsed-spec.json - A json spec generated from your Smithy model. |_ api/ |_ api.ts - A CDK construct which defines the API Gateway resources to deploy your API. | This wraps the OpenApiGatewayRestApi construct and provides typed interfaces for integrations specific | to your API. You shouldn't need to modify this, instead just extend it as in sample-api.ts. |_ sample-api.ts - Example usage of the construct defined in api.ts. |_ sample-api.say-hello.ts - An example lambda handler for the operation defined in spec.yaml, making use of the generated lambda handler wrappers for marshalling and type safety. |_ generated/ |_ typescript/ - A generated typescript API client. |_ python/ - A generated python API client. |_ java/ - A generated java API client. |_ documentation/ |_ html2/ - Generated html documentation |_ markdown/ - Generated markdown documentation |_ plantuml/ - Generated plant uml documentation Customisation You can customise the Smithy project with several properties: # Example automatically generated from non-compiling source. May contain errors. SmithyApiGatewayTsProject ( parent = my_nx_monorepo , default_release_branch = \"mainline\" , name = \"my-api\" , outdir = \"packages/api\" , client_languages = [], # The fully qualified service name for your API service_name = { \"namespace\" : \"com.mycompany\" , \"service_name\" : \"MyService\" }, # By default, the contents of `smithy-build/output` will be ignored by source control. # Set this to false to include it, for example if you are generating clients directly from the smithy model. ignore_smithy_build_output = False , # The gradle wrapper used for the smithy build is copied from the PDK itself if it does not already exist in # the 'smithy' folder. By default, this gradle wrapper will be ignored by source control. # Set this to false if you would like to check the gradle wrapper in to source control, for example if you want # to use a different version of the gradle wrapper in your project. ignore_gradle_wrapper = False , # Use smithyBuildOptions to control what is added to smithy-build.json. See more details below. smithy_build_options = { \"projections\" : { \"ts-client\" : { \"plugins\" : { \"typescript-codegen\" : { \"package\" : \"@my-test/smithy-generated-typescript-client\" , \"package_version\" : \"0.0.1\" } } } } } ) smithyBuildOptions allows you to customise the Smithy build, used for generating clients from the Smithy model (eg above), or customising the OpenAPI generation. OpenAPI generation can be customised by referencing the openapi projection as follows: # Example automatically generated from non-compiling source. May contain errors. smithyBuildOptions : { projections : { openapi : { plugins : { openapi : { // Customise the openapi projection here ... forbidGreedyLabels : true , ... } } } } } The OpenAPI specification generated by this projection is used to create the CDK infrastructure, lambda handler wrappers, etc. Options for configuring OpenAPI generation can be found in the Smithy OpenAPI documentation . Note that any additional dependencies required for projections/plugins can be added by modifying smithyBuildOptions , which in turn will add them to the smithy/build.gradle file: smithyBuildOptions : { maven : { dependencies : [ \"software.amazon.smithy:smithy-validation-model:1.27.2\" , ] } } Notice smithy-cli , smithy-model , smithy-openapi and smithy-aws-traits are always included in the build.gradle since they are required for converting your Smithy model to OpenAPI. You can customise the version of these dependencies by specifying them in smithyBuildOptions : smithyBuildOptions : { maven : { dependencies : [ \"software.amazon.smithy:smithy-cli:1.27.0\" , \"software.amazon.smithy:smithy-model:1.27.0\" , \"software.amazon.smithy:smithy-openapi:1.27.0\" , \"software.amazon.smithy:smithy-aws-traits:1.27.0\" , ] } } Python OpenAPI As well as typescript, you can choose to generate the cdk construct and sample handler in python. # Example automatically generated from non-compiling source. May contain errors. OpenApiGatewayPythonProject ( parent = my_nx_monorepo , outdir = \"packages/myapi\" , name = \"myapi\" , module_name = \"myapi\" , version = \"1.0.0\" , author_name = \"jack\" , author_email = \"me@example.com\" , client_languages = [ ClientLanguage . TYPESCRIPT , ClientLanguage . PYTHON , ClientLanguage . JAVA ] ) You will need to set up a shared virtual environment and configure dependencies via the monorepo (see README.md for the nx-monorepo package). An example of a full .projenrc.ts might be: # Example automatically generated from non-compiling source. May contain errors. from projen.VenvOptions import VenvOptions from aws_prototyping_sdk import nx_monorepo from aws_prototyping_sdk.open_api_gateway import ClientLanguage , OpenApiGatewayPythonProject from projen.awscdk import AwsCdkPythonApp monorepo = nx_monorepo . NxMonorepoProject ( default_release_branch = \"main\" , dev_deps = [ \"aws-prototyping-sdk\" , \"@aws-prototyping-sdk/open-api-gateway\" ], name = \"open-api-test\" ) api = OpenApiGatewayPythonProject ( parent = monorepo , outdir = \"packages/myapi\" , name = \"myapi\" , module_name = \"myapi\" , version = \"1.0.0\" , author_name = \"jack\" , author_email = \"me@example.com\" , client_languages = [ ClientLanguage . TYPESCRIPT ], venv_options = { # Use a shared virtual env dir. # The generated python client will also use this virtual env dir \"envdir\" : \"../../.env\" } ) # Install into virtual env so it's available for the cdk app api . tasks . try_find ( \"install\" ) . exec ( \"pip install --editable .\" ) app = AwsCdkPythonApp ( author_name = \"jack\" , author_email = \"me@example.com\" , cdk_version = \"2.1.0\" , module_name = \"myapp\" , name = \"myapp\" , version = \"1.0.0\" , parent = monorepo , outdir = \"packages/myapp\" , deps = [ api . module_name ], venv_options = VenvOptions ( envdir = \"../../.env\" ) ) monorepo . add_implicit_dependency ( app , api ) monorepo . synth () You'll find the following directory structure in packages/myapi : |_ myapi/ |_ spec/ |_ spec.yaml - The OpenAPI specification - edit this to define your API |_ .parsed-spec.json - A json spec generated from your spec.yaml. |_ api/ |_ api.py - A CDK construct which defines the API Gateway resources to deploy your API. | This wraps the OpenApiGatewayRestApi construct and provides typed interfaces for integrations specific | to your API. You shouldn't need to modify this, instead just extend it as in sample_api.py. |_ sample_api.py - Example usage of the construct defined in api.py. |_ handlers/ |_ say_hello_handler_sample.py - An example lambda handler for the operation defined in spec.yaml, making use of the generated lambda handler wrappers for marshalling and type safety. |_ generated/ |_ typescript/ - A generated typescript API client. |_ python/ - A generated python API client. |_ java/ - A generated java API client. For simplicity, the generated code deploys a lambda layer for the generated code and its dependencies. You may choose to define an entirely separate projen PythonProject for your lambda handlers should you wish to add more dependencies than just the generated code. Smithy Similar to typescript, you can use the SmithyApiGatewayPythonProject . Java OpenAPI As well as TypeScript and Python, you can choose to generate the cdk construct and sample handler in Java. # Example automatically generated from non-compiling source. May contain errors. OpenApiGatewayJavaProject ( parent = monorepo , outdir = \"packages/myapi\" , name = \"myapi\" , group_id = \"com.mycompany\" , artifact_id = \"my-api\" , version = \"1.0.0\" , client_languages = [ ClientLanguage . PYTHON , ClientLanguage . TYPESCRIPT ], documentation_formats = [ DocumentationFormat . HTML2 , DocumentationFormat . PLANTUML , DocumentationFormat . MARKDOWN ] ) The output directory will look a little like this: |_ src/ |_ spec/ |_ spec.yaml - The OpenAPI specification - edit this to define your API |_ main/ |_ java/ |_ api/ |_ Api.java - A CDK construct which defines the API Gateway resources to deploy your API. | This wraps the OpenApiGatewayRestApi construct and provides typed interfaces for integrations specific | to your API. You shouldn't need to modify this, instead just extend it as in SampleApi.java. |_ ApiProps.java - Defines properties for the CDK construct in Api.java |_ SampleApi.java - Example usage of the construct defined in Api.java |_ SayHelloHandler.java - An example lambda handler for the operation defined in spec.yaml, making use of the generated lambda handler wrappers for marshalling and type safety. |_ resources/ |_ .parsed-spec.json - A json spec generated from your spec.yaml. This will be bundled in the project jar. |_ generated/ |_ typescript/ - A generated typescript API client |_ python/ - A generated python API client. |_ java/ - A generated java API client. |_ documentation/ |_ html2/ - Generated html documentation |_ markdown/ - Generated markdown documentation |_ plantuml/ - Generated plant uml documentation The SampleApi construct uses a lambda function which deploys the entire project jar as a simple way to get started with an api that deploys out of the box. This jar includes a lot of extra code and dependencies that you don't need in your lambda, so it's recommended that after experimenting with the construct, you separate your lambdas into another JavaProject . Please refer to the Java API Lambda Handlers section of this README for details on how to set this up. Smithy Similar to typescript and python, you can use the SmithyApiGatewayJavaProject . Smithy IDL Please refer to the Smithy documentation for how to write models in Smithy. A basic example is provided below: $version : \"2\" namespace example.hello use aws.protocols#restJson1 @title ( \"A Sample Hello World API\" ) /// A sample smithy api @restJson1 service Hello { version: \"1.0\" operations: [ SayHello ] } @readonly @http ( method: \"GET\" , uri: \"/hello\" ) operation SayHello { input: SayHelloInput output: SayHelloOutput errors: [ ApiError ] } string Name string Message @input structure SayHelloInput { @httpQuery ( \"name\" ) @required name: Name } @output structure SayHelloOutput { @required message: Message } @error ( \"client\" ) structure ApiError { @required errorMessage: Message } Supported Protocols Currently only AWS restJson1 is supported. Please ensure your service is annotated with the @restJson1 trait. Multiple Files You can split your definition into multiple files and folders, so long as they are all under the smithy/src/main/smithy directory in your API project. Authorizers Smithy supports adding API Gateway authorizers in the model itself . Given that at model definition time one usually does not know the ARN of the user pool or lambda function for an authorizer, it is recommended to add the authorizer(s) in your Api CDK construct. If using Smithy generated clients, some authorizer traits (eg sigv4) will include configuring the client for that particular method of authorization, so it can be beneficial to still define authorizers in the model. We therefore support specifying authorizers in both the model and the construct, but note that the construct will take precedence where the authorizer ID is the same. OpenAPI Specification Your spec.yaml file defines your api using OpenAPI Version 3.0.3 . An example spec might look like: openapi : 3.0.3 info : version : 1.0.0 title : Example API paths : /hello : get : operationId : sayHello parameters : - in : query name : name schema : type : string required : true responses : '200' : description : Successful response content : 'application/json' : schema : $ref : '#/components/schemas/HelloResponse' components : schemas : HelloResponse : type : object properties : message : type : string required : - message You can divide your specification into multiple files using $ref . For example, you might choose to structure your spec as follows: |_ spec/ |_ spec.yaml |_ paths/ |_ index.yaml |_ sayHello.yaml |_ schemas/ |_ index.yaml |_ helloResponse.yaml Where spec.yaml looks as follows: openapi : 3.0.3 info : version : 1.0.0 title : Example API paths : $ref : './paths/index.yaml' components : schemas : $ref : './schemas/index.yaml' paths/index.yaml : /hello : get : $ref : './sayHello.yaml' paths/sayHello.yaml : operationId : sayHello parameters : - in : query name : name schema : type : string required : true responses : '200' : description : Successful response content : 'application/json' : schema : $ref : '../schemas/helloResponse.yaml' schemas/index.yaml : HelloResponse : $ref : './helloResponse.yaml' schemas/helloResponse.yaml : type : object properties : message : type : string required : - message Construct A sample construct is generated which provides a type-safe interface for creating an API Gateway API based on your OpenAPI specification. You'll get a type error if you forget to define an integration for an operation defined in your api. # Example automatically generated from non-compiling source. May contain errors. from aws_prototyping_sdk.open_api_gateway import Authorizers , Integrations from aws_cdk.aws_lambda_nodejs import NodejsFunction from constructs import Construct from ..api import Api # # An example of how to wire lambda handler functions to the API # class SampleApi ( Api ): def __init__ ( self , scope , id ): super () . __init__ ( scope , id , default_authorizer = Authorizers . iam (), integrations = { # Every operation defined in your API must have an integration defined! \"say_hello\" : { \"integration\" : Integrations . lambda_ ( NodejsFunction ( scope , \"say-hello\" )) } } ) Sharing Integrations If you would like to use the same integration for every operation, you can use the Operations.all method from your generated client to save repeating yourself, for example: # Example automatically generated from non-compiling source. May contain errors. from my_api_typescript_client import Operations from aws_prototyping_sdk.open_api_gateway import Authorizers , Integrations from aws_cdk.aws_lambda_nodejs import NodejsFunction from constructs import Construct from ..api import Api class SampleApi ( Api ): def __init__ ( self , scope , id ): super () . __init__ ( scope , id , default_authorizer = Authorizers . iam (), # Use the same integration for every operation. integrations = Operations . all ( integration = Integrations . lambda_ ( NodejsFunction ( scope , \"say-hello\" )) ) ) Authorizers The Api construct allows you to define one or more authorizers for securing your API. An integration will use the defaultAuthorizer unless an authorizer is specified at the integration level. The following authorizers are supported: Authorizers.none - No auth Authorizers.iam - AWS IAM (Signature Version 4) Authorizers.cognito - Cognito user pool Authorizers.custom - A custom authorizer Cognito Authorizer To use the Cognito authorizer, one or more user pools must be provided. You can optionally specify the scopes to check if using an access token. You can use the withScopes method to use the same authorizer but verify different scopes for individual integrations, for example: # Example automatically generated from non-compiling source. May contain errors. class SampleApi ( Api ): def __init__ ( self , scope , id ): cognito_authorizer = Authorizers . cognito ( authorizer_id = \"myCognitoAuthorizer\" , user_pools = [ UserPool ( scope , \"UserPool\" )] ) super () . __init__ ( scope , id , default_authorizer = cognito_authorizer , integrations = { # Everyone in the user pool can call this operation: \"say_hello\" : { \"integration\" : Integrations . lambda_ ( NodejsFunction ( scope , \"say-hello\" )) }, # Only users with the given scopes can call this operation \"my_restricted_operation\" : { \"integration\" : Integrations . lambda_ ( NodejsFunction ( scope , \"my-restricted-operation\" )), \"authorizer\" : cognito_authorizer . with_scopes ( \"my-resource-server/my-scope\" ) } } ) For more information about scopes or identity and access tokens, please see the API Gateway documentation . Custom Authorizer Custom authorizers use lambda functions to handle authorizing requests. These can either be simple token-based authorizers, or more complex request-based authorizers. See the API Gateway documentation for more details. An example token-based authorizer (default): # Example automatically generated from non-compiling source. May contain errors. Authorizers . custom ( authorizer_id = \"myTokenAuthorizer\" , function = NodejsFunction ( scope , \"authorizer\" ) ) An example request-based handler. By default the identitySource will be method.request.header.Authorization , however you can customise this as per the API Gateway documentation . # Example automatically generated from non-compiling source. May contain errors. Authorizers . custom ( authorizer_id = \"myRequestAuthorizer\" , type = CustomAuthorizerType . REQUEST , identity_source = \"method.request.header.MyCustomHeader, method.request.querystring.myQueryString\" , function = NodejsFunction ( scope , \"authorizer\" ) ) Integrations Integrations are used by API Gateway to service requests. Lambda Integration Currently, the only built-in integration is a lambda integration. You can construct one using Integrations.lambda(yourLambdaFunction) . Custom Integrations You can implement your own integrations by inheriting the Integration class and implementing its render method. This method is responsible for returning a snippet of OpenAPI which will be added as the x-amazon-apigateway-integration for an operation. Please refer to the API Gateway Swagger Extensions documentation for more details. You can also optionally override the grant method if you need to use CDK to grant API Gateway access to invoke your integration. Generated Client Typescript The typescript-fetch OpenAPI generator is used to generate OpenAPI clients for typescript. This requires an implementation of fetch to be passed to the client. In the browser one can pass the built in fetch, or in NodeJS you can use an implementation such as node-fetch . Example usage of the client in a website: # Example automatically generated from non-compiling source. May contain errors. from my_api_typescript_client import Configuration , DefaultApi client = DefaultApi ( Configuration ( base_path = \"https://xxxxxxxxxx.execute-api.ap-southeast-2.amazonaws.com\" , fetch_api = window . fetch . bind ( window ) )) client . say_hello ( name = \"Jack\" ) Python The python OpenAPI generator is used to generate OpenAPI clients for python. Example usage: from my_api_python import ApiClient , Configuration from my_api_python.api.default_api import DefaultApi configuration = Configuration ( host = \"https://xxxxxxxxxx.execute-api.ap-southeast-2.amazonaws.com\" ) with ApiClient ( configuration ) as api_client : client = DefaultApi ( api_client ) client . say_hello ( query_params = { 'name' : \"name_example\" , }, ) You'll find details about how to use the python client in the README.md alongside your generated client. Java The java OpenAPI generator is used to generate OpenAPI clients for Java. Example usage: import com.generated.api.myapijava.client.api.DefaultApi ; import com.generated.api.myapijava.client.ApiClient ; import com.generated.api.myapijava.client.Configuration ; import com.generated.api.myapijava.client.models.HelloResponse ; ApiClient client = Configuration . getDefaultApiClient (); client . setBasePath ( \"https://xxxxxxxxxx.execute-api.ap-southeast-2.amazonaws.com\" ); DefaultApi api = new DefaultApi ( client ); HelloResponse response = api . sayHello ( \"Adrian\" ). execute () You'll find more details about how to use the Java client in the README.md alongside your generated client. Lambda Handler Wrappers Lambda handler wrappers are also importable from the generated client. These provide input/output type safety, ensuring that your API handlers return outputs that correspond to your specification. Typescript # Example automatically generated from non-compiling source. May contain errors. from my_api_typescript_client import say_hello_handler handler = say_hello_handler ( async ({ input }) => { return { statusCode : 200 , body : { message : ` Hello $ { input . requestParameters . name } !` , }, }; }) Handler Router The lambda handler wrappers can be used in isolation as handler methods for separate lambdas. If you would like to use a single lambda function to serve all requests, you can do so with the handlerRouter . # Example automatically generated from non-compiling source. May contain errors. from my_api_typescript_client import handler_router , say_hello_handler , say_goodbye_handler from ..interceptors import cors_interceptor from ..handlers.say_goodbye import say_goodbye say_hello = say_hello_handler ( async ({ input }) => { return { statusCode : 200 , body : { message : ` Hello $ { input . requestParameters . name } !` , }, }; }) handler = handler_router ( # Interceptors declared in this list will apply to all operations interceptors = [ cors_interceptor ], # Assign handlers to each operation here handlers = { \"say_hello\" : say_hello , \"say_goodbye\" : say_goodbye } ) Python from myapi_python.apis.tags.default_api_operation_config import say_hello_handler , SayHelloRequest , ApiResponse , SayHelloOperationResponses from myapi_python.model.api_error import ApiError from myapi_python.model.hello_response import HelloResponse @say_hello_handler def handler ( input : SayHelloRequest , ** kwargs ) -> SayHelloOperationResponses : return ApiResponse ( status_code = 200 , body = HelloResponse ( message = \"Hello {} !\" . format ( input . request_parameters [ \"name\" ])), headers = {} ) Handler Router The lambda handler wrappers can be used in isolation as handler methods for separate lambdas. If you would like to use a single lambda function to serve all requests, you can do so with the handler_router . from myapi_python.apis.tags.default_api_operation_config import say_hello_handler , SayHelloRequest , ApiResponse , SayHelloOperationResponses , handler_router , HandlerRouterHandlers from myapi_python.model.api_error import ApiError from myapi_python.model.hello_response import HelloResponse from other_handlers import say_goodbye from my_interceptors import cors_interceptor @say_hello_handler def say_hello ( input : SayHelloRequest , ** kwargs ) -> SayHelloOperationResponses : return ApiResponse ( status_code = 200 , body = HelloResponse ( message = \"Hello {} !\" . format ( input . request_parameters [ \"name\" ])), headers = {} ) handler = handler_router ( # Interceptors defined here will apply to all operations interceptors = [ cors_interceptor ], handlers = HandlerRouterHandlers ( say_hello = say_hello , say_goodbye = say_goodbye ) ) Java import com.generated.api.myapijava.client.api.Handlers.SayHello ; import com.generated.api.myapijava.client.api.Handlers.SayHello200Response ; import com.generated.api.myapijava.client.api.Handlers.SayHelloRequestInput ; import com.generated.api.myapijava.client.api.Handlers.SayHelloResponse ; import com.generated.api.myapijava.client.model.HelloResponse ; public class SayHelloHandler extends SayHello { @Override public SayHelloResponse handle ( SayHelloRequestInput sayHelloRequestInput ) { return SayHello200Response . of ( HelloResponse . builder () . message ( String . format ( \"Hello %s\" , sayHelloRequestInput . getInput (). getRequestParameters (). getName ())) . build ()); } } Handler Router The lambda handler wrappers can be used in isolation as handler methods for separate lambdas. If you would like to use a single lambda function to serve all requests, you can do so by extending the HandlerRouter class. import com.generated.api.myapijava.client.api.Handlers.SayGoodbye ; import com.generated.api.myapijava.client.api.Handlers.HandlerRouter ; import com.generated.api.myapijava.client.api.Handlers.Interceptors ; import com.generated.api.myapijava.client.api.Handlers.SayHello ; import java.util.Arrays ; import java.util.List ; // Interceptors defined here apply to all operations @Interceptors ({ TimingInterceptor . class }) public class ApiHandlerRouter extends HandlerRouter { // You must implement a method to return a handler for every operation @Override public SayHello sayHello () { return new SayHelloHandler (); } @Override public SayGoodbye sayGoodbye () { return new SayGoodbyeHandler (); } } Interceptors The lambda handler wrappers allow you to pass in a chain of handler functions to handle the request. This allows you to implement middleware / interceptors for handling requests. Each handler function may choose whether or not to continue the handler chain by invoking chain.next . Typescript In typescript, interceptors are passed as separate arguments to the generated handler wrapper, in the order in which they should be executed. Call request.chain.next(request) from an interceptor to delegate to the rest of the chain to handle a request. Note that the last handler in the chain (ie the actual request handler which transforms the input to the output) should not call chain.next . # Example automatically generated from non-compiling source. May contain errors. from my_api_typescript_client import say_hello_handler , ChainedRequestInput , OperationResponse # Interceptor to wrap invocations in a try/catch, returning a 500 error for any unhandled exceptions. try_catch_interceptor = async < RequestParameters , RequestArrayParameters , RequestBody , Response > ( request : ChainedRequestInput < RequestParameters , RequestArrayParameters , RequestBody , Response > ): Promise < Response | OperationResponse < 500 , { errorMessage : string } >> => { try { return await request . chain . next ( request ); } catch ( e : any ) { return { statusCode : 500 , body : { errorMessage : e . message }}; } } # tryCatchInterceptor is passed first, so it runs first and calls the second argument function (the request handler) via chain.next handler = say_hello_handler ( try_catch_interceptor , async ({ input }) => { return { statusCode : 200 , body : { message : ` Hello $ { input . requestParameters . name } !` , }, }; }) Another example interceptor might be to record request time metrics. The example below includes the full generic type signature for an interceptor: # Example automatically generated from non-compiling source. May contain errors. from my_api_typescript_client import ChainedRequestInput timing_interceptor = async < RequestParameters , RequestArrayParameters , RequestBody , Response > ( request : ChainedRequestInput < RequestParameters , RequestArrayParameters , RequestBody , Response > ): Promise < Response > => { const start = Date . now (); const response = await request . chain . next ( request ); const end = Date . now (); console . log ( ` Took $ { end - start } ms ` ); return response ; } Interceptors may mutate the interceptorContext to pass state to further interceptors or the final lambda handler, for example an identityInterceptor might want to extract the authenticated user from the request so that it is available in handlers. # Example automatically generated from non-compiling source. May contain errors. from my_api_typescript_client import LambdaRequestParameters , LambdaHandlerChain identity_interceptor = async < RequestParameters , RequestArrayParameters , RequestBody , Response > ( request : ChainedRequestInput < RequestParameters , RequestArrayParameters , RequestBody , Response > ): Promise < Response > => { const authenticatedUser = await getAuthenticatedUser ( request . event ); return await request . chain . next ({ ... request , interceptorContext : { ... request . interceptorContext , authenticatedUser , }, }); } Python In Python, a list of interceptors can be passed as a keyword argument to the generated lambda handler decorator, for example: from myapi_python.apis.tags.default_api_operation_config import say_hello_handler , SayHelloRequest , ApiResponse , SayHelloOperationResponses from myapi_python.model.api_error import ApiError from myapi_python.model.hello_response import HelloResponse @say_hello_handler ( interceptors = [ timing_interceptor , try_catch_interceptor ]) def handler ( input : SayHelloRequest , ** kwargs ) -> SayHelloOperationResponses : return ApiResponse ( status_code = 200 , body = HelloResponse ( message = \"Hello {} !\" . format ( input . request_parameters [ \"name\" ])), headers = {} ) Writing an interceptor is just like writing a lambda handler. Call chain.next(input) from an interceptor to delegate to the rest of the chain to handle a request. import time from myapi_python.apis.tags.default_api_operation_config import ChainedApiRequest , ApiResponse def timing_interceptor ( input : ChainedApiRequest ) -> ApiResponse : start = int ( round ( time . time () * 1000 )) response = input . chain . next ( input ) end = int ( round ( time . time () * 1000 )) print ( \"Took {} ms\" . format ( end - start )) return response Interceptors may choose to return different responses, for example to return a 500 response for any unhandled exceptions: import time from myapi_python.model.api_error import ApiError from myapi_python.apis.tags.default_api_operation_config import ChainedApiRequest , ApiResponse def try_catch_interceptor ( input : ChainedApiRequest ) -> ApiResponse : try : return input . chain . next ( input ) except Exception as e : return ApiResponse ( status_code = 500 , body = ApiError ( errorMessage = str ( e )), headers = {} ) Interceptors are permitted to mutate the \"interceptor context\", which is a Dict[str, Any] . Each interceptor in the chain, and the final handler, can access this context: def identity_interceptor ( input : ChainedApiRequest ) -> ApiResponse : input . interceptor_context [ \"AuthenticatedUser\" ] = get_authenticated_user ( input . event ) return input . chain . next ( input ) Interceptors can also mutate the response returned by the handler chain. An example use case might be adding cross-origin resource sharing headers: def add_cors_headers_interceptor ( input : ChainedApiRequest ) -> ApiResponse : response = input . chain . next ( input ) return ApiResponse ( status_code = response . status_code , body = response . body , headers = { ** response . headers , \"Access-Control-Allow-Origin\" : \"*\" , \"Access-Control-Allow-Headers\" : \"*\" } ) Java In Java, interceptors can be added to a handler via the @Interceptors class annotation: import com.generated.api.myjavaapi.client.api.Handlers.Interceptors ; @Interceptors ({ TimingInterceptor . class , TryCatchInterceptor . class }) public class SayHelloHandler extends SayHello { @Override public SayHelloResponse handle ( SayHelloRequestInput sayHelloRequestInput ) { return SayHello200Response . of ( HelloResponse . builder () . message ( String . format ( \"Hello %s\" , sayHelloRequestInput . getInput (). getRequestParameters (). getName ())) . build ()); } } To write an interceptor, you can implement the Interceptor interface. For example, a timing interceptor: import com.generated.api.myjavaapi.client.api.Handlers.Interceptor ; import com.generated.api.myjavaapi.client.api.Handlers.ChainedRequestInput ; import com.generated.api.myjavaapi.client.api.Handlers.Response ; public class TimingInterceptor < Input > implements Interceptor < Input > { @Override public Response handle ( ChainedRequestInput < Input > input ) { long start = System . currentTimeMillis (); Response res = input . getChain (). next ( input ); long end = System . currentTimeMillis (); System . out . printf ( \"Took %d ms%n\" , end - start ); return res ; } } Interceptors may choose to return different responses, for example to return a 500 response for any unhandled exceptions: import com.generated.api.myjavaapi.client.api.Handlers.Interceptor ; import com.generated.api.myjavaapi.client.api.Handlers.ChainedRequestInput ; import com.generated.api.myjavaapi.client.api.Handlers.Response ; import com.generated.api.myjavaapi.client.api.Handlers.ApiResponse ; import com.generated.api.myjavaapi.client.model.ApiError ; public class TryCatchInterceptor < Input > implements Interceptor < Input > { @Override public Response handle ( ChainedRequestInput < Input > input ) { try { return input . getChain (). next ( input ); } catch ( Exception e ) { return ApiResponse . builder () . statusCode ( 500 ) . body ( ApiError . builder () . errorMessage ( e . getMessage ()) . build (). toJson ()) . build (); } } } Interceptors are permitted to mutate the \"interceptor context\", which is a Map<String, Object> . Each interceptor in the chain, and the final handler, can access this context: public class IdentityInterceptor < Input > implements Interceptor < Input > { @Override public Response handle ( ChainedRequestInput < Input > input ) { input . getInterceptorContext (). put ( \"AuthenticatedUser\" , this . getAuthenticatedUser ( input . getEvent ())); return input . getChain (). next ( input ); } } Interceptors can also mutate the response returned by the handler chain. An example use case might be adding cross-origin resource sharing headers: public static class AddCorsHeadersInterceptor < Input > implements Interceptor < Input > { @Override public Response handle ( ChainedRequestInput < Input > input ) { Response res = input . getChain (). next ( input ); res . getHeaders (). put ( \"Access-Control-Allow-Origin\" , \"*\" ); res . getHeaders (). put ( \"Access-Control-Allow-Headers\" , \"*\" ); return res ; } } Interceptors with Dependency Injection Interceptors referenced by the @Interceptors annotation must be constructable with no arguments. If more complex instantiation of your interceptor is required (for example if you are using dependency injection or wish to pass configuration to your interceptor), you may instead override the getInterceptors method in your handler: public class SayHelloHandler extends SayHello { @Override public List < Interceptor < SayHelloInput >> getInterceptors () { return Arrays . asList ( new MyConfiguredInterceptor <> ( 42 ), new MyOtherConfiguredInterceptor <> ( \"configuration\" )); } @Override public SayHelloResponse handle ( SayHelloRequestInput sayHelloRequestInput ) { return SayHello200Response . of ( HelloResponse . builder () . message ( String . format ( \"Hello %s!\" , sayHelloRequestInput . getInput (). getRequestParameters (). getName ())) . build ()); } } Other Details Workspaces and OpenApiGatewayTsProject OpenApiGatewayTsProject can be used as part of a monorepo using YARN/NPM/PNPM workspaces. When used in a monorepo, a dependency is established between OpenApiGatewayTsProject and the generated typescript client, which is expected to be managed by the parent monorepo (ie both OpenApiGatewayTsProject and the generated typescript client are parented by the monorepo). During initial project synthesis, the dependency between OpenApiGatewayTsProject and the generated client is established via workspace configuration local to OpenApiGatewayTsProject , since the parent monorepo will not have updated to include the new packages in time for the initial \"install\". When the package manager is PNPM, this initial workspace is configured by creating a local pnpm-workspace.yaml file, and thus if you specify your own for an instance of OpenApiGatewayTsProject , synthesis will fail. It is most likely that you will not need to define this file locally in OpenApiGatewayTsProject since the monorepo copy should be used to manage all packages within the repo, however if managing this file at the OpenApiGatewayTsProject level is required, please use the pnpmWorkspace property of OpenApiGatewayTsProject . Customising Generated Client Projects By default, the generated clients are configured automatically, including project names. You can customise the generated client code using the <language>ProjectOptions properties when constructing your projen project. Python Shared Virtual Environment For adding dependencies between python projects within a monorepo you can use a single shared virtual environment, and install your python projects into that environment with pip install --editable . in the dependee. The generated python client will automatically do this if it detects it is within a monorepo. The following example shows how to configure the generated client to use a shared virtual environment: # Example automatically generated from non-compiling source. May contain errors. api = OpenApiGatewayTsProject ( parent = monorepo , name = \"api\" , outdir = \"packages/api\" , default_release_branch = \"main\" , client_languages = [ ClientLanguage . PYTHON ], python_client_options = { \"module_name\" : \"my_api_python\" , \"name\" : \"my_api_python\" , \"author_name\" : \"jack\" , \"author_email\" : \"me@example.com\" , \"version\" : \"1.0.0\" , \"venv_options\" : { # Directory relative to the generated python client (in this case packages/api/generated/python) \"envdir\" : \"../../../../.env\" } } ) PythonProject ( parent = monorepo , outdir = \"packages/my-python-lib\" , module_name = \"my_python_lib\" , name = \"my_python_lib\" , author_name = \"jack\" , author_email = \"me@example.com\" , version = \"1.0.0\" , venv_options = { # Directory relative to the python lib (in this case packages/my-python-lib) \"envdir\" : \"../../.env\" }, # Generated client can be safely cast to a PythonProject deps = [( api . generated_clients [ ClientLanguage . PYTHON ]) . module_name ] ) Java API Lambda Handlers To build your lambda handlers in Java, it's recommended to create a separate JavaProject in your .projenrc . This needs to build a \"super jar\" with all of your dependencies packed into a single jar. You can use the maven-shade-plugin to achieve this (see the java lambda docs for details ). You'll need to add a dependency on the generated java client for the handler wrappers. For example, your .projenrc.ts might look like: # Example automatically generated from non-compiling source. May contain errors. api = OpenApiGatewayTsProject ( parent = monorepo , name = \"@my-test/api\" , outdir = \"packages/api\" , default_release_branch = \"main\" , client_languages = [ ClientLanguage . JAVA ] ) api_java_client = ( api . generated_clients [ ClientLanguage . JAVA ]) java_lambda_project = JavaProject ( parent = monorepo , outdir = \"packages/java-lambdas\" , artifact_id = \"my-java-lambdas\" , group_id = \"com.mycompany\" , name = \"javalambdas\" , version = \"1.0.0\" , # Add a dependency on the java client deps = [ f \" { apiJavaClient . pom . groupId } / { apiJavaClient . pom . artifactId } @ { apiJavaClient . pom . version } \" ] ) # Set up the dependency on the generated lambda client monorepo . add_implicit_dependency ( java_lambda_project , api_java_client ) java_lambda_project . pom . add_repository ( url = \"file://../api/generated/java/dist/java\" , id = \"java-api-client\" ) # Use the maven-shade-plugin as part of the maven package task java_lambda_project . pom . add_plugin ( \"org.apache.maven.plugins/maven-shade-plugin@3.2.2\" , configuration = { \"create_dependency_reduced_pom\" : False , \"final_name\" : \"my-java-lambdas\" }, executions = [{ \"id\" : \"shade-task\" , \"phase\" : \"package\" , # <- NB \"phase\" is supported in projen ^0.61.37 \"goals\" : [ \"shade\" ] }] ) # Build the \"super jar\" as part of the project's package task java_lambda_project . package_task . exec ( \"mvn clean install\" ) You can then implement your lambda handlers in your java-lambdas project using the generated lambda handler wrappers (see above). Finally, you can create a lambda function in your CDK infrastructure which points to the resultant \"super jar\": # Example automatically generated from non-compiling source. May contain errors. Api ( self , \"JavaApi\" , integrations = { \"say_hello\" : { \"function\" : Function ( self , \"SayHelloJava\" , { \"code\" : Code . from_asset ( \"../java-lambdas/target/my-java-lambdas.jar\" ), \"handler\" : \"com.mycompany.SayHelloHandler\" , \"runtime\" : Runtime . JAVA_11 , \"timeout\" : Duration . seconds ( 30 ) }) } } ) Note that to ensure the jar is built before the CDK infrastructure which consumes it, you must add a dependency, eg: # Example automatically generated from non-compiling source. May contain errors. monorepo . add_implicit_dependency ( infra , java_lambda_project ) AWS WAFv2 Web ACL By default, a Web ACL is deployed and attached to your API Gateway Rest API with the \" AWSManagedRulesCommonRuleSet \", which provides protection against exploitation of a wide range of vulnerabilities, including some of the high risk and commonly occurring vulnerabilities described in OWASP publications such as OWASP Top 10 . You can customise the Web ACL configuration via the webAclOptions of your Api CDK construct, eg: # Example automatically generated from non-compiling source. May contain errors. class SampleApi ( Api ): def __init__ ( self , scope , id ): super () . __init__ ( scope , id , integrations = { ... }, web_acl_options = { # Allow access only to specific CIDR ranges \"cidr_allow_list\" : { \"cidr_type\" : \"IPV4\" , \"cidr_ranges\" : [ \"1.2.3.4/5\" ] }, # Pick from the set here: https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-list.html \"managed_rules\" : [{ \"vendor\" : \"AWS\" , \"name\" : \"AWSManagedRulesSQLiRuleSet\" } ] } ) You can remove the Web ACL entirely with webAclOptions: { disable: true } - you may wish to use this if you'd like to set up a Web ACL yourself with more control over the rules. Smithy IntelliJ Plugin The Smithy-based projects are compatible with the Smithy IntelliJ Plugin , which provides syntax highlighting and auto-complete for your Smithy model. To make use of it, perform the following steps: Install the \"Smithy\" plugin (under Preferences -> Plugins ) Right-click on the smithy/build.gradle file in your Smithy API project Select \"Link Gradle Project\" Tagging Operations Operations can be grouped together into logical collections via tags. This can be achieved in Smithy with the @tags trait: @tags ([ \"pets\" , \"users\" ]) operation PurchasePet { ... } Or in OpenAPI using the tags property: paths : /pets/purchase : post : operationId : purchasePet tags : - pets - users ... When multiple tags are used, the \"first\" tag is considered to be the API that the operation belongs to, so in the generated client, the above example operation would be included in the PetsApi client but not the UsersApi client. Multiple tags are still useful for documentation generation, for example DocumentationFormat.HTML_REDOC will group operations by tag in the side navigation bar. If you would like to introduce tags without breaking existing clients, we recommend first adding a tag named default to all operations. \u26a0\ufe0f Important Note : Smithy versions below 1.28.0 sort tags in alphabetical order and so the \"first\" tag will be the earliest in the alphabet. Therefore, if using tags with older versions of Smithy, we recommend prefixing your desired first tag with an underscore (for example _default ). This is rectified in 1.28.0 , where tag order from the @tags trait is preserved. Breaking Changes v0.14.0 - see aws-prototyping-sdk!280 Moved smithy model files from model directory to smithy/src/main/smithy - please move these manually as part of upgrading to 0.14.0 , and delete your model directory when done. Moved smithy gradle files from smithy-build directory to smithy - if you have added any dependencies to your smithy-build/build.gradle file you will need to copy them across into smithy/build.gradle (note dependencies in the new gradle file start with implementation rather than smithy ). Deprecated gradleWrapperPath option on SmithApiGateway projects in favour of ignoreGradleWrapper: false - the gradle wrapper in smithy directory is always used (and generated automatically if not found). If you used a custom gradle wrapper, copy it into the smithy directory, set ignoreGradleWrapper: false and check it in to your repository. API Reference Constructs OpenApiGatewayRestApi A construct for creating an api gateway rest api based on the definition in the OpenAPI spec. Initializers import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . OpenApiGatewayRestApi ( scope : Construct , id : str , cloud_watch_role : bool = None , deploy : bool = None , deploy_options : StageOptions = None , description : str = None , disable_execute_api_endpoint : bool = None , domain_name : DomainNameOptions = None , endpoint_export_name : str = None , endpoint_types : typing . List [ EndpointType ] = None , fail_on_warnings : bool = None , parameters : typing . Mapping [ str ] = None , policy : PolicyDocument = None , rest_api_name : str = None , retain_deployments : bool = None , integrations : typing . Mapping [ OpenApiIntegration ], operation_lookup : typing . Mapping [ MethodAndPath ], cors_options : CorsOptions = None , default_authorizer : Authorizer = None , spec : typing . Any , spec_path : str , web_acl_options : OpenApiGatewayWebAclOptions = None ) Name Type Description scope constructs.Construct No description. id str No description. cloud_watch_role bool Automatically configure an AWS CloudWatch role for API Gateway. deploy bool Indicates if a Deployment should be automatically created for this API, and recreated when the API model (resources, methods) changes. deploy_options aws_cdk.aws_apigateway.StageOptions Options for the API Gateway stage that will always point to the latest deployment when deploy is enabled. description str A description of the RestApi construct. disable_execute_api_endpoint bool Specifies whether clients can invoke the API using the default execute-api endpoint. domain_name aws_cdk.aws_apigateway.DomainNameOptions Configure a custom domain name and map it to this API. endpoint_export_name str Export name for the CfnOutput containing the API endpoint. endpoint_types typing.List[aws_cdk.aws_apigateway.EndpointType] A list of the endpoint types of the API. fail_on_warnings bool Indicates whether to roll back the resource if a warning occurs while API Gateway is creating the RestApi resource. parameters typing.Mapping[str] Custom header parameters for the request. policy aws_cdk.aws_iam.PolicyDocument A policy document that contains the permissions for this RestApi. rest_api_name str A name for the API Gateway RestApi resource. retain_deployments bool Retains old deployment resources when the API changes. integrations typing.Mapping[ OpenApiIntegration ] A mapping of API operation to its integration. operation_lookup typing.Mapping[ MethodAndPath ] Details about each operation. cors_options aws_cdk.aws_apigateway.CorsOptions Cross Origin Resource Sharing options for the API. default_authorizer Authorizer The default authorizer to use for your api. spec typing.Any The parsed OpenAPI specification. spec_path str Path to the JSON open api spec. web_acl_options OpenApiGatewayWebAclOptions Options for the AWS WAF v2 WebACL associated with the api. scope Required Type: constructs.Construct id Required Type: str cloud_watch_role Optional Type: bool Default: false if @aws-cdk/aws-apigateway:disableCloudWatchRole is enabled, true otherwise Automatically configure an AWS CloudWatch role for API Gateway. deploy Optional Type: bool Default: true Indicates if a Deployment should be automatically created for this API, and recreated when the API model (resources, methods) changes. Since API Gateway deployments are immutable, When this option is enabled (by default), an AWS::ApiGateway::Deployment resource will automatically created with a logical ID that hashes the API model (methods, resources and options). This means that when the model changes, the logical ID of this CloudFormation resource will change, and a new deployment will be created. If this is set, latestDeployment will refer to the Deployment object and deploymentStage will refer to a Stage that points to this deployment. To customize the stage options, use the deployOptions property. A CloudFormation Output will also be defined with the root URL endpoint of this REST API. deploy_options Optional Type: aws_cdk.aws_apigateway.StageOptions Default: Based on defaults of StageOptions . Options for the API Gateway stage that will always point to the latest deployment when deploy is enabled. If deploy is disabled, this value cannot be set. description Optional Type: str Default: 'Automatically created by the RestApi construct' A description of the RestApi construct. disable_execute_api_endpoint Optional Type: bool Default: false Specifies whether clients can invoke the API using the default execute-api endpoint. To require that clients use a custom domain name to invoke the API, disable the default endpoint. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-restapi.html domain_name Optional Type: aws_cdk.aws_apigateway.DomainNameOptions Default: no domain name is defined, use addDomainName or directly define a DomainName . Configure a custom domain name and map it to this API. endpoint_export_name Optional Type: str Default: when no export name is given, output will be created without export Export name for the CfnOutput containing the API endpoint. endpoint_types Optional Type: typing.List[aws_cdk.aws_apigateway.EndpointType] Default: EndpointType.EDGE A list of the endpoint types of the API. Use this property when creating an API. fail_on_warnings Optional Type: bool Default: false Indicates whether to roll back the resource if a warning occurs while API Gateway is creating the RestApi resource. parameters Optional Type: typing.Mapping[str] Default: No parameters. Custom header parameters for the request. https://docs.aws.amazon.com/cli/latest/reference/apigateway/import-rest-api.html policy Optional Type: aws_cdk.aws_iam.PolicyDocument Default: No policy. A policy document that contains the permissions for this RestApi. rest_api_name Optional Type: str Default: ID of the RestApi construct. A name for the API Gateway RestApi resource. retain_deployments Optional Type: bool Default: false Retains old deployment resources when the API changes. This allows manually reverting stages to point to old deployments via the AWS Console. integrations Required Type: typing.Mapping[ OpenApiIntegration ] A mapping of API operation to its integration. operation_lookup Required Type: typing.Mapping[ MethodAndPath ] Details about each operation. cors_options Optional Type: aws_cdk.aws_apigateway.CorsOptions Cross Origin Resource Sharing options for the API. default_authorizer Optional Type: Authorizer The default authorizer to use for your api. When omitted, no default authorizer is used. Authorizers specified at the integration level will override this for that operation. spec Required Type: typing.Any The parsed OpenAPI specification. spec_path Required Type: str Path to the JSON open api spec. web_acl_options Optional Type: OpenApiGatewayWebAclOptions Options for the AWS WAF v2 WebACL associated with the api. By default, a Web ACL with the AWS default managed rule set will be associated with the API. These options may disable or override the defaults. Methods Name Description to_string Returns a string representation of this construct. to_string def to_string () -> str Returns a string representation of this construct. Static Functions Name Description is_construct Checks if x is a construct. is_construct import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . OpenApiGatewayRestApi . is_construct ( x : typing . Any ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: typing.Any Any object. Properties Name Type Description node constructs.Node The tree node. api aws_cdk.aws_apigateway.SpecRestApi No description. ip_set aws_cdk.aws_wafv2.CfnIPSet No description. web_acl aws_cdk.aws_wafv2.CfnWebACL No description. web_acl_association aws_cdk.aws_wafv2.CfnWebACLAssociation No description. node Required node : Node Type: constructs.Node The tree node. api Required api : SpecRestApi Type: aws_cdk.aws_apigateway.SpecRestApi ip_set Optional ip_set : CfnIPSet Type: aws_cdk.aws_wafv2.CfnIPSet web_acl Optional web_acl : CfnWebACL Type: aws_cdk.aws_wafv2.CfnWebACL web_acl_association Optional web_acl_association : CfnWebACLAssociation Type: aws_cdk.aws_wafv2.CfnWebACLAssociation Structs ApiGatewayIntegration Represents an api gateway integration. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-integration.html Initializer import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . ApiGatewayIntegration ( cache_key_parameters : typing . List [ str ] = None , cache_namespace : str = None , connection_id : str = None , connection_type : str = None , content_handling : str = None , credentials : str = None , http_method : str = None , passthrough_behavior : str = None , request_parameters : typing . Mapping [ str ] = None , request_templates : typing . Mapping [ str ] = None , responses : typing . Mapping [ ApiGatewayIntegrationResponse ] = None , timeout_in_millis : typing . Union [ int , float ] = None , tls_config : ApiGatewayIntegrationTlsConfig = None , type : str = None , uri : str = None ) Properties Name Type Description cache_key_parameters typing.List[str] A list of request parameters whose values are to be cached. cache_namespace str An API-specific tag group of related cached parameters. connection_id str The ID of a VpcLink for the private integration. connection_type str The integration connection type. content_handling str Request payload encoding conversion types. credentials str For AWS IAM role-based credentials, specify the ARN of an appropriate IAM role. http_method str The HTTP method used in the integration request. passthrough_behavior str Specifies how a request payload of unmapped content type is passed through the integration request without modification. request_parameters typing.Mapping[str] Specifies mappings from method request parameters to integration request parameters. request_templates typing.Mapping[str] Mapping templates for a request payload of specified MIME types. responses typing.Mapping[ ApiGatewayIntegrationResponse ] Defines the method's responses and specifies desired parameter mappings or payload mappings from integration responses to method responses. timeout_in_millis typing.Union[int, float] Custom timeout between 50 and 29,000 milliseconds. tls_config ApiGatewayIntegrationTlsConfig Specifies the TLS configuration for an integration. type str The type of integration with the specified backend. uri str The endpoint URI of the backend. cache_key_parameters Optional cache_key_parameters : typing . List [ str ] Type: typing.List[str] A list of request parameters whose values are to be cached. cache_namespace Optional cache_namespace : str Type: str An API-specific tag group of related cached parameters. connection_id Optional connection_id : str Type: str The ID of a VpcLink for the private integration. https://docs.aws.amazon.com/apigateway/latest/api/API_VpcLink.html connection_type Optional connection_type : str Type: str The integration connection type. The valid value is \"VPC_LINK\" for private integration or \"INTERNET\", otherwise. content_handling Optional content_handling : str Type: str Request payload encoding conversion types. Valid values are 1) CONVERT_TO_TEXT, for converting a binary payload into a base64-encoded string or converting a text payload into a utf-8-encoded string or passing through the text payload natively without modification, and 2) CONVERT_TO_BINARY, for converting a text payload into a base64-decoded blob or passing through a binary payload natively without modification. credentials Optional credentials : str Type: str For AWS IAM role-based credentials, specify the ARN of an appropriate IAM role. If unspecified, credentials default to resource-based permissions that must be added manually to allow the API to access the resource. For more information, see Granting Permissions Using a Resource Policy. Note: When using IAM credentials, make sure that AWS STS Regional endpoints are enabled for the Region where this API is deployed for best performance. http_method Optional http_method : str Type: str The HTTP method used in the integration request. For Lambda function invocations, the value must be POST. passthrough_behavior Optional passthrough_behavior : str Type: str Specifies how a request payload of unmapped content type is passed through the integration request without modification. Supported values are when_no_templates, when_no_match, and never. https://docs.aws.amazon.com/apigateway/latest/api/API_Integration.html#passthroughBehavior request_parameters Optional request_parameters : typing . Mapping [ str ] Type: typing.Mapping[str] Specifies mappings from method request parameters to integration request parameters. Supported request parameters are querystring, path, header, and body. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-integration-requestParameters.html request_templates Optional request_templates : typing . Mapping [ str ] Type: typing.Mapping[str] Mapping templates for a request payload of specified MIME types. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-integration-requestTemplates.html responses Optional responses : typing . Mapping [ ApiGatewayIntegrationResponse ] Type: typing.Mapping[ ApiGatewayIntegrationResponse ] Defines the method's responses and specifies desired parameter mappings or payload mappings from integration responses to method responses. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-integration-responses.html timeout_in_millis Optional timeout_in_millis : typing . Union [ int , float ] Type: typing.Union[int, float] Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds. tls_config Optional tls_config : ApiGatewayIntegrationTlsConfig Type: ApiGatewayIntegrationTlsConfig Specifies the TLS configuration for an integration. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-extensions-integration-tls-config.html type Optional type : str Type: str The type of integration with the specified backend. https://docs.aws.amazon.com/apigateway/latest/api/API_Integration.html#type uri Optional uri : str Type: str The endpoint URI of the backend. For integrations of the aws type, this is an ARN value. For the HTTP integration, this is the URL of the HTTP endpoint including the https or http scheme. ApiGatewayIntegrationResponse API Gateway integration response. https://docs.aws.amazon.com/apigateway/latest/api/API_Integration.html Initializer import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . ApiGatewayIntegrationResponse ( response_parameters : typing . Mapping [ str ], response_templates : typing . Mapping [ str ], status_code : str , content_handling : str = None ) Properties Name Type Description response_parameters typing.Mapping[str] Specifies parameter mappings for the response. response_templates typing.Mapping[str] Specifies MIME type-specific mapping templates for the response\u2019s payload. status_code str HTTP status code for the method response. content_handling str Response payload encoding conversion types. response_parameters Required response_parameters : typing . Mapping [ str ] Type: typing.Mapping[str] Specifies parameter mappings for the response. response_templates Required response_templates : typing . Mapping [ str ] Type: typing.Mapping[str] Specifies MIME type-specific mapping templates for the response\u2019s payload. status_code Required status_code : str Type: str HTTP status code for the method response. content_handling Optional content_handling : str Type: str Response payload encoding conversion types. Valid values are 1) CONVERT_TO_TEXT, for converting a binary payload into a base64-encoded string or converting a text payload into a utf-8-encoded string or passing through the text payload natively without modification, and 2) CONVERT_TO_BINARY, for converting a text payload into a base64-decoded blob or passing through a binary payload natively without modification. ApiGatewayIntegrationTlsConfig Specifies the TLS configuration for an integration. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-extensions-integration-tls-config.html Initializer import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . ApiGatewayIntegrationTlsConfig ( insecure_skip_verification : bool = None ) Properties Name Type Description insecure_skip_verification bool Specifies whether or not API Gateway skips verification that the certificate for an integration endpoint is issued by a supported certificate authority. insecure_skip_verification Optional insecure_skip_verification : bool Type: bool Specifies whether or not API Gateway skips verification that the certificate for an integration endpoint is issued by a supported certificate authority. This isn\u2019t recommended, but it enables you to use certificates that are signed by private certificate authorities, or certificates that are self-signed. If enabled, API Gateway still performs basic certificate validation, which includes checking the certificate's expiration date, hostname, and presence of a root certificate authority. Supported only for HTTP and HTTP_PROXY integrations. AuthorizerProps Properties for an authorizer. Initializer import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . AuthorizerProps ( authorization_type : AuthorizationType , authorizer_id : str , authorization_scopes : typing . List [ str ] = None ) Properties Name Type Description authorization_type aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id str The unique identifier for the authorizer. authorization_scopes typing.List[str] Scopes for the authorizer, if any. authorization_type Required authorization_type : AuthorizationType Type: aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id Required authorizer_id : str Type: str The unique identifier for the authorizer. authorization_scopes Optional authorization_scopes : typing . List [ str ] Type: typing.List[str] Scopes for the authorizer, if any. CidrAllowList Representation of a CIDR range. Initializer import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . CidrAllowList ( cidr_ranges : typing . List [ str ], cidr_type : str ) Properties Name Type Description cidr_ranges typing.List[str] Specify an IPv4 address by using CIDR notation. cidr_type str Type of CIDR range. cidr_ranges Required cidr_ranges : typing . List [ str ] Type: typing.List[str] Specify an IPv4 address by using CIDR notation. For example: To configure AWS WAF to allow, block, or count requests that originated from the IP address 192.0.2.44, specify 192.0.2.44/32 . To configure AWS WAF to allow, block, or count requests that originated from IP addresses from 192.0.2.0 to 192.0.2.255, specify 192.0.2.0/24 . For more information about CIDR notation, see the Wikipedia entry Classless Inter-Domain Routing . Specify an IPv6 address by using CIDR notation. For example: To configure AWS WAF to allow, block, or count requests that originated from the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify 1111:0000:0000:0000:0000:0000:0000:0111/128 . To configure AWS WAF to allow, block, or count requests that originated from IP addresses 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify 1111:0000:0000:0000:0000:0000:0000:0000/64 . cidr_type Required cidr_type : str Type: str Type of CIDR range. CognitoAuthorizerProps Properties used to configure a cognito authorizer. Initializer import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . CognitoAuthorizerProps ( authorizer_id : str , user_pools : typing . List [ IUserPool ], authorization_scopes : typing . List [ str ] = None ) Properties Name Type Description authorizer_id str Unique identifier for this authorizer. user_pools typing.List[aws_cdk.aws_cognito.IUserPool] The Cognito user pools associated with this authorizer. authorization_scopes typing.List[str] A list of authorization scopes configured on the method. authorizer_id Required authorizer_id : str Type: str Unique identifier for this authorizer. user_pools Required user_pools : typing . List [ IUserPool ] Type: typing.List[aws_cdk.aws_cognito.IUserPool] The Cognito user pools associated with this authorizer. authorization_scopes Optional authorization_scopes : typing . List [ str ] Type: typing.List[str] Default: [] A list of authorization scopes configured on the method. When used as the default authorizer, these scopes will be applied to all methods without an authorizer at the integration level. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-method.html#cfn-apigateway-method-authorizationscopes CommonApiProjectOptions Initializer import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . CommonApiProjectOptions ( client_languages : typing . List [ ClientLanguage ], api_src_dir : str = None , documentation_formats : typing . List [ DocumentationFormat ] = None , force_generate_code_and_docs : bool = None , generated_code_dir : str = None , java_client_options : JavaProjectOptions = None , parsed_spec_file_name : str = None , python_client_options : PythonProjectOptions = None , typescript_client_options : TypeScriptProjectOptions = None ) Properties Name Type Description client_languages typing.List[ ClientLanguage ] The list of languages for which clients will be generated. api_src_dir str The directory in which the api generated code will reside, relative to the project srcdir. documentation_formats typing.List[ DocumentationFormat ] Formats to generate documentation in. force_generate_code_and_docs bool Force to generate code and docs even if there were no changes in spec. generated_code_dir str The directory in which generated client code will be generated, relative to the outdir of this project. java_client_options projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsed_spec_file_name str The name of the output parsed OpenAPI specification file. python_client_options projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). typescript_client_options projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. client_languages Required client_languages : typing . List [ ClientLanguage ] Type: typing.List[ ClientLanguage ] The list of languages for which clients will be generated. A typescript client will always be generated. api_src_dir Optional api_src_dir : str Type: str The directory in which the api generated code will reside, relative to the project srcdir. documentation_formats Optional documentation_formats : typing . List [ DocumentationFormat ] Type: typing.List[ DocumentationFormat ] Formats to generate documentation in. force_generate_code_and_docs Optional force_generate_code_and_docs : bool Type: bool Default: \"false\" Force to generate code and docs even if there were no changes in spec. generated_code_dir Optional generated_code_dir : str Type: str Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. java_client_options Optional java_client_options : JavaProjectOptions Type: projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsed_spec_file_name Optional parsed_spec_file_name : str Type: str Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. python_client_options Optional python_client_options : PythonProjectOptions Type: projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. typescript_client_options Optional typescript_client_options : TypeScriptProjectOptions Type: projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. CustomAuthorizerProps Properties used to configure a custom authorizer. Initializer import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . CustomAuthorizerProps ( authorizer_id : str , function : IFunction , authorizer_result_ttl_in_seconds : typing . Union [ int , float ] = None , identity_source : str = None , type : CustomAuthorizerType = None ) Properties Name Type Description authorizer_id str Unique identifier for this authorizer. function aws_cdk.aws_lambda.IFunction The lambda function used to authorize requests. authorizer_result_ttl_in_seconds typing.Union[int, float] The number of seconds during which the authorizer result is cached. identity_source str The source of the identity in an incoming request. type CustomAuthorizerType The type of custom authorizer. authorizer_id Required authorizer_id : str Type: str Unique identifier for this authorizer. function Required function : IFunction Type: aws_cdk.aws_lambda.IFunction The lambda function used to authorize requests. authorizer_result_ttl_in_seconds Optional authorizer_result_ttl_in_seconds : typing . Union [ int , float ] Type: typing.Union[int, float] Default: 300 The number of seconds during which the authorizer result is cached. identity_source Optional identity_source : str Type: str Default: \"method.request.header.Authorization\" The source of the identity in an incoming request. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-identitysource type Optional type : CustomAuthorizerType Type: CustomAuthorizerType Default: CustomAuthorizerType.TOKEN The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type IntegrationGrantProps Properties for granting the API access to invoke the operation. Initializer import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . IntegrationGrantProps ( method : str , path : str , api : SpecRestApi , operation_id : str , scope : Construct ) Properties Name Type Description method str The http method of this operation. path str The path of this operation in the api. api aws_cdk.aws_apigateway.SpecRestApi The api to grant permissions for. operation_id str The ID of the operation for which permissions are being granted. scope constructs.Construct The scope in which permission resources can be created. method Required method : str Type: str The http method of this operation. path Required path : str Type: str The path of this operation in the api. api Required api : SpecRestApi Type: aws_cdk.aws_apigateway.SpecRestApi The api to grant permissions for. operation_id Required operation_id : str Type: str The ID of the operation for which permissions are being granted. scope Required scope : Construct Type: constructs.Construct The scope in which permission resources can be created. IntegrationRenderProps Properties for rendering an integration into an API Gateway OpenAPI extension. Initializer import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . IntegrationRenderProps ( method : str , path : str , operation_id : str , scope : Construct ) Properties Name Type Description method str The http method of this operation. path str The path of this operation in the api. operation_id str The ID of the operation being rendered. scope constructs.Construct The scope in which the integration is being rendered. method Required method : str Type: str The http method of this operation. path Required path : str Type: str The path of this operation in the api. operation_id Required operation_id : str Type: str The ID of the operation being rendered. scope Required scope : Construct Type: constructs.Construct The scope in which the integration is being rendered. ManagedRule Initializer import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . ManagedRule ( name : str , vendor : str ) Properties Name Type Description name str The name of the managed rule group. vendor str The name of the managed rule group vendor. name Required name : str Type: str The name of the managed rule group. You use this, along with the vendor name, to identify the rule group. vendor Required vendor : str Type: str The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group. MethodAndPath Structure to contain an API operation's method and path. Initializer import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . MethodAndPath ( method : str , path : str ) Properties Name Type Description method str The http method of this operation. path str The path of this operation in the api. method Required method : str Type: str The http method of this operation. path Required path : str Type: str The path of this operation in the api. OpenApiGatewayJavaProjectOptions Configuration for the OpenApiGatewayJavaProject. Initializer import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . OpenApiGatewayJavaProjectOptions ( name : str , commit_generated : bool = None , git_options : GitOptions = None , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , renovatebot : bool = None , renovatebot_options : RenovatebotOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge : bool = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_credentials : GithubCredentials = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , artifact_id : str , group_id : str , version : str , description : str = None , packaging : str = None , url : str = None , compile_options : MavenCompileOptions = None , deps : typing . List [ str ] = None , distdir : str = None , junit : bool = None , junit_options : JunitOptions = None , packaging_options : MavenPackagingOptions = None , projenrc_java : bool = None , projenrc_java_options : ProjenrcOptions = None , test_deps : typing . List [ str ] = None , sample : bool = None , sample_java_package : str = None , client_languages : typing . List [ ClientLanguage ], api_src_dir : str = None , documentation_formats : typing . List [ DocumentationFormat ] = None , force_generate_code_and_docs : bool = None , generated_code_dir : str = None , java_client_options : JavaProjectOptions = None , parsed_spec_file_name : str = None , python_client_options : PythonProjectOptions = None , typescript_client_options : TypeScriptProjectOptions = None , spec_file : str = None ) Properties Name Type Description name str This is the name of your project. commit_generated bool Whether to commit the managed files by default. git_options projen.GitOptions Configuration options for git. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. renovatebot bool Use renovatebot to handle dependency upgrades. renovatebot_options projen.RenovatebotOptions Options for renovatebot. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge bool Enable automatic merging on GitHub. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_credentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. artifact_id str The artifactId is generally the name that the project is known by. group_id str This is generally unique amongst an organization or a project. version str This is the last piece of the naming puzzle. description str Description of a project is always good. packaging str Project packaging format. url str The URL, like the name, is not required. compile_options projen.java.MavenCompileOptions Compile options. deps typing.List[str] List of runtime dependencies for this project. distdir str Final artifact output directory. junit bool Include junit tests. junit_options projen.java.JunitOptions junit options. packaging_options projen.java.MavenPackagingOptions Packaging options. projenrc_java bool Use projenrc in java. projenrc_java_options projen.java.ProjenrcOptions Options related to projenrc in java. test_deps typing.List[str] List of test dependencies for this project. sample bool Include sample code and test if the relevant directories don't exist. sample_java_package str The java package to use for the code sample. client_languages typing.List[ ClientLanguage ] The list of languages for which clients will be generated. api_src_dir str The directory in which the api generated code will reside, relative to the project srcdir. documentation_formats typing.List[ DocumentationFormat ] Formats to generate documentation in. force_generate_code_and_docs bool Force to generate code and docs even if there were no changes in spec. generated_code_dir str The directory in which generated client code will be generated, relative to the outdir of this project. java_client_options projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsed_spec_file_name str The name of the output parsed OpenAPI specification file. python_client_options projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). typescript_client_options projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. spec_file str The path to the OpenAPI specification file, relative to the project source directory (srcdir). name Required name : str Type: str Default: $BASEDIR This is the name of your project. commit_generated Optional commit_generated : bool Type: bool Default: true Whether to commit the managed files by default. git_options Optional git_options : GitOptions Type: projen.GitOptions Configuration options for git. logging Optional logging : LoggerOptions Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional outdir : str Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional parent : Project Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional projen_command : str Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional projenrc_json : bool Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional projenrc_json_options : ProjenrcOptions Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional renovatebot : bool Type: bool Default: false Use renovatebot to handle dependency upgrades. renovatebot_options Optional renovatebot_options : RenovatebotOptions Type: projen.RenovatebotOptions Default: default options Options for renovatebot. auto_approve_options Optional auto_approve_options : AutoApproveOptions Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge Optional auto_merge : bool Type: bool Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. auto_merge_options Optional auto_merge_options : AutoMergeOptions Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional clobber : bool Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional dev_container : bool Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional github : bool Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional github_options : GitHubOptions Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional gitpod : bool Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead mergify : bool Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead mergify_options : MergifyOptions Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level project_type : ProjectType Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_credentials Optional projen_credentials : GithubCredentials Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projen_token_secret ~~ Optional Deprecated: use projenCredentials projen_token_secret : str Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional readme : SampleReadmeProps Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional stale : bool Type: bool Default: false Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional stale_options : StaleOptions Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional vscode : bool Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. artifact_id Required artifact_id : str Type: str Default: \"my-app\" The artifactId is generally the name that the project is known by. Although the groupId is important, people within the group will rarely mention the groupId in discussion (they are often all be the same ID, such as the MojoHaus project groupId: org.codehaus.mojo). It, along with the groupId, creates a key that separates this project from every other project in the world (at least, it should :) ). Along with the groupId, the artifactId fully defines the artifact's living quarters within the repository. In the case of the above project, my-project lives in $M2_REPO/org/codehaus/mojo/my-project. group_id Required group_id : str Type: str Default: \"org.acme\" This is generally unique amongst an organization or a project. For example, all core Maven artifacts do (well, should) live under the groupId org.apache.maven. Group ID's do not necessarily use the dot notation, for example, the junit project. Note that the dot-notated groupId does not have to correspond to the package structure that the project contains. It is, however, a good practice to follow. When stored within a repository, the group acts much like the Java packaging structure does in an operating system. The dots are replaced by OS specific directory separators (such as '/' in Unix) which becomes a relative directory structure from the base repository. In the example given, the org.codehaus.mojo group lives within the directory $M2_REPO/org/codehaus/mojo. version Required version : str Type: str Default: \"0.1.0\" This is the last piece of the naming puzzle. groupId:artifactId denotes a single project but they cannot delineate which incarnation of that project we are talking about. Do we want the junit:junit of 2018 (version 4.12), or of 2007 (version 3.8.2)? In short: code changes, those changes should be versioned, and this element keeps those versions in line. It is also used within an artifact's repository to separate versions from each other. my-project version 1.0 files live in the directory structure $M2_REPO/org/codehaus/mojo/my-project/1.0. description Optional description : str Type: str Default: undefined Description of a project is always good. Although this should not replace formal documentation, a quick comment to any readers of the POM is always helpful. packaging Optional packaging : str Type: str Default: \"jar\" Project packaging format. url Optional url : str Type: str Default: undefined The URL, like the name, is not required. This is a nice gesture for projects users, however, so that they know where the project lives. compile_options Optional compile_options : MavenCompileOptions Type: projen.java.MavenCompileOptions Default: defaults Compile options. deps Optional deps : typing . List [ str ] Type: typing.List[str] Default: [] List of runtime dependencies for this project. Dependencies use the format: <groupId>/<artifactId>@<semver> Additional dependencies can be added via project.addDependency() . distdir Optional distdir : str Type: str Default: \"dist/java\" Final artifact output directory. junit Optional junit : bool Type: bool Default: true Include junit tests. junit_options Optional junit_options : JunitOptions Type: projen.java.JunitOptions Default: defaults junit options. packaging_options Optional packaging_options : MavenPackagingOptions Type: projen.java.MavenPackagingOptions Default: defaults Packaging options. projenrc_java Optional projenrc_java : bool Type: bool Default: true Use projenrc in java. This will install projen as a java dependency and will add a synth task which will compile & execute main() from src/main/java/projenrc.java . projenrc_java_options Optional projenrc_java_options : ProjenrcOptions Type: projen.java.ProjenrcOptions Default: default options Options related to projenrc in java. test_deps Optional test_deps : typing . List [ str ] Type: typing.List[str] Default: [] List of test dependencies for this project. Dependencies use the format: <groupId>/<artifactId>@<semver> Additional dependencies can be added via project.addTestDependency() . sample Optional sample : bool Type: bool Default: true Include sample code and test if the relevant directories don't exist. sample_java_package Optional sample_java_package : str Type: str Default: \"org.acme\" The java package to use for the code sample. client_languages Required client_languages : typing . List [ ClientLanguage ] Type: typing.List[ ClientLanguage ] The list of languages for which clients will be generated. A typescript client will always be generated. api_src_dir Optional api_src_dir : str Type: str The directory in which the api generated code will reside, relative to the project srcdir. documentation_formats Optional documentation_formats : typing . List [ DocumentationFormat ] Type: typing.List[ DocumentationFormat ] Formats to generate documentation in. force_generate_code_and_docs Optional force_generate_code_and_docs : bool Type: bool Default: \"false\" Force to generate code and docs even if there were no changes in spec. generated_code_dir Optional generated_code_dir : str Type: str Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. java_client_options Optional java_client_options : JavaProjectOptions Type: projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsed_spec_file_name Optional parsed_spec_file_name : str Type: str Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. python_client_options Optional python_client_options : PythonProjectOptions Type: projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. typescript_client_options Optional typescript_client_options : TypeScriptProjectOptions Type: projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. spec_file Optional spec_file : str Type: str Default: \"spec/spec.yaml\" The path to the OpenAPI specification file, relative to the project source directory (srcdir). OpenApiGatewayProjectOptions Options common to all open api gateway projects. Initializer import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . OpenApiGatewayProjectOptions ( client_languages : typing . List [ ClientLanguage ], api_src_dir : str = None , documentation_formats : typing . List [ DocumentationFormat ] = None , force_generate_code_and_docs : bool = None , generated_code_dir : str = None , java_client_options : JavaProjectOptions = None , parsed_spec_file_name : str = None , python_client_options : PythonProjectOptions = None , typescript_client_options : TypeScriptProjectOptions = None , spec_file : str = None ) Properties Name Type Description client_languages typing.List[ ClientLanguage ] The list of languages for which clients will be generated. api_src_dir str The directory in which the api generated code will reside, relative to the project srcdir. documentation_formats typing.List[ DocumentationFormat ] Formats to generate documentation in. force_generate_code_and_docs bool Force to generate code and docs even if there were no changes in spec. generated_code_dir str The directory in which generated client code will be generated, relative to the outdir of this project. java_client_options projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsed_spec_file_name str The name of the output parsed OpenAPI specification file. python_client_options projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). typescript_client_options projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. spec_file str The path to the OpenAPI specification file, relative to the project source directory (srcdir). client_languages Required client_languages : typing . List [ ClientLanguage ] Type: typing.List[ ClientLanguage ] The list of languages for which clients will be generated. A typescript client will always be generated. api_src_dir Optional api_src_dir : str Type: str The directory in which the api generated code will reside, relative to the project srcdir. documentation_formats Optional documentation_formats : typing . List [ DocumentationFormat ] Type: typing.List[ DocumentationFormat ] Formats to generate documentation in. force_generate_code_and_docs Optional force_generate_code_and_docs : bool Type: bool Default: \"false\" Force to generate code and docs even if there were no changes in spec. generated_code_dir Optional generated_code_dir : str Type: str Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. java_client_options Optional java_client_options : JavaProjectOptions Type: projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsed_spec_file_name Optional parsed_spec_file_name : str Type: str Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. python_client_options Optional python_client_options : PythonProjectOptions Type: projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. typescript_client_options Optional typescript_client_options : TypeScriptProjectOptions Type: projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. spec_file Optional spec_file : str Type: str Default: \"spec/spec.yaml\" The path to the OpenAPI specification file, relative to the project source directory (srcdir). OpenApiGatewayPythonProjectOptions Configuration for the OpenApiGatewayPythonProject. Initializer import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . OpenApiGatewayPythonProjectOptions ( name : str , commit_generated : bool = None , git_options : GitOptions = None , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , renovatebot : bool = None , renovatebot_options : RenovatebotOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge : bool = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_credentials : GithubCredentials = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , author_email : str , author_name : str , version : str , classifiers : typing . List [ str ] = None , description : str = None , homepage : str = None , license : str = None , package_name : str = None , poetry_options : PoetryPyprojectOptionsWithoutDeps = None , setup_config : typing . Mapping [ typing . Any ] = None , module_name : str , deps : typing . List [ str ] = None , dev_deps : typing . List [ str ] = None , pip : bool = None , poetry : bool = None , projenrc_js : bool = None , projenrc_js_options : ProjenrcOptions = None , projenrc_python : bool = None , projenrc_python_options : ProjenrcOptions = None , pytest : bool = None , pytest_options : PytestOptions = None , sample : bool = None , setuptools : bool = None , venv : bool = None , venv_options : VenvOptions = None , client_languages : typing . List [ ClientLanguage ], api_src_dir : str = None , documentation_formats : typing . List [ DocumentationFormat ] = None , force_generate_code_and_docs : bool = None , generated_code_dir : str = None , java_client_options : JavaProjectOptions = None , parsed_spec_file_name : str = None , python_client_options : PythonProjectOptions = None , typescript_client_options : TypeScriptProjectOptions = None , spec_file : str = None ) Properties Name Type Description name str This is the name of your project. commit_generated bool Whether to commit the managed files by default. git_options projen.GitOptions Configuration options for git. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. renovatebot bool Use renovatebot to handle dependency upgrades. renovatebot_options projen.RenovatebotOptions Options for renovatebot. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge bool Enable automatic merging on GitHub. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_credentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. author_email str Author's e-mail. author_name str Author's name. version str Version of the package. classifiers typing.List[str] A list of PyPI trove classifiers that describe the project. description str A short description of the package. homepage str A URL to the website of the project. license str License of this package as an SPDX identifier. package_name str Package name. poetry_options projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setup_config typing.Mapping[typing.Any] Additional fields to pass in the setup() function if using setuptools. module_name str Name of the python package as used in imports and filenames. deps typing.List[str] List of runtime dependencies for this project. dev_deps typing.List[str] List of dev dependencies for this project. pip bool Use pip with a requirements.txt file to track project dependencies. poetry bool Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrc_js bool Use projenrc in javascript. projenrc_js_options projen.javascript.ProjenrcOptions Options related to projenrc in JavaScript. projenrc_python bool Use projenrc in Python. projenrc_python_options projen.python.ProjenrcOptions Options related to projenrc in python. pytest bool Include pytest tests. pytest_options projen.python.PytestOptions pytest options. sample bool Include sample code and test if the relevant directories don't exist. setuptools bool Use setuptools with a setup.py script for packaging and publishing. venv bool Use venv to manage a virtual environment for installing dependencies inside. venv_options projen.python.VenvOptions Venv options. client_languages typing.List[ ClientLanguage ] The list of languages for which clients will be generated. api_src_dir str The directory in which the api generated code will reside, relative to the project srcdir. documentation_formats typing.List[ DocumentationFormat ] Formats to generate documentation in. force_generate_code_and_docs bool Force to generate code and docs even if there were no changes in spec. generated_code_dir str The directory in which generated client code will be generated, relative to the outdir of this project. java_client_options projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsed_spec_file_name str The name of the output parsed OpenAPI specification file. python_client_options projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). typescript_client_options projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. spec_file str The path to the OpenAPI specification file, relative to the project source directory (srcdir). name Required name : str Type: str Default: $BASEDIR This is the name of your project. commit_generated Optional commit_generated : bool Type: bool Default: true Whether to commit the managed files by default. git_options Optional git_options : GitOptions Type: projen.GitOptions Configuration options for git. logging Optional logging : LoggerOptions Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional outdir : str Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional parent : Project Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional projen_command : str Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional projenrc_json : bool Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional projenrc_json_options : ProjenrcOptions Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional renovatebot : bool Type: bool Default: false Use renovatebot to handle dependency upgrades. renovatebot_options Optional renovatebot_options : RenovatebotOptions Type: projen.RenovatebotOptions Default: default options Options for renovatebot. auto_approve_options Optional auto_approve_options : AutoApproveOptions Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge Optional auto_merge : bool Type: bool Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. auto_merge_options Optional auto_merge_options : AutoMergeOptions Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional clobber : bool Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional dev_container : bool Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional github : bool Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional github_options : GitHubOptions Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional gitpod : bool Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead mergify : bool Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead mergify_options : MergifyOptions Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level project_type : ProjectType Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_credentials Optional projen_credentials : GithubCredentials Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projen_token_secret ~~ Optional Deprecated: use projenCredentials projen_token_secret : str Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional readme : SampleReadmeProps Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional stale : bool Type: bool Default: false Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional stale_options : StaleOptions Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional vscode : bool Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. author_email Required author_email : str Type: str Default: $GIT_USER_EMAIL Author's e-mail. author_name Required author_name : str Type: str Default: $GIT_USER_NAME Author's name. version Required version : str Type: str Default: \"0.1.0\" Version of the package. classifiers Optional classifiers : typing . List [ str ] Type: typing.List[str] A list of PyPI trove classifiers that describe the project. https://pypi.org/classifiers/ description Optional description : str Type: str A short description of the package. homepage Optional homepage : str Type: str A URL to the website of the project. license Optional license : str Type: str License of this package as an SPDX identifier. package_name Optional package_name : str Type: str Package name. poetry_options Optional poetry_options : PoetryPyprojectOptionsWithoutDeps Type: projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setup_config Optional setup_config : typing . Mapping [ typing . Any ] Type: typing.Mapping[typing.Any] Additional fields to pass in the setup() function if using setuptools. module_name Required module_name : str Type: str Default: $PYTHON_MODULE_NAME Name of the python package as used in imports and filenames. Must only consist of alphanumeric characters and underscores. deps Optional deps : typing . List [ str ] Type: typing.List[str] Default: [] List of runtime dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDependency() . dev_deps Optional dev_deps : typing . List [ str ] Type: typing.List[str] Default: [] List of dev dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDevDependency() . pip Optional pip : bool Type: bool Default: true, unless poetry is true, then false Use pip with a requirements.txt file to track project dependencies. poetry Optional poetry : bool Type: bool Default: false Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. This feature is incompatible with pip, setuptools, or venv. If you set this option to true , then pip, setuptools, and venv must be set to false . projenrc_js Optional projenrc_js : bool Type: bool Default: false Use projenrc in javascript. This will install projen as a JavaScript dependency and add a synth task which will run .projenrc.js . projenrc_js_options Optional projenrc_js_options : ProjenrcOptions Type: projen.javascript.ProjenrcOptions Default: default options Options related to projenrc in JavaScript. projenrc_python Optional projenrc_python : bool Type: bool Default: true Use projenrc in Python. This will install projen as a Python dependency and add a synth task which will run .projenrc.py . projenrc_python_options Optional projenrc_python_options : ProjenrcOptions Type: projen.python.ProjenrcOptions Default: default options Options related to projenrc in python. pytest Optional pytest : bool Type: bool Default: true Include pytest tests. pytest_options Optional pytest_options : PytestOptions Type: projen.python.PytestOptions Default: defaults pytest options. sample Optional sample : bool Type: bool Default: true Include sample code and test if the relevant directories don't exist. setuptools Optional setuptools : bool Type: bool Default: true, unless poetry is true, then false Use setuptools with a setup.py script for packaging and publishing. venv Optional venv : bool Type: bool Default: true, unless poetry is true, then false Use venv to manage a virtual environment for installing dependencies inside. venv_options Optional venv_options : VenvOptions Type: projen.python.VenvOptions Default: defaults Venv options. client_languages Required client_languages : typing . List [ ClientLanguage ] Type: typing.List[ ClientLanguage ] The list of languages for which clients will be generated. A typescript client will always be generated. api_src_dir Optional api_src_dir : str Type: str The directory in which the api generated code will reside, relative to the project srcdir. documentation_formats Optional documentation_formats : typing . List [ DocumentationFormat ] Type: typing.List[ DocumentationFormat ] Formats to generate documentation in. force_generate_code_and_docs Optional force_generate_code_and_docs : bool Type: bool Default: \"false\" Force to generate code and docs even if there were no changes in spec. generated_code_dir Optional generated_code_dir : str Type: str Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. java_client_options Optional java_client_options : JavaProjectOptions Type: projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsed_spec_file_name Optional parsed_spec_file_name : str Type: str Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. python_client_options Optional python_client_options : PythonProjectOptions Type: projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. typescript_client_options Optional typescript_client_options : TypeScriptProjectOptions Type: projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. spec_file Optional spec_file : str Type: str Default: \"spec/spec.yaml\" The path to the OpenAPI specification file, relative to the project source directory (srcdir). OpenApiGatewayRestApiProps Configuration for the OpenApiGatewayRestApi construct. Initializer import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . OpenApiGatewayRestApiProps ( cloud_watch_role : bool = None , deploy : bool = None , deploy_options : StageOptions = None , description : str = None , disable_execute_api_endpoint : bool = None , domain_name : DomainNameOptions = None , endpoint_export_name : str = None , endpoint_types : typing . List [ EndpointType ] = None , fail_on_warnings : bool = None , parameters : typing . Mapping [ str ] = None , policy : PolicyDocument = None , rest_api_name : str = None , retain_deployments : bool = None , integrations : typing . Mapping [ OpenApiIntegration ], operation_lookup : typing . Mapping [ MethodAndPath ], cors_options : CorsOptions = None , default_authorizer : Authorizer = None , spec : typing . Any , spec_path : str , web_acl_options : OpenApiGatewayWebAclOptions = None ) Properties Name Type Description cloud_watch_role bool Automatically configure an AWS CloudWatch role for API Gateway. deploy bool Indicates if a Deployment should be automatically created for this API, and recreated when the API model (resources, methods) changes. deploy_options aws_cdk.aws_apigateway.StageOptions Options for the API Gateway stage that will always point to the latest deployment when deploy is enabled. description str A description of the RestApi construct. disable_execute_api_endpoint bool Specifies whether clients can invoke the API using the default execute-api endpoint. domain_name aws_cdk.aws_apigateway.DomainNameOptions Configure a custom domain name and map it to this API. endpoint_export_name str Export name for the CfnOutput containing the API endpoint. endpoint_types typing.List[aws_cdk.aws_apigateway.EndpointType] A list of the endpoint types of the API. fail_on_warnings bool Indicates whether to roll back the resource if a warning occurs while API Gateway is creating the RestApi resource. parameters typing.Mapping[str] Custom header parameters for the request. policy aws_cdk.aws_iam.PolicyDocument A policy document that contains the permissions for this RestApi. rest_api_name str A name for the API Gateway RestApi resource. retain_deployments bool Retains old deployment resources when the API changes. integrations typing.Mapping[ OpenApiIntegration ] A mapping of API operation to its integration. operation_lookup typing.Mapping[ MethodAndPath ] Details about each operation. cors_options aws_cdk.aws_apigateway.CorsOptions Cross Origin Resource Sharing options for the API. default_authorizer Authorizer The default authorizer to use for your api. spec typing.Any The parsed OpenAPI specification. spec_path str Path to the JSON open api spec. web_acl_options OpenApiGatewayWebAclOptions Options for the AWS WAF v2 WebACL associated with the api. cloud_watch_role Optional cloud_watch_role : bool Type: bool Default: false if @aws-cdk/aws-apigateway:disableCloudWatchRole is enabled, true otherwise Automatically configure an AWS CloudWatch role for API Gateway. deploy Optional deploy : bool Type: bool Default: true Indicates if a Deployment should be automatically created for this API, and recreated when the API model (resources, methods) changes. Since API Gateway deployments are immutable, When this option is enabled (by default), an AWS::ApiGateway::Deployment resource will automatically created with a logical ID that hashes the API model (methods, resources and options). This means that when the model changes, the logical ID of this CloudFormation resource will change, and a new deployment will be created. If this is set, latestDeployment will refer to the Deployment object and deploymentStage will refer to a Stage that points to this deployment. To customize the stage options, use the deployOptions property. A CloudFormation Output will also be defined with the root URL endpoint of this REST API. deploy_options Optional deploy_options : StageOptions Type: aws_cdk.aws_apigateway.StageOptions Default: Based on defaults of StageOptions . Options for the API Gateway stage that will always point to the latest deployment when deploy is enabled. If deploy is disabled, this value cannot be set. description Optional description : str Type: str Default: 'Automatically created by the RestApi construct' A description of the RestApi construct. disable_execute_api_endpoint Optional disable_execute_api_endpoint : bool Type: bool Default: false Specifies whether clients can invoke the API using the default execute-api endpoint. To require that clients use a custom domain name to invoke the API, disable the default endpoint. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-restapi.html domain_name Optional domain_name : DomainNameOptions Type: aws_cdk.aws_apigateway.DomainNameOptions Default: no domain name is defined, use addDomainName or directly define a DomainName . Configure a custom domain name and map it to this API. endpoint_export_name Optional endpoint_export_name : str Type: str Default: when no export name is given, output will be created without export Export name for the CfnOutput containing the API endpoint. endpoint_types Optional endpoint_types : typing . List [ EndpointType ] Type: typing.List[aws_cdk.aws_apigateway.EndpointType] Default: EndpointType.EDGE A list of the endpoint types of the API. Use this property when creating an API. fail_on_warnings Optional fail_on_warnings : bool Type: bool Default: false Indicates whether to roll back the resource if a warning occurs while API Gateway is creating the RestApi resource. parameters Optional parameters : typing . Mapping [ str ] Type: typing.Mapping[str] Default: No parameters. Custom header parameters for the request. https://docs.aws.amazon.com/cli/latest/reference/apigateway/import-rest-api.html policy Optional policy : PolicyDocument Type: aws_cdk.aws_iam.PolicyDocument Default: No policy. A policy document that contains the permissions for this RestApi. rest_api_name Optional rest_api_name : str Type: str Default: ID of the RestApi construct. A name for the API Gateway RestApi resource. retain_deployments Optional retain_deployments : bool Type: bool Default: false Retains old deployment resources when the API changes. This allows manually reverting stages to point to old deployments via the AWS Console. integrations Required integrations : typing . Mapping [ OpenApiIntegration ] Type: typing.Mapping[ OpenApiIntegration ] A mapping of API operation to its integration. operation_lookup Required operation_lookup : typing . Mapping [ MethodAndPath ] Type: typing.Mapping[ MethodAndPath ] Details about each operation. cors_options Optional cors_options : CorsOptions Type: aws_cdk.aws_apigateway.CorsOptions Cross Origin Resource Sharing options for the API. default_authorizer Optional default_authorizer : Authorizer Type: Authorizer The default authorizer to use for your api. When omitted, no default authorizer is used. Authorizers specified at the integration level will override this for that operation. spec Required spec : typing . Any Type: typing.Any The parsed OpenAPI specification. spec_path Required spec_path : str Type: str Path to the JSON open api spec. web_acl_options Optional web_acl_options : OpenApiGatewayWebAclOptions Type: OpenApiGatewayWebAclOptions Options for the AWS WAF v2 WebACL associated with the api. By default, a Web ACL with the AWS default managed rule set will be associated with the API. These options may disable or override the defaults. OpenApiGatewayTsProjectOptions Configuration for the OpenApiGatewayTsProject. Initializer import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . OpenApiGatewayTsProjectOptions ( name : str , commit_generated : bool = None , git_options : GitOptions = None , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , renovatebot : bool = None , renovatebot_options : RenovatebotOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge : bool = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_credentials : GithubCredentials = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , allow_library_dependencies : bool = None , author_email : str = None , author_name : str = None , author_organization : bool = None , author_url : str = None , auto_detect_bin : bool = None , bin : typing . Mapping [ str ] = None , bugs_email : str = None , bugs_url : str = None , bundled_deps : typing . List [ str ] = None , code_artifact_options : CodeArtifactOptions = None , deps : typing . List [ str ] = None , description : str = None , dev_deps : typing . List [ str ] = None , entrypoint : str = None , homepage : str = None , keywords : typing . List [ str ] = None , license : str = None , licensed : bool = None , max_node_version : str = None , min_node_version : str = None , npm_access : NpmAccess = None , npm_registry : str = None , npm_registry_url : str = None , npm_token_secret : str = None , package_manager : NodePackageManager = None , package_name : str = None , peer_dependency_options : PeerDependencyOptions = None , peer_deps : typing . List [ str ] = None , pnpm_version : str = None , repository : str = None , repository_directory : str = None , scoped_packages_options : typing . List [ ScopedPackagesOptions ] = None , scripts : typing . Mapping [ str ] = None , stability : str = None , jsii_release_version : str = None , major_version : typing . Union [ int , float ] = None , min_major_version : typing . Union [ int , float ] = None , npm_dist_tag : str = None , post_build_steps : typing . List [ JobStep ] = None , prerelease : str = None , publish_dry_run : bool = None , publish_tasks : bool = None , release_branches : typing . Mapping [ BranchOptions ] = None , release_every_commit : bool = None , release_failure_issue : bool = None , release_failure_issue_label : str = None , release_schedule : str = None , release_tag_prefix : str = None , release_trigger : ReleaseTrigger = None , release_workflow_name : str = None , release_workflow_setup_steps : typing . List [ JobStep ] = None , versionrc_options : typing . Mapping [ typing . Any ] = None , workflow_container_image : str = None , workflow_runs_on : typing . List [ str ] = None , default_release_branch : str , artifacts_directory : str = None , auto_approve_upgrades : bool = None , build_workflow : bool = None , build_workflow_triggers : Triggers = None , bundler_options : BundlerOptions = None , code_cov : bool = None , code_cov_token_secret : str = None , copyright_owner : str = None , copyright_period : str = None , dependabot : bool = None , dependabot_options : DependabotOptions = None , deps_upgrade : bool = None , deps_upgrade_options : UpgradeDependenciesOptions = None , gitignore : typing . List [ str ] = None , jest : bool = None , jest_options : JestOptions = None , mutable_build : bool = None , npmignore : typing . List [ str ] = None , npmignore_enabled : bool = None , package : bool = None , prettier : bool = None , prettier_options : PrettierOptions = None , projen_dev_dependency : bool = None , projenrc_js : bool = None , projenrc_js_options : ProjenrcOptions = None , projen_version : str = None , pull_request_template : bool = None , pull_request_template_contents : typing . List [ str ] = None , release : bool = None , release_to_npm : bool = None , release_workflow : bool = None , workflow_bootstrap_steps : typing . List [ JobStep ] = None , workflow_git_identity : GitIdentity = None , workflow_node_version : str = None , disable_tsconfig : bool = None , docgen : bool = None , docs_directory : str = None , entrypoint_types : str = None , eslint : bool = None , eslint_options : EslintOptions = None , libdir : str = None , projenrc_ts : bool = None , projenrc_ts_options : ProjenrcOptions = None , sample_code : bool = None , srcdir : str = None , testdir : str = None , tsconfig : TypescriptConfigOptions = None , tsconfig_dev : TypescriptConfigOptions = None , tsconfig_dev_file : str = None , typescript_version : str = None , client_languages : typing . List [ ClientLanguage ], api_src_dir : str = None , documentation_formats : typing . List [ DocumentationFormat ] = None , force_generate_code_and_docs : bool = None , generated_code_dir : str = None , java_client_options : JavaProjectOptions = None , parsed_spec_file_name : str = None , python_client_options : PythonProjectOptions = None , typescript_client_options : TypeScriptProjectOptions = None , spec_file : str = None ) Properties Name Type Description name str This is the name of your project. commit_generated bool Whether to commit the managed files by default. git_options projen.GitOptions Configuration options for git. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. renovatebot bool Use renovatebot to handle dependency upgrades. renovatebot_options projen.RenovatebotOptions Options for renovatebot. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge bool Enable automatic merging on GitHub. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_credentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. allow_library_dependencies bool Allow the project to include peerDependencies and bundledDependencies . author_email str Author's e-mail. author_name str Author's name. author_organization bool Is the author an organization. author_url str Author's URL / Website. auto_detect_bin bool Automatically add all executables under the bin directory to your package.json file under the bin section. bin typing.Mapping[str] Binary programs vended with your module. bugs_email str The email address to which issues should be reported. bugs_url str The url to your project's issue tracker. bundled_deps typing.List[str] List of dependencies to bundle into this module. code_artifact_options projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps typing.List[str] Runtime dependencies of this module. description str The description is just a string that helps people understand the purpose of the package. dev_deps typing.List[str] Build dependencies for this module. entrypoint str Module entrypoint ( main in package.json ). homepage str Package's Homepage / Website. keywords typing.List[str] Keywords to include in package.json . license str License's SPDX identifier. licensed bool Indicates if a license should be added. max_node_version str Minimum node.js version to require via engines (inclusive). min_node_version str Minimum Node.js version to require via package.json engines (inclusive). npm_access projen.javascript.NpmAccess Access level of the npm package. npm_registry str The host name of the npm registry to publish to. npm_registry_url str The base URL of the npm package registry. npm_token_secret str GitHub secret which contains the NPM token to use when publishing packages. package_manager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. package_name str The \"name\" in package.json. peer_dependency_options projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps typing.List[str] Peer dependencies for this module. pnpm_version str The version of PNPM to use if using PNPM as a package manager. repository str The repository is the location where the actual code for your package lives. repository_directory str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scoped_packages_options typing.List[projen.javascript.ScopedPackagesOptions] Options for privately hosted scoped packages. scripts typing.Mapping[str] npm scripts to include. stability str Package's Stability. jsii_release_version str Version requirement of publib which is used to publish modules to npm. major_version typing.Union[int, float] Major version to release from the default branch. min_major_version typing.Union[int, float] Minimal Major version to release. npm_dist_tag str The npmDistTag to use when publishing from the default branch. post_build_steps typing.List[projen.github.workflows.JobStep] Steps to execute after build as part of the release workflow. prerelease str Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run bool Instead of actually publishing to package managers, just print the publishing command. publish_tasks bool Define publishing tasks that can be executed manually as well as workflows. release_branches typing.Mapping[projen.release.BranchOptions] Defines additional release branches. release_every_commit bool Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue bool Create a github issue on every failed publishing task. release_failure_issue_label str The label to apply to issues indicating publish failures. release_schedule str CRON schedule to trigger new releases. release_tag_prefix str Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. release_trigger projen.release.ReleaseTrigger The release trigger to use. release_workflow_name str The name of the default release workflow. release_workflow_setup_steps typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options typing.Mapping[typing.Any] Custom configuration used when creating changelog with standard-version package. workflow_container_image str Container image to use for GitHub workflows. workflow_runs_on typing.List[str] Github Runner selection labels. default_release_branch str The name of the main release branch. artifacts_directory str A directory which will contain build artifacts. auto_approve_upgrades bool Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). build_workflow bool Define a GitHub workflow for building PRs. build_workflow_triggers projen.github.workflows.Triggers Build workflow triggers. bundler_options projen.javascript.BundlerOptions Options for Bundler . code_cov bool Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret str Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner str License copyright owner. copyright_period str The copyright years to put in the LICENSE file. dependabot bool Use dependabot to handle dependency upgrades. dependabot_options projen.github.DependabotOptions Options for dependabot. deps_upgrade bool Use github workflows to handle dependency upgrades. deps_upgrade_options projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore typing.List[str] Additional entries to .gitignore. jest bool Setup jest unit tests. jest_options projen.javascript.JestOptions Jest options. mutable_build bool Automatically update files modified during builds to pull-request branches. npmignore typing.List[str] Additional entries to .npmignore. npmignore_enabled bool Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package bool Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier bool Setup prettier. prettier_options projen.javascript.PrettierOptions Prettier options. projen_dev_dependency bool Indicates of \"projen\" should be installed as a devDependency. projenrc_js bool Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options projen.javascript.ProjenrcOptions Options for .projenrc.js. projen_version str Version of projen to install. pull_request_template bool Include a GitHub pull request template. pull_request_template_contents typing.List[str] The contents of the pull request template. release bool Add release management to this project. release_to_npm bool Automatically release to npm when new versions are introduced. release_workflow bool DEPRECATED: renamed to release . workflow_bootstrap_steps typing.List[projen.github.workflows.JobStep] Workflow steps to use in order to bootstrap this repo. workflow_git_identity projen.github.GitIdentity The git identity to use in workflows. workflow_node_version str The node version to use in GitHub workflows. disable_tsconfig bool Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen bool Docgen by Typedoc. docs_directory str Docs directory. entrypoint_types str The .d.ts file that includes the type declarations for this module. eslint bool Setup eslint. eslint_options projen.javascript.EslintOptions Eslint options. libdir str Typescript artifacts output directory. projenrc_ts bool Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code bool Generate one-time sample in src/ and test/ if there are no files there. srcdir str Typescript sources directory. testdir str Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfig_dev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file str The name of the development tsconfig.json file. typescript_version str TypeScript version to use. client_languages typing.List[ ClientLanguage ] The list of languages for which clients will be generated. api_src_dir str The directory in which the api generated code will reside, relative to the project srcdir. documentation_formats typing.List[ DocumentationFormat ] Formats to generate documentation in. force_generate_code_and_docs bool Force to generate code and docs even if there were no changes in spec. generated_code_dir str The directory in which generated client code will be generated, relative to the outdir of this project. java_client_options projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsed_spec_file_name str The name of the output parsed OpenAPI specification file. python_client_options projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). typescript_client_options projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. spec_file str The path to the OpenAPI specification file, relative to the project source directory (srcdir). name Required name : str Type: str Default: $BASEDIR This is the name of your project. commit_generated Optional commit_generated : bool Type: bool Default: true Whether to commit the managed files by default. git_options Optional git_options : GitOptions Type: projen.GitOptions Configuration options for git. logging Optional logging : LoggerOptions Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional outdir : str Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional parent : Project Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional projen_command : str Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional projenrc_json : bool Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional projenrc_json_options : ProjenrcOptions Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional renovatebot : bool Type: bool Default: false Use renovatebot to handle dependency upgrades. renovatebot_options Optional renovatebot_options : RenovatebotOptions Type: projen.RenovatebotOptions Default: default options Options for renovatebot. auto_approve_options Optional auto_approve_options : AutoApproveOptions Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge Optional auto_merge : bool Type: bool Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. auto_merge_options Optional auto_merge_options : AutoMergeOptions Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional clobber : bool Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional dev_container : bool Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional github : bool Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional github_options : GitHubOptions Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional gitpod : bool Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead mergify : bool Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead mergify_options : MergifyOptions Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level project_type : ProjectType Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_credentials Optional projen_credentials : GithubCredentials Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projen_token_secret ~~ Optional Deprecated: use projenCredentials projen_token_secret : str Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional readme : SampleReadmeProps Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional stale : bool Type: bool Default: false Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional stale_options : StaleOptions Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional vscode : bool Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allow_library_dependencies Optional allow_library_dependencies : bool Type: bool Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. author_email Optional author_email : str Type: str Author's e-mail. author_name Optional author_name : str Type: str Author's name. author_organization Optional author_organization : bool Type: bool Is the author an organization. author_url Optional author_url : str Type: str Author's URL / Website. auto_detect_bin Optional auto_detect_bin : bool Type: bool Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional bin : typing . Mapping [ str ] Type: typing.Mapping[str] Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugs_email Optional bugs_email : str Type: str The email address to which issues should be reported. bugs_url Optional bugs_url : str Type: str The url to your project's issue tracker. bundled_deps Optional bundled_deps : typing . List [ str ] Type: typing.List[str] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. code_artifact_options Optional code_artifact_options : CodeArtifactOptions Type: projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional deps : typing . List [ str ] Type: typing.List[str] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'express' , 'lodash' , 'foo@^2' ] description Optional description : str Type: str The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description dev_deps Optional dev_deps : typing . List [ str ] Type: typing.List[str] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'typescript' , '@types/express' ] entrypoint Optional entrypoint : str Type: str Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional homepage : str Type: str Package's Homepage / Website. keywords Optional keywords : typing . List [ str ] Type: typing.List[str] Keywords to include in package.json . license Optional license : str Type: str Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional licensed : bool Type: bool Default: true Indicates if a license should be added. max_node_version Optional max_node_version : str Type: str Default: no max Minimum node.js version to require via engines (inclusive). min_node_version Optional min_node_version : str Type: str Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npm_access Optional npm_access : NpmAccess Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npm_registry ~~ Optional Deprecated: use npmRegistryUrl instead npm_registry : str Type: str The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npm_registry_url Optional npm_registry_url : str Type: str Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npm_token_secret Optional npm_token_secret : str Type: str Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. package_manager Optional package_manager : NodePackageManager Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. package_name Optional package_name : str Type: str Default: defaults to project name The \"name\" in package.json. peer_dependency_options Optional peer_dependency_options : PeerDependencyOptions Type: projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps Optional peer_deps : typing . List [ str ] Type: typing.List[str] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. pnpm_version Optional pnpm_version : str Type: str Default: \"7\" The version of PNPM to use if using PNPM as a package manager. repository Optional repository : str Type: str The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repository_directory Optional repository_directory : str Type: str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scoped_packages_options Optional scoped_packages_options : typing . List [ ScopedPackagesOptions ] Type: typing.List[projen.javascript.ScopedPackagesOptions] Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional scripts : typing . Mapping [ str ] Type: typing.Mapping[str] Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional stability : str Type: str Package's Stability. jsii_release_version Optional jsii_release_version : str Type: str Default: \"latest\" Version requirement of publib which is used to publish modules to npm. major_version Optional major_version : typing . Union [ int , float ] Type: typing.Union[int, float] Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. min_major_version Optional min_major_version : typing . Union [ int , float ] Type: typing.Union[int, float] Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npm_dist_tag Optional npm_dist_tag : str Type: str Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. post_build_steps Optional post_build_steps : typing . List [ JobStep ] Type: typing.List[projen.github.workflows.JobStep] Default: [] Steps to execute after build as part of the release workflow. prerelease Optional prerelease : str Type: str Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run Optional publish_dry_run : bool Type: bool Default: false Instead of actually publishing to package managers, just print the publishing command. publish_tasks Optional publish_tasks : bool Type: bool Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. release_branches Optional release_branches : typing . Mapping [ BranchOptions ] Type: typing.Mapping[projen.release.BranchOptions] Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ release_every_commit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead release_every_commit : bool Type: bool Default: true Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue Optional release_failure_issue : bool Type: bool Default: false Create a github issue on every failed publishing task. release_failure_issue_label Optional release_failure_issue_label : str Type: str Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ release_schedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead release_schedule : str Type: str Default: no scheduled releases CRON schedule to trigger new releases. release_tag_prefix Optional release_tag_prefix : str Type: str Default: \"v\" Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. release_trigger Optional release_trigger : ReleaseTrigger Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. release_workflow_name Optional release_workflow_name : str Type: str Default: \"Release\" The name of the default release workflow. release_workflow_setup_steps Optional release_workflow_setup_steps : typing . List [ JobStep ] Type: typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options Optional versionrc_options : typing . Mapping [ typing . Any ] Type: typing.Mapping[typing.Any] Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflow_container_image Optional workflow_container_image : str Type: str Default: default image Container image to use for GitHub workflows. workflow_runs_on Optional workflow_runs_on : typing . List [ str ] Type: typing.List[str] Default: [\"ubuntu-latest\"] Github Runner selection labels. default_release_branch Required default_release_branch : str Type: str Default: \"main\" The name of the main release branch. artifacts_directory Optional artifacts_directory : str Type: str Default: \"dist\" A directory which will contain build artifacts. auto_approve_upgrades Optional auto_approve_upgrades : bool Type: bool Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. build_workflow Optional build_workflow : bool Type: bool Default: true if not a subproject Define a GitHub workflow for building PRs. build_workflow_triggers Optional build_workflow_triggers : Triggers Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundler_options Optional bundler_options : BundlerOptions Type: projen.javascript.BundlerOptions Options for Bundler . code_cov Optional code_cov : bool Type: bool Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret Optional code_cov_token_secret : str Type: str Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner Optional copyright_owner : str Type: str Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyright_period Optional copyright_period : str Type: str Default: current year The copyright years to put in the LICENSE file. dependabot Optional dependabot : bool Type: bool Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabot_options Optional dependabot_options : DependabotOptions Type: projen.github.DependabotOptions Default: default options Options for dependabot. deps_upgrade Optional deps_upgrade : bool Type: bool Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . deps_upgrade_options Optional deps_upgrade_options : UpgradeDependenciesOptions Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional gitignore : typing . List [ str ] Type: typing.List[str] Additional entries to .gitignore. jest Optional jest : bool Type: bool Default: true Setup jest unit tests. jest_options Optional jest_options : JestOptions Type: projen.javascript.JestOptions Default: default options Jest options. mutable_build Optional mutable_build : bool Type: bool Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore npmignore : typing . List [ str ] Type: typing.List[str] Additional entries to .npmignore. npmignore_enabled Optional npmignore_enabled : bool Type: bool Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional package : bool Type: bool Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional prettier : bool Type: bool Default: false Setup prettier. prettier_options Optional prettier_options : PrettierOptions Type: projen.javascript.PrettierOptions Default: default options Prettier options. projen_dev_dependency Optional projen_dev_dependency : bool Type: bool Default: true Indicates of \"projen\" should be installed as a devDependency. projenrc_js Optional projenrc_js : bool Type: bool Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options Optional projenrc_js_options : ProjenrcOptions Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projen_version Optional projen_version : str Type: str Default: Defaults to the latest version. Version of projen to install. pull_request_template Optional pull_request_template : bool Type: bool Default: true Include a GitHub pull request template. pull_request_template_contents Optional pull_request_template_contents : typing . List [ str ] Type: typing.List[str] Default: default content The contents of the pull request template. release Optional release : bool Type: bool Default: true (false for subprojects) Add release management to this project. release_to_npm Optional release_to_npm : bool Type: bool Default: false Automatically release to npm when new versions are introduced. ~~ release_workflow ~~ Optional Deprecated: see release . release_workflow : bool Type: bool Default: true if not a subproject DEPRECATED: renamed to release . workflow_bootstrap_steps Optional workflow_bootstrap_steps : typing . List [ JobStep ] Type: typing.List[projen.github.workflows.JobStep] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflow_git_identity Optional workflow_git_identity : GitIdentity Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflow_node_version Optional workflow_node_version : str Type: str Default: same as minNodeVersion The node version to use in GitHub workflows. disable_tsconfig Optional disable_tsconfig : bool Type: bool Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional docgen : bool Type: bool Default: false Docgen by Typedoc. docs_directory Optional docs_directory : str Type: str Default: \"docs\" Docs directory. entrypoint_types Optional entrypoint_types : str Type: str Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional eslint : bool Type: bool Default: true Setup eslint. eslint_options Optional eslint_options : EslintOptions Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional libdir : str Type: str Default: \"lib\" Typescript artifacts output directory. projenrc_ts Optional projenrc_ts : bool Type: bool Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options Optional projenrc_ts_options : ProjenrcOptions Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code Optional sample_code : bool Type: bool Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional srcdir : str Type: str Default: \"src\" Typescript sources directory. testdir Optional testdir : str Type: str Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional tsconfig : TypescriptConfigOptions Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfig_dev Optional tsconfig_dev : TypescriptConfigOptions Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file Optional tsconfig_dev_file : str Type: str Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescript_version Optional typescript_version : str Type: str Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). client_languages Required client_languages : typing . List [ ClientLanguage ] Type: typing.List[ ClientLanguage ] The list of languages for which clients will be generated. A typescript client will always be generated. api_src_dir Optional api_src_dir : str Type: str The directory in which the api generated code will reside, relative to the project srcdir. documentation_formats Optional documentation_formats : typing . List [ DocumentationFormat ] Type: typing.List[ DocumentationFormat ] Formats to generate documentation in. force_generate_code_and_docs Optional force_generate_code_and_docs : bool Type: bool Default: \"false\" Force to generate code and docs even if there were no changes in spec. generated_code_dir Optional generated_code_dir : str Type: str Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. java_client_options Optional java_client_options : JavaProjectOptions Type: projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsed_spec_file_name Optional parsed_spec_file_name : str Type: str Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. python_client_options Optional python_client_options : PythonProjectOptions Type: projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. typescript_client_options Optional typescript_client_options : TypeScriptProjectOptions Type: projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. spec_file Optional spec_file : str Type: str Default: \"spec/spec.yaml\" The path to the OpenAPI specification file, relative to the project source directory (srcdir). OpenApiGatewayWebAclOptions Configuration for the Web ACL associated with the API. Initializer import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . OpenApiGatewayWebAclOptions ( cidr_allow_list : CidrAllowList = None , disable : bool = None , managed_rules : typing . List [ ManagedRule ] = None ) Properties Name Type Description cidr_allow_list CidrAllowList List of cidr ranges to allow. disable bool If set to true, no WebACL will be associated with the API. managed_rules typing.List[ ManagedRule ] List of managed rules to apply to the web acl. cidr_allow_list Optional cidr_allow_list : CidrAllowList Type: CidrAllowList Default: undefined List of cidr ranges to allow. disable Optional disable : bool Type: bool Default: false If set to true, no WebACL will be associated with the API. You can also use this option if you would like to create your own WebACL and associate it yourself. managed_rules Optional managed_rules : typing . List [ ManagedRule ] Type: typing.List[ ManagedRule ] Default: [{ vendor: \"AWS\", name: \"AWSManagedRulesCommonRuleSet\" }] List of managed rules to apply to the web acl. OpenApiIntegration Defines an integration for an individual API operation. Initializer import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . OpenApiIntegration ( integration : Integration , authorizer : Authorizer = None ) Properties Name Type Description integration Integration The lambda function to service the api operation. authorizer Authorizer The authorizer to use for this api operation (overrides the default). integration Required integration : Integration Type: Integration The lambda function to service the api operation. authorizer Optional authorizer : Authorizer Type: Authorizer The authorizer to use for this api operation (overrides the default). OpenApiOptions Options required alongside an Open API specification to create API Gateway resources. Initializer import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . OpenApiOptions ( integrations : typing . Mapping [ OpenApiIntegration ], operation_lookup : typing . Mapping [ MethodAndPath ], cors_options : CorsOptions = None , default_authorizer : Authorizer = None ) Properties Name Type Description integrations typing.Mapping[ OpenApiIntegration ] A mapping of API operation to its integration. operation_lookup typing.Mapping[ MethodAndPath ] Details about each operation. cors_options aws_cdk.aws_apigateway.CorsOptions Cross Origin Resource Sharing options for the API. default_authorizer Authorizer The default authorizer to use for your api. integrations Required integrations : typing . Mapping [ OpenApiIntegration ] Type: typing.Mapping[ OpenApiIntegration ] A mapping of API operation to its integration. operation_lookup Required operation_lookup : typing . Mapping [ MethodAndPath ] Type: typing.Mapping[ MethodAndPath ] Details about each operation. cors_options Optional cors_options : CorsOptions Type: aws_cdk.aws_apigateway.CorsOptions Cross Origin Resource Sharing options for the API. default_authorizer Optional default_authorizer : Authorizer Type: Authorizer The default authorizer to use for your api. When omitted, no default authorizer is used. Authorizers specified at the integration level will override this for that operation. SmithyApiGatewayJavaProjectOptions Configuration for the SmithyApiGatewayJavaProject. Initializer import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . SmithyApiGatewayJavaProjectOptions ( name : str , commit_generated : bool = None , git_options : GitOptions = None , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , renovatebot : bool = None , renovatebot_options : RenovatebotOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge : bool = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_credentials : GithubCredentials = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , artifact_id : str , group_id : str , version : str , description : str = None , packaging : str = None , url : str = None , compile_options : MavenCompileOptions = None , deps : typing . List [ str ] = None , distdir : str = None , junit : bool = None , junit_options : JunitOptions = None , packaging_options : MavenPackagingOptions = None , projenrc_java : bool = None , projenrc_java_options : ProjenrcOptions = None , test_deps : typing . List [ str ] = None , sample : bool = None , sample_java_package : str = None , client_languages : typing . List [ ClientLanguage ], api_src_dir : str = None , documentation_formats : typing . List [ DocumentationFormat ] = None , force_generate_code_and_docs : bool = None , generated_code_dir : str = None , java_client_options : JavaProjectOptions = None , parsed_spec_file_name : str = None , python_client_options : PythonProjectOptions = None , typescript_client_options : TypeScriptProjectOptions = None , service_name : SmithyServiceName , ignore_gradle_wrapper : bool = None , ignore_smithy_build_output : bool = None , model_dir : str = None , smithy_build_options : SmithyBuildOptions = None ) Properties Name Type Description name str This is the name of your project. commit_generated bool Whether to commit the managed files by default. git_options projen.GitOptions Configuration options for git. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. renovatebot bool Use renovatebot to handle dependency upgrades. renovatebot_options projen.RenovatebotOptions Options for renovatebot. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge bool Enable automatic merging on GitHub. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_credentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. artifact_id str The artifactId is generally the name that the project is known by. group_id str This is generally unique amongst an organization or a project. version str This is the last piece of the naming puzzle. description str Description of a project is always good. packaging str Project packaging format. url str The URL, like the name, is not required. compile_options projen.java.MavenCompileOptions Compile options. deps typing.List[str] List of runtime dependencies for this project. distdir str Final artifact output directory. junit bool Include junit tests. junit_options projen.java.JunitOptions junit options. packaging_options projen.java.MavenPackagingOptions Packaging options. projenrc_java bool Use projenrc in java. projenrc_java_options projen.java.ProjenrcOptions Options related to projenrc in java. test_deps typing.List[str] List of test dependencies for this project. sample bool Include sample code and test if the relevant directories don't exist. sample_java_package str The java package to use for the code sample. client_languages typing.List[ ClientLanguage ] The list of languages for which clients will be generated. api_src_dir str The directory in which the api generated code will reside, relative to the project srcdir. documentation_formats typing.List[ DocumentationFormat ] Formats to generate documentation in. force_generate_code_and_docs bool Force to generate code and docs even if there were no changes in spec. generated_code_dir str The directory in which generated client code will be generated, relative to the outdir of this project. java_client_options projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsed_spec_file_name str The name of the output parsed OpenAPI specification file. python_client_options projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). typescript_client_options projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. service_name SmithyServiceName The name of the Smithy service from your model which will be targeted for deployment and client generation. ignore_gradle_wrapper bool Set to false if you would like to check in your gradle wrapper. ignore_smithy_build_output bool Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. model_dir str The path to the Smithy model directory, relative to the project source directory (srcdir). smithy_build_options SmithyBuildOptions Any additional properties you'd like to add your smithy-build.json. The smithy-build.json will automatically include the \"openapi\" plugin, but you can add extra configuration for that via this option if you like. name Required name : str Type: str Default: $BASEDIR This is the name of your project. commit_generated Optional commit_generated : bool Type: bool Default: true Whether to commit the managed files by default. git_options Optional git_options : GitOptions Type: projen.GitOptions Configuration options for git. logging Optional logging : LoggerOptions Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional outdir : str Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional parent : Project Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional projen_command : str Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional projenrc_json : bool Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional projenrc_json_options : ProjenrcOptions Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional renovatebot : bool Type: bool Default: false Use renovatebot to handle dependency upgrades. renovatebot_options Optional renovatebot_options : RenovatebotOptions Type: projen.RenovatebotOptions Default: default options Options for renovatebot. auto_approve_options Optional auto_approve_options : AutoApproveOptions Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge Optional auto_merge : bool Type: bool Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. auto_merge_options Optional auto_merge_options : AutoMergeOptions Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional clobber : bool Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional dev_container : bool Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional github : bool Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional github_options : GitHubOptions Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional gitpod : bool Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead mergify : bool Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead mergify_options : MergifyOptions Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level project_type : ProjectType Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_credentials Optional projen_credentials : GithubCredentials Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projen_token_secret ~~ Optional Deprecated: use projenCredentials projen_token_secret : str Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional readme : SampleReadmeProps Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional stale : bool Type: bool Default: false Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional stale_options : StaleOptions Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional vscode : bool Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. artifact_id Required artifact_id : str Type: str Default: \"my-app\" The artifactId is generally the name that the project is known by. Although the groupId is important, people within the group will rarely mention the groupId in discussion (they are often all be the same ID, such as the MojoHaus project groupId: org.codehaus.mojo). It, along with the groupId, creates a key that separates this project from every other project in the world (at least, it should :) ). Along with the groupId, the artifactId fully defines the artifact's living quarters within the repository. In the case of the above project, my-project lives in $M2_REPO/org/codehaus/mojo/my-project. group_id Required group_id : str Type: str Default: \"org.acme\" This is generally unique amongst an organization or a project. For example, all core Maven artifacts do (well, should) live under the groupId org.apache.maven. Group ID's do not necessarily use the dot notation, for example, the junit project. Note that the dot-notated groupId does not have to correspond to the package structure that the project contains. It is, however, a good practice to follow. When stored within a repository, the group acts much like the Java packaging structure does in an operating system. The dots are replaced by OS specific directory separators (such as '/' in Unix) which becomes a relative directory structure from the base repository. In the example given, the org.codehaus.mojo group lives within the directory $M2_REPO/org/codehaus/mojo. version Required version : str Type: str Default: \"0.1.0\" This is the last piece of the naming puzzle. groupId:artifactId denotes a single project but they cannot delineate which incarnation of that project we are talking about. Do we want the junit:junit of 2018 (version 4.12), or of 2007 (version 3.8.2)? In short: code changes, those changes should be versioned, and this element keeps those versions in line. It is also used within an artifact's repository to separate versions from each other. my-project version 1.0 files live in the directory structure $M2_REPO/org/codehaus/mojo/my-project/1.0. description Optional description : str Type: str Default: undefined Description of a project is always good. Although this should not replace formal documentation, a quick comment to any readers of the POM is always helpful. packaging Optional packaging : str Type: str Default: \"jar\" Project packaging format. url Optional url : str Type: str Default: undefined The URL, like the name, is not required. This is a nice gesture for projects users, however, so that they know where the project lives. compile_options Optional compile_options : MavenCompileOptions Type: projen.java.MavenCompileOptions Default: defaults Compile options. deps Optional deps : typing . List [ str ] Type: typing.List[str] Default: [] List of runtime dependencies for this project. Dependencies use the format: <groupId>/<artifactId>@<semver> Additional dependencies can be added via project.addDependency() . distdir Optional distdir : str Type: str Default: \"dist/java\" Final artifact output directory. junit Optional junit : bool Type: bool Default: true Include junit tests. junit_options Optional junit_options : JunitOptions Type: projen.java.JunitOptions Default: defaults junit options. packaging_options Optional packaging_options : MavenPackagingOptions Type: projen.java.MavenPackagingOptions Default: defaults Packaging options. projenrc_java Optional projenrc_java : bool Type: bool Default: true Use projenrc in java. This will install projen as a java dependency and will add a synth task which will compile & execute main() from src/main/java/projenrc.java . projenrc_java_options Optional projenrc_java_options : ProjenrcOptions Type: projen.java.ProjenrcOptions Default: default options Options related to projenrc in java. test_deps Optional test_deps : typing . List [ str ] Type: typing.List[str] Default: [] List of test dependencies for this project. Dependencies use the format: <groupId>/<artifactId>@<semver> Additional dependencies can be added via project.addTestDependency() . sample Optional sample : bool Type: bool Default: true Include sample code and test if the relevant directories don't exist. sample_java_package Optional sample_java_package : str Type: str Default: \"org.acme\" The java package to use for the code sample. client_languages Required client_languages : typing . List [ ClientLanguage ] Type: typing.List[ ClientLanguage ] The list of languages for which clients will be generated. A typescript client will always be generated. api_src_dir Optional api_src_dir : str Type: str The directory in which the api generated code will reside, relative to the project srcdir. documentation_formats Optional documentation_formats : typing . List [ DocumentationFormat ] Type: typing.List[ DocumentationFormat ] Formats to generate documentation in. force_generate_code_and_docs Optional force_generate_code_and_docs : bool Type: bool Default: \"false\" Force to generate code and docs even if there were no changes in spec. generated_code_dir Optional generated_code_dir : str Type: str Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. java_client_options Optional java_client_options : JavaProjectOptions Type: projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsed_spec_file_name Optional parsed_spec_file_name : str Type: str Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. python_client_options Optional python_client_options : PythonProjectOptions Type: projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. typescript_client_options Optional typescript_client_options : TypeScriptProjectOptions Type: projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. service_name Required service_name : SmithyServiceName Type: SmithyServiceName Default: \"example.hello#Hello\" The name of the Smithy service from your model which will be targeted for deployment and client generation. On initial project synthesis this service name will be written to the sample \"hello world\" model. If you change this value after initial synthesis you will need to manually update your Smithy models to match, unless you delete the \"model\" directory. Likewise, if you change the namespace or service name in your Smithy models you will need to update this value to ensure your service can be found. ignore_gradle_wrapper Optional ignore_gradle_wrapper : bool Type: bool Default: true Set to false if you would like to check in your gradle wrapper. Do so if you would like to use a different version of gradle to the one provided by default ignore_smithy_build_output Optional ignore_smithy_build_output : bool Type: bool Default: true Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. model_dir Optional model_dir : str Type: str Default: \"model\" The path to the Smithy model directory, relative to the project source directory (srcdir). smithy_build_options Optional smithy_build_options : SmithyBuildOptions Type: SmithyBuildOptions Any additional properties you'd like to add your smithy-build.json. The smithy-build.json will automatically include the \"openapi\" plugin, but you can add extra configuration for that via this option if you like. https://awslabs.github.io/smithy/2.0/guides/converting-to-openapi.html#openapi-configuration-settings SmithyApiGatewayProjectOptions Options common to all smithy api gateway projects. Initializer import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . SmithyApiGatewayProjectOptions ( client_languages : typing . List [ ClientLanguage ], api_src_dir : str = None , documentation_formats : typing . List [ DocumentationFormat ] = None , force_generate_code_and_docs : bool = None , generated_code_dir : str = None , java_client_options : JavaProjectOptions = None , parsed_spec_file_name : str = None , python_client_options : PythonProjectOptions = None , typescript_client_options : TypeScriptProjectOptions = None , service_name : SmithyServiceName , ignore_gradle_wrapper : bool = None , ignore_smithy_build_output : bool = None , model_dir : str = None , smithy_build_options : SmithyBuildOptions = None ) Properties Name Type Description client_languages typing.List[ ClientLanguage ] The list of languages for which clients will be generated. api_src_dir str The directory in which the api generated code will reside, relative to the project srcdir. documentation_formats typing.List[ DocumentationFormat ] Formats to generate documentation in. force_generate_code_and_docs bool Force to generate code and docs even if there were no changes in spec. generated_code_dir str The directory in which generated client code will be generated, relative to the outdir of this project. java_client_options projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsed_spec_file_name str The name of the output parsed OpenAPI specification file. python_client_options projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). typescript_client_options projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. service_name SmithyServiceName The name of the Smithy service from your model which will be targeted for deployment and client generation. ignore_gradle_wrapper bool Set to false if you would like to check in your gradle wrapper. ignore_smithy_build_output bool Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. model_dir str The path to the Smithy model directory, relative to the project source directory (srcdir). smithy_build_options SmithyBuildOptions Any additional properties you'd like to add your smithy-build.json. The smithy-build.json will automatically include the \"openapi\" plugin, but you can add extra configuration for that via this option if you like. client_languages Required client_languages : typing . List [ ClientLanguage ] Type: typing.List[ ClientLanguage ] The list of languages for which clients will be generated. A typescript client will always be generated. api_src_dir Optional api_src_dir : str Type: str The directory in which the api generated code will reside, relative to the project srcdir. documentation_formats Optional documentation_formats : typing . List [ DocumentationFormat ] Type: typing.List[ DocumentationFormat ] Formats to generate documentation in. force_generate_code_and_docs Optional force_generate_code_and_docs : bool Type: bool Default: \"false\" Force to generate code and docs even if there were no changes in spec. generated_code_dir Optional generated_code_dir : str Type: str Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. java_client_options Optional java_client_options : JavaProjectOptions Type: projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsed_spec_file_name Optional parsed_spec_file_name : str Type: str Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. python_client_options Optional python_client_options : PythonProjectOptions Type: projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. typescript_client_options Optional typescript_client_options : TypeScriptProjectOptions Type: projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. service_name Required service_name : SmithyServiceName Type: SmithyServiceName Default: \"example.hello#Hello\" The name of the Smithy service from your model which will be targeted for deployment and client generation. On initial project synthesis this service name will be written to the sample \"hello world\" model. If you change this value after initial synthesis you will need to manually update your Smithy models to match, unless you delete the \"model\" directory. Likewise, if you change the namespace or service name in your Smithy models you will need to update this value to ensure your service can be found. ignore_gradle_wrapper Optional ignore_gradle_wrapper : bool Type: bool Default: true Set to false if you would like to check in your gradle wrapper. Do so if you would like to use a different version of gradle to the one provided by default ignore_smithy_build_output Optional ignore_smithy_build_output : bool Type: bool Default: true Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. model_dir Optional model_dir : str Type: str Default: \"model\" The path to the Smithy model directory, relative to the project source directory (srcdir). smithy_build_options Optional smithy_build_options : SmithyBuildOptions Type: SmithyBuildOptions Any additional properties you'd like to add your smithy-build.json. The smithy-build.json will automatically include the \"openapi\" plugin, but you can add extra configuration for that via this option if you like. https://awslabs.github.io/smithy/2.0/guides/converting-to-openapi.html#openapi-configuration-settings SmithyApiGatewayPythonProjectOptions Configuration for the SmithyApiGatewayPythonProject. Initializer import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . SmithyApiGatewayPythonProjectOptions ( name : str , commit_generated : bool = None , git_options : GitOptions = None , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , renovatebot : bool = None , renovatebot_options : RenovatebotOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge : bool = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_credentials : GithubCredentials = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , author_email : str , author_name : str , version : str , classifiers : typing . List [ str ] = None , description : str = None , homepage : str = None , license : str = None , package_name : str = None , poetry_options : PoetryPyprojectOptionsWithoutDeps = None , setup_config : typing . Mapping [ typing . Any ] = None , module_name : str , deps : typing . List [ str ] = None , dev_deps : typing . List [ str ] = None , pip : bool = None , poetry : bool = None , projenrc_js : bool = None , projenrc_js_options : ProjenrcOptions = None , projenrc_python : bool = None , projenrc_python_options : ProjenrcOptions = None , pytest : bool = None , pytest_options : PytestOptions = None , sample : bool = None , setuptools : bool = None , venv : bool = None , venv_options : VenvOptions = None , client_languages : typing . List [ ClientLanguage ], api_src_dir : str = None , documentation_formats : typing . List [ DocumentationFormat ] = None , force_generate_code_and_docs : bool = None , generated_code_dir : str = None , java_client_options : JavaProjectOptions = None , parsed_spec_file_name : str = None , python_client_options : PythonProjectOptions = None , typescript_client_options : TypeScriptProjectOptions = None , service_name : SmithyServiceName , ignore_gradle_wrapper : bool = None , ignore_smithy_build_output : bool = None , model_dir : str = None , smithy_build_options : SmithyBuildOptions = None ) Properties Name Type Description name str This is the name of your project. commit_generated bool Whether to commit the managed files by default. git_options projen.GitOptions Configuration options for git. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. renovatebot bool Use renovatebot to handle dependency upgrades. renovatebot_options projen.RenovatebotOptions Options for renovatebot. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge bool Enable automatic merging on GitHub. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_credentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. author_email str Author's e-mail. author_name str Author's name. version str Version of the package. classifiers typing.List[str] A list of PyPI trove classifiers that describe the project. description str A short description of the package. homepage str A URL to the website of the project. license str License of this package as an SPDX identifier. package_name str Package name. poetry_options projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setup_config typing.Mapping[typing.Any] Additional fields to pass in the setup() function if using setuptools. module_name str Name of the python package as used in imports and filenames. deps typing.List[str] List of runtime dependencies for this project. dev_deps typing.List[str] List of dev dependencies for this project. pip bool Use pip with a requirements.txt file to track project dependencies. poetry bool Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrc_js bool Use projenrc in javascript. projenrc_js_options projen.javascript.ProjenrcOptions Options related to projenrc in JavaScript. projenrc_python bool Use projenrc in Python. projenrc_python_options projen.python.ProjenrcOptions Options related to projenrc in python. pytest bool Include pytest tests. pytest_options projen.python.PytestOptions pytest options. sample bool Include sample code and test if the relevant directories don't exist. setuptools bool Use setuptools with a setup.py script for packaging and publishing. venv bool Use venv to manage a virtual environment for installing dependencies inside. venv_options projen.python.VenvOptions Venv options. client_languages typing.List[ ClientLanguage ] The list of languages for which clients will be generated. api_src_dir str The directory in which the api generated code will reside, relative to the project srcdir. documentation_formats typing.List[ DocumentationFormat ] Formats to generate documentation in. force_generate_code_and_docs bool Force to generate code and docs even if there were no changes in spec. generated_code_dir str The directory in which generated client code will be generated, relative to the outdir of this project. java_client_options projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsed_spec_file_name str The name of the output parsed OpenAPI specification file. python_client_options projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). typescript_client_options projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. service_name SmithyServiceName The name of the Smithy service from your model which will be targeted for deployment and client generation. ignore_gradle_wrapper bool Set to false if you would like to check in your gradle wrapper. ignore_smithy_build_output bool Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. model_dir str The path to the Smithy model directory, relative to the project source directory (srcdir). smithy_build_options SmithyBuildOptions Any additional properties you'd like to add your smithy-build.json. The smithy-build.json will automatically include the \"openapi\" plugin, but you can add extra configuration for that via this option if you like. name Required name : str Type: str Default: $BASEDIR This is the name of your project. commit_generated Optional commit_generated : bool Type: bool Default: true Whether to commit the managed files by default. git_options Optional git_options : GitOptions Type: projen.GitOptions Configuration options for git. logging Optional logging : LoggerOptions Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional outdir : str Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional parent : Project Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional projen_command : str Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional projenrc_json : bool Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional projenrc_json_options : ProjenrcOptions Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional renovatebot : bool Type: bool Default: false Use renovatebot to handle dependency upgrades. renovatebot_options Optional renovatebot_options : RenovatebotOptions Type: projen.RenovatebotOptions Default: default options Options for renovatebot. auto_approve_options Optional auto_approve_options : AutoApproveOptions Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge Optional auto_merge : bool Type: bool Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. auto_merge_options Optional auto_merge_options : AutoMergeOptions Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional clobber : bool Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional dev_container : bool Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional github : bool Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional github_options : GitHubOptions Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional gitpod : bool Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead mergify : bool Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead mergify_options : MergifyOptions Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level project_type : ProjectType Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_credentials Optional projen_credentials : GithubCredentials Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projen_token_secret ~~ Optional Deprecated: use projenCredentials projen_token_secret : str Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional readme : SampleReadmeProps Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional stale : bool Type: bool Default: false Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional stale_options : StaleOptions Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional vscode : bool Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. author_email Required author_email : str Type: str Default: $GIT_USER_EMAIL Author's e-mail. author_name Required author_name : str Type: str Default: $GIT_USER_NAME Author's name. version Required version : str Type: str Default: \"0.1.0\" Version of the package. classifiers Optional classifiers : typing . List [ str ] Type: typing.List[str] A list of PyPI trove classifiers that describe the project. https://pypi.org/classifiers/ description Optional description : str Type: str A short description of the package. homepage Optional homepage : str Type: str A URL to the website of the project. license Optional license : str Type: str License of this package as an SPDX identifier. package_name Optional package_name : str Type: str Package name. poetry_options Optional poetry_options : PoetryPyprojectOptionsWithoutDeps Type: projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setup_config Optional setup_config : typing . Mapping [ typing . Any ] Type: typing.Mapping[typing.Any] Additional fields to pass in the setup() function if using setuptools. module_name Required module_name : str Type: str Default: $PYTHON_MODULE_NAME Name of the python package as used in imports and filenames. Must only consist of alphanumeric characters and underscores. deps Optional deps : typing . List [ str ] Type: typing.List[str] Default: [] List of runtime dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDependency() . dev_deps Optional dev_deps : typing . List [ str ] Type: typing.List[str] Default: [] List of dev dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDevDependency() . pip Optional pip : bool Type: bool Default: true, unless poetry is true, then false Use pip with a requirements.txt file to track project dependencies. poetry Optional poetry : bool Type: bool Default: false Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. This feature is incompatible with pip, setuptools, or venv. If you set this option to true , then pip, setuptools, and venv must be set to false . projenrc_js Optional projenrc_js : bool Type: bool Default: false Use projenrc in javascript. This will install projen as a JavaScript dependency and add a synth task which will run .projenrc.js . projenrc_js_options Optional projenrc_js_options : ProjenrcOptions Type: projen.javascript.ProjenrcOptions Default: default options Options related to projenrc in JavaScript. projenrc_python Optional projenrc_python : bool Type: bool Default: true Use projenrc in Python. This will install projen as a Python dependency and add a synth task which will run .projenrc.py . projenrc_python_options Optional projenrc_python_options : ProjenrcOptions Type: projen.python.ProjenrcOptions Default: default options Options related to projenrc in python. pytest Optional pytest : bool Type: bool Default: true Include pytest tests. pytest_options Optional pytest_options : PytestOptions Type: projen.python.PytestOptions Default: defaults pytest options. sample Optional sample : bool Type: bool Default: true Include sample code and test if the relevant directories don't exist. setuptools Optional setuptools : bool Type: bool Default: true, unless poetry is true, then false Use setuptools with a setup.py script for packaging and publishing. venv Optional venv : bool Type: bool Default: true, unless poetry is true, then false Use venv to manage a virtual environment for installing dependencies inside. venv_options Optional venv_options : VenvOptions Type: projen.python.VenvOptions Default: defaults Venv options. client_languages Required client_languages : typing . List [ ClientLanguage ] Type: typing.List[ ClientLanguage ] The list of languages for which clients will be generated. A typescript client will always be generated. api_src_dir Optional api_src_dir : str Type: str The directory in which the api generated code will reside, relative to the project srcdir. documentation_formats Optional documentation_formats : typing . List [ DocumentationFormat ] Type: typing.List[ DocumentationFormat ] Formats to generate documentation in. force_generate_code_and_docs Optional force_generate_code_and_docs : bool Type: bool Default: \"false\" Force to generate code and docs even if there were no changes in spec. generated_code_dir Optional generated_code_dir : str Type: str Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. java_client_options Optional java_client_options : JavaProjectOptions Type: projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsed_spec_file_name Optional parsed_spec_file_name : str Type: str Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. python_client_options Optional python_client_options : PythonProjectOptions Type: projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. typescript_client_options Optional typescript_client_options : TypeScriptProjectOptions Type: projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. service_name Required service_name : SmithyServiceName Type: SmithyServiceName Default: \"example.hello#Hello\" The name of the Smithy service from your model which will be targeted for deployment and client generation. On initial project synthesis this service name will be written to the sample \"hello world\" model. If you change this value after initial synthesis you will need to manually update your Smithy models to match, unless you delete the \"model\" directory. Likewise, if you change the namespace or service name in your Smithy models you will need to update this value to ensure your service can be found. ignore_gradle_wrapper Optional ignore_gradle_wrapper : bool Type: bool Default: true Set to false if you would like to check in your gradle wrapper. Do so if you would like to use a different version of gradle to the one provided by default ignore_smithy_build_output Optional ignore_smithy_build_output : bool Type: bool Default: true Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. model_dir Optional model_dir : str Type: str Default: \"model\" The path to the Smithy model directory, relative to the project source directory (srcdir). smithy_build_options Optional smithy_build_options : SmithyBuildOptions Type: SmithyBuildOptions Any additional properties you'd like to add your smithy-build.json. The smithy-build.json will automatically include the \"openapi\" plugin, but you can add extra configuration for that via this option if you like. https://awslabs.github.io/smithy/2.0/guides/converting-to-openapi.html#openapi-configuration-settings SmithyApiGatewayTsProjectOptions Configuration for the SmithyApiGatewayTsProject. Initializer import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . SmithyApiGatewayTsProjectOptions ( name : str , commit_generated : bool = None , git_options : GitOptions = None , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , renovatebot : bool = None , renovatebot_options : RenovatebotOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge : bool = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_credentials : GithubCredentials = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , allow_library_dependencies : bool = None , author_email : str = None , author_name : str = None , author_organization : bool = None , author_url : str = None , auto_detect_bin : bool = None , bin : typing . Mapping [ str ] = None , bugs_email : str = None , bugs_url : str = None , bundled_deps : typing . List [ str ] = None , code_artifact_options : CodeArtifactOptions = None , deps : typing . List [ str ] = None , description : str = None , dev_deps : typing . List [ str ] = None , entrypoint : str = None , homepage : str = None , keywords : typing . List [ str ] = None , license : str = None , licensed : bool = None , max_node_version : str = None , min_node_version : str = None , npm_access : NpmAccess = None , npm_registry : str = None , npm_registry_url : str = None , npm_token_secret : str = None , package_manager : NodePackageManager = None , package_name : str = None , peer_dependency_options : PeerDependencyOptions = None , peer_deps : typing . List [ str ] = None , pnpm_version : str = None , repository : str = None , repository_directory : str = None , scoped_packages_options : typing . List [ ScopedPackagesOptions ] = None , scripts : typing . Mapping [ str ] = None , stability : str = None , jsii_release_version : str = None , major_version : typing . Union [ int , float ] = None , min_major_version : typing . Union [ int , float ] = None , npm_dist_tag : str = None , post_build_steps : typing . List [ JobStep ] = None , prerelease : str = None , publish_dry_run : bool = None , publish_tasks : bool = None , release_branches : typing . Mapping [ BranchOptions ] = None , release_every_commit : bool = None , release_failure_issue : bool = None , release_failure_issue_label : str = None , release_schedule : str = None , release_tag_prefix : str = None , release_trigger : ReleaseTrigger = None , release_workflow_name : str = None , release_workflow_setup_steps : typing . List [ JobStep ] = None , versionrc_options : typing . Mapping [ typing . Any ] = None , workflow_container_image : str = None , workflow_runs_on : typing . List [ str ] = None , default_release_branch : str , artifacts_directory : str = None , auto_approve_upgrades : bool = None , build_workflow : bool = None , build_workflow_triggers : Triggers = None , bundler_options : BundlerOptions = None , code_cov : bool = None , code_cov_token_secret : str = None , copyright_owner : str = None , copyright_period : str = None , dependabot : bool = None , dependabot_options : DependabotOptions = None , deps_upgrade : bool = None , deps_upgrade_options : UpgradeDependenciesOptions = None , gitignore : typing . List [ str ] = None , jest : bool = None , jest_options : JestOptions = None , mutable_build : bool = None , npmignore : typing . List [ str ] = None , npmignore_enabled : bool = None , package : bool = None , prettier : bool = None , prettier_options : PrettierOptions = None , projen_dev_dependency : bool = None , projenrc_js : bool = None , projenrc_js_options : ProjenrcOptions = None , projen_version : str = None , pull_request_template : bool = None , pull_request_template_contents : typing . List [ str ] = None , release : bool = None , release_to_npm : bool = None , release_workflow : bool = None , workflow_bootstrap_steps : typing . List [ JobStep ] = None , workflow_git_identity : GitIdentity = None , workflow_node_version : str = None , disable_tsconfig : bool = None , docgen : bool = None , docs_directory : str = None , entrypoint_types : str = None , eslint : bool = None , eslint_options : EslintOptions = None , libdir : str = None , projenrc_ts : bool = None , projenrc_ts_options : ProjenrcOptions = None , sample_code : bool = None , srcdir : str = None , testdir : str = None , tsconfig : TypescriptConfigOptions = None , tsconfig_dev : TypescriptConfigOptions = None , tsconfig_dev_file : str = None , typescript_version : str = None , client_languages : typing . List [ ClientLanguage ], api_src_dir : str = None , documentation_formats : typing . List [ DocumentationFormat ] = None , force_generate_code_and_docs : bool = None , generated_code_dir : str = None , java_client_options : JavaProjectOptions = None , parsed_spec_file_name : str = None , python_client_options : PythonProjectOptions = None , typescript_client_options : TypeScriptProjectOptions = None , service_name : SmithyServiceName , ignore_gradle_wrapper : bool = None , ignore_smithy_build_output : bool = None , model_dir : str = None , smithy_build_options : SmithyBuildOptions = None ) Properties Name Type Description name str This is the name of your project. commit_generated bool Whether to commit the managed files by default. git_options projen.GitOptions Configuration options for git. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. renovatebot bool Use renovatebot to handle dependency upgrades. renovatebot_options projen.RenovatebotOptions Options for renovatebot. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge bool Enable automatic merging on GitHub. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_credentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. allow_library_dependencies bool Allow the project to include peerDependencies and bundledDependencies . author_email str Author's e-mail. author_name str Author's name. author_organization bool Is the author an organization. author_url str Author's URL / Website. auto_detect_bin bool Automatically add all executables under the bin directory to your package.json file under the bin section. bin typing.Mapping[str] Binary programs vended with your module. bugs_email str The email address to which issues should be reported. bugs_url str The url to your project's issue tracker. bundled_deps typing.List[str] List of dependencies to bundle into this module. code_artifact_options projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps typing.List[str] Runtime dependencies of this module. description str The description is just a string that helps people understand the purpose of the package. dev_deps typing.List[str] Build dependencies for this module. entrypoint str Module entrypoint ( main in package.json ). homepage str Package's Homepage / Website. keywords typing.List[str] Keywords to include in package.json . license str License's SPDX identifier. licensed bool Indicates if a license should be added. max_node_version str Minimum node.js version to require via engines (inclusive). min_node_version str Minimum Node.js version to require via package.json engines (inclusive). npm_access projen.javascript.NpmAccess Access level of the npm package. npm_registry str The host name of the npm registry to publish to. npm_registry_url str The base URL of the npm package registry. npm_token_secret str GitHub secret which contains the NPM token to use when publishing packages. package_manager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. package_name str The \"name\" in package.json. peer_dependency_options projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps typing.List[str] Peer dependencies for this module. pnpm_version str The version of PNPM to use if using PNPM as a package manager. repository str The repository is the location where the actual code for your package lives. repository_directory str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scoped_packages_options typing.List[projen.javascript.ScopedPackagesOptions] Options for privately hosted scoped packages. scripts typing.Mapping[str] npm scripts to include. stability str Package's Stability. jsii_release_version str Version requirement of publib which is used to publish modules to npm. major_version typing.Union[int, float] Major version to release from the default branch. min_major_version typing.Union[int, float] Minimal Major version to release. npm_dist_tag str The npmDistTag to use when publishing from the default branch. post_build_steps typing.List[projen.github.workflows.JobStep] Steps to execute after build as part of the release workflow. prerelease str Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run bool Instead of actually publishing to package managers, just print the publishing command. publish_tasks bool Define publishing tasks that can be executed manually as well as workflows. release_branches typing.Mapping[projen.release.BranchOptions] Defines additional release branches. release_every_commit bool Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue bool Create a github issue on every failed publishing task. release_failure_issue_label str The label to apply to issues indicating publish failures. release_schedule str CRON schedule to trigger new releases. release_tag_prefix str Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. release_trigger projen.release.ReleaseTrigger The release trigger to use. release_workflow_name str The name of the default release workflow. release_workflow_setup_steps typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options typing.Mapping[typing.Any] Custom configuration used when creating changelog with standard-version package. workflow_container_image str Container image to use for GitHub workflows. workflow_runs_on typing.List[str] Github Runner selection labels. default_release_branch str The name of the main release branch. artifacts_directory str A directory which will contain build artifacts. auto_approve_upgrades bool Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). build_workflow bool Define a GitHub workflow for building PRs. build_workflow_triggers projen.github.workflows.Triggers Build workflow triggers. bundler_options projen.javascript.BundlerOptions Options for Bundler . code_cov bool Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret str Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner str License copyright owner. copyright_period str The copyright years to put in the LICENSE file. dependabot bool Use dependabot to handle dependency upgrades. dependabot_options projen.github.DependabotOptions Options for dependabot. deps_upgrade bool Use github workflows to handle dependency upgrades. deps_upgrade_options projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore typing.List[str] Additional entries to .gitignore. jest bool Setup jest unit tests. jest_options projen.javascript.JestOptions Jest options. mutable_build bool Automatically update files modified during builds to pull-request branches. npmignore typing.List[str] Additional entries to .npmignore. npmignore_enabled bool Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package bool Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier bool Setup prettier. prettier_options projen.javascript.PrettierOptions Prettier options. projen_dev_dependency bool Indicates of \"projen\" should be installed as a devDependency. projenrc_js bool Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options projen.javascript.ProjenrcOptions Options for .projenrc.js. projen_version str Version of projen to install. pull_request_template bool Include a GitHub pull request template. pull_request_template_contents typing.List[str] The contents of the pull request template. release bool Add release management to this project. release_to_npm bool Automatically release to npm when new versions are introduced. release_workflow bool DEPRECATED: renamed to release . workflow_bootstrap_steps typing.List[projen.github.workflows.JobStep] Workflow steps to use in order to bootstrap this repo. workflow_git_identity projen.github.GitIdentity The git identity to use in workflows. workflow_node_version str The node version to use in GitHub workflows. disable_tsconfig bool Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen bool Docgen by Typedoc. docs_directory str Docs directory. entrypoint_types str The .d.ts file that includes the type declarations for this module. eslint bool Setup eslint. eslint_options projen.javascript.EslintOptions Eslint options. libdir str Typescript artifacts output directory. projenrc_ts bool Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code bool Generate one-time sample in src/ and test/ if there are no files there. srcdir str Typescript sources directory. testdir str Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfig_dev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file str The name of the development tsconfig.json file. typescript_version str TypeScript version to use. client_languages typing.List[ ClientLanguage ] The list of languages for which clients will be generated. api_src_dir str The directory in which the api generated code will reside, relative to the project srcdir. documentation_formats typing.List[ DocumentationFormat ] Formats to generate documentation in. force_generate_code_and_docs bool Force to generate code and docs even if there were no changes in spec. generated_code_dir str The directory in which generated client code will be generated, relative to the outdir of this project. java_client_options projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsed_spec_file_name str The name of the output parsed OpenAPI specification file. python_client_options projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). typescript_client_options projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. service_name SmithyServiceName The name of the Smithy service from your model which will be targeted for deployment and client generation. ignore_gradle_wrapper bool Set to false if you would like to check in your gradle wrapper. ignore_smithy_build_output bool Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. model_dir str The path to the Smithy model directory, relative to the project source directory (srcdir). smithy_build_options SmithyBuildOptions Any additional properties you'd like to add your smithy-build.json. The smithy-build.json will automatically include the \"openapi\" plugin, but you can add extra configuration for that via this option if you like. name Required name : str Type: str Default: $BASEDIR This is the name of your project. commit_generated Optional commit_generated : bool Type: bool Default: true Whether to commit the managed files by default. git_options Optional git_options : GitOptions Type: projen.GitOptions Configuration options for git. logging Optional logging : LoggerOptions Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional outdir : str Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional parent : Project Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional projen_command : str Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional projenrc_json : bool Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional projenrc_json_options : ProjenrcOptions Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional renovatebot : bool Type: bool Default: false Use renovatebot to handle dependency upgrades. renovatebot_options Optional renovatebot_options : RenovatebotOptions Type: projen.RenovatebotOptions Default: default options Options for renovatebot. auto_approve_options Optional auto_approve_options : AutoApproveOptions Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge Optional auto_merge : bool Type: bool Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. auto_merge_options Optional auto_merge_options : AutoMergeOptions Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional clobber : bool Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional dev_container : bool Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional github : bool Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional github_options : GitHubOptions Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional gitpod : bool Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead mergify : bool Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead mergify_options : MergifyOptions Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level project_type : ProjectType Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_credentials Optional projen_credentials : GithubCredentials Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projen_token_secret ~~ Optional Deprecated: use projenCredentials projen_token_secret : str Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional readme : SampleReadmeProps Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional stale : bool Type: bool Default: false Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional stale_options : StaleOptions Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional vscode : bool Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allow_library_dependencies Optional allow_library_dependencies : bool Type: bool Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. author_email Optional author_email : str Type: str Author's e-mail. author_name Optional author_name : str Type: str Author's name. author_organization Optional author_organization : bool Type: bool Is the author an organization. author_url Optional author_url : str Type: str Author's URL / Website. auto_detect_bin Optional auto_detect_bin : bool Type: bool Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional bin : typing . Mapping [ str ] Type: typing.Mapping[str] Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugs_email Optional bugs_email : str Type: str The email address to which issues should be reported. bugs_url Optional bugs_url : str Type: str The url to your project's issue tracker. bundled_deps Optional bundled_deps : typing . List [ str ] Type: typing.List[str] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. code_artifact_options Optional code_artifact_options : CodeArtifactOptions Type: projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional deps : typing . List [ str ] Type: typing.List[str] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'express' , 'lodash' , 'foo@^2' ] description Optional description : str Type: str The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description dev_deps Optional dev_deps : typing . List [ str ] Type: typing.List[str] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'typescript' , '@types/express' ] entrypoint Optional entrypoint : str Type: str Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional homepage : str Type: str Package's Homepage / Website. keywords Optional keywords : typing . List [ str ] Type: typing.List[str] Keywords to include in package.json . license Optional license : str Type: str Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional licensed : bool Type: bool Default: true Indicates if a license should be added. max_node_version Optional max_node_version : str Type: str Default: no max Minimum node.js version to require via engines (inclusive). min_node_version Optional min_node_version : str Type: str Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npm_access Optional npm_access : NpmAccess Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npm_registry ~~ Optional Deprecated: use npmRegistryUrl instead npm_registry : str Type: str The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npm_registry_url Optional npm_registry_url : str Type: str Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npm_token_secret Optional npm_token_secret : str Type: str Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. package_manager Optional package_manager : NodePackageManager Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. package_name Optional package_name : str Type: str Default: defaults to project name The \"name\" in package.json. peer_dependency_options Optional peer_dependency_options : PeerDependencyOptions Type: projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps Optional peer_deps : typing . List [ str ] Type: typing.List[str] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. pnpm_version Optional pnpm_version : str Type: str Default: \"7\" The version of PNPM to use if using PNPM as a package manager. repository Optional repository : str Type: str The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repository_directory Optional repository_directory : str Type: str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scoped_packages_options Optional scoped_packages_options : typing . List [ ScopedPackagesOptions ] Type: typing.List[projen.javascript.ScopedPackagesOptions] Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional scripts : typing . Mapping [ str ] Type: typing.Mapping[str] Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional stability : str Type: str Package's Stability. jsii_release_version Optional jsii_release_version : str Type: str Default: \"latest\" Version requirement of publib which is used to publish modules to npm. major_version Optional major_version : typing . Union [ int , float ] Type: typing.Union[int, float] Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. min_major_version Optional min_major_version : typing . Union [ int , float ] Type: typing.Union[int, float] Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npm_dist_tag Optional npm_dist_tag : str Type: str Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. post_build_steps Optional post_build_steps : typing . List [ JobStep ] Type: typing.List[projen.github.workflows.JobStep] Default: [] Steps to execute after build as part of the release workflow. prerelease Optional prerelease : str Type: str Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run Optional publish_dry_run : bool Type: bool Default: false Instead of actually publishing to package managers, just print the publishing command. publish_tasks Optional publish_tasks : bool Type: bool Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. release_branches Optional release_branches : typing . Mapping [ BranchOptions ] Type: typing.Mapping[projen.release.BranchOptions] Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ release_every_commit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead release_every_commit : bool Type: bool Default: true Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue Optional release_failure_issue : bool Type: bool Default: false Create a github issue on every failed publishing task. release_failure_issue_label Optional release_failure_issue_label : str Type: str Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ release_schedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead release_schedule : str Type: str Default: no scheduled releases CRON schedule to trigger new releases. release_tag_prefix Optional release_tag_prefix : str Type: str Default: \"v\" Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. release_trigger Optional release_trigger : ReleaseTrigger Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. release_workflow_name Optional release_workflow_name : str Type: str Default: \"Release\" The name of the default release workflow. release_workflow_setup_steps Optional release_workflow_setup_steps : typing . List [ JobStep ] Type: typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options Optional versionrc_options : typing . Mapping [ typing . Any ] Type: typing.Mapping[typing.Any] Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflow_container_image Optional workflow_container_image : str Type: str Default: default image Container image to use for GitHub workflows. workflow_runs_on Optional workflow_runs_on : typing . List [ str ] Type: typing.List[str] Default: [\"ubuntu-latest\"] Github Runner selection labels. default_release_branch Required default_release_branch : str Type: str Default: \"main\" The name of the main release branch. artifacts_directory Optional artifacts_directory : str Type: str Default: \"dist\" A directory which will contain build artifacts. auto_approve_upgrades Optional auto_approve_upgrades : bool Type: bool Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. build_workflow Optional build_workflow : bool Type: bool Default: true if not a subproject Define a GitHub workflow for building PRs. build_workflow_triggers Optional build_workflow_triggers : Triggers Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundler_options Optional bundler_options : BundlerOptions Type: projen.javascript.BundlerOptions Options for Bundler . code_cov Optional code_cov : bool Type: bool Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret Optional code_cov_token_secret : str Type: str Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner Optional copyright_owner : str Type: str Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyright_period Optional copyright_period : str Type: str Default: current year The copyright years to put in the LICENSE file. dependabot Optional dependabot : bool Type: bool Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabot_options Optional dependabot_options : DependabotOptions Type: projen.github.DependabotOptions Default: default options Options for dependabot. deps_upgrade Optional deps_upgrade : bool Type: bool Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . deps_upgrade_options Optional deps_upgrade_options : UpgradeDependenciesOptions Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional gitignore : typing . List [ str ] Type: typing.List[str] Additional entries to .gitignore. jest Optional jest : bool Type: bool Default: true Setup jest unit tests. jest_options Optional jest_options : JestOptions Type: projen.javascript.JestOptions Default: default options Jest options. mutable_build Optional mutable_build : bool Type: bool Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore npmignore : typing . List [ str ] Type: typing.List[str] Additional entries to .npmignore. npmignore_enabled Optional npmignore_enabled : bool Type: bool Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional package : bool Type: bool Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional prettier : bool Type: bool Default: false Setup prettier. prettier_options Optional prettier_options : PrettierOptions Type: projen.javascript.PrettierOptions Default: default options Prettier options. projen_dev_dependency Optional projen_dev_dependency : bool Type: bool Default: true Indicates of \"projen\" should be installed as a devDependency. projenrc_js Optional projenrc_js : bool Type: bool Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options Optional projenrc_js_options : ProjenrcOptions Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projen_version Optional projen_version : str Type: str Default: Defaults to the latest version. Version of projen to install. pull_request_template Optional pull_request_template : bool Type: bool Default: true Include a GitHub pull request template. pull_request_template_contents Optional pull_request_template_contents : typing . List [ str ] Type: typing.List[str] Default: default content The contents of the pull request template. release Optional release : bool Type: bool Default: true (false for subprojects) Add release management to this project. release_to_npm Optional release_to_npm : bool Type: bool Default: false Automatically release to npm when new versions are introduced. ~~ release_workflow ~~ Optional Deprecated: see release . release_workflow : bool Type: bool Default: true if not a subproject DEPRECATED: renamed to release . workflow_bootstrap_steps Optional workflow_bootstrap_steps : typing . List [ JobStep ] Type: typing.List[projen.github.workflows.JobStep] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflow_git_identity Optional workflow_git_identity : GitIdentity Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflow_node_version Optional workflow_node_version : str Type: str Default: same as minNodeVersion The node version to use in GitHub workflows. disable_tsconfig Optional disable_tsconfig : bool Type: bool Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional docgen : bool Type: bool Default: false Docgen by Typedoc. docs_directory Optional docs_directory : str Type: str Default: \"docs\" Docs directory. entrypoint_types Optional entrypoint_types : str Type: str Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional eslint : bool Type: bool Default: true Setup eslint. eslint_options Optional eslint_options : EslintOptions Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional libdir : str Type: str Default: \"lib\" Typescript artifacts output directory. projenrc_ts Optional projenrc_ts : bool Type: bool Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options Optional projenrc_ts_options : ProjenrcOptions Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code Optional sample_code : bool Type: bool Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional srcdir : str Type: str Default: \"src\" Typescript sources directory. testdir Optional testdir : str Type: str Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional tsconfig : TypescriptConfigOptions Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfig_dev Optional tsconfig_dev : TypescriptConfigOptions Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file Optional tsconfig_dev_file : str Type: str Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescript_version Optional typescript_version : str Type: str Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). client_languages Required client_languages : typing . List [ ClientLanguage ] Type: typing.List[ ClientLanguage ] The list of languages for which clients will be generated. A typescript client will always be generated. api_src_dir Optional api_src_dir : str Type: str The directory in which the api generated code will reside, relative to the project srcdir. documentation_formats Optional documentation_formats : typing . List [ DocumentationFormat ] Type: typing.List[ DocumentationFormat ] Formats to generate documentation in. force_generate_code_and_docs Optional force_generate_code_and_docs : bool Type: bool Default: \"false\" Force to generate code and docs even if there were no changes in spec. generated_code_dir Optional generated_code_dir : str Type: str Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. java_client_options Optional java_client_options : JavaProjectOptions Type: projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsed_spec_file_name Optional parsed_spec_file_name : str Type: str Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. python_client_options Optional python_client_options : PythonProjectOptions Type: projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. typescript_client_options Optional typescript_client_options : TypeScriptProjectOptions Type: projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. service_name Required service_name : SmithyServiceName Type: SmithyServiceName Default: \"example.hello#Hello\" The name of the Smithy service from your model which will be targeted for deployment and client generation. On initial project synthesis this service name will be written to the sample \"hello world\" model. If you change this value after initial synthesis you will need to manually update your Smithy models to match, unless you delete the \"model\" directory. Likewise, if you change the namespace or service name in your Smithy models you will need to update this value to ensure your service can be found. ignore_gradle_wrapper Optional ignore_gradle_wrapper : bool Type: bool Default: true Set to false if you would like to check in your gradle wrapper. Do so if you would like to use a different version of gradle to the one provided by default ignore_smithy_build_output Optional ignore_smithy_build_output : bool Type: bool Default: true Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. model_dir Optional model_dir : str Type: str Default: \"model\" The path to the Smithy model directory, relative to the project source directory (srcdir). smithy_build_options Optional smithy_build_options : SmithyBuildOptions Type: SmithyBuildOptions Any additional properties you'd like to add your smithy-build.json. The smithy-build.json will automatically include the \"openapi\" plugin, but you can add extra configuration for that via this option if you like. https://awslabs.github.io/smithy/2.0/guides/converting-to-openapi.html#openapi-configuration-settings SmithyBuildOptions Options for the smithy build files. Initializer import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . SmithyBuildOptions ( imports : typing . List [ str ] = None , plugins : typing . Mapping [ SmithyPlugin ] = None , ignore_missing_plugins : bool = None , maven : SmithyMavenConfiguration = None , projections : typing . Mapping [ SmithyProjection ] = None ) Properties Name Type Description imports typing.List[str] List of imports. plugins typing.Mapping[ SmithyPlugin ] Plugins keyed by plugin id. ignore_missing_plugins bool If a plugin can't be found, Smithy will by default fail the build. maven SmithyMavenConfiguration Maven configuration for the Smithy build project, used to specify dependencies and repositories in the build.gradle and smithy-build.json files. projections typing.Mapping[ SmithyProjection ] Map of projections name to projection configurations https://awslabs.github.io/smithy/2.0/guides/building-models/build-config.html#projections . imports Optional imports : typing . List [ str ] Type: typing.List[str] List of imports. plugins Optional plugins : typing . Mapping [ SmithyPlugin ] Type: typing.Mapping[ SmithyPlugin ] Plugins keyed by plugin id. ignore_missing_plugins Optional ignore_missing_plugins : bool Type: bool Default: no ignoreMissingPlugins set in the smithy-build.json file If a plugin can't be found, Smithy will by default fail the build. This setting can be set to true to allow the build to progress even if a plugin can't be found on the classpath. maven Optional maven : SmithyMavenConfiguration Type: SmithyMavenConfiguration Default: the default configuration required for Smithy to OpenAPI conversion Maven configuration for the Smithy build project, used to specify dependencies and repositories in the build.gradle and smithy-build.json files. projections Optional projections : typing . Mapping [ SmithyProjection ] Type: typing.Mapping[ SmithyProjection ] Default: no projections Map of projections name to projection configurations https://awslabs.github.io/smithy/2.0/guides/building-models/build-config.html#projections . SmithyCommon Properties common to smithy plugins and the root smithy build. Initializer import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . SmithyCommon ( imports : typing . List [ str ] = None , plugins : typing . Mapping [ SmithyPlugin ] = None ) Properties Name Type Description imports typing.List[str] List of imports. plugins typing.Mapping[ SmithyPlugin ] Plugins keyed by plugin id. imports Optional imports : typing . List [ str ] Type: typing.List[str] List of imports. plugins Optional plugins : typing . Mapping [ SmithyPlugin ] Type: typing.Mapping[ SmithyPlugin ] Plugins keyed by plugin id. SmithyMavenConfiguration Configuration for smithy maven dependencies. Initializer import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . SmithyMavenConfiguration ( dependencies : typing . List [ str ] = None , repository_urls : typing . List [ str ] = None ) Properties Name Type Description dependencies typing.List[str] The dependencies used in the build.gradle and smithy-build.json files eg. software.amazon.smithy:smithy-validation-model:1.27.2 The following required dependencies are always added: - software.amazon.smithy:smithy-cli:1.27.2 - software.amazon.smithy:smithy-model:1.27.2 - software.amazon.smithy:smithy-openapi:1.27.2 - software.amazon.smithy:smithy-aws-traits:1.27.2 You can however override the version of these dependencies if required. repository_urls typing.List[str] The repository urls used in the build.gradle and smithy-build.json files. dependencies Optional dependencies : typing . List [ str ] Type: typing.List[str] The dependencies used in the build.gradle and smithy-build.json files eg. software.amazon.smithy:smithy-validation-model:1.27.2 The following required dependencies are always added: - software.amazon.smithy:smithy-cli:1.27.2 - software.amazon.smithy:smithy-model:1.27.2 - software.amazon.smithy:smithy-openapi:1.27.2 - software.amazon.smithy:smithy-aws-traits:1.27.2 You can however override the version of these dependencies if required. repository_urls Optional repository_urls : typing . List [ str ] Type: typing.List[str] Default: maven central and maven local The repository urls used in the build.gradle and smithy-build.json files. SmithyPlugin A smithy plugin. Initializer import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . SmithyPlugin ( service : str = None ) Properties Name Type Description service str The service to which the plugin should apply. service Optional service : str Type: str The service to which the plugin should apply. SmithyProjection A smithy build projection. Initializer import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . SmithyProjection ( imports : typing . List [ str ] = None , plugins : typing . Mapping [ SmithyPlugin ] = None , abstract : bool = None , transforms : typing . List [ SmithyTransform ] = None ) Properties Name Type Description imports typing.List[str] List of imports. plugins typing.Mapping[ SmithyPlugin ] Plugins keyed by plugin id. abstract bool Whether or not the projection is abstract. transforms typing.List[ SmithyTransform ] Transforms to apply to the projection. imports Optional imports : typing . List [ str ] Type: typing.List[str] List of imports. plugins Optional plugins : typing . Mapping [ SmithyPlugin ] Type: typing.Mapping[ SmithyPlugin ] Plugins keyed by plugin id. abstract Optional abstract : bool Type: bool Whether or not the projection is abstract. transforms Optional transforms : typing . List [ SmithyTransform ] Type: typing.List[ SmithyTransform ] Transforms to apply to the projection. SmithyServiceName Represents a fully qualified name of a Smithy service. https://awslabs.github.io/smithy/2.0/spec/service-types.html Initializer import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . SmithyServiceName ( namespace : str , service_name : str ) Properties Name Type Description namespace str The service namespace. service_name str The service name. namespace Required namespace : str Type: str The service namespace. Nested namespaces are separated by '.', for example com.company https://awslabs.github.io/smithy/2.0/spec/model.html#shape-id service_name Required service_name : str Type: str The service name. Should be PascalCase, for example HelloService https://awslabs.github.io/smithy/2.0/spec/model.html#shape-id SmithyTransform A smithy build transform. Initializer import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . SmithyTransform ( args : typing . Mapping [ typing . Any ], name : str ) Properties Name Type Description args typing.Mapping[typing.Any] Arguments for the transform. name str Name of the transform. args Required args : typing . Mapping [ typing . Any ] Type: typing.Mapping[typing.Any] Arguments for the transform. name Required name : str Type: str Name of the transform. Classes Authorizer An authorizer for authorizing API requests. Initializers import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . Authorizer ( authorization_type : AuthorizationType , authorizer_id : str , authorization_scopes : typing . List [ str ] = None ) Name Type Description authorization_type aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id str The unique identifier for the authorizer. authorization_scopes typing.List[str] Scopes for the authorizer, if any. authorization_type Required Type: aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id Required Type: str The unique identifier for the authorizer. authorization_scopes Optional Type: typing.List[str] Scopes for the authorizer, if any. Properties Name Type Description authorization_type aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id str The unique identifier for the authorizer. authorization_scopes typing.List[str] Scopes for the authorizer, if any. authorization_type Required authorization_type : AuthorizationType Type: aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id Required authorizer_id : str Type: str The unique identifier for the authorizer. authorization_scopes Optional authorization_scopes : typing . List [ str ] Type: typing.List[str] Scopes for the authorizer, if any. Authorizers Class used to construct authorizers for use in the OpenApiGatewayLambdaApi construct. Initializers import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . Authorizers () Name Type Description Static Functions Name Description cognito A Cognito User Pools authorizer. custom A custom authorizer. iam An IAM authorizer which uses AWS signature version 4 to authorize requests. none No authorizer. cognito import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . Authorizers . cognito ( authorizer_id : str , user_pools : typing . List [ IUserPool ], authorization_scopes : typing . List [ str ] = None ) A Cognito User Pools authorizer. authorizer_id Required Type: str Unique identifier for this authorizer. user_pools Required Type: typing.List[aws_cdk.aws_cognito.IUserPool] The Cognito user pools associated with this authorizer. authorization_scopes Optional Type: typing.List[str] Default: [] A list of authorization scopes configured on the method. When used as the default authorizer, these scopes will be applied to all methods without an authorizer at the integration level. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-method.html#cfn-apigateway-method-authorizationscopes custom import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . Authorizers . custom ( authorizer_id : str , function : IFunction , authorizer_result_ttl_in_seconds : typing . Union [ int , float ] = None , identity_source : str = None , type : CustomAuthorizerType = None ) A custom authorizer. authorizer_id Required Type: str Unique identifier for this authorizer. function Required Type: aws_cdk.aws_lambda.IFunction The lambda function used to authorize requests. authorizer_result_ttl_in_seconds Optional Type: typing.Union[int, float] Default: 300 The number of seconds during which the authorizer result is cached. identity_source Optional Type: str Default: \"method.request.header.Authorization\" The source of the identity in an incoming request. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-identitysource type Optional Type: CustomAuthorizerType Default: CustomAuthorizerType.TOKEN The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type iam import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . Authorizers . iam () An IAM authorizer which uses AWS signature version 4 to authorize requests. none import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . Authorizers . none () No authorizer. CognitoAuthorizer An authorizer that uses Cognito identity or access tokens. Initializers import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . CognitoAuthorizer ( authorizer_id : str , user_pools : typing . List [ IUserPool ], authorization_scopes : typing . List [ str ] = None ) Name Type Description authorizer_id str Unique identifier for this authorizer. user_pools typing.List[aws_cdk.aws_cognito.IUserPool] The Cognito user pools associated with this authorizer. authorization_scopes typing.List[str] A list of authorization scopes configured on the method. authorizer_id Required Type: str Unique identifier for this authorizer. user_pools Required Type: typing.List[aws_cdk.aws_cognito.IUserPool] The Cognito user pools associated with this authorizer. authorization_scopes Optional Type: typing.List[str] Default: [] A list of authorization scopes configured on the method. When used as the default authorizer, these scopes will be applied to all methods without an authorizer at the integration level. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-method.html#cfn-apigateway-method-authorizationscopes Methods Name Description with_scopes Returns this authorizer with scopes applied, intended for usage in individual operations where scopes may differ on a per-operation basis. with_scopes def with_scopes ( authorization_scopes : str ) -> CognitoAuthorizer Returns this authorizer with scopes applied, intended for usage in individual operations where scopes may differ on a per-operation basis. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-method.html#cfn-apigateway-method-authorizationscopes authorization_scopes Required Type: str the scopes to apply. Properties Name Type Description authorization_type aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id str The unique identifier for the authorizer. authorization_scopes typing.List[str] Scopes for the authorizer, if any. user_pools typing.List[aws_cdk.aws_cognito.IUserPool] The Cognito user pools associated with this authorizer. authorization_type Required authorization_type : AuthorizationType Type: aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id Required authorizer_id : str Type: str The unique identifier for the authorizer. authorization_scopes Optional authorization_scopes : typing . List [ str ] Type: typing.List[str] Scopes for the authorizer, if any. user_pools Required user_pools : typing . List [ IUserPool ] Type: typing.List[aws_cdk.aws_cognito.IUserPool] The Cognito user pools associated with this authorizer. CustomAuthorizer An authorizer that uses a lambda function to authorize requests. Initializers import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . CustomAuthorizer ( authorizer_id : str , function : IFunction , authorizer_result_ttl_in_seconds : typing . Union [ int , float ] = None , identity_source : str = None , type : CustomAuthorizerType = None ) Name Type Description authorizer_id str Unique identifier for this authorizer. function aws_cdk.aws_lambda.IFunction The lambda function used to authorize requests. authorizer_result_ttl_in_seconds typing.Union[int, float] The number of seconds during which the authorizer result is cached. identity_source str The source of the identity in an incoming request. type CustomAuthorizerType The type of custom authorizer. authorizer_id Required Type: str Unique identifier for this authorizer. function Required Type: aws_cdk.aws_lambda.IFunction The lambda function used to authorize requests. authorizer_result_ttl_in_seconds Optional Type: typing.Union[int, float] Default: 300 The number of seconds during which the authorizer result is cached. identity_source Optional Type: str Default: \"method.request.header.Authorization\" The source of the identity in an incoming request. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-identitysource type Optional Type: CustomAuthorizerType Default: CustomAuthorizerType.TOKEN The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type Properties Name Type Description authorization_type aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id str The unique identifier for the authorizer. authorization_scopes typing.List[str] Scopes for the authorizer, if any. authorizer_result_ttl_in_seconds typing.Union[int, float] The number of seconds during which the authorizer result is cached. function aws_cdk.aws_lambda.IFunction The lambda function used to authorize requests. identity_source str The source of the identity in an incoming request. type CustomAuthorizerType The type of custom authorizer. authorization_type Required authorization_type : AuthorizationType Type: aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id Required authorizer_id : str Type: str The unique identifier for the authorizer. authorization_scopes Optional authorization_scopes : typing . List [ str ] Type: typing.List[str] Scopes for the authorizer, if any. authorizer_result_ttl_in_seconds Required authorizer_result_ttl_in_seconds : typing . Union [ int , float ] Type: typing.Union[int, float] The number of seconds during which the authorizer result is cached. function Required function : IFunction Type: aws_cdk.aws_lambda.IFunction The lambda function used to authorize requests. identity_source Required identity_source : str Type: str The source of the identity in an incoming request. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-identitysource type Required type : CustomAuthorizerType Type: CustomAuthorizerType The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type IamAuthorizer An IAM authorizer. Initializers import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . IamAuthorizer () Name Type Description Properties Name Type Description authorization_type aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id str The unique identifier for the authorizer. authorization_scopes typing.List[str] Scopes for the authorizer, if any. authorization_type Required authorization_type : AuthorizationType Type: aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id Required authorizer_id : str Type: str The unique identifier for the authorizer. authorization_scopes Optional authorization_scopes : typing . List [ str ] Type: typing.List[str] Scopes for the authorizer, if any. Integration An integration for an API operation. You can extend this to implement your own integration if you like. Initializers import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . Integration () Name Type Description Methods Name Description grant Grant permissions for the API to invoke the integration. render Render the integration into an API Gateway OpenAPI extension. grant def grant ( method : str , path : str , api : SpecRestApi , operation_id : str , scope : Construct ) -> None Grant permissions for the API to invoke the integration. method Required Type: str The http method of this operation. path Required Type: str The path of this operation in the api. api Required Type: aws_cdk.aws_apigateway.SpecRestApi The api to grant permissions for. operation_id Required Type: str The ID of the operation for which permissions are being granted. scope Required Type: constructs.Construct The scope in which permission resources can be created. render def render ( method : str , path : str , operation_id : str , scope : Construct ) -> ApiGatewayIntegration Render the integration into an API Gateway OpenAPI extension. method Required Type: str The http method of this operation. path Required Type: str The path of this operation in the api. operation_id Required Type: str The ID of the operation being rendered. scope Required Type: constructs.Construct The scope in which the integration is being rendered. Integrations A collection of integrations to connect API operations with a backend to service requests. Initializers import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . Integrations () Name Type Description Static Functions Name Description lambda An integration that invokes a lambda function to service the request. lambda import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . Integrations . lambda ( lambda_function : IFunction ) An integration that invokes a lambda function to service the request. lambda_function Required Type: aws_cdk.aws_lambda.IFunction the function to invoke. LambdaIntegration A lambda integration. Initializers import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . LambdaIntegration ( lambda_function : IFunction ) Name Type Description lambda_function aws_cdk.aws_lambda.IFunction No description. lambda_function Required Type: aws_cdk.aws_lambda.IFunction Methods Name Description grant Grant API Gateway permissions to invoke the lambda. render Render the lambda integration as a snippet of OpenAPI. grant def grant ( method : str , path : str , api : SpecRestApi , operation_id : str , scope : Construct ) -> None Grant API Gateway permissions to invoke the lambda. method Required Type: str The http method of this operation. path Required Type: str The path of this operation in the api. api Required Type: aws_cdk.aws_apigateway.SpecRestApi The api to grant permissions for. operation_id Required Type: str The ID of the operation for which permissions are being granted. scope Required Type: constructs.Construct The scope in which permission resources can be created. render def render ( method : str , path : str , operation_id : str , scope : Construct ) -> ApiGatewayIntegration Render the lambda integration as a snippet of OpenAPI. method Required Type: str The http method of this operation. path Required Type: str The path of this operation in the api. operation_id Required Type: str The ID of the operation being rendered. scope Required Type: constructs.Construct The scope in which the integration is being rendered. NoneAuthorizer No authorizer. Initializers import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . NoneAuthorizer () Name Type Description Properties Name Type Description authorization_type aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id str The unique identifier for the authorizer. authorization_scopes typing.List[str] Scopes for the authorizer, if any. authorization_type Required authorization_type : AuthorizationType Type: aws_cdk.aws_apigateway.AuthorizationType The type of the authorizer. authorizer_id Required authorizer_id : str Type: str The unique identifier for the authorizer. authorization_scopes Optional authorization_scopes : typing . List [ str ] Type: typing.List[str] Scopes for the authorizer, if any. OpenApiGatewayJavaProject Synthesizes a Java Project with an OpenAPI spec, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests. Initializers import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . OpenApiGatewayJavaProject ( name : str , commit_generated : bool = None , git_options : GitOptions = None , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , renovatebot : bool = None , renovatebot_options : RenovatebotOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge : bool = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_credentials : GithubCredentials = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , artifact_id : str , group_id : str , version : str , description : str = None , packaging : str = None , url : str = None , compile_options : MavenCompileOptions = None , deps : typing . List [ str ] = None , distdir : str = None , junit : bool = None , junit_options : JunitOptions = None , packaging_options : MavenPackagingOptions = None , projenrc_java : bool = None , projenrc_java_options : ProjenrcOptions = None , test_deps : typing . List [ str ] = None , sample : bool = None , sample_java_package : str = None , client_languages : typing . List [ ClientLanguage ], api_src_dir : str = None , documentation_formats : typing . List [ DocumentationFormat ] = None , force_generate_code_and_docs : bool = None , generated_code_dir : str = None , java_client_options : JavaProjectOptions = None , parsed_spec_file_name : str = None , python_client_options : PythonProjectOptions = None , typescript_client_options : TypeScriptProjectOptions = None , spec_file : str = None ) Name Type Description name str This is the name of your project. commit_generated bool Whether to commit the managed files by default. git_options projen.GitOptions Configuration options for git. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. renovatebot bool Use renovatebot to handle dependency upgrades. renovatebot_options projen.RenovatebotOptions Options for renovatebot. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge bool Enable automatic merging on GitHub. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_credentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. artifact_id str The artifactId is generally the name that the project is known by. group_id str This is generally unique amongst an organization or a project. version str This is the last piece of the naming puzzle. description str Description of a project is always good. packaging str Project packaging format. url str The URL, like the name, is not required. compile_options projen.java.MavenCompileOptions Compile options. deps typing.List[str] List of runtime dependencies for this project. distdir str Final artifact output directory. junit bool Include junit tests. junit_options projen.java.JunitOptions junit options. packaging_options projen.java.MavenPackagingOptions Packaging options. projenrc_java bool Use projenrc in java. projenrc_java_options projen.java.ProjenrcOptions Options related to projenrc in java. test_deps typing.List[str] List of test dependencies for this project. sample bool Include sample code and test if the relevant directories don't exist. sample_java_package str The java package to use for the code sample. client_languages typing.List[ ClientLanguage ] The list of languages for which clients will be generated. api_src_dir str The directory in which the api generated code will reside, relative to the project srcdir. documentation_formats typing.List[ DocumentationFormat ] Formats to generate documentation in. force_generate_code_and_docs bool Force to generate code and docs even if there were no changes in spec. generated_code_dir str The directory in which generated client code will be generated, relative to the outdir of this project. java_client_options projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsed_spec_file_name str The name of the output parsed OpenAPI specification file. python_client_options projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). typescript_client_options projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. spec_file str The path to the OpenAPI specification file, relative to the project source directory (srcdir). name Required Type: str Default: $BASEDIR This is the name of your project. commit_generated Optional Type: bool Default: true Whether to commit the managed files by default. git_options Optional Type: projen.GitOptions Configuration options for git. logging Optional Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional Type: bool Default: false Use renovatebot to handle dependency upgrades. renovatebot_options Optional Type: projen.RenovatebotOptions Default: default options Options for renovatebot. auto_approve_options Optional Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge Optional Type: bool Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. auto_merge_options Optional Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_credentials Optional Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projen_token_secret ~~ Optional Deprecated: use projenCredentials Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional Type: bool Default: false Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. artifact_id Required Type: str Default: \"my-app\" The artifactId is generally the name that the project is known by. Although the groupId is important, people within the group will rarely mention the groupId in discussion (they are often all be the same ID, such as the MojoHaus project groupId: org.codehaus.mojo). It, along with the groupId, creates a key that separates this project from every other project in the world (at least, it should :) ). Along with the groupId, the artifactId fully defines the artifact's living quarters within the repository. In the case of the above project, my-project lives in $M2_REPO/org/codehaus/mojo/my-project. group_id Required Type: str Default: \"org.acme\" This is generally unique amongst an organization or a project. For example, all core Maven artifacts do (well, should) live under the groupId org.apache.maven. Group ID's do not necessarily use the dot notation, for example, the junit project. Note that the dot-notated groupId does not have to correspond to the package structure that the project contains. It is, however, a good practice to follow. When stored within a repository, the group acts much like the Java packaging structure does in an operating system. The dots are replaced by OS specific directory separators (such as '/' in Unix) which becomes a relative directory structure from the base repository. In the example given, the org.codehaus.mojo group lives within the directory $M2_REPO/org/codehaus/mojo. version Required Type: str Default: \"0.1.0\" This is the last piece of the naming puzzle. groupId:artifactId denotes a single project but they cannot delineate which incarnation of that project we are talking about. Do we want the junit:junit of 2018 (version 4.12), or of 2007 (version 3.8.2)? In short: code changes, those changes should be versioned, and this element keeps those versions in line. It is also used within an artifact's repository to separate versions from each other. my-project version 1.0 files live in the directory structure $M2_REPO/org/codehaus/mojo/my-project/1.0. description Optional Type: str Default: undefined Description of a project is always good. Although this should not replace formal documentation, a quick comment to any readers of the POM is always helpful. packaging Optional Type: str Default: \"jar\" Project packaging format. url Optional Type: str Default: undefined The URL, like the name, is not required. This is a nice gesture for projects users, however, so that they know where the project lives. compile_options Optional Type: projen.java.MavenCompileOptions Default: defaults Compile options. deps Optional Type: typing.List[str] Default: [] List of runtime dependencies for this project. Dependencies use the format: <groupId>/<artifactId>@<semver> Additional dependencies can be added via project.addDependency() . distdir Optional Type: str Default: \"dist/java\" Final artifact output directory. junit Optional Type: bool Default: true Include junit tests. junit_options Optional Type: projen.java.JunitOptions Default: defaults junit options. packaging_options Optional Type: projen.java.MavenPackagingOptions Default: defaults Packaging options. projenrc_java Optional Type: bool Default: true Use projenrc in java. This will install projen as a java dependency and will add a synth task which will compile & execute main() from src/main/java/projenrc.java . projenrc_java_options Optional Type: projen.java.ProjenrcOptions Default: default options Options related to projenrc in java. test_deps Optional Type: typing.List[str] Default: [] List of test dependencies for this project. Dependencies use the format: <groupId>/<artifactId>@<semver> Additional dependencies can be added via project.addTestDependency() . sample Optional Type: bool Default: true Include sample code and test if the relevant directories don't exist. sample_java_package Optional Type: str Default: \"org.acme\" The java package to use for the code sample. client_languages Required Type: typing.List[ ClientLanguage ] The list of languages for which clients will be generated. A typescript client will always be generated. api_src_dir Optional Type: str The directory in which the api generated code will reside, relative to the project srcdir. documentation_formats Optional Type: typing.List[ DocumentationFormat ] Formats to generate documentation in. force_generate_code_and_docs Optional Type: bool Default: \"false\" Force to generate code and docs even if there were no changes in spec. generated_code_dir Optional Type: str Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. java_client_options Optional Type: projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsed_spec_file_name Optional Type: str Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. python_client_options Optional Type: projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. typescript_client_options Optional Type: projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. spec_file Optional Type: str Default: \"spec/spec.yaml\" The path to the OpenAPI specification file, relative to the project source directory (srcdir). Methods Name Description add_exclude_from_cleanup Exclude the matching files from pre-synth cleanup. add_git_ignore Adds a .gitignore pattern. add_package_ignore Exclude these files from the bundled package. add_task Adds a new task to this project. add_tip Prints a \"tip\" message during synthesis. annotate_generated Marks the provided file(s) as being generated. post_synthesize Called after all components are synthesized. pre_synthesize Called before all components are synthesized. remove_task Removes a task from a project. run_task_command Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . try_find_file Finds a file at the specified relative path within this project and all its subprojects. try_find_json_file Finds a json file by name. try_find_object_file Finds an object file (like JsonFile, YamlFile, etc.) by name. try_remove_file Finds a file at the specified relative path within this project and removes it. add_dependency Adds a runtime dependency. add_plugin Adds a build plugin to the pom. add_test_dependency Adds a test dependency. add_exclude_from_cleanup def add_exclude_from_cleanup ( globs : str ) -> None Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: str The glob patterns to match. add_git_ignore def add_git_ignore ( pattern : str ) -> None Adds a .gitignore pattern. pattern Required Type: str The glob pattern to ignore. add_package_ignore def add_package_ignore ( _pattern : str ) -> None Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . _pattern Required Type: str The glob pattern to exclude. add_task def add_task ( name : str , condition : str = None , cwd : str = None , description : str = None , env : typing . Mapping [ str ] = None , required_env : typing . List [ str ] = None , exec : str = None , receive_args : bool = None , steps : typing . List [ TaskStep ] = None ) -> Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: str The task name to add. condition Optional Type: str A shell command which determines if the this task should be executed. If the program exits with a zero exit code, steps will be executed. A non-zero code means that task will be skipped. cwd Optional Type: str Default: process.cwd() The working directory for all steps in this task (unless overridden by the step). description Optional Type: str Default: the task name The description of this build command. env Optional Type: typing.Mapping[str] Default: {} Defines environment variables for the execution of this task. Values in this map will be evaluated in a shell, so you can do stuff like $(echo \"foo\") . required_env Optional Type: typing.List[str] A set of environment variables that must be defined in order to execute this task. Task execution will fail if one of these is not defined. exec Optional Type: str Default: add steps using task.exec(command) or task.spawn(subtask) Shell command to execute as the first command of the task. receive_args Optional Type: bool Default: false Should the provided exec shell command receive args passed to the task. {@link TaskStepOptions.receiveArgs} steps Optional Type: typing.List[projen.TaskStep] List of task steps to run. ~~ add_tip ~~ def add_tip ( message : str ) -> None Prints a \"tip\" message during synthesis. message Required Type: str The message. annotate_generated def annotate_generated ( glob : str ) -> None Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: str the glob pattern to match (could be a file path). post_synthesize def post_synthesize () -> None Called after all components are synthesized. Order is not guaranteed. pre_synthesize def pre_synthesize () -> None Called before all components are synthesized. remove_task def remove_task ( name : str ) -> Task Removes a task from a project. name Required Type: str The name of the task to remove. run_task_command def run_task_command ( task : Task ) -> str Returns the shell command to execute in order to run a task. By default, this is npx projen@<version> <task> task Required Type: projen.Task The task for which the command is required. synth def synth () -> None Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" try_find_file def try_find_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and all its subprojects. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. ~~ try_find_json_file ~~ def try_find_json_file ( file_path : str ) -> JsonFile Finds a json file by name. file_path Required Type: str The file path. try_find_object_file def try_find_object_file ( file_path : str ) -> ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. file_path Required Type: str The file path. try_remove_file def try_remove_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and removes it. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. add_dependency def add_dependency ( spec : str ) -> None Adds a runtime dependency. spec Required Type: str Format <groupId>/<artifactId>@<semver> . add_plugin def add_plugin ( spec : str , configuration : typing . Mapping [ typing . Any ] = None , dependencies : typing . List [ str ] = None , executions : typing . List [ PluginExecution ] = None ) -> Dependency Adds a build plugin to the pom. The plug in is also added as a BUILD dep to the project. spec Required Type: str dependency spec ( group/artifact@version ). configuration Optional Type: typing.Mapping[typing.Any] Default: {} Plugin key/value configuration. dependencies Optional Type: typing.List[str] Default: [] You could configure the dependencies for the plugin. Dependencies are in <groupId>/<artifactId>@<semver> format. executions Optional Type: typing.List[projen.java.PluginExecution] Default: [] Plugin executions. add_test_dependency def add_test_dependency ( spec : str ) -> None Adds a test dependency. spec Required Type: str Format <groupId>/<artifactId>@<semver> . Properties Name Type Description build_task projen.Task No description. commit_generated bool Whether to commit the managed files by default. compile_task projen.Task No description. components typing.List[projen.Component] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected bool Whether or not the project is being ejected. files typing.List[projen.FileBase] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name str Project name. outdir str Absolute output directory of this project. package_task projen.Task No description. post_compile_task projen.Task No description. pre_compile_task projen.Task No description. project_build projen.ProjectBuild Manages the build process of the project. projen_command str The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. test_task projen.Task No description. default_task projen.Task This is the \"default\" task, the one that executes \"projen\". init_project projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. project_type projen.ProjectType No description. auto_approve projen.github.AutoApprove Auto approve set up for this project. dev_container projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. compile projen.java.MavenCompile Compile component. distdir str Maven artifact output directory. packaging projen.java.MavenPackaging Packaging component. pom projen.java.Pom API for managing pom.xml . junit projen.java.Junit JUnit component. projenrc projen.java.Projenrc Projenrc component. api_src_dir str The directory in which the api generated code will reside, relative to the project srcdir. generated_clients typing.Mapping[projen.Project] References to the client projects that were generated, keyed by language. generated_code_dir str The directory in which generated client code will be generated, relative to the outdir of this project. generated_java_client projen.java.JavaProject A reference to the generated java client. spec_dir str The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. spec_file_name str The name of the spec file. force_generate_code_and_docs bool Force to generate code and docs even if there were no changes in spec. build_task Required build_task : Task Type: projen.Task commit_generated Required commit_generated : bool Type: bool Whether to commit the managed files by default. compile_task Required compile_task : Task Type: projen.Task components Required components : typing . List [ Component ] Type: typing.List[projen.Component] Returns all the components within this project. deps Required deps : Dependencies Type: projen.Dependencies Project dependencies. ejected Required ejected : bool Type: bool Whether or not the project is being ejected. files Required files : typing . List [ FileBase ] Type: typing.List[projen.FileBase] All files in this project. gitattributes Required gitattributes : GitAttributesFile Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required gitignore : IgnoreFile Type: projen.IgnoreFile .gitignore. logger Required logger : Logger Type: projen.Logger Logging utilities. name Required name : str Type: str Project name. outdir Required outdir : str Type: str Absolute output directory of this project. package_task Required package_task : Task Type: projen.Task post_compile_task Required post_compile_task : Task Type: projen.Task pre_compile_task Required pre_compile_task : Task Type: projen.Task project_build Required project_build : ProjectBuild Type: projen.ProjectBuild Manages the build process of the project. projen_command Required projen_command : str Type: str The command to use in order to run the projen CLI. root Required root : Project Type: projen.Project The root project. tasks Required tasks : Tasks Type: projen.Tasks Project tasks. test_task Required test_task : Task Type: projen.Task default_task Optional default_task : Task Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. init_project Optional init_project : InitProject Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional parent : Project Type: projen.Project A parent project. If undefined, this is the root project. project_type Required project_type : ProjectType Type: projen.ProjectType auto_approve Optional auto_approve : AutoApprove Type: projen.github.AutoApprove Auto approve set up for this project. dev_container Optional dev_container : DevContainer Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional github : GitHub Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional gitpod : Gitpod Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional vscode : VsCode Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. compile Required compile : MavenCompile Type: projen.java.MavenCompile Compile component. distdir Required distdir : str Type: str Maven artifact output directory. packaging Required packaging : MavenPackaging Type: projen.java.MavenPackaging Packaging component. pom Required pom : Pom Type: projen.java.Pom API for managing pom.xml . junit Optional junit : Junit Type: projen.java.Junit JUnit component. projenrc Optional projenrc : Projenrc Type: projen.java.Projenrc Projenrc component. api_src_dir Required api_src_dir : str Type: str The directory in which the api generated code will reside, relative to the project srcdir. This will also be used as the package for the api project. generated_clients Required generated_clients : typing . Mapping [ Project ] Type: typing.Mapping[projen.Project] References to the client projects that were generated, keyed by language. generated_code_dir Required generated_code_dir : str Type: str The directory in which generated client code will be generated, relative to the outdir of this project. generated_java_client Required generated_java_client : JavaProject Type: projen.java.JavaProject A reference to the generated java client. spec_dir Required spec_dir : str Type: str The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. spec_file_name Required spec_file_name : str Type: str The name of the spec file. force_generate_code_and_docs Optional force_generate_code_and_docs : bool Type: bool Force to generate code and docs even if there were no changes in spec. Constants Name Type Description DEFAULT_TASK str The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required DEFAULT_TASK : str Type: str The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. OpenApiGatewayPythonProject Synthesizes a Python Project with an OpenAPI spec, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests. Initializers import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . OpenApiGatewayPythonProject ( name : str , commit_generated : bool = None , git_options : GitOptions = None , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , renovatebot : bool = None , renovatebot_options : RenovatebotOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge : bool = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_credentials : GithubCredentials = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , author_email : str , author_name : str , version : str , classifiers : typing . List [ str ] = None , description : str = None , homepage : str = None , license : str = None , package_name : str = None , poetry_options : PoetryPyprojectOptionsWithoutDeps = None , setup_config : typing . Mapping [ typing . Any ] = None , module_name : str , deps : typing . List [ str ] = None , dev_deps : typing . List [ str ] = None , pip : bool = None , poetry : bool = None , projenrc_js : bool = None , projenrc_js_options : ProjenrcOptions = None , projenrc_python : bool = None , projenrc_python_options : ProjenrcOptions = None , pytest : bool = None , pytest_options : PytestOptions = None , sample : bool = None , setuptools : bool = None , venv : bool = None , venv_options : VenvOptions = None , client_languages : typing . List [ ClientLanguage ], api_src_dir : str = None , documentation_formats : typing . List [ DocumentationFormat ] = None , force_generate_code_and_docs : bool = None , generated_code_dir : str = None , java_client_options : JavaProjectOptions = None , parsed_spec_file_name : str = None , python_client_options : PythonProjectOptions = None , typescript_client_options : TypeScriptProjectOptions = None , spec_file : str = None ) Name Type Description name str This is the name of your project. commit_generated bool Whether to commit the managed files by default. git_options projen.GitOptions Configuration options for git. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. renovatebot bool Use renovatebot to handle dependency upgrades. renovatebot_options projen.RenovatebotOptions Options for renovatebot. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge bool Enable automatic merging on GitHub. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_credentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. author_email str Author's e-mail. author_name str Author's name. version str Version of the package. classifiers typing.List[str] A list of PyPI trove classifiers that describe the project. description str A short description of the package. homepage str A URL to the website of the project. license str License of this package as an SPDX identifier. package_name str Package name. poetry_options projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setup_config typing.Mapping[typing.Any] Additional fields to pass in the setup() function if using setuptools. module_name str Name of the python package as used in imports and filenames. deps typing.List[str] List of runtime dependencies for this project. dev_deps typing.List[str] List of dev dependencies for this project. pip bool Use pip with a requirements.txt file to track project dependencies. poetry bool Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrc_js bool Use projenrc in javascript. projenrc_js_options projen.javascript.ProjenrcOptions Options related to projenrc in JavaScript. projenrc_python bool Use projenrc in Python. projenrc_python_options projen.python.ProjenrcOptions Options related to projenrc in python. pytest bool Include pytest tests. pytest_options projen.python.PytestOptions pytest options. sample bool Include sample code and test if the relevant directories don't exist. setuptools bool Use setuptools with a setup.py script for packaging and publishing. venv bool Use venv to manage a virtual environment for installing dependencies inside. venv_options projen.python.VenvOptions Venv options. client_languages typing.List[ ClientLanguage ] The list of languages for which clients will be generated. api_src_dir str The directory in which the api generated code will reside, relative to the project srcdir. documentation_formats typing.List[ DocumentationFormat ] Formats to generate documentation in. force_generate_code_and_docs bool Force to generate code and docs even if there were no changes in spec. generated_code_dir str The directory in which generated client code will be generated, relative to the outdir of this project. java_client_options projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsed_spec_file_name str The name of the output parsed OpenAPI specification file. python_client_options projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). typescript_client_options projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. spec_file str The path to the OpenAPI specification file, relative to the project source directory (srcdir). name Required Type: str Default: $BASEDIR This is the name of your project. commit_generated Optional Type: bool Default: true Whether to commit the managed files by default. git_options Optional Type: projen.GitOptions Configuration options for git. logging Optional Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional Type: bool Default: false Use renovatebot to handle dependency upgrades. renovatebot_options Optional Type: projen.RenovatebotOptions Default: default options Options for renovatebot. auto_approve_options Optional Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge Optional Type: bool Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. auto_merge_options Optional Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_credentials Optional Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projen_token_secret ~~ Optional Deprecated: use projenCredentials Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional Type: bool Default: false Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. author_email Required Type: str Default: $GIT_USER_EMAIL Author's e-mail. author_name Required Type: str Default: $GIT_USER_NAME Author's name. version Required Type: str Default: \"0.1.0\" Version of the package. classifiers Optional Type: typing.List[str] A list of PyPI trove classifiers that describe the project. https://pypi.org/classifiers/ description Optional Type: str A short description of the package. homepage Optional Type: str A URL to the website of the project. license Optional Type: str License of this package as an SPDX identifier. package_name Optional Type: str Package name. poetry_options Optional Type: projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setup_config Optional Type: typing.Mapping[typing.Any] Additional fields to pass in the setup() function if using setuptools. module_name Required Type: str Default: $PYTHON_MODULE_NAME Name of the python package as used in imports and filenames. Must only consist of alphanumeric characters and underscores. deps Optional Type: typing.List[str] Default: [] List of runtime dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDependency() . dev_deps Optional Type: typing.List[str] Default: [] List of dev dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDevDependency() . pip Optional Type: bool Default: true, unless poetry is true, then false Use pip with a requirements.txt file to track project dependencies. poetry Optional Type: bool Default: false Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. This feature is incompatible with pip, setuptools, or venv. If you set this option to true , then pip, setuptools, and venv must be set to false . projenrc_js Optional Type: bool Default: false Use projenrc in javascript. This will install projen as a JavaScript dependency and add a synth task which will run .projenrc.js . projenrc_js_options Optional Type: projen.javascript.ProjenrcOptions Default: default options Options related to projenrc in JavaScript. projenrc_python Optional Type: bool Default: true Use projenrc in Python. This will install projen as a Python dependency and add a synth task which will run .projenrc.py . projenrc_python_options Optional Type: projen.python.ProjenrcOptions Default: default options Options related to projenrc in python. pytest Optional Type: bool Default: true Include pytest tests. pytest_options Optional Type: projen.python.PytestOptions Default: defaults pytest options. sample Optional Type: bool Default: true Include sample code and test if the relevant directories don't exist. setuptools Optional Type: bool Default: true, unless poetry is true, then false Use setuptools with a setup.py script for packaging and publishing. venv Optional Type: bool Default: true, unless poetry is true, then false Use venv to manage a virtual environment for installing dependencies inside. venv_options Optional Type: projen.python.VenvOptions Default: defaults Venv options. client_languages Required Type: typing.List[ ClientLanguage ] The list of languages for which clients will be generated. A typescript client will always be generated. api_src_dir Optional Type: str The directory in which the api generated code will reside, relative to the project srcdir. documentation_formats Optional Type: typing.List[ DocumentationFormat ] Formats to generate documentation in. force_generate_code_and_docs Optional Type: bool Default: \"false\" Force to generate code and docs even if there were no changes in spec. generated_code_dir Optional Type: str Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. java_client_options Optional Type: projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsed_spec_file_name Optional Type: str Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. python_client_options Optional Type: projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. typescript_client_options Optional Type: projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. spec_file Optional Type: str Default: \"spec/spec.yaml\" The path to the OpenAPI specification file, relative to the project source directory (srcdir). Methods Name Description add_exclude_from_cleanup Exclude the matching files from pre-synth cleanup. add_git_ignore Adds a .gitignore pattern. add_package_ignore Exclude these files from the bundled package. add_task Adds a new task to this project. add_tip Prints a \"tip\" message during synthesis. annotate_generated Marks the provided file(s) as being generated. post_synthesize Called after all components are synthesized. pre_synthesize Called before all components are synthesized. remove_task Removes a task from a project. run_task_command Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . try_find_file Finds a file at the specified relative path within this project and all its subprojects. try_find_json_file Finds a json file by name. try_find_object_file Finds an object file (like JsonFile, YamlFile, etc.) by name. try_remove_file Finds a file at the specified relative path within this project and removes it. add_dependency Adds a runtime dependency. add_dev_dependency Adds a dev dependency. add_exclude_from_cleanup def add_exclude_from_cleanup ( globs : str ) -> None Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: str The glob patterns to match. add_git_ignore def add_git_ignore ( pattern : str ) -> None Adds a .gitignore pattern. pattern Required Type: str The glob pattern to ignore. add_package_ignore def add_package_ignore ( _pattern : str ) -> None Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . _pattern Required Type: str The glob pattern to exclude. add_task def add_task ( name : str , condition : str = None , cwd : str = None , description : str = None , env : typing . Mapping [ str ] = None , required_env : typing . List [ str ] = None , exec : str = None , receive_args : bool = None , steps : typing . List [ TaskStep ] = None ) -> Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: str The task name to add. condition Optional Type: str A shell command which determines if the this task should be executed. If the program exits with a zero exit code, steps will be executed. A non-zero code means that task will be skipped. cwd Optional Type: str Default: process.cwd() The working directory for all steps in this task (unless overridden by the step). description Optional Type: str Default: the task name The description of this build command. env Optional Type: typing.Mapping[str] Default: {} Defines environment variables for the execution of this task. Values in this map will be evaluated in a shell, so you can do stuff like $(echo \"foo\") . required_env Optional Type: typing.List[str] A set of environment variables that must be defined in order to execute this task. Task execution will fail if one of these is not defined. exec Optional Type: str Default: add steps using task.exec(command) or task.spawn(subtask) Shell command to execute as the first command of the task. receive_args Optional Type: bool Default: false Should the provided exec shell command receive args passed to the task. {@link TaskStepOptions.receiveArgs} steps Optional Type: typing.List[projen.TaskStep] List of task steps to run. ~~ add_tip ~~ def add_tip ( message : str ) -> None Prints a \"tip\" message during synthesis. message Required Type: str The message. annotate_generated def annotate_generated ( glob : str ) -> None Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: str the glob pattern to match (could be a file path). post_synthesize def post_synthesize () -> None Called after all components are synthesized. Order is not guaranteed. pre_synthesize def pre_synthesize () -> None Called before all components are synthesized. remove_task def remove_task ( name : str ) -> Task Removes a task from a project. name Required Type: str The name of the task to remove. run_task_command def run_task_command ( task : Task ) -> str Returns the shell command to execute in order to run a task. By default, this is npx projen@<version> <task> task Required Type: projen.Task The task for which the command is required. synth def synth () -> None Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" try_find_file def try_find_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and all its subprojects. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. ~~ try_find_json_file ~~ def try_find_json_file ( file_path : str ) -> JsonFile Finds a json file by name. file_path Required Type: str The file path. try_find_object_file def try_find_object_file ( file_path : str ) -> ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. file_path Required Type: str The file path. try_remove_file def try_remove_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and removes it. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. add_dependency def add_dependency ( spec : str ) -> None Adds a runtime dependency. spec Required Type: str Format <module>@<semver> . add_dev_dependency def add_dev_dependency ( spec : str ) -> None Adds a dev dependency. spec Required Type: str Format <module>@<semver> . Properties Name Type Description build_task projen.Task No description. commit_generated bool Whether to commit the managed files by default. compile_task projen.Task No description. components typing.List[projen.Component] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected bool Whether or not the project is being ejected. files typing.List[projen.FileBase] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name str Project name. outdir str Absolute output directory of this project. package_task projen.Task No description. post_compile_task projen.Task No description. pre_compile_task projen.Task No description. project_build projen.ProjectBuild Manages the build process of the project. projen_command str The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. test_task projen.Task No description. default_task projen.Task This is the \"default\" task, the one that executes \"projen\". init_project projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. project_type projen.ProjectType No description. auto_approve projen.github.AutoApprove Auto approve set up for this project. dev_container projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. deps_manager projen.python.IPythonDeps API for managing dependencies. env_manager projen.python.IPythonEnv API for mangaging the Python runtime environment. module_name str Python module name (the project name, with any hyphens or periods replaced with underscores). version str Version of the package for distribution (should follow semver). packaging_manager projen.python.IPythonPackaging API for managing packaging the project as a library. pytest projen.python.Pytest Pytest component. api_src_dir str The directory in which the api generated code will reside, relative to the project srcdir. generated_clients typing.Mapping[projen.Project] References to the client projects that were generated, keyed by language. generated_code_dir str The directory in which generated client code will be generated, relative to the outdir of this project. generated_python_client projen.python.PythonProject A reference to the generated python client. spec_dir str The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. spec_file_name str The name of the spec file. force_generate_code_and_docs bool Force to generate code and docs even if there were no changes in spec. build_task Required build_task : Task Type: projen.Task commit_generated Required commit_generated : bool Type: bool Whether to commit the managed files by default. compile_task Required compile_task : Task Type: projen.Task components Required components : typing . List [ Component ] Type: typing.List[projen.Component] Returns all the components within this project. deps Required deps : Dependencies Type: projen.Dependencies Project dependencies. ejected Required ejected : bool Type: bool Whether or not the project is being ejected. files Required files : typing . List [ FileBase ] Type: typing.List[projen.FileBase] All files in this project. gitattributes Required gitattributes : GitAttributesFile Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required gitignore : IgnoreFile Type: projen.IgnoreFile .gitignore. logger Required logger : Logger Type: projen.Logger Logging utilities. name Required name : str Type: str Project name. outdir Required outdir : str Type: str Absolute output directory of this project. package_task Required package_task : Task Type: projen.Task post_compile_task Required post_compile_task : Task Type: projen.Task pre_compile_task Required pre_compile_task : Task Type: projen.Task project_build Required project_build : ProjectBuild Type: projen.ProjectBuild Manages the build process of the project. projen_command Required projen_command : str Type: str The command to use in order to run the projen CLI. root Required root : Project Type: projen.Project The root project. tasks Required tasks : Tasks Type: projen.Tasks Project tasks. test_task Required test_task : Task Type: projen.Task default_task Optional default_task : Task Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. init_project Optional init_project : InitProject Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional parent : Project Type: projen.Project A parent project. If undefined, this is the root project. project_type Required project_type : ProjectType Type: projen.ProjectType auto_approve Optional auto_approve : AutoApprove Type: projen.github.AutoApprove Auto approve set up for this project. dev_container Optional dev_container : DevContainer Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional github : GitHub Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional gitpod : Gitpod Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional vscode : VsCode Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. deps_manager Required deps_manager : IPythonDeps Type: projen.python.IPythonDeps API for managing dependencies. env_manager Required env_manager : IPythonEnv Type: projen.python.IPythonEnv API for mangaging the Python runtime environment. module_name Required module_name : str Type: str Python module name (the project name, with any hyphens or periods replaced with underscores). version Required version : str Type: str Version of the package for distribution (should follow semver). packaging_manager Optional packaging_manager : IPythonPackaging Type: projen.python.IPythonPackaging API for managing packaging the project as a library. Only applies when the projectType is LIB. pytest Optional pytest : Pytest Type: projen.python.Pytest Pytest component. api_src_dir Required api_src_dir : str Type: str The directory in which the api generated code will reside, relative to the project srcdir. generated_clients Required generated_clients : typing . Mapping [ Project ] Type: typing.Mapping[projen.Project] References to the client projects that were generated, keyed by language. generated_code_dir Required generated_code_dir : str Type: str The directory in which generated client code will be generated, relative to the outdir of this project. generated_python_client Required generated_python_client : PythonProject Type: projen.python.PythonProject A reference to the generated python client. spec_dir Required spec_dir : str Type: str The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. spec_file_name Required spec_file_name : str Type: str The name of the spec file. force_generate_code_and_docs Optional force_generate_code_and_docs : bool Type: bool Force to generate code and docs even if there were no changes in spec. Constants Name Type Description DEFAULT_TASK str The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required DEFAULT_TASK : str Type: str The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. OpenApiGatewayTsProject Synthesizes a Typescript Project with an OpenAPI spec, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests. Initializers import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . OpenApiGatewayTsProject ( name : str , commit_generated : bool = None , git_options : GitOptions = None , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , renovatebot : bool = None , renovatebot_options : RenovatebotOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge : bool = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_credentials : GithubCredentials = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , allow_library_dependencies : bool = None , author_email : str = None , author_name : str = None , author_organization : bool = None , author_url : str = None , auto_detect_bin : bool = None , bin : typing . Mapping [ str ] = None , bugs_email : str = None , bugs_url : str = None , bundled_deps : typing . List [ str ] = None , code_artifact_options : CodeArtifactOptions = None , deps : typing . List [ str ] = None , description : str = None , dev_deps : typing . List [ str ] = None , entrypoint : str = None , homepage : str = None , keywords : typing . List [ str ] = None , license : str = None , licensed : bool = None , max_node_version : str = None , min_node_version : str = None , npm_access : NpmAccess = None , npm_registry : str = None , npm_registry_url : str = None , npm_token_secret : str = None , package_manager : NodePackageManager = None , package_name : str = None , peer_dependency_options : PeerDependencyOptions = None , peer_deps : typing . List [ str ] = None , pnpm_version : str = None , repository : str = None , repository_directory : str = None , scoped_packages_options : typing . List [ ScopedPackagesOptions ] = None , scripts : typing . Mapping [ str ] = None , stability : str = None , jsii_release_version : str = None , major_version : typing . Union [ int , float ] = None , min_major_version : typing . Union [ int , float ] = None , npm_dist_tag : str = None , post_build_steps : typing . List [ JobStep ] = None , prerelease : str = None , publish_dry_run : bool = None , publish_tasks : bool = None , release_branches : typing . Mapping [ BranchOptions ] = None , release_every_commit : bool = None , release_failure_issue : bool = None , release_failure_issue_label : str = None , release_schedule : str = None , release_tag_prefix : str = None , release_trigger : ReleaseTrigger = None , release_workflow_name : str = None , release_workflow_setup_steps : typing . List [ JobStep ] = None , versionrc_options : typing . Mapping [ typing . Any ] = None , workflow_container_image : str = None , workflow_runs_on : typing . List [ str ] = None , default_release_branch : str , artifacts_directory : str = None , auto_approve_upgrades : bool = None , build_workflow : bool = None , build_workflow_triggers : Triggers = None , bundler_options : BundlerOptions = None , code_cov : bool = None , code_cov_token_secret : str = None , copyright_owner : str = None , copyright_period : str = None , dependabot : bool = None , dependabot_options : DependabotOptions = None , deps_upgrade : bool = None , deps_upgrade_options : UpgradeDependenciesOptions = None , gitignore : typing . List [ str ] = None , jest : bool = None , jest_options : JestOptions = None , mutable_build : bool = None , npmignore : typing . List [ str ] = None , npmignore_enabled : bool = None , package : bool = None , prettier : bool = None , prettier_options : PrettierOptions = None , projen_dev_dependency : bool = None , projenrc_js : bool = None , projenrc_js_options : ProjenrcOptions = None , projen_version : str = None , pull_request_template : bool = None , pull_request_template_contents : typing . List [ str ] = None , release : bool = None , release_to_npm : bool = None , release_workflow : bool = None , workflow_bootstrap_steps : typing . List [ JobStep ] = None , workflow_git_identity : GitIdentity = None , workflow_node_version : str = None , disable_tsconfig : bool = None , docgen : bool = None , docs_directory : str = None , entrypoint_types : str = None , eslint : bool = None , eslint_options : EslintOptions = None , libdir : str = None , projenrc_ts : bool = None , projenrc_ts_options : ProjenrcOptions = None , sample_code : bool = None , srcdir : str = None , testdir : str = None , tsconfig : TypescriptConfigOptions = None , tsconfig_dev : TypescriptConfigOptions = None , tsconfig_dev_file : str = None , typescript_version : str = None , client_languages : typing . List [ ClientLanguage ], api_src_dir : str = None , documentation_formats : typing . List [ DocumentationFormat ] = None , force_generate_code_and_docs : bool = None , generated_code_dir : str = None , java_client_options : JavaProjectOptions = None , parsed_spec_file_name : str = None , python_client_options : PythonProjectOptions = None , typescript_client_options : TypeScriptProjectOptions = None , spec_file : str = None ) Name Type Description name str This is the name of your project. commit_generated bool Whether to commit the managed files by default. git_options projen.GitOptions Configuration options for git. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. renovatebot bool Use renovatebot to handle dependency upgrades. renovatebot_options projen.RenovatebotOptions Options for renovatebot. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge bool Enable automatic merging on GitHub. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_credentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. allow_library_dependencies bool Allow the project to include peerDependencies and bundledDependencies . author_email str Author's e-mail. author_name str Author's name. author_organization bool Is the author an organization. author_url str Author's URL / Website. auto_detect_bin bool Automatically add all executables under the bin directory to your package.json file under the bin section. bin typing.Mapping[str] Binary programs vended with your module. bugs_email str The email address to which issues should be reported. bugs_url str The url to your project's issue tracker. bundled_deps typing.List[str] List of dependencies to bundle into this module. code_artifact_options projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps typing.List[str] Runtime dependencies of this module. description str The description is just a string that helps people understand the purpose of the package. dev_deps typing.List[str] Build dependencies for this module. entrypoint str Module entrypoint ( main in package.json ). homepage str Package's Homepage / Website. keywords typing.List[str] Keywords to include in package.json . license str License's SPDX identifier. licensed bool Indicates if a license should be added. max_node_version str Minimum node.js version to require via engines (inclusive). min_node_version str Minimum Node.js version to require via package.json engines (inclusive). npm_access projen.javascript.NpmAccess Access level of the npm package. npm_registry str The host name of the npm registry to publish to. npm_registry_url str The base URL of the npm package registry. npm_token_secret str GitHub secret which contains the NPM token to use when publishing packages. package_manager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. package_name str The \"name\" in package.json. peer_dependency_options projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps typing.List[str] Peer dependencies for this module. pnpm_version str The version of PNPM to use if using PNPM as a package manager. repository str The repository is the location where the actual code for your package lives. repository_directory str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scoped_packages_options typing.List[projen.javascript.ScopedPackagesOptions] Options for privately hosted scoped packages. scripts typing.Mapping[str] npm scripts to include. stability str Package's Stability. jsii_release_version str Version requirement of publib which is used to publish modules to npm. major_version typing.Union[int, float] Major version to release from the default branch. min_major_version typing.Union[int, float] Minimal Major version to release. npm_dist_tag str The npmDistTag to use when publishing from the default branch. post_build_steps typing.List[projen.github.workflows.JobStep] Steps to execute after build as part of the release workflow. prerelease str Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run bool Instead of actually publishing to package managers, just print the publishing command. publish_tasks bool Define publishing tasks that can be executed manually as well as workflows. release_branches typing.Mapping[projen.release.BranchOptions] Defines additional release branches. release_every_commit bool Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue bool Create a github issue on every failed publishing task. release_failure_issue_label str The label to apply to issues indicating publish failures. release_schedule str CRON schedule to trigger new releases. release_tag_prefix str Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. release_trigger projen.release.ReleaseTrigger The release trigger to use. release_workflow_name str The name of the default release workflow. release_workflow_setup_steps typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options typing.Mapping[typing.Any] Custom configuration used when creating changelog with standard-version package. workflow_container_image str Container image to use for GitHub workflows. workflow_runs_on typing.List[str] Github Runner selection labels. default_release_branch str The name of the main release branch. artifacts_directory str A directory which will contain build artifacts. auto_approve_upgrades bool Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). build_workflow bool Define a GitHub workflow for building PRs. build_workflow_triggers projen.github.workflows.Triggers Build workflow triggers. bundler_options projen.javascript.BundlerOptions Options for Bundler . code_cov bool Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret str Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner str License copyright owner. copyright_period str The copyright years to put in the LICENSE file. dependabot bool Use dependabot to handle dependency upgrades. dependabot_options projen.github.DependabotOptions Options for dependabot. deps_upgrade bool Use github workflows to handle dependency upgrades. deps_upgrade_options projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore typing.List[str] Additional entries to .gitignore. jest bool Setup jest unit tests. jest_options projen.javascript.JestOptions Jest options. mutable_build bool Automatically update files modified during builds to pull-request branches. npmignore typing.List[str] Additional entries to .npmignore. npmignore_enabled bool Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package bool Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier bool Setup prettier. prettier_options projen.javascript.PrettierOptions Prettier options. projen_dev_dependency bool Indicates of \"projen\" should be installed as a devDependency. projenrc_js bool Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options projen.javascript.ProjenrcOptions Options for .projenrc.js. projen_version str Version of projen to install. pull_request_template bool Include a GitHub pull request template. pull_request_template_contents typing.List[str] The contents of the pull request template. release bool Add release management to this project. release_to_npm bool Automatically release to npm when new versions are introduced. release_workflow bool DEPRECATED: renamed to release . workflow_bootstrap_steps typing.List[projen.github.workflows.JobStep] Workflow steps to use in order to bootstrap this repo. workflow_git_identity projen.github.GitIdentity The git identity to use in workflows. workflow_node_version str The node version to use in GitHub workflows. disable_tsconfig bool Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen bool Docgen by Typedoc. docs_directory str Docs directory. entrypoint_types str The .d.ts file that includes the type declarations for this module. eslint bool Setup eslint. eslint_options projen.javascript.EslintOptions Eslint options. libdir str Typescript artifacts output directory. projenrc_ts bool Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code bool Generate one-time sample in src/ and test/ if there are no files there. srcdir str Typescript sources directory. testdir str Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfig_dev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file str The name of the development tsconfig.json file. typescript_version str TypeScript version to use. client_languages typing.List[ ClientLanguage ] The list of languages for which clients will be generated. api_src_dir str The directory in which the api generated code will reside, relative to the project srcdir. documentation_formats typing.List[ DocumentationFormat ] Formats to generate documentation in. force_generate_code_and_docs bool Force to generate code and docs even if there were no changes in spec. generated_code_dir str The directory in which generated client code will be generated, relative to the outdir of this project. java_client_options projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsed_spec_file_name str The name of the output parsed OpenAPI specification file. python_client_options projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). typescript_client_options projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. spec_file str The path to the OpenAPI specification file, relative to the project source directory (srcdir). name Required Type: str Default: $BASEDIR This is the name of your project. commit_generated Optional Type: bool Default: true Whether to commit the managed files by default. git_options Optional Type: projen.GitOptions Configuration options for git. logging Optional Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional Type: bool Default: false Use renovatebot to handle dependency upgrades. renovatebot_options Optional Type: projen.RenovatebotOptions Default: default options Options for renovatebot. auto_approve_options Optional Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge Optional Type: bool Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. auto_merge_options Optional Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_credentials Optional Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projen_token_secret ~~ Optional Deprecated: use projenCredentials Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional Type: bool Default: false Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allow_library_dependencies Optional Type: bool Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. author_email Optional Type: str Author's e-mail. author_name Optional Type: str Author's name. author_organization Optional Type: bool Is the author an organization. author_url Optional Type: str Author's URL / Website. auto_detect_bin Optional Type: bool Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional Type: typing.Mapping[str] Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugs_email Optional Type: str The email address to which issues should be reported. bugs_url Optional Type: str The url to your project's issue tracker. bundled_deps Optional Type: typing.List[str] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. code_artifact_options Optional Type: projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional Type: typing.List[str] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'express' , 'lodash' , 'foo@^2' ] description Optional Type: str The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description dev_deps Optional Type: typing.List[str] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'typescript' , '@types/express' ] entrypoint Optional Type: str Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional Type: str Package's Homepage / Website. keywords Optional Type: typing.List[str] Keywords to include in package.json . license Optional Type: str Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional Type: bool Default: true Indicates if a license should be added. max_node_version Optional Type: str Default: no max Minimum node.js version to require via engines (inclusive). min_node_version Optional Type: str Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npm_access Optional Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npm_registry ~~ Optional Deprecated: use npmRegistryUrl instead Type: str The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npm_registry_url Optional Type: str Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npm_token_secret Optional Type: str Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. package_manager Optional Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. package_name Optional Type: str Default: defaults to project name The \"name\" in package.json. peer_dependency_options Optional Type: projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps Optional Type: typing.List[str] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. pnpm_version Optional Type: str Default: \"7\" The version of PNPM to use if using PNPM as a package manager. repository Optional Type: str The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repository_directory Optional Type: str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scoped_packages_options Optional Type: typing.List[projen.javascript.ScopedPackagesOptions] Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional Type: typing.Mapping[str] Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional Type: str Package's Stability. jsii_release_version Optional Type: str Default: \"latest\" Version requirement of publib which is used to publish modules to npm. major_version Optional Type: typing.Union[int, float] Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. min_major_version Optional Type: typing.Union[int, float] Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npm_dist_tag Optional Type: str Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. post_build_steps Optional Type: typing.List[projen.github.workflows.JobStep] Default: [] Steps to execute after build as part of the release workflow. prerelease Optional Type: str Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run Optional Type: bool Default: false Instead of actually publishing to package managers, just print the publishing command. publish_tasks Optional Type: bool Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. release_branches Optional Type: typing.Mapping[projen.release.BranchOptions] Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ release_every_commit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead Type: bool Default: true Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue Optional Type: bool Default: false Create a github issue on every failed publishing task. release_failure_issue_label Optional Type: str Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ release_schedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead Type: str Default: no scheduled releases CRON schedule to trigger new releases. release_tag_prefix Optional Type: str Default: \"v\" Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. release_trigger Optional Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. release_workflow_name Optional Type: str Default: \"Release\" The name of the default release workflow. release_workflow_setup_steps Optional Type: typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options Optional Type: typing.Mapping[typing.Any] Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflow_container_image Optional Type: str Default: default image Container image to use for GitHub workflows. workflow_runs_on Optional Type: typing.List[str] Default: [\"ubuntu-latest\"] Github Runner selection labels. default_release_branch Required Type: str Default: \"main\" The name of the main release branch. artifacts_directory Optional Type: str Default: \"dist\" A directory which will contain build artifacts. auto_approve_upgrades Optional Type: bool Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. build_workflow Optional Type: bool Default: true if not a subproject Define a GitHub workflow for building PRs. build_workflow_triggers Optional Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundler_options Optional Type: projen.javascript.BundlerOptions Options for Bundler . code_cov Optional Type: bool Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret Optional Type: str Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner Optional Type: str Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyright_period Optional Type: str Default: current year The copyright years to put in the LICENSE file. dependabot Optional Type: bool Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabot_options Optional Type: projen.github.DependabotOptions Default: default options Options for dependabot. deps_upgrade Optional Type: bool Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . deps_upgrade_options Optional Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional Type: typing.List[str] Additional entries to .gitignore. jest Optional Type: bool Default: true Setup jest unit tests. jest_options Optional Type: projen.javascript.JestOptions Default: default options Jest options. mutable_build Optional Type: bool Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore Type: typing.List[str] Additional entries to .npmignore. npmignore_enabled Optional Type: bool Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional Type: bool Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional Type: bool Default: false Setup prettier. prettier_options Optional Type: projen.javascript.PrettierOptions Default: default options Prettier options. projen_dev_dependency Optional Type: bool Default: true Indicates of \"projen\" should be installed as a devDependency. projenrc_js Optional Type: bool Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options Optional Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projen_version Optional Type: str Default: Defaults to the latest version. Version of projen to install. pull_request_template Optional Type: bool Default: true Include a GitHub pull request template. pull_request_template_contents Optional Type: typing.List[str] Default: default content The contents of the pull request template. release Optional Type: bool Default: true (false for subprojects) Add release management to this project. release_to_npm Optional Type: bool Default: false Automatically release to npm when new versions are introduced. ~~ release_workflow ~~ Optional Deprecated: see release . Type: bool Default: true if not a subproject DEPRECATED: renamed to release . workflow_bootstrap_steps Optional Type: typing.List[projen.github.workflows.JobStep] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflow_git_identity Optional Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflow_node_version Optional Type: str Default: same as minNodeVersion The node version to use in GitHub workflows. disable_tsconfig Optional Type: bool Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional Type: bool Default: false Docgen by Typedoc. docs_directory Optional Type: str Default: \"docs\" Docs directory. entrypoint_types Optional Type: str Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional Type: bool Default: true Setup eslint. eslint_options Optional Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional Type: str Default: \"lib\" Typescript artifacts output directory. projenrc_ts Optional Type: bool Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options Optional Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code Optional Type: bool Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional Type: str Default: \"src\" Typescript sources directory. testdir Optional Type: str Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfig_dev Optional Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file Optional Type: str Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescript_version Optional Type: str Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). client_languages Required Type: typing.List[ ClientLanguage ] The list of languages for which clients will be generated. A typescript client will always be generated. api_src_dir Optional Type: str The directory in which the api generated code will reside, relative to the project srcdir. documentation_formats Optional Type: typing.List[ DocumentationFormat ] Formats to generate documentation in. force_generate_code_and_docs Optional Type: bool Default: \"false\" Force to generate code and docs even if there were no changes in spec. generated_code_dir Optional Type: str Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. java_client_options Optional Type: projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsed_spec_file_name Optional Type: str Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. python_client_options Optional Type: projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. typescript_client_options Optional Type: projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. spec_file Optional Type: str Default: \"spec/spec.yaml\" The path to the OpenAPI specification file, relative to the project source directory (srcdir). Methods Name Description add_exclude_from_cleanup Exclude the matching files from pre-synth cleanup. add_git_ignore Adds a .gitignore pattern. add_package_ignore Exclude these files from the bundled package. add_task Adds a new task to this project. add_tip Prints a \"tip\" message during synthesis. annotate_generated Marks the provided file(s) as being generated. post_synthesize Called after all components are synthesized. pre_synthesize Called before all components are synthesized. remove_task Removes a task from a project. run_task_command Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . try_find_file Finds a file at the specified relative path within this project and all its subprojects. try_find_json_file Finds a json file by name. try_find_object_file Finds an object file (like JsonFile, YamlFile, etc.) by name. try_remove_file Finds a file at the specified relative path within this project and removes it. add_bins No description. add_bundled_deps Defines bundled dependencies. add_compile_command DEPRECATED. add_deps Defines normal dependencies. add_dev_deps Defines development/test dependencies. add_fields Directly set fields in package.json . add_keywords Adds keywords to package.json (deduplicated). add_peer_deps Defines peer dependencies. add_test_command DEPRECATED. has_script Indicates if a script by the name name is defined. remove_script Removes the npm script (always successful). render_workflow_setup Returns the set of workflow steps which should be executed to bootstrap a workflow. set_script Replaces the contents of an npm package.json script. add_exclude_from_cleanup def add_exclude_from_cleanup ( globs : str ) -> None Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: str The glob patterns to match. add_git_ignore def add_git_ignore ( pattern : str ) -> None Adds a .gitignore pattern. pattern Required Type: str The glob pattern to ignore. add_package_ignore def add_package_ignore ( pattern : str ) -> None Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . pattern Required Type: str add_task def add_task ( name : str , condition : str = None , cwd : str = None , description : str = None , env : typing . Mapping [ str ] = None , required_env : typing . List [ str ] = None , exec : str = None , receive_args : bool = None , steps : typing . List [ TaskStep ] = None ) -> Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: str The task name to add. condition Optional Type: str A shell command which determines if the this task should be executed. If the program exits with a zero exit code, steps will be executed. A non-zero code means that task will be skipped. cwd Optional Type: str Default: process.cwd() The working directory for all steps in this task (unless overridden by the step). description Optional Type: str Default: the task name The description of this build command. env Optional Type: typing.Mapping[str] Default: {} Defines environment variables for the execution of this task. Values in this map will be evaluated in a shell, so you can do stuff like $(echo \"foo\") . required_env Optional Type: typing.List[str] A set of environment variables that must be defined in order to execute this task. Task execution will fail if one of these is not defined. exec Optional Type: str Default: add steps using task.exec(command) or task.spawn(subtask) Shell command to execute as the first command of the task. receive_args Optional Type: bool Default: false Should the provided exec shell command receive args passed to the task. {@link TaskStepOptions.receiveArgs} steps Optional Type: typing.List[projen.TaskStep] List of task steps to run. ~~ add_tip ~~ def add_tip ( message : str ) -> None Prints a \"tip\" message during synthesis. message Required Type: str The message. annotate_generated def annotate_generated ( glob : str ) -> None Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: str the glob pattern to match (could be a file path). post_synthesize def post_synthesize () -> None Called after all components are synthesized. Order is not guaranteed. pre_synthesize def pre_synthesize () -> None Called before all components are synthesized. remove_task def remove_task ( name : str ) -> Task Removes a task from a project. name Required Type: str The name of the task to remove. run_task_command def run_task_command ( task : Task ) -> str Returns the shell command to execute in order to run a task. This will typically be npx projen TASK . task Required Type: projen.Task The task for which the command is required. synth def synth () -> None Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" try_find_file def try_find_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and all its subprojects. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. ~~ try_find_json_file ~~ def try_find_json_file ( file_path : str ) -> JsonFile Finds a json file by name. file_path Required Type: str The file path. try_find_object_file def try_find_object_file ( file_path : str ) -> ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. file_path Required Type: str The file path. try_remove_file def try_remove_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and removes it. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. add_bins def add_bins ( bins : typing . Mapping [ str ] ) -> None bins Required Type: typing.Mapping[str] add_bundled_deps def add_bundled_deps ( deps : str ) -> None Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json . deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ add_compile_command ~~ def add_compile_command ( commands : str ) -> None DEPRECATED. commands Required Type: str add_deps def add_deps ( deps : str ) -> None Defines normal dependencies. deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . add_dev_deps def add_dev_deps ( deps : str ) -> None Defines development/test dependencies. deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . add_fields def add_fields ( fields : typing . Mapping [ typing . Any ] ) -> None Directly set fields in package.json . fields Required Type: typing.Mapping[typing.Any] The fields to set. add_keywords def add_keywords ( keywords : str ) -> None Adds keywords to package.json (deduplicated). keywords Required Type: str The keywords to add. add_peer_deps def add_peer_deps ( deps : str ) -> None Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers. deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ add_test_command ~~ def add_test_command ( commands : str ) -> None DEPRECATED. commands Required Type: str has_script def has_script ( name : str ) -> bool Indicates if a script by the name name is defined. name Required Type: str The name of the script. remove_script def remove_script ( name : str ) -> None Removes the npm script (always successful). name Required Type: str The name of the script. render_workflow_setup def render_workflow_setup ( mutable : bool = None ) -> typing . List [ JobStep ] Returns the set of workflow steps which should be executed to bootstrap a workflow. mutable Optional Type: bool Default: false Should the pacakge lockfile be updated? set_script def set_script ( name : str , command : str ) -> None Replaces the contents of an npm package.json script. name Required Type: str The script name. command Required Type: str The command to execute. Properties Name Type Description build_task projen.Task No description. commit_generated bool Whether to commit the managed files by default. compile_task projen.Task No description. components typing.List[projen.Component] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected bool Whether or not the project is being ejected. files typing.List[projen.FileBase] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name str Project name. outdir str Absolute output directory of this project. package_task projen.Task No description. post_compile_task projen.Task No description. pre_compile_task projen.Task No description. project_build projen.ProjectBuild Manages the build process of the project. projen_command str The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. test_task projen.Task No description. default_task projen.Task This is the \"default\" task, the one that executes \"projen\". init_project projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. project_type projen.ProjectType No description. auto_approve projen.github.AutoApprove Auto approve set up for this project. dev_container projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. allow_library_dependencies bool No description. artifacts_directory str The build output directory. artifacts_javascript_directory str The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler projen.javascript.Bundler No description. entrypoint str No description. manifest typing.Any No description. package projen.javascript.NodePackage API for managing the node package. package_manager projen.javascript.NodePackageManager The package manager to use. run_script_command str The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). auto_merge projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. build_workflow projen.build.BuildWorkflow The PR build GitHub workflow. build_workflow_job_id str The job ID of the build workflow. jest projen.javascript.Jest The Jest configuration (if enabled). max_node_version str Maximum node version required by this package. min_node_version str Minimum node.js version required by this package. npmignore projen.IgnoreFile The .npmignore file. prettier projen.javascript.Prettier No description. publisher projen.release.Publisher Package publisher. release projen.release.Release Release management. upgrade_workflow projen.javascript.UpgradeDependencies The upgrade workflow. docs_directory str No description. libdir str The directory in which compiled .js files reside. srcdir str The directory in which the .ts sources reside. testdir str The directory in which tests reside. tsconfig_dev projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watch_task projen.Task The \"watch\" task. docgen bool No description. eslint projen.javascript.Eslint No description. tsconfig projen.javascript.TypescriptConfig No description. tsconfig_eslint projen.javascript.TypescriptConfig No description. api_src_dir str The directory in which the api generated code will reside, relative to the project srcdir. force_generate_code_and_docs bool Force to generate code and docs even if there were no changes in spec. generated_clients typing.Mapping[projen.Project] References to the client projects that were generated, keyed by language. generated_code_dir str The directory in which generated client code will be generated, relative to the outdir of this project. generated_typescript_client projen.typescript.TypeScriptProject A reference to the generated typescript client. spec_dir str The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. spec_file_name str The name of the spec file. pnpm_workspace projen.YamlFile Reference to the PNPM workspace yaml file which adds the dependency between this project and the generated typescript client when this project is used in a monorepo, and the package manager is PNPM. build_task Required build_task : Task Type: projen.Task commit_generated Required commit_generated : bool Type: bool Whether to commit the managed files by default. compile_task Required compile_task : Task Type: projen.Task components Required components : typing . List [ Component ] Type: typing.List[projen.Component] Returns all the components within this project. deps Required deps : Dependencies Type: projen.Dependencies Project dependencies. ejected Required ejected : bool Type: bool Whether or not the project is being ejected. files Required files : typing . List [ FileBase ] Type: typing.List[projen.FileBase] All files in this project. gitattributes Required gitattributes : GitAttributesFile Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required gitignore : IgnoreFile Type: projen.IgnoreFile .gitignore. logger Required logger : Logger Type: projen.Logger Logging utilities. name Required name : str Type: str Project name. outdir Required outdir : str Type: str Absolute output directory of this project. package_task Required package_task : Task Type: projen.Task post_compile_task Required post_compile_task : Task Type: projen.Task pre_compile_task Required pre_compile_task : Task Type: projen.Task project_build Required project_build : ProjectBuild Type: projen.ProjectBuild Manages the build process of the project. projen_command Required projen_command : str Type: str The command to use in order to run the projen CLI. root Required root : Project Type: projen.Project The root project. tasks Required tasks : Tasks Type: projen.Tasks Project tasks. test_task Required test_task : Task Type: projen.Task default_task Optional default_task : Task Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. init_project Optional init_project : InitProject Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional parent : Project Type: projen.Project A parent project. If undefined, this is the root project. project_type Required project_type : ProjectType Type: projen.ProjectType auto_approve Optional auto_approve : AutoApprove Type: projen.github.AutoApprove Auto approve set up for this project. dev_container Optional dev_container : DevContainer Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional github : GitHub Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional gitpod : Gitpod Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional vscode : VsCode Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. ~~ allow_library_dependencies ~~ Required Deprecated: use package.allowLibraryDependencies allow_library_dependencies : bool Type: bool artifacts_directory Required artifacts_directory : str Type: str The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg . artifacts_javascript_directory Required artifacts_javascript_directory : str Type: str The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler Required bundler : Bundler Type: projen.javascript.Bundler ~~ entrypoint ~~ Required Deprecated: use package.entrypoint entrypoint : str Type: str ~~ manifest ~~ Required Deprecated: use package.addField(x, y) manifest : typing . Any Type: typing.Any package Required package : NodePackage Type: projen.javascript.NodePackage API for managing the node package. ~~ package_manager ~~ Required Deprecated: use package.packageManager package_manager : NodePackageManager Type: projen.javascript.NodePackageManager The package manager to use. run_script_command Required run_script_command : str Type: str The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). auto_merge Optional auto_merge : AutoMerge Type: projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. build_workflow Optional build_workflow : BuildWorkflow Type: projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled. build_workflow_job_id Optional build_workflow_job_id : str Type: str The job ID of the build workflow. jest Optional jest : Jest Type: projen.javascript.Jest The Jest configuration (if enabled). max_node_version Optional max_node_version : str Type: str Maximum node version required by this package. min_node_version Optional min_node_version : str Type: str Minimum node.js version required by this package. npmignore Optional npmignore : IgnoreFile Type: projen.IgnoreFile The .npmignore file. prettier Optional prettier : Prettier Type: projen.javascript.Prettier ~~ publisher ~~ Optional Deprecated: use release.publisher . publisher : Publisher Type: projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow. release Optional release : Release Type: projen.release.Release Release management. upgrade_workflow Optional upgrade_workflow : UpgradeDependencies Type: projen.javascript.UpgradeDependencies The upgrade workflow. docs_directory Required docs_directory : str Type: str libdir Required libdir : str Type: str The directory in which compiled .js files reside. srcdir Required srcdir : str Type: str The directory in which the .ts sources reside. testdir Required testdir : str Type: str The directory in which tests reside. tsconfig_dev Required tsconfig_dev : TypescriptConfig Type: projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watch_task Required watch_task : Task Type: projen.Task The \"watch\" task. docgen Optional docgen : bool Type: bool eslint Optional eslint : Eslint Type: projen.javascript.Eslint tsconfig Optional tsconfig : TypescriptConfig Type: projen.javascript.TypescriptConfig tsconfig_eslint Optional tsconfig_eslint : TypescriptConfig Type: projen.javascript.TypescriptConfig api_src_dir Required api_src_dir : str Type: str The directory in which the api generated code will reside, relative to the project srcdir. force_generate_code_and_docs Required force_generate_code_and_docs : bool Type: bool Force to generate code and docs even if there were no changes in spec. generated_clients Required generated_clients : typing . Mapping [ Project ] Type: typing.Mapping[projen.Project] References to the client projects that were generated, keyed by language. generated_code_dir Required generated_code_dir : str Type: str The directory in which generated client code will be generated, relative to the outdir of this project. generated_typescript_client Required generated_typescript_client : TypeScriptProject Type: projen.typescript.TypeScriptProject A reference to the generated typescript client. spec_dir Required spec_dir : str Type: str The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. spec_file_name Required spec_file_name : str Type: str The name of the spec file. pnpm_workspace Optional pnpm_workspace : YamlFile Type: projen.YamlFile Reference to the PNPM workspace yaml file which adds the dependency between this project and the generated typescript client when this project is used in a monorepo, and the package manager is PNPM. Constants Name Type Description DEFAULT_TASK str The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required DEFAULT_TASK : str Type: str The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. SmithyApiGatewayJavaProject Synthesizes a Java Project with a Smithy model, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests. Initializers import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . SmithyApiGatewayJavaProject ( name : str , commit_generated : bool = None , git_options : GitOptions = None , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , renovatebot : bool = None , renovatebot_options : RenovatebotOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge : bool = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_credentials : GithubCredentials = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , artifact_id : str , group_id : str , version : str , description : str = None , packaging : str = None , url : str = None , compile_options : MavenCompileOptions = None , deps : typing . List [ str ] = None , distdir : str = None , junit : bool = None , junit_options : JunitOptions = None , packaging_options : MavenPackagingOptions = None , projenrc_java : bool = None , projenrc_java_options : ProjenrcOptions = None , test_deps : typing . List [ str ] = None , sample : bool = None , sample_java_package : str = None , client_languages : typing . List [ ClientLanguage ], api_src_dir : str = None , documentation_formats : typing . List [ DocumentationFormat ] = None , force_generate_code_and_docs : bool = None , generated_code_dir : str = None , java_client_options : JavaProjectOptions = None , parsed_spec_file_name : str = None , python_client_options : PythonProjectOptions = None , typescript_client_options : TypeScriptProjectOptions = None , service_name : SmithyServiceName , ignore_gradle_wrapper : bool = None , ignore_smithy_build_output : bool = None , model_dir : str = None , smithy_build_options : SmithyBuildOptions = None ) Name Type Description name str This is the name of your project. commit_generated bool Whether to commit the managed files by default. git_options projen.GitOptions Configuration options for git. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. renovatebot bool Use renovatebot to handle dependency upgrades. renovatebot_options projen.RenovatebotOptions Options for renovatebot. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge bool Enable automatic merging on GitHub. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_credentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. artifact_id str The artifactId is generally the name that the project is known by. group_id str This is generally unique amongst an organization or a project. version str This is the last piece of the naming puzzle. description str Description of a project is always good. packaging str Project packaging format. url str The URL, like the name, is not required. compile_options projen.java.MavenCompileOptions Compile options. deps typing.List[str] List of runtime dependencies for this project. distdir str Final artifact output directory. junit bool Include junit tests. junit_options projen.java.JunitOptions junit options. packaging_options projen.java.MavenPackagingOptions Packaging options. projenrc_java bool Use projenrc in java. projenrc_java_options projen.java.ProjenrcOptions Options related to projenrc in java. test_deps typing.List[str] List of test dependencies for this project. sample bool Include sample code and test if the relevant directories don't exist. sample_java_package str The java package to use for the code sample. client_languages typing.List[ ClientLanguage ] The list of languages for which clients will be generated. api_src_dir str The directory in which the api generated code will reside, relative to the project srcdir. documentation_formats typing.List[ DocumentationFormat ] Formats to generate documentation in. force_generate_code_and_docs bool Force to generate code and docs even if there were no changes in spec. generated_code_dir str The directory in which generated client code will be generated, relative to the outdir of this project. java_client_options projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsed_spec_file_name str The name of the output parsed OpenAPI specification file. python_client_options projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). typescript_client_options projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. service_name SmithyServiceName The name of the Smithy service from your model which will be targeted for deployment and client generation. ignore_gradle_wrapper bool Set to false if you would like to check in your gradle wrapper. ignore_smithy_build_output bool Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. model_dir str The path to the Smithy model directory, relative to the project source directory (srcdir). smithy_build_options SmithyBuildOptions Any additional properties you'd like to add your smithy-build.json. The smithy-build.json will automatically include the \"openapi\" plugin, but you can add extra configuration for that via this option if you like. name Required Type: str Default: $BASEDIR This is the name of your project. commit_generated Optional Type: bool Default: true Whether to commit the managed files by default. git_options Optional Type: projen.GitOptions Configuration options for git. logging Optional Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional Type: bool Default: false Use renovatebot to handle dependency upgrades. renovatebot_options Optional Type: projen.RenovatebotOptions Default: default options Options for renovatebot. auto_approve_options Optional Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge Optional Type: bool Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. auto_merge_options Optional Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_credentials Optional Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projen_token_secret ~~ Optional Deprecated: use projenCredentials Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional Type: bool Default: false Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. artifact_id Required Type: str Default: \"my-app\" The artifactId is generally the name that the project is known by. Although the groupId is important, people within the group will rarely mention the groupId in discussion (they are often all be the same ID, such as the MojoHaus project groupId: org.codehaus.mojo). It, along with the groupId, creates a key that separates this project from every other project in the world (at least, it should :) ). Along with the groupId, the artifactId fully defines the artifact's living quarters within the repository. In the case of the above project, my-project lives in $M2_REPO/org/codehaus/mojo/my-project. group_id Required Type: str Default: \"org.acme\" This is generally unique amongst an organization or a project. For example, all core Maven artifacts do (well, should) live under the groupId org.apache.maven. Group ID's do not necessarily use the dot notation, for example, the junit project. Note that the dot-notated groupId does not have to correspond to the package structure that the project contains. It is, however, a good practice to follow. When stored within a repository, the group acts much like the Java packaging structure does in an operating system. The dots are replaced by OS specific directory separators (such as '/' in Unix) which becomes a relative directory structure from the base repository. In the example given, the org.codehaus.mojo group lives within the directory $M2_REPO/org/codehaus/mojo. version Required Type: str Default: \"0.1.0\" This is the last piece of the naming puzzle. groupId:artifactId denotes a single project but they cannot delineate which incarnation of that project we are talking about. Do we want the junit:junit of 2018 (version 4.12), or of 2007 (version 3.8.2)? In short: code changes, those changes should be versioned, and this element keeps those versions in line. It is also used within an artifact's repository to separate versions from each other. my-project version 1.0 files live in the directory structure $M2_REPO/org/codehaus/mojo/my-project/1.0. description Optional Type: str Default: undefined Description of a project is always good. Although this should not replace formal documentation, a quick comment to any readers of the POM is always helpful. packaging Optional Type: str Default: \"jar\" Project packaging format. url Optional Type: str Default: undefined The URL, like the name, is not required. This is a nice gesture for projects users, however, so that they know where the project lives. compile_options Optional Type: projen.java.MavenCompileOptions Default: defaults Compile options. deps Optional Type: typing.List[str] Default: [] List of runtime dependencies for this project. Dependencies use the format: <groupId>/<artifactId>@<semver> Additional dependencies can be added via project.addDependency() . distdir Optional Type: str Default: \"dist/java\" Final artifact output directory. junit Optional Type: bool Default: true Include junit tests. junit_options Optional Type: projen.java.JunitOptions Default: defaults junit options. packaging_options Optional Type: projen.java.MavenPackagingOptions Default: defaults Packaging options. projenrc_java Optional Type: bool Default: true Use projenrc in java. This will install projen as a java dependency and will add a synth task which will compile & execute main() from src/main/java/projenrc.java . projenrc_java_options Optional Type: projen.java.ProjenrcOptions Default: default options Options related to projenrc in java. test_deps Optional Type: typing.List[str] Default: [] List of test dependencies for this project. Dependencies use the format: <groupId>/<artifactId>@<semver> Additional dependencies can be added via project.addTestDependency() . sample Optional Type: bool Default: true Include sample code and test if the relevant directories don't exist. sample_java_package Optional Type: str Default: \"org.acme\" The java package to use for the code sample. client_languages Required Type: typing.List[ ClientLanguage ] The list of languages for which clients will be generated. A typescript client will always be generated. api_src_dir Optional Type: str The directory in which the api generated code will reside, relative to the project srcdir. documentation_formats Optional Type: typing.List[ DocumentationFormat ] Formats to generate documentation in. force_generate_code_and_docs Optional Type: bool Default: \"false\" Force to generate code and docs even if there were no changes in spec. generated_code_dir Optional Type: str Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. java_client_options Optional Type: projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsed_spec_file_name Optional Type: str Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. python_client_options Optional Type: projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. typescript_client_options Optional Type: projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. service_name Required Type: SmithyServiceName Default: \"example.hello#Hello\" The name of the Smithy service from your model which will be targeted for deployment and client generation. On initial project synthesis this service name will be written to the sample \"hello world\" model. If you change this value after initial synthesis you will need to manually update your Smithy models to match, unless you delete the \"model\" directory. Likewise, if you change the namespace or service name in your Smithy models you will need to update this value to ensure your service can be found. ignore_gradle_wrapper Optional Type: bool Default: true Set to false if you would like to check in your gradle wrapper. Do so if you would like to use a different version of gradle to the one provided by default ignore_smithy_build_output Optional Type: bool Default: true Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. model_dir Optional Type: str Default: \"model\" The path to the Smithy model directory, relative to the project source directory (srcdir). smithy_build_options Optional Type: SmithyBuildOptions Any additional properties you'd like to add your smithy-build.json. The smithy-build.json will automatically include the \"openapi\" plugin, but you can add extra configuration for that via this option if you like. https://awslabs.github.io/smithy/2.0/guides/converting-to-openapi.html#openapi-configuration-settings Methods Name Description add_exclude_from_cleanup Exclude the matching files from pre-synth cleanup. add_git_ignore Adds a .gitignore pattern. add_package_ignore Exclude these files from the bundled package. add_task Adds a new task to this project. add_tip Prints a \"tip\" message during synthesis. annotate_generated Marks the provided file(s) as being generated. post_synthesize Called after all components are synthesized. pre_synthesize Called before all components are synthesized. remove_task Removes a task from a project. run_task_command Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . try_find_file Finds a file at the specified relative path within this project and all its subprojects. try_find_json_file Finds a json file by name. try_find_object_file Finds an object file (like JsonFile, YamlFile, etc.) by name. try_remove_file Finds a file at the specified relative path within this project and removes it. add_dependency Adds a runtime dependency. add_plugin Adds a build plugin to the pom. add_test_dependency Adds a test dependency. add_exclude_from_cleanup def add_exclude_from_cleanup ( globs : str ) -> None Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: str The glob patterns to match. add_git_ignore def add_git_ignore ( pattern : str ) -> None Adds a .gitignore pattern. pattern Required Type: str The glob pattern to ignore. add_package_ignore def add_package_ignore ( _pattern : str ) -> None Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . _pattern Required Type: str The glob pattern to exclude. add_task def add_task ( name : str , condition : str = None , cwd : str = None , description : str = None , env : typing . Mapping [ str ] = None , required_env : typing . List [ str ] = None , exec : str = None , receive_args : bool = None , steps : typing . List [ TaskStep ] = None ) -> Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: str The task name to add. condition Optional Type: str A shell command which determines if the this task should be executed. If the program exits with a zero exit code, steps will be executed. A non-zero code means that task will be skipped. cwd Optional Type: str Default: process.cwd() The working directory for all steps in this task (unless overridden by the step). description Optional Type: str Default: the task name The description of this build command. env Optional Type: typing.Mapping[str] Default: {} Defines environment variables for the execution of this task. Values in this map will be evaluated in a shell, so you can do stuff like $(echo \"foo\") . required_env Optional Type: typing.List[str] A set of environment variables that must be defined in order to execute this task. Task execution will fail if one of these is not defined. exec Optional Type: str Default: add steps using task.exec(command) or task.spawn(subtask) Shell command to execute as the first command of the task. receive_args Optional Type: bool Default: false Should the provided exec shell command receive args passed to the task. {@link TaskStepOptions.receiveArgs} steps Optional Type: typing.List[projen.TaskStep] List of task steps to run. ~~ add_tip ~~ def add_tip ( message : str ) -> None Prints a \"tip\" message during synthesis. message Required Type: str The message. annotate_generated def annotate_generated ( glob : str ) -> None Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: str the glob pattern to match (could be a file path). post_synthesize def post_synthesize () -> None Called after all components are synthesized. Order is not guaranteed. pre_synthesize def pre_synthesize () -> None Called before all components are synthesized. remove_task def remove_task ( name : str ) -> Task Removes a task from a project. name Required Type: str The name of the task to remove. run_task_command def run_task_command ( task : Task ) -> str Returns the shell command to execute in order to run a task. By default, this is npx projen@<version> <task> task Required Type: projen.Task The task for which the command is required. synth def synth () -> None Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" try_find_file def try_find_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and all its subprojects. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. ~~ try_find_json_file ~~ def try_find_json_file ( file_path : str ) -> JsonFile Finds a json file by name. file_path Required Type: str The file path. try_find_object_file def try_find_object_file ( file_path : str ) -> ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. file_path Required Type: str The file path. try_remove_file def try_remove_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and removes it. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. add_dependency def add_dependency ( spec : str ) -> None Adds a runtime dependency. spec Required Type: str Format <groupId>/<artifactId>@<semver> . add_plugin def add_plugin ( spec : str , configuration : typing . Mapping [ typing . Any ] = None , dependencies : typing . List [ str ] = None , executions : typing . List [ PluginExecution ] = None ) -> Dependency Adds a build plugin to the pom. The plug in is also added as a BUILD dep to the project. spec Required Type: str dependency spec ( group/artifact@version ). configuration Optional Type: typing.Mapping[typing.Any] Default: {} Plugin key/value configuration. dependencies Optional Type: typing.List[str] Default: [] You could configure the dependencies for the plugin. Dependencies are in <groupId>/<artifactId>@<semver> format. executions Optional Type: typing.List[projen.java.PluginExecution] Default: [] Plugin executions. add_test_dependency def add_test_dependency ( spec : str ) -> None Adds a test dependency. spec Required Type: str Format <groupId>/<artifactId>@<semver> . Properties Name Type Description build_task projen.Task No description. commit_generated bool Whether to commit the managed files by default. compile_task projen.Task No description. components typing.List[projen.Component] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected bool Whether or not the project is being ejected. files typing.List[projen.FileBase] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name str Project name. outdir str Absolute output directory of this project. package_task projen.Task No description. post_compile_task projen.Task No description. pre_compile_task projen.Task No description. project_build projen.ProjectBuild Manages the build process of the project. projen_command str The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. test_task projen.Task No description. default_task projen.Task This is the \"default\" task, the one that executes \"projen\". init_project projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. project_type projen.ProjectType No description. auto_approve projen.github.AutoApprove Auto approve set up for this project. dev_container projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. compile projen.java.MavenCompile Compile component. distdir str Maven artifact output directory. packaging projen.java.MavenPackaging Packaging component. pom projen.java.Pom API for managing pom.xml . junit projen.java.Junit JUnit component. projenrc projen.java.Projenrc Projenrc component. api_src_dir str The directory in which the api generated code will reside, relative to the project srcdir. generated_clients typing.Mapping[projen.Project] References to the client projects that were generated, keyed by language. generated_code_dir str The directory in which generated client code will be generated, relative to the outdir of this project. generated_java_client projen.java.JavaProject A reference to the generated java client. spec_dir str The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. spec_file_name str The name of the spec file. force_generate_code_and_docs bool Force to generate code and docs even if there were no changes in spec. build_task Required build_task : Task Type: projen.Task commit_generated Required commit_generated : bool Type: bool Whether to commit the managed files by default. compile_task Required compile_task : Task Type: projen.Task components Required components : typing . List [ Component ] Type: typing.List[projen.Component] Returns all the components within this project. deps Required deps : Dependencies Type: projen.Dependencies Project dependencies. ejected Required ejected : bool Type: bool Whether or not the project is being ejected. files Required files : typing . List [ FileBase ] Type: typing.List[projen.FileBase] All files in this project. gitattributes Required gitattributes : GitAttributesFile Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required gitignore : IgnoreFile Type: projen.IgnoreFile .gitignore. logger Required logger : Logger Type: projen.Logger Logging utilities. name Required name : str Type: str Project name. outdir Required outdir : str Type: str Absolute output directory of this project. package_task Required package_task : Task Type: projen.Task post_compile_task Required post_compile_task : Task Type: projen.Task pre_compile_task Required pre_compile_task : Task Type: projen.Task project_build Required project_build : ProjectBuild Type: projen.ProjectBuild Manages the build process of the project. projen_command Required projen_command : str Type: str The command to use in order to run the projen CLI. root Required root : Project Type: projen.Project The root project. tasks Required tasks : Tasks Type: projen.Tasks Project tasks. test_task Required test_task : Task Type: projen.Task default_task Optional default_task : Task Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. init_project Optional init_project : InitProject Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional parent : Project Type: projen.Project A parent project. If undefined, this is the root project. project_type Required project_type : ProjectType Type: projen.ProjectType auto_approve Optional auto_approve : AutoApprove Type: projen.github.AutoApprove Auto approve set up for this project. dev_container Optional dev_container : DevContainer Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional github : GitHub Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional gitpod : Gitpod Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional vscode : VsCode Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. compile Required compile : MavenCompile Type: projen.java.MavenCompile Compile component. distdir Required distdir : str Type: str Maven artifact output directory. packaging Required packaging : MavenPackaging Type: projen.java.MavenPackaging Packaging component. pom Required pom : Pom Type: projen.java.Pom API for managing pom.xml . junit Optional junit : Junit Type: projen.java.Junit JUnit component. projenrc Optional projenrc : Projenrc Type: projen.java.Projenrc Projenrc component. api_src_dir Required api_src_dir : str Type: str The directory in which the api generated code will reside, relative to the project srcdir. This will also be used as the package for the api project. generated_clients Required generated_clients : typing . Mapping [ Project ] Type: typing.Mapping[projen.Project] References to the client projects that were generated, keyed by language. generated_code_dir Required generated_code_dir : str Type: str The directory in which generated client code will be generated, relative to the outdir of this project. generated_java_client Required generated_java_client : JavaProject Type: projen.java.JavaProject A reference to the generated java client. spec_dir Required spec_dir : str Type: str The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. spec_file_name Required spec_file_name : str Type: str The name of the spec file. force_generate_code_and_docs Optional force_generate_code_and_docs : bool Type: bool Force to generate code and docs even if there were no changes in spec. Constants Name Type Description DEFAULT_TASK str The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required DEFAULT_TASK : str Type: str The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. SmithyApiGatewayPythonProject Synthesizes a Python Project with a Smithy model, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests. Initializers import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . SmithyApiGatewayPythonProject ( name : str , commit_generated : bool = None , git_options : GitOptions = None , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , renovatebot : bool = None , renovatebot_options : RenovatebotOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge : bool = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_credentials : GithubCredentials = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , author_email : str , author_name : str , version : str , classifiers : typing . List [ str ] = None , description : str = None , homepage : str = None , license : str = None , package_name : str = None , poetry_options : PoetryPyprojectOptionsWithoutDeps = None , setup_config : typing . Mapping [ typing . Any ] = None , module_name : str , deps : typing . List [ str ] = None , dev_deps : typing . List [ str ] = None , pip : bool = None , poetry : bool = None , projenrc_js : bool = None , projenrc_js_options : ProjenrcOptions = None , projenrc_python : bool = None , projenrc_python_options : ProjenrcOptions = None , pytest : bool = None , pytest_options : PytestOptions = None , sample : bool = None , setuptools : bool = None , venv : bool = None , venv_options : VenvOptions = None , client_languages : typing . List [ ClientLanguage ], api_src_dir : str = None , documentation_formats : typing . List [ DocumentationFormat ] = None , force_generate_code_and_docs : bool = None , generated_code_dir : str = None , java_client_options : JavaProjectOptions = None , parsed_spec_file_name : str = None , python_client_options : PythonProjectOptions = None , typescript_client_options : TypeScriptProjectOptions = None , service_name : SmithyServiceName , ignore_gradle_wrapper : bool = None , ignore_smithy_build_output : bool = None , model_dir : str = None , smithy_build_options : SmithyBuildOptions = None ) Name Type Description name str This is the name of your project. commit_generated bool Whether to commit the managed files by default. git_options projen.GitOptions Configuration options for git. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. renovatebot bool Use renovatebot to handle dependency upgrades. renovatebot_options projen.RenovatebotOptions Options for renovatebot. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge bool Enable automatic merging on GitHub. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_credentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. author_email str Author's e-mail. author_name str Author's name. version str Version of the package. classifiers typing.List[str] A list of PyPI trove classifiers that describe the project. description str A short description of the package. homepage str A URL to the website of the project. license str License of this package as an SPDX identifier. package_name str Package name. poetry_options projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setup_config typing.Mapping[typing.Any] Additional fields to pass in the setup() function if using setuptools. module_name str Name of the python package as used in imports and filenames. deps typing.List[str] List of runtime dependencies for this project. dev_deps typing.List[str] List of dev dependencies for this project. pip bool Use pip with a requirements.txt file to track project dependencies. poetry bool Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrc_js bool Use projenrc in javascript. projenrc_js_options projen.javascript.ProjenrcOptions Options related to projenrc in JavaScript. projenrc_python bool Use projenrc in Python. projenrc_python_options projen.python.ProjenrcOptions Options related to projenrc in python. pytest bool Include pytest tests. pytest_options projen.python.PytestOptions pytest options. sample bool Include sample code and test if the relevant directories don't exist. setuptools bool Use setuptools with a setup.py script for packaging and publishing. venv bool Use venv to manage a virtual environment for installing dependencies inside. venv_options projen.python.VenvOptions Venv options. client_languages typing.List[ ClientLanguage ] The list of languages for which clients will be generated. api_src_dir str The directory in which the api generated code will reside, relative to the project srcdir. documentation_formats typing.List[ DocumentationFormat ] Formats to generate documentation in. force_generate_code_and_docs bool Force to generate code and docs even if there were no changes in spec. generated_code_dir str The directory in which generated client code will be generated, relative to the outdir of this project. java_client_options projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsed_spec_file_name str The name of the output parsed OpenAPI specification file. python_client_options projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). typescript_client_options projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. service_name SmithyServiceName The name of the Smithy service from your model which will be targeted for deployment and client generation. ignore_gradle_wrapper bool Set to false if you would like to check in your gradle wrapper. ignore_smithy_build_output bool Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. model_dir str The path to the Smithy model directory, relative to the project source directory (srcdir). smithy_build_options SmithyBuildOptions Any additional properties you'd like to add your smithy-build.json. The smithy-build.json will automatically include the \"openapi\" plugin, but you can add extra configuration for that via this option if you like. name Required Type: str Default: $BASEDIR This is the name of your project. commit_generated Optional Type: bool Default: true Whether to commit the managed files by default. git_options Optional Type: projen.GitOptions Configuration options for git. logging Optional Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional Type: bool Default: false Use renovatebot to handle dependency upgrades. renovatebot_options Optional Type: projen.RenovatebotOptions Default: default options Options for renovatebot. auto_approve_options Optional Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge Optional Type: bool Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. auto_merge_options Optional Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_credentials Optional Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projen_token_secret ~~ Optional Deprecated: use projenCredentials Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional Type: bool Default: false Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. author_email Required Type: str Default: $GIT_USER_EMAIL Author's e-mail. author_name Required Type: str Default: $GIT_USER_NAME Author's name. version Required Type: str Default: \"0.1.0\" Version of the package. classifiers Optional Type: typing.List[str] A list of PyPI trove classifiers that describe the project. https://pypi.org/classifiers/ description Optional Type: str A short description of the package. homepage Optional Type: str A URL to the website of the project. license Optional Type: str License of this package as an SPDX identifier. package_name Optional Type: str Package name. poetry_options Optional Type: projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setup_config Optional Type: typing.Mapping[typing.Any] Additional fields to pass in the setup() function if using setuptools. module_name Required Type: str Default: $PYTHON_MODULE_NAME Name of the python package as used in imports and filenames. Must only consist of alphanumeric characters and underscores. deps Optional Type: typing.List[str] Default: [] List of runtime dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDependency() . dev_deps Optional Type: typing.List[str] Default: [] List of dev dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDevDependency() . pip Optional Type: bool Default: true, unless poetry is true, then false Use pip with a requirements.txt file to track project dependencies. poetry Optional Type: bool Default: false Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. This feature is incompatible with pip, setuptools, or venv. If you set this option to true , then pip, setuptools, and venv must be set to false . projenrc_js Optional Type: bool Default: false Use projenrc in javascript. This will install projen as a JavaScript dependency and add a synth task which will run .projenrc.js . projenrc_js_options Optional Type: projen.javascript.ProjenrcOptions Default: default options Options related to projenrc in JavaScript. projenrc_python Optional Type: bool Default: true Use projenrc in Python. This will install projen as a Python dependency and add a synth task which will run .projenrc.py . projenrc_python_options Optional Type: projen.python.ProjenrcOptions Default: default options Options related to projenrc in python. pytest Optional Type: bool Default: true Include pytest tests. pytest_options Optional Type: projen.python.PytestOptions Default: defaults pytest options. sample Optional Type: bool Default: true Include sample code and test if the relevant directories don't exist. setuptools Optional Type: bool Default: true, unless poetry is true, then false Use setuptools with a setup.py script for packaging and publishing. venv Optional Type: bool Default: true, unless poetry is true, then false Use venv to manage a virtual environment for installing dependencies inside. venv_options Optional Type: projen.python.VenvOptions Default: defaults Venv options. client_languages Required Type: typing.List[ ClientLanguage ] The list of languages for which clients will be generated. A typescript client will always be generated. api_src_dir Optional Type: str The directory in which the api generated code will reside, relative to the project srcdir. documentation_formats Optional Type: typing.List[ DocumentationFormat ] Formats to generate documentation in. force_generate_code_and_docs Optional Type: bool Default: \"false\" Force to generate code and docs even if there were no changes in spec. generated_code_dir Optional Type: str Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. java_client_options Optional Type: projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsed_spec_file_name Optional Type: str Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. python_client_options Optional Type: projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. typescript_client_options Optional Type: projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. service_name Required Type: SmithyServiceName Default: \"example.hello#Hello\" The name of the Smithy service from your model which will be targeted for deployment and client generation. On initial project synthesis this service name will be written to the sample \"hello world\" model. If you change this value after initial synthesis you will need to manually update your Smithy models to match, unless you delete the \"model\" directory. Likewise, if you change the namespace or service name in your Smithy models you will need to update this value to ensure your service can be found. ignore_gradle_wrapper Optional Type: bool Default: true Set to false if you would like to check in your gradle wrapper. Do so if you would like to use a different version of gradle to the one provided by default ignore_smithy_build_output Optional Type: bool Default: true Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. model_dir Optional Type: str Default: \"model\" The path to the Smithy model directory, relative to the project source directory (srcdir). smithy_build_options Optional Type: SmithyBuildOptions Any additional properties you'd like to add your smithy-build.json. The smithy-build.json will automatically include the \"openapi\" plugin, but you can add extra configuration for that via this option if you like. https://awslabs.github.io/smithy/2.0/guides/converting-to-openapi.html#openapi-configuration-settings Methods Name Description add_exclude_from_cleanup Exclude the matching files from pre-synth cleanup. add_git_ignore Adds a .gitignore pattern. add_package_ignore Exclude these files from the bundled package. add_task Adds a new task to this project. add_tip Prints a \"tip\" message during synthesis. annotate_generated Marks the provided file(s) as being generated. post_synthesize Called after all components are synthesized. pre_synthesize Called before all components are synthesized. remove_task Removes a task from a project. run_task_command Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . try_find_file Finds a file at the specified relative path within this project and all its subprojects. try_find_json_file Finds a json file by name. try_find_object_file Finds an object file (like JsonFile, YamlFile, etc.) by name. try_remove_file Finds a file at the specified relative path within this project and removes it. add_dependency Adds a runtime dependency. add_dev_dependency Adds a dev dependency. add_exclude_from_cleanup def add_exclude_from_cleanup ( globs : str ) -> None Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: str The glob patterns to match. add_git_ignore def add_git_ignore ( pattern : str ) -> None Adds a .gitignore pattern. pattern Required Type: str The glob pattern to ignore. add_package_ignore def add_package_ignore ( _pattern : str ) -> None Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . _pattern Required Type: str The glob pattern to exclude. add_task def add_task ( name : str , condition : str = None , cwd : str = None , description : str = None , env : typing . Mapping [ str ] = None , required_env : typing . List [ str ] = None , exec : str = None , receive_args : bool = None , steps : typing . List [ TaskStep ] = None ) -> Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: str The task name to add. condition Optional Type: str A shell command which determines if the this task should be executed. If the program exits with a zero exit code, steps will be executed. A non-zero code means that task will be skipped. cwd Optional Type: str Default: process.cwd() The working directory for all steps in this task (unless overridden by the step). description Optional Type: str Default: the task name The description of this build command. env Optional Type: typing.Mapping[str] Default: {} Defines environment variables for the execution of this task. Values in this map will be evaluated in a shell, so you can do stuff like $(echo \"foo\") . required_env Optional Type: typing.List[str] A set of environment variables that must be defined in order to execute this task. Task execution will fail if one of these is not defined. exec Optional Type: str Default: add steps using task.exec(command) or task.spawn(subtask) Shell command to execute as the first command of the task. receive_args Optional Type: bool Default: false Should the provided exec shell command receive args passed to the task. {@link TaskStepOptions.receiveArgs} steps Optional Type: typing.List[projen.TaskStep] List of task steps to run. ~~ add_tip ~~ def add_tip ( message : str ) -> None Prints a \"tip\" message during synthesis. message Required Type: str The message. annotate_generated def annotate_generated ( glob : str ) -> None Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: str the glob pattern to match (could be a file path). post_synthesize def post_synthesize () -> None Called after all components are synthesized. Order is not guaranteed. pre_synthesize def pre_synthesize () -> None Called before all components are synthesized. remove_task def remove_task ( name : str ) -> Task Removes a task from a project. name Required Type: str The name of the task to remove. run_task_command def run_task_command ( task : Task ) -> str Returns the shell command to execute in order to run a task. By default, this is npx projen@<version> <task> task Required Type: projen.Task The task for which the command is required. synth def synth () -> None Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" try_find_file def try_find_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and all its subprojects. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. ~~ try_find_json_file ~~ def try_find_json_file ( file_path : str ) -> JsonFile Finds a json file by name. file_path Required Type: str The file path. try_find_object_file def try_find_object_file ( file_path : str ) -> ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. file_path Required Type: str The file path. try_remove_file def try_remove_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and removes it. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. add_dependency def add_dependency ( spec : str ) -> None Adds a runtime dependency. spec Required Type: str Format <module>@<semver> . add_dev_dependency def add_dev_dependency ( spec : str ) -> None Adds a dev dependency. spec Required Type: str Format <module>@<semver> . Properties Name Type Description build_task projen.Task No description. commit_generated bool Whether to commit the managed files by default. compile_task projen.Task No description. components typing.List[projen.Component] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected bool Whether or not the project is being ejected. files typing.List[projen.FileBase] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name str Project name. outdir str Absolute output directory of this project. package_task projen.Task No description. post_compile_task projen.Task No description. pre_compile_task projen.Task No description. project_build projen.ProjectBuild Manages the build process of the project. projen_command str The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. test_task projen.Task No description. default_task projen.Task This is the \"default\" task, the one that executes \"projen\". init_project projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. project_type projen.ProjectType No description. auto_approve projen.github.AutoApprove Auto approve set up for this project. dev_container projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. deps_manager projen.python.IPythonDeps API for managing dependencies. env_manager projen.python.IPythonEnv API for mangaging the Python runtime environment. module_name str Python module name (the project name, with any hyphens or periods replaced with underscores). version str Version of the package for distribution (should follow semver). packaging_manager projen.python.IPythonPackaging API for managing packaging the project as a library. pytest projen.python.Pytest Pytest component. api_src_dir str The directory in which the api generated code will reside, relative to the project srcdir. generated_clients typing.Mapping[projen.Project] References to the client projects that were generated, keyed by language. generated_code_dir str The directory in which generated client code will be generated, relative to the outdir of this project. generated_python_client projen.python.PythonProject A reference to the generated python client. spec_dir str The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. spec_file_name str The name of the spec file. force_generate_code_and_docs bool Force to generate code and docs even if there were no changes in spec. build_task Required build_task : Task Type: projen.Task commit_generated Required commit_generated : bool Type: bool Whether to commit the managed files by default. compile_task Required compile_task : Task Type: projen.Task components Required components : typing . List [ Component ] Type: typing.List[projen.Component] Returns all the components within this project. deps Required deps : Dependencies Type: projen.Dependencies Project dependencies. ejected Required ejected : bool Type: bool Whether or not the project is being ejected. files Required files : typing . List [ FileBase ] Type: typing.List[projen.FileBase] All files in this project. gitattributes Required gitattributes : GitAttributesFile Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required gitignore : IgnoreFile Type: projen.IgnoreFile .gitignore. logger Required logger : Logger Type: projen.Logger Logging utilities. name Required name : str Type: str Project name. outdir Required outdir : str Type: str Absolute output directory of this project. package_task Required package_task : Task Type: projen.Task post_compile_task Required post_compile_task : Task Type: projen.Task pre_compile_task Required pre_compile_task : Task Type: projen.Task project_build Required project_build : ProjectBuild Type: projen.ProjectBuild Manages the build process of the project. projen_command Required projen_command : str Type: str The command to use in order to run the projen CLI. root Required root : Project Type: projen.Project The root project. tasks Required tasks : Tasks Type: projen.Tasks Project tasks. test_task Required test_task : Task Type: projen.Task default_task Optional default_task : Task Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. init_project Optional init_project : InitProject Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional parent : Project Type: projen.Project A parent project. If undefined, this is the root project. project_type Required project_type : ProjectType Type: projen.ProjectType auto_approve Optional auto_approve : AutoApprove Type: projen.github.AutoApprove Auto approve set up for this project. dev_container Optional dev_container : DevContainer Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional github : GitHub Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional gitpod : Gitpod Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional vscode : VsCode Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. deps_manager Required deps_manager : IPythonDeps Type: projen.python.IPythonDeps API for managing dependencies. env_manager Required env_manager : IPythonEnv Type: projen.python.IPythonEnv API for mangaging the Python runtime environment. module_name Required module_name : str Type: str Python module name (the project name, with any hyphens or periods replaced with underscores). version Required version : str Type: str Version of the package for distribution (should follow semver). packaging_manager Optional packaging_manager : IPythonPackaging Type: projen.python.IPythonPackaging API for managing packaging the project as a library. Only applies when the projectType is LIB. pytest Optional pytest : Pytest Type: projen.python.Pytest Pytest component. api_src_dir Required api_src_dir : str Type: str The directory in which the api generated code will reside, relative to the project srcdir. generated_clients Required generated_clients : typing . Mapping [ Project ] Type: typing.Mapping[projen.Project] References to the client projects that were generated, keyed by language. generated_code_dir Required generated_code_dir : str Type: str The directory in which generated client code will be generated, relative to the outdir of this project. generated_python_client Required generated_python_client : PythonProject Type: projen.python.PythonProject A reference to the generated python client. spec_dir Required spec_dir : str Type: str The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. spec_file_name Required spec_file_name : str Type: str The name of the spec file. force_generate_code_and_docs Optional force_generate_code_and_docs : bool Type: bool Force to generate code and docs even if there were no changes in spec. Constants Name Type Description DEFAULT_TASK str The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required DEFAULT_TASK : str Type: str The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. SmithyApiGatewayTsProject Synthesizes a Typescript Project with a Smithy model, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests. Initializers import aws_prototyping_sdk.open_api_gateway aws_prototyping_sdk . open_api_gateway . SmithyApiGatewayTsProject ( name : str , commit_generated : bool = None , git_options : GitOptions = None , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , renovatebot : bool = None , renovatebot_options : RenovatebotOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge : bool = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_credentials : GithubCredentials = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , allow_library_dependencies : bool = None , author_email : str = None , author_name : str = None , author_organization : bool = None , author_url : str = None , auto_detect_bin : bool = None , bin : typing . Mapping [ str ] = None , bugs_email : str = None , bugs_url : str = None , bundled_deps : typing . List [ str ] = None , code_artifact_options : CodeArtifactOptions = None , deps : typing . List [ str ] = None , description : str = None , dev_deps : typing . List [ str ] = None , entrypoint : str = None , homepage : str = None , keywords : typing . List [ str ] = None , license : str = None , licensed : bool = None , max_node_version : str = None , min_node_version : str = None , npm_access : NpmAccess = None , npm_registry : str = None , npm_registry_url : str = None , npm_token_secret : str = None , package_manager : NodePackageManager = None , package_name : str = None , peer_dependency_options : PeerDependencyOptions = None , peer_deps : typing . List [ str ] = None , pnpm_version : str = None , repository : str = None , repository_directory : str = None , scoped_packages_options : typing . List [ ScopedPackagesOptions ] = None , scripts : typing . Mapping [ str ] = None , stability : str = None , jsii_release_version : str = None , major_version : typing . Union [ int , float ] = None , min_major_version : typing . Union [ int , float ] = None , npm_dist_tag : str = None , post_build_steps : typing . List [ JobStep ] = None , prerelease : str = None , publish_dry_run : bool = None , publish_tasks : bool = None , release_branches : typing . Mapping [ BranchOptions ] = None , release_every_commit : bool = None , release_failure_issue : bool = None , release_failure_issue_label : str = None , release_schedule : str = None , release_tag_prefix : str = None , release_trigger : ReleaseTrigger = None , release_workflow_name : str = None , release_workflow_setup_steps : typing . List [ JobStep ] = None , versionrc_options : typing . Mapping [ typing . Any ] = None , workflow_container_image : str = None , workflow_runs_on : typing . List [ str ] = None , default_release_branch : str , artifacts_directory : str = None , auto_approve_upgrades : bool = None , build_workflow : bool = None , build_workflow_triggers : Triggers = None , bundler_options : BundlerOptions = None , code_cov : bool = None , code_cov_token_secret : str = None , copyright_owner : str = None , copyright_period : str = None , dependabot : bool = None , dependabot_options : DependabotOptions = None , deps_upgrade : bool = None , deps_upgrade_options : UpgradeDependenciesOptions = None , gitignore : typing . List [ str ] = None , jest : bool = None , jest_options : JestOptions = None , mutable_build : bool = None , npmignore : typing . List [ str ] = None , npmignore_enabled : bool = None , package : bool = None , prettier : bool = None , prettier_options : PrettierOptions = None , projen_dev_dependency : bool = None , projenrc_js : bool = None , projenrc_js_options : ProjenrcOptions = None , projen_version : str = None , pull_request_template : bool = None , pull_request_template_contents : typing . List [ str ] = None , release : bool = None , release_to_npm : bool = None , release_workflow : bool = None , workflow_bootstrap_steps : typing . List [ JobStep ] = None , workflow_git_identity : GitIdentity = None , workflow_node_version : str = None , disable_tsconfig : bool = None , docgen : bool = None , docs_directory : str = None , entrypoint_types : str = None , eslint : bool = None , eslint_options : EslintOptions = None , libdir : str = None , projenrc_ts : bool = None , projenrc_ts_options : ProjenrcOptions = None , sample_code : bool = None , srcdir : str = None , testdir : str = None , tsconfig : TypescriptConfigOptions = None , tsconfig_dev : TypescriptConfigOptions = None , tsconfig_dev_file : str = None , typescript_version : str = None , client_languages : typing . List [ ClientLanguage ], api_src_dir : str = None , documentation_formats : typing . List [ DocumentationFormat ] = None , force_generate_code_and_docs : bool = None , generated_code_dir : str = None , java_client_options : JavaProjectOptions = None , parsed_spec_file_name : str = None , python_client_options : PythonProjectOptions = None , typescript_client_options : TypeScriptProjectOptions = None , service_name : SmithyServiceName , ignore_gradle_wrapper : bool = None , ignore_smithy_build_output : bool = None , model_dir : str = None , smithy_build_options : SmithyBuildOptions = None ) Name Type Description name str This is the name of your project. commit_generated bool Whether to commit the managed files by default. git_options projen.GitOptions Configuration options for git. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. renovatebot bool Use renovatebot to handle dependency upgrades. renovatebot_options projen.RenovatebotOptions Options for renovatebot. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge bool Enable automatic merging on GitHub. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_credentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. allow_library_dependencies bool Allow the project to include peerDependencies and bundledDependencies . author_email str Author's e-mail. author_name str Author's name. author_organization bool Is the author an organization. author_url str Author's URL / Website. auto_detect_bin bool Automatically add all executables under the bin directory to your package.json file under the bin section. bin typing.Mapping[str] Binary programs vended with your module. bugs_email str The email address to which issues should be reported. bugs_url str The url to your project's issue tracker. bundled_deps typing.List[str] List of dependencies to bundle into this module. code_artifact_options projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps typing.List[str] Runtime dependencies of this module. description str The description is just a string that helps people understand the purpose of the package. dev_deps typing.List[str] Build dependencies for this module. entrypoint str Module entrypoint ( main in package.json ). homepage str Package's Homepage / Website. keywords typing.List[str] Keywords to include in package.json . license str License's SPDX identifier. licensed bool Indicates if a license should be added. max_node_version str Minimum node.js version to require via engines (inclusive). min_node_version str Minimum Node.js version to require via package.json engines (inclusive). npm_access projen.javascript.NpmAccess Access level of the npm package. npm_registry str The host name of the npm registry to publish to. npm_registry_url str The base URL of the npm package registry. npm_token_secret str GitHub secret which contains the NPM token to use when publishing packages. package_manager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. package_name str The \"name\" in package.json. peer_dependency_options projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps typing.List[str] Peer dependencies for this module. pnpm_version str The version of PNPM to use if using PNPM as a package manager. repository str The repository is the location where the actual code for your package lives. repository_directory str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scoped_packages_options typing.List[projen.javascript.ScopedPackagesOptions] Options for privately hosted scoped packages. scripts typing.Mapping[str] npm scripts to include. stability str Package's Stability. jsii_release_version str Version requirement of publib which is used to publish modules to npm. major_version typing.Union[int, float] Major version to release from the default branch. min_major_version typing.Union[int, float] Minimal Major version to release. npm_dist_tag str The npmDistTag to use when publishing from the default branch. post_build_steps typing.List[projen.github.workflows.JobStep] Steps to execute after build as part of the release workflow. prerelease str Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run bool Instead of actually publishing to package managers, just print the publishing command. publish_tasks bool Define publishing tasks that can be executed manually as well as workflows. release_branches typing.Mapping[projen.release.BranchOptions] Defines additional release branches. release_every_commit bool Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue bool Create a github issue on every failed publishing task. release_failure_issue_label str The label to apply to issues indicating publish failures. release_schedule str CRON schedule to trigger new releases. release_tag_prefix str Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. release_trigger projen.release.ReleaseTrigger The release trigger to use. release_workflow_name str The name of the default release workflow. release_workflow_setup_steps typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options typing.Mapping[typing.Any] Custom configuration used when creating changelog with standard-version package. workflow_container_image str Container image to use for GitHub workflows. workflow_runs_on typing.List[str] Github Runner selection labels. default_release_branch str The name of the main release branch. artifacts_directory str A directory which will contain build artifacts. auto_approve_upgrades bool Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). build_workflow bool Define a GitHub workflow for building PRs. build_workflow_triggers projen.github.workflows.Triggers Build workflow triggers. bundler_options projen.javascript.BundlerOptions Options for Bundler . code_cov bool Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret str Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner str License copyright owner. copyright_period str The copyright years to put in the LICENSE file. dependabot bool Use dependabot to handle dependency upgrades. dependabot_options projen.github.DependabotOptions Options for dependabot. deps_upgrade bool Use github workflows to handle dependency upgrades. deps_upgrade_options projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore typing.List[str] Additional entries to .gitignore. jest bool Setup jest unit tests. jest_options projen.javascript.JestOptions Jest options. mutable_build bool Automatically update files modified during builds to pull-request branches. npmignore typing.List[str] Additional entries to .npmignore. npmignore_enabled bool Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package bool Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier bool Setup prettier. prettier_options projen.javascript.PrettierOptions Prettier options. projen_dev_dependency bool Indicates of \"projen\" should be installed as a devDependency. projenrc_js bool Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options projen.javascript.ProjenrcOptions Options for .projenrc.js. projen_version str Version of projen to install. pull_request_template bool Include a GitHub pull request template. pull_request_template_contents typing.List[str] The contents of the pull request template. release bool Add release management to this project. release_to_npm bool Automatically release to npm when new versions are introduced. release_workflow bool DEPRECATED: renamed to release . workflow_bootstrap_steps typing.List[projen.github.workflows.JobStep] Workflow steps to use in order to bootstrap this repo. workflow_git_identity projen.github.GitIdentity The git identity to use in workflows. workflow_node_version str The node version to use in GitHub workflows. disable_tsconfig bool Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen bool Docgen by Typedoc. docs_directory str Docs directory. entrypoint_types str The .d.ts file that includes the type declarations for this module. eslint bool Setup eslint. eslint_options projen.javascript.EslintOptions Eslint options. libdir str Typescript artifacts output directory. projenrc_ts bool Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code bool Generate one-time sample in src/ and test/ if there are no files there. srcdir str Typescript sources directory. testdir str Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfig_dev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file str The name of the development tsconfig.json file. typescript_version str TypeScript version to use. client_languages typing.List[ ClientLanguage ] The list of languages for which clients will be generated. api_src_dir str The directory in which the api generated code will reside, relative to the project srcdir. documentation_formats typing.List[ DocumentationFormat ] Formats to generate documentation in. force_generate_code_and_docs bool Force to generate code and docs even if there were no changes in spec. generated_code_dir str The directory in which generated client code will be generated, relative to the outdir of this project. java_client_options projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsed_spec_file_name str The name of the output parsed OpenAPI specification file. python_client_options projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). typescript_client_options projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. service_name SmithyServiceName The name of the Smithy service from your model which will be targeted for deployment and client generation. ignore_gradle_wrapper bool Set to false if you would like to check in your gradle wrapper. ignore_smithy_build_output bool Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. model_dir str The path to the Smithy model directory, relative to the project source directory (srcdir). smithy_build_options SmithyBuildOptions Any additional properties you'd like to add your smithy-build.json. The smithy-build.json will automatically include the \"openapi\" plugin, but you can add extra configuration for that via this option if you like. name Required Type: str Default: $BASEDIR This is the name of your project. commit_generated Optional Type: bool Default: true Whether to commit the managed files by default. git_options Optional Type: projen.GitOptions Configuration options for git. logging Optional Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional Type: bool Default: false Use renovatebot to handle dependency upgrades. renovatebot_options Optional Type: projen.RenovatebotOptions Default: default options Options for renovatebot. auto_approve_options Optional Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge Optional Type: bool Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. auto_merge_options Optional Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_credentials Optional Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projen_token_secret ~~ Optional Deprecated: use projenCredentials Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional Type: bool Default: false Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allow_library_dependencies Optional Type: bool Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. author_email Optional Type: str Author's e-mail. author_name Optional Type: str Author's name. author_organization Optional Type: bool Is the author an organization. author_url Optional Type: str Author's URL / Website. auto_detect_bin Optional Type: bool Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional Type: typing.Mapping[str] Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugs_email Optional Type: str The email address to which issues should be reported. bugs_url Optional Type: str The url to your project's issue tracker. bundled_deps Optional Type: typing.List[str] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. code_artifact_options Optional Type: projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional Type: typing.List[str] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'express' , 'lodash' , 'foo@^2' ] description Optional Type: str The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description dev_deps Optional Type: typing.List[str] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'typescript' , '@types/express' ] entrypoint Optional Type: str Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional Type: str Package's Homepage / Website. keywords Optional Type: typing.List[str] Keywords to include in package.json . license Optional Type: str Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional Type: bool Default: true Indicates if a license should be added. max_node_version Optional Type: str Default: no max Minimum node.js version to require via engines (inclusive). min_node_version Optional Type: str Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npm_access Optional Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npm_registry ~~ Optional Deprecated: use npmRegistryUrl instead Type: str The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npm_registry_url Optional Type: str Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npm_token_secret Optional Type: str Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. package_manager Optional Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. package_name Optional Type: str Default: defaults to project name The \"name\" in package.json. peer_dependency_options Optional Type: projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps Optional Type: typing.List[str] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. pnpm_version Optional Type: str Default: \"7\" The version of PNPM to use if using PNPM as a package manager. repository Optional Type: str The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repository_directory Optional Type: str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scoped_packages_options Optional Type: typing.List[projen.javascript.ScopedPackagesOptions] Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional Type: typing.Mapping[str] Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional Type: str Package's Stability. jsii_release_version Optional Type: str Default: \"latest\" Version requirement of publib which is used to publish modules to npm. major_version Optional Type: typing.Union[int, float] Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. min_major_version Optional Type: typing.Union[int, float] Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npm_dist_tag Optional Type: str Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. post_build_steps Optional Type: typing.List[projen.github.workflows.JobStep] Default: [] Steps to execute after build as part of the release workflow. prerelease Optional Type: str Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run Optional Type: bool Default: false Instead of actually publishing to package managers, just print the publishing command. publish_tasks Optional Type: bool Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. release_branches Optional Type: typing.Mapping[projen.release.BranchOptions] Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ release_every_commit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead Type: bool Default: true Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue Optional Type: bool Default: false Create a github issue on every failed publishing task. release_failure_issue_label Optional Type: str Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ release_schedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead Type: str Default: no scheduled releases CRON schedule to trigger new releases. release_tag_prefix Optional Type: str Default: \"v\" Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. release_trigger Optional Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. release_workflow_name Optional Type: str Default: \"Release\" The name of the default release workflow. release_workflow_setup_steps Optional Type: typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options Optional Type: typing.Mapping[typing.Any] Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflow_container_image Optional Type: str Default: default image Container image to use for GitHub workflows. workflow_runs_on Optional Type: typing.List[str] Default: [\"ubuntu-latest\"] Github Runner selection labels. default_release_branch Required Type: str Default: \"main\" The name of the main release branch. artifacts_directory Optional Type: str Default: \"dist\" A directory which will contain build artifacts. auto_approve_upgrades Optional Type: bool Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. build_workflow Optional Type: bool Default: true if not a subproject Define a GitHub workflow for building PRs. build_workflow_triggers Optional Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundler_options Optional Type: projen.javascript.BundlerOptions Options for Bundler . code_cov Optional Type: bool Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret Optional Type: str Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner Optional Type: str Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyright_period Optional Type: str Default: current year The copyright years to put in the LICENSE file. dependabot Optional Type: bool Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabot_options Optional Type: projen.github.DependabotOptions Default: default options Options for dependabot. deps_upgrade Optional Type: bool Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . deps_upgrade_options Optional Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional Type: typing.List[str] Additional entries to .gitignore. jest Optional Type: bool Default: true Setup jest unit tests. jest_options Optional Type: projen.javascript.JestOptions Default: default options Jest options. mutable_build Optional Type: bool Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore Type: typing.List[str] Additional entries to .npmignore. npmignore_enabled Optional Type: bool Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional Type: bool Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional Type: bool Default: false Setup prettier. prettier_options Optional Type: projen.javascript.PrettierOptions Default: default options Prettier options. projen_dev_dependency Optional Type: bool Default: true Indicates of \"projen\" should be installed as a devDependency. projenrc_js Optional Type: bool Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options Optional Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projen_version Optional Type: str Default: Defaults to the latest version. Version of projen to install. pull_request_template Optional Type: bool Default: true Include a GitHub pull request template. pull_request_template_contents Optional Type: typing.List[str] Default: default content The contents of the pull request template. release Optional Type: bool Default: true (false for subprojects) Add release management to this project. release_to_npm Optional Type: bool Default: false Automatically release to npm when new versions are introduced. ~~ release_workflow ~~ Optional Deprecated: see release . Type: bool Default: true if not a subproject DEPRECATED: renamed to release . workflow_bootstrap_steps Optional Type: typing.List[projen.github.workflows.JobStep] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflow_git_identity Optional Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflow_node_version Optional Type: str Default: same as minNodeVersion The node version to use in GitHub workflows. disable_tsconfig Optional Type: bool Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional Type: bool Default: false Docgen by Typedoc. docs_directory Optional Type: str Default: \"docs\" Docs directory. entrypoint_types Optional Type: str Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional Type: bool Default: true Setup eslint. eslint_options Optional Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional Type: str Default: \"lib\" Typescript artifacts output directory. projenrc_ts Optional Type: bool Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options Optional Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code Optional Type: bool Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional Type: str Default: \"src\" Typescript sources directory. testdir Optional Type: str Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfig_dev Optional Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file Optional Type: str Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescript_version Optional Type: str Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). client_languages Required Type: typing.List[ ClientLanguage ] The list of languages for which clients will be generated. A typescript client will always be generated. api_src_dir Optional Type: str The directory in which the api generated code will reside, relative to the project srcdir. documentation_formats Optional Type: typing.List[ DocumentationFormat ] Formats to generate documentation in. force_generate_code_and_docs Optional Type: bool Default: \"false\" Force to generate code and docs even if there were no changes in spec. generated_code_dir Optional Type: str Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. java_client_options Optional Type: projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsed_spec_file_name Optional Type: str Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. python_client_options Optional Type: projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. typescript_client_options Optional Type: projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. service_name Required Type: SmithyServiceName Default: \"example.hello#Hello\" The name of the Smithy service from your model which will be targeted for deployment and client generation. On initial project synthesis this service name will be written to the sample \"hello world\" model. If you change this value after initial synthesis you will need to manually update your Smithy models to match, unless you delete the \"model\" directory. Likewise, if you change the namespace or service name in your Smithy models you will need to update this value to ensure your service can be found. ignore_gradle_wrapper Optional Type: bool Default: true Set to false if you would like to check in your gradle wrapper. Do so if you would like to use a different version of gradle to the one provided by default ignore_smithy_build_output Optional Type: bool Default: true Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. model_dir Optional Type: str Default: \"model\" The path to the Smithy model directory, relative to the project source directory (srcdir). smithy_build_options Optional Type: SmithyBuildOptions Any additional properties you'd like to add your smithy-build.json. The smithy-build.json will automatically include the \"openapi\" plugin, but you can add extra configuration for that via this option if you like. https://awslabs.github.io/smithy/2.0/guides/converting-to-openapi.html#openapi-configuration-settings Methods Name Description add_exclude_from_cleanup Exclude the matching files from pre-synth cleanup. add_git_ignore Adds a .gitignore pattern. add_package_ignore Exclude these files from the bundled package. add_task Adds a new task to this project. add_tip Prints a \"tip\" message during synthesis. annotate_generated Marks the provided file(s) as being generated. post_synthesize Called after all components are synthesized. pre_synthesize Called before all components are synthesized. remove_task Removes a task from a project. run_task_command Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . try_find_file Finds a file at the specified relative path within this project and all its subprojects. try_find_json_file Finds a json file by name. try_find_object_file Finds an object file (like JsonFile, YamlFile, etc.) by name. try_remove_file Finds a file at the specified relative path within this project and removes it. add_bins No description. add_bundled_deps Defines bundled dependencies. add_compile_command DEPRECATED. add_deps Defines normal dependencies. add_dev_deps Defines development/test dependencies. add_fields Directly set fields in package.json . add_keywords Adds keywords to package.json (deduplicated). add_peer_deps Defines peer dependencies. add_test_command DEPRECATED. has_script Indicates if a script by the name name is defined. remove_script Removes the npm script (always successful). render_workflow_setup Returns the set of workflow steps which should be executed to bootstrap a workflow. set_script Replaces the contents of an npm package.json script. add_exclude_from_cleanup def add_exclude_from_cleanup ( globs : str ) -> None Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: str The glob patterns to match. add_git_ignore def add_git_ignore ( pattern : str ) -> None Adds a .gitignore pattern. pattern Required Type: str The glob pattern to ignore. add_package_ignore def add_package_ignore ( pattern : str ) -> None Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . pattern Required Type: str add_task def add_task ( name : str , condition : str = None , cwd : str = None , description : str = None , env : typing . Mapping [ str ] = None , required_env : typing . List [ str ] = None , exec : str = None , receive_args : bool = None , steps : typing . List [ TaskStep ] = None ) -> Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: str The task name to add. condition Optional Type: str A shell command which determines if the this task should be executed. If the program exits with a zero exit code, steps will be executed. A non-zero code means that task will be skipped. cwd Optional Type: str Default: process.cwd() The working directory for all steps in this task (unless overridden by the step). description Optional Type: str Default: the task name The description of this build command. env Optional Type: typing.Mapping[str] Default: {} Defines environment variables for the execution of this task. Values in this map will be evaluated in a shell, so you can do stuff like $(echo \"foo\") . required_env Optional Type: typing.List[str] A set of environment variables that must be defined in order to execute this task. Task execution will fail if one of these is not defined. exec Optional Type: str Default: add steps using task.exec(command) or task.spawn(subtask) Shell command to execute as the first command of the task. receive_args Optional Type: bool Default: false Should the provided exec shell command receive args passed to the task. {@link TaskStepOptions.receiveArgs} steps Optional Type: typing.List[projen.TaskStep] List of task steps to run. ~~ add_tip ~~ def add_tip ( message : str ) -> None Prints a \"tip\" message during synthesis. message Required Type: str The message. annotate_generated def annotate_generated ( glob : str ) -> None Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: str the glob pattern to match (could be a file path). post_synthesize def post_synthesize () -> None Called after all components are synthesized. Order is not guaranteed. pre_synthesize def pre_synthesize () -> None Called before all components are synthesized. remove_task def remove_task ( name : str ) -> Task Removes a task from a project. name Required Type: str The name of the task to remove. run_task_command def run_task_command ( task : Task ) -> str Returns the shell command to execute in order to run a task. This will typically be npx projen TASK . task Required Type: projen.Task The task for which the command is required. synth def synth () -> None Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" try_find_file def try_find_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and all its subprojects. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. ~~ try_find_json_file ~~ def try_find_json_file ( file_path : str ) -> JsonFile Finds a json file by name. file_path Required Type: str The file path. try_find_object_file def try_find_object_file ( file_path : str ) -> ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. file_path Required Type: str The file path. try_remove_file def try_remove_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and removes it. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. add_bins def add_bins ( bins : typing . Mapping [ str ] ) -> None bins Required Type: typing.Mapping[str] add_bundled_deps def add_bundled_deps ( deps : str ) -> None Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json . deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ add_compile_command ~~ def add_compile_command ( commands : str ) -> None DEPRECATED. commands Required Type: str add_deps def add_deps ( deps : str ) -> None Defines normal dependencies. deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . add_dev_deps def add_dev_deps ( deps : str ) -> None Defines development/test dependencies. deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . add_fields def add_fields ( fields : typing . Mapping [ typing . Any ] ) -> None Directly set fields in package.json . fields Required Type: typing.Mapping[typing.Any] The fields to set. add_keywords def add_keywords ( keywords : str ) -> None Adds keywords to package.json (deduplicated). keywords Required Type: str The keywords to add. add_peer_deps def add_peer_deps ( deps : str ) -> None Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers. deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ add_test_command ~~ def add_test_command ( commands : str ) -> None DEPRECATED. commands Required Type: str has_script def has_script ( name : str ) -> bool Indicates if a script by the name name is defined. name Required Type: str The name of the script. remove_script def remove_script ( name : str ) -> None Removes the npm script (always successful). name Required Type: str The name of the script. render_workflow_setup def render_workflow_setup ( mutable : bool = None ) -> typing . List [ JobStep ] Returns the set of workflow steps which should be executed to bootstrap a workflow. mutable Optional Type: bool Default: false Should the pacakge lockfile be updated? set_script def set_script ( name : str , command : str ) -> None Replaces the contents of an npm package.json script. name Required Type: str The script name. command Required Type: str The command to execute. Properties Name Type Description build_task projen.Task No description. commit_generated bool Whether to commit the managed files by default. compile_task projen.Task No description. components typing.List[projen.Component] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected bool Whether or not the project is being ejected. files typing.List[projen.FileBase] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name str Project name. outdir str Absolute output directory of this project. package_task projen.Task No description. post_compile_task projen.Task No description. pre_compile_task projen.Task No description. project_build projen.ProjectBuild Manages the build process of the project. projen_command str The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. test_task projen.Task No description. default_task projen.Task This is the \"default\" task, the one that executes \"projen\". init_project projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. project_type projen.ProjectType No description. auto_approve projen.github.AutoApprove Auto approve set up for this project. dev_container projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. allow_library_dependencies bool No description. artifacts_directory str The build output directory. artifacts_javascript_directory str The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler projen.javascript.Bundler No description. entrypoint str No description. manifest typing.Any No description. package projen.javascript.NodePackage API for managing the node package. package_manager projen.javascript.NodePackageManager The package manager to use. run_script_command str The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). auto_merge projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. build_workflow projen.build.BuildWorkflow The PR build GitHub workflow. build_workflow_job_id str The job ID of the build workflow. jest projen.javascript.Jest The Jest configuration (if enabled). max_node_version str Maximum node version required by this package. min_node_version str Minimum node.js version required by this package. npmignore projen.IgnoreFile The .npmignore file. prettier projen.javascript.Prettier No description. publisher projen.release.Publisher Package publisher. release projen.release.Release Release management. upgrade_workflow projen.javascript.UpgradeDependencies The upgrade workflow. docs_directory str No description. libdir str The directory in which compiled .js files reside. srcdir str The directory in which the .ts sources reside. testdir str The directory in which tests reside. tsconfig_dev projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watch_task projen.Task The \"watch\" task. docgen bool No description. eslint projen.javascript.Eslint No description. tsconfig projen.javascript.TypescriptConfig No description. tsconfig_eslint projen.javascript.TypescriptConfig No description. api_src_dir str The directory in which the api generated code will reside, relative to the project srcdir. force_generate_code_and_docs bool Force to generate code and docs even if there were no changes in spec. generated_clients typing.Mapping[projen.Project] References to the client projects that were generated, keyed by language. generated_code_dir str The directory in which generated client code will be generated, relative to the outdir of this project. generated_typescript_client projen.typescript.TypeScriptProject A reference to the generated typescript client. spec_dir str The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. spec_file_name str The name of the spec file. pnpm_workspace projen.YamlFile Reference to the PNPM workspace yaml file which adds the dependency between this project and the generated typescript client when this project is used in a monorepo, and the package manager is PNPM. build_task Required build_task : Task Type: projen.Task commit_generated Required commit_generated : bool Type: bool Whether to commit the managed files by default. compile_task Required compile_task : Task Type: projen.Task components Required components : typing . List [ Component ] Type: typing.List[projen.Component] Returns all the components within this project. deps Required deps : Dependencies Type: projen.Dependencies Project dependencies. ejected Required ejected : bool Type: bool Whether or not the project is being ejected. files Required files : typing . List [ FileBase ] Type: typing.List[projen.FileBase] All files in this project. gitattributes Required gitattributes : GitAttributesFile Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required gitignore : IgnoreFile Type: projen.IgnoreFile .gitignore. logger Required logger : Logger Type: projen.Logger Logging utilities. name Required name : str Type: str Project name. outdir Required outdir : str Type: str Absolute output directory of this project. package_task Required package_task : Task Type: projen.Task post_compile_task Required post_compile_task : Task Type: projen.Task pre_compile_task Required pre_compile_task : Task Type: projen.Task project_build Required project_build : ProjectBuild Type: projen.ProjectBuild Manages the build process of the project. projen_command Required projen_command : str Type: str The command to use in order to run the projen CLI. root Required root : Project Type: projen.Project The root project. tasks Required tasks : Tasks Type: projen.Tasks Project tasks. test_task Required test_task : Task Type: projen.Task default_task Optional default_task : Task Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. init_project Optional init_project : InitProject Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional parent : Project Type: projen.Project A parent project. If undefined, this is the root project. project_type Required project_type : ProjectType Type: projen.ProjectType auto_approve Optional auto_approve : AutoApprove Type: projen.github.AutoApprove Auto approve set up for this project. dev_container Optional dev_container : DevContainer Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional github : GitHub Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional gitpod : Gitpod Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional vscode : VsCode Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. ~~ allow_library_dependencies ~~ Required Deprecated: use package.allowLibraryDependencies allow_library_dependencies : bool Type: bool artifacts_directory Required artifacts_directory : str Type: str The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg . artifacts_javascript_directory Required artifacts_javascript_directory : str Type: str The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler Required bundler : Bundler Type: projen.javascript.Bundler ~~ entrypoint ~~ Required Deprecated: use package.entrypoint entrypoint : str Type: str ~~ manifest ~~ Required Deprecated: use package.addField(x, y) manifest : typing . Any Type: typing.Any package Required package : NodePackage Type: projen.javascript.NodePackage API for managing the node package. ~~ package_manager ~~ Required Deprecated: use package.packageManager package_manager : NodePackageManager Type: projen.javascript.NodePackageManager The package manager to use. run_script_command Required run_script_command : str Type: str The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). auto_merge Optional auto_merge : AutoMerge Type: projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. build_workflow Optional build_workflow : BuildWorkflow Type: projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled. build_workflow_job_id Optional build_workflow_job_id : str Type: str The job ID of the build workflow. jest Optional jest : Jest Type: projen.javascript.Jest The Jest configuration (if enabled). max_node_version Optional max_node_version : str Type: str Maximum node version required by this package. min_node_version Optional min_node_version : str Type: str Minimum node.js version required by this package. npmignore Optional npmignore : IgnoreFile Type: projen.IgnoreFile The .npmignore file. prettier Optional prettier : Prettier Type: projen.javascript.Prettier ~~ publisher ~~ Optional Deprecated: use release.publisher . publisher : Publisher Type: projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow. release Optional release : Release Type: projen.release.Release Release management. upgrade_workflow Optional upgrade_workflow : UpgradeDependencies Type: projen.javascript.UpgradeDependencies The upgrade workflow. docs_directory Required docs_directory : str Type: str libdir Required libdir : str Type: str The directory in which compiled .js files reside. srcdir Required srcdir : str Type: str The directory in which the .ts sources reside. testdir Required testdir : str Type: str The directory in which tests reside. tsconfig_dev Required tsconfig_dev : TypescriptConfig Type: projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watch_task Required watch_task : Task Type: projen.Task The \"watch\" task. docgen Optional docgen : bool Type: bool eslint Optional eslint : Eslint Type: projen.javascript.Eslint tsconfig Optional tsconfig : TypescriptConfig Type: projen.javascript.TypescriptConfig tsconfig_eslint Optional tsconfig_eslint : TypescriptConfig Type: projen.javascript.TypescriptConfig api_src_dir Required api_src_dir : str Type: str The directory in which the api generated code will reside, relative to the project srcdir. force_generate_code_and_docs Required force_generate_code_and_docs : bool Type: bool Force to generate code and docs even if there were no changes in spec. generated_clients Required generated_clients : typing . Mapping [ Project ] Type: typing.Mapping[projen.Project] References to the client projects that were generated, keyed by language. generated_code_dir Required generated_code_dir : str Type: str The directory in which generated client code will be generated, relative to the outdir of this project. generated_typescript_client Required generated_typescript_client : TypeScriptProject Type: projen.typescript.TypeScriptProject A reference to the generated typescript client. spec_dir Required spec_dir : str Type: str The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. spec_file_name Required spec_file_name : str Type: str The name of the spec file. pnpm_workspace Optional pnpm_workspace : YamlFile Type: projen.YamlFile Reference to the PNPM workspace yaml file which adds the dependency between this project and the generated typescript client when this project is used in a monorepo, and the package manager is PNPM. Constants Name Type Description DEFAULT_TASK str The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required DEFAULT_TASK : str Type: str The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. Enums ClientLanguage Supported languages for client generation. Members Name Description TYPESCRIPT No description. PYTHON No description. JAVA No description. TYPESCRIPT PYTHON JAVA CustomAuthorizerType The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type Members Name Description TOKEN A custom authorizer that uses a Lambda function. REQUEST An authorizer that uses a Lambda function using incoming request parameters. TOKEN A custom authorizer that uses a Lambda function. REQUEST An authorizer that uses a Lambda function using incoming request parameters. DocumentationFormat Formats for documentation generation. Members Name Description HTML_REDOC HTML Documentation generated by redoc. HTML2 OpenAPI Generator 'html2' documentation. MARKDOWN OpenAPI Generator 'markdown' documentation. PLANTUML OpenAPI Generator 'plantuml' documentation. HTML_REDOC HTML Documentation generated by redoc. Redocly/redoc HTML2 OpenAPI Generator 'html2' documentation. https://github.com/OpenAPITools/openapi-generator/blob/master/docs/generators/html2.md MARKDOWN OpenAPI Generator 'markdown' documentation. https://github.com/OpenAPITools/openapi-generator/blob/master/docs/generators/markdown.md PLANTUML OpenAPI Generator 'plantuml' documentation. https://github.com/OpenAPITools/openapi-generator/blob/master/docs/generators/plantuml.md","title":"Index"},{"location":"python/open-api-gateway/index.html#openapi-gateway","text":"Define your APIs using Smithy or OpenAPI v3 , and leverage the power of generated clients and documentation, automatic input validation, and type safe client and server code! This package vends a projen project type which allows you to define an API using either Smithy or OpenAPI v3 , and a construct which manages deploying this API in API Gateway, given an integration (eg a lambda) for every operation. The project will generate models and clients from your api definition in your desired languages, and can be utilised both client side or server side in lambda handlers. The project type also generates a wrapper construct which adds type safety to ensure an integration is provided for every API operation. When you change your API specification, just run npx projen again to regenerate all of this!","title":"OpenAPI Gateway"},{"location":"python/open-api-gateway/index.html#project","text":"Use the provided projen project types to get started with your API quickly! There are options for TypeScript, Python and Java: Smithy SmithyApiGatewayTsProject SmithyApiGatewayPythonProject SmithyApiGatewayJavaProject OpenAPI OpenApiGatewayTsProject OpenApiGatewayPythonProject OpenApiGatewayJavaProject We recommend using the Smithy-based projects, given that Smithy has a less verbose and more powerful IDL (Interface Definition Language). Choose the project type based on the language you'd like to write your CDK infrastructure in . Whichever option above you choose, you can still write your server-side code in any language. It's recommended that these projects are used as part of an nx-monorepo project, as it makes setting up dependencies much easier, and you will not need to manage the build order of generated clients.","title":"Project"},{"location":"python/open-api-gateway/index.html#smithy-idl","text":"Please refer to the Smithy documentation for how to write models in Smithy. A basic example is provided below: $version : \"2\" namespace example.hello use aws.protocols#restJson1 @title ( \"A Sample Hello World API\" ) /// A sample smithy api @restJson1 service Hello { version: \"1.0\" operations: [ SayHello ] } @readonly @http ( method: \"GET\" , uri: \"/hello\" ) operation SayHello { input: SayHelloInput output: SayHelloOutput errors: [ ApiError ] } string Name string Message @input structure SayHelloInput { @httpQuery ( \"name\" ) @required name: Name } @output structure SayHelloOutput { @required message: Message } @error ( \"client\" ) structure ApiError { @required errorMessage: Message }","title":"Smithy IDL"},{"location":"python/open-api-gateway/index.html#openapi-specification","text":"Your spec.yaml file defines your api using OpenAPI Version 3.0.3 . An example spec might look like: openapi : 3.0.3 info : version : 1.0.0 title : Example API paths : /hello : get : operationId : sayHello parameters : - in : query name : name schema : type : string required : true responses : '200' : description : Successful response content : 'application/json' : schema : $ref : '#/components/schemas/HelloResponse' components : schemas : HelloResponse : type : object properties : message : type : string required : - message You can divide your specification into multiple files using $ref . For example, you might choose to structure your spec as follows: |_ spec/ |_ spec.yaml |_ paths/ |_ index.yaml |_ sayHello.yaml |_ schemas/ |_ index.yaml |_ helloResponse.yaml Where spec.yaml looks as follows: openapi : 3.0.3 info : version : 1.0.0 title : Example API paths : $ref : './paths/index.yaml' components : schemas : $ref : './schemas/index.yaml' paths/index.yaml : /hello : get : $ref : './sayHello.yaml' paths/sayHello.yaml : operationId : sayHello parameters : - in : query name : name schema : type : string required : true responses : '200' : description : Successful response content : 'application/json' : schema : $ref : '../schemas/helloResponse.yaml' schemas/index.yaml : HelloResponse : $ref : './helloResponse.yaml' schemas/helloResponse.yaml : type : object properties : message : type : string required : - message","title":"OpenAPI Specification"},{"location":"python/open-api-gateway/index.html#construct","text":"A sample construct is generated which provides a type-safe interface for creating an API Gateway API based on your OpenAPI specification. You'll get a type error if you forget to define an integration for an operation defined in your api. # Example automatically generated from non-compiling source. May contain errors. from aws_prototyping_sdk.open_api_gateway import Authorizers , Integrations from aws_cdk.aws_lambda_nodejs import NodejsFunction from constructs import Construct from ..api import Api # # An example of how to wire lambda handler functions to the API # class SampleApi ( Api ): def __init__ ( self , scope , id ): super () . __init__ ( scope , id , default_authorizer = Authorizers . iam (), integrations = { # Every operation defined in your API must have an integration defined! \"say_hello\" : { \"integration\" : Integrations . lambda_ ( NodejsFunction ( scope , \"say-hello\" )) } } )","title":"Construct"},{"location":"python/open-api-gateway/index.html#generated-client","text":"","title":"Generated Client"},{"location":"python/open-api-gateway/index.html#lambda-handler-wrappers","text":"Lambda handler wrappers are also importable from the generated client. These provide input/output type safety, ensuring that your API handlers return outputs that correspond to your specification.","title":"Lambda Handler Wrappers"},{"location":"python/open-api-gateway/index.html#interceptors","text":"The lambda handler wrappers allow you to pass in a chain of handler functions to handle the request. This allows you to implement middleware / interceptors for handling requests. Each handler function may choose whether or not to continue the handler chain by invoking chain.next .","title":"Interceptors"},{"location":"python/open-api-gateway/index.html#other-details","text":"","title":"Other Details"},{"location":"python/open-api-gateway/index.html#tagging-operations","text":"Operations can be grouped together into logical collections via tags. This can be achieved in Smithy with the @tags trait: @tags ([ \"pets\" , \"users\" ]) operation PurchasePet { ... } Or in OpenAPI using the tags property: paths : /pets/purchase : post : operationId : purchasePet tags : - pets - users ... When multiple tags are used, the \"first\" tag is considered to be the API that the operation belongs to, so in the generated client, the above example operation would be included in the PetsApi client but not the UsersApi client. Multiple tags are still useful for documentation generation, for example DocumentationFormat.HTML_REDOC will group operations by tag in the side navigation bar. If you would like to introduce tags without breaking existing clients, we recommend first adding a tag named default to all operations. \u26a0\ufe0f Important Note : Smithy versions below 1.28.0 sort tags in alphabetical order and so the \"first\" tag will be the earliest in the alphabet. Therefore, if using tags with older versions of Smithy, we recommend prefixing your desired first tag with an underscore (for example _default ). This is rectified in 1.28.0 , where tag order from the @tags trait is preserved.","title":"Tagging Operations"},{"location":"python/open-api-gateway/index.html#breaking-changes","text":"v0.14.0 - see aws-prototyping-sdk!280 Moved smithy model files from model directory to smithy/src/main/smithy - please move these manually as part of upgrading to 0.14.0 , and delete your model directory when done. Moved smithy gradle files from smithy-build directory to smithy - if you have added any dependencies to your smithy-build/build.gradle file you will need to copy them across into smithy/build.gradle (note dependencies in the new gradle file start with implementation rather than smithy ). Deprecated gradleWrapperPath option on SmithApiGateway projects in favour of ignoreGradleWrapper: false - the gradle wrapper in smithy directory is always used (and generated automatically if not found). If you used a custom gradle wrapper, copy it into the smithy directory, set ignoreGradleWrapper: false and check it in to your repository.","title":"Breaking Changes"},{"location":"python/open-api-gateway/index.html#api-reference","text":"","title":"API Reference "},{"location":"python/open-api-gateway/index.html#constructs","text":"","title":"Constructs "},{"location":"python/open-api-gateway/index.html#openapigatewayrestapi","text":"A construct for creating an api gateway rest api based on the definition in the OpenAPI spec.","title":"OpenApiGatewayRestApi "},{"location":"python/open-api-gateway/index.html#structs","text":"","title":"Structs "},{"location":"python/open-api-gateway/index.html#apigatewayintegration","text":"Represents an api gateway integration. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-integration.html","title":"ApiGatewayIntegration "},{"location":"python/open-api-gateway/index.html#apigatewayintegrationresponse","text":"API Gateway integration response. https://docs.aws.amazon.com/apigateway/latest/api/API_Integration.html","title":"ApiGatewayIntegrationResponse "},{"location":"python/open-api-gateway/index.html#apigatewayintegrationtlsconfig","text":"Specifies the TLS configuration for an integration. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-extensions-integration-tls-config.html","title":"ApiGatewayIntegrationTlsConfig "},{"location":"python/open-api-gateway/index.html#authorizerprops","text":"Properties for an authorizer.","title":"AuthorizerProps "},{"location":"python/open-api-gateway/index.html#cidrallowlist","text":"Representation of a CIDR range.","title":"CidrAllowList "},{"location":"python/open-api-gateway/index.html#cognitoauthorizerprops","text":"Properties used to configure a cognito authorizer.","title":"CognitoAuthorizerProps "},{"location":"python/open-api-gateway/index.html#commonapiprojectoptions","text":"","title":"CommonApiProjectOptions "},{"location":"python/open-api-gateway/index.html#customauthorizerprops","text":"Properties used to configure a custom authorizer.","title":"CustomAuthorizerProps "},{"location":"python/open-api-gateway/index.html#integrationgrantprops","text":"Properties for granting the API access to invoke the operation.","title":"IntegrationGrantProps "},{"location":"python/open-api-gateway/index.html#integrationrenderprops","text":"Properties for rendering an integration into an API Gateway OpenAPI extension.","title":"IntegrationRenderProps "},{"location":"python/open-api-gateway/index.html#managedrule","text":"","title":"ManagedRule "},{"location":"python/open-api-gateway/index.html#methodandpath","text":"Structure to contain an API operation's method and path.","title":"MethodAndPath "},{"location":"python/open-api-gateway/index.html#openapigatewayjavaprojectoptions","text":"Configuration for the OpenApiGatewayJavaProject.","title":"OpenApiGatewayJavaProjectOptions "},{"location":"python/open-api-gateway/index.html#openapigatewayprojectoptions","text":"Options common to all open api gateway projects.","title":"OpenApiGatewayProjectOptions "},{"location":"python/open-api-gateway/index.html#openapigatewaypythonprojectoptions","text":"Configuration for the OpenApiGatewayPythonProject.","title":"OpenApiGatewayPythonProjectOptions "},{"location":"python/open-api-gateway/index.html#openapigatewayrestapiprops","text":"Configuration for the OpenApiGatewayRestApi construct.","title":"OpenApiGatewayRestApiProps "},{"location":"python/open-api-gateway/index.html#openapigatewaytsprojectoptions","text":"Configuration for the OpenApiGatewayTsProject.","title":"OpenApiGatewayTsProjectOptions "},{"location":"python/open-api-gateway/index.html#openapigatewaywebacloptions","text":"Configuration for the Web ACL associated with the API.","title":"OpenApiGatewayWebAclOptions "},{"location":"python/open-api-gateway/index.html#openapiintegration","text":"Defines an integration for an individual API operation.","title":"OpenApiIntegration "},{"location":"python/open-api-gateway/index.html#openapioptions","text":"Options required alongside an Open API specification to create API Gateway resources.","title":"OpenApiOptions "},{"location":"python/open-api-gateway/index.html#smithyapigatewayjavaprojectoptions","text":"Configuration for the SmithyApiGatewayJavaProject.","title":"SmithyApiGatewayJavaProjectOptions "},{"location":"python/open-api-gateway/index.html#smithyapigatewayprojectoptions","text":"Options common to all smithy api gateway projects.","title":"SmithyApiGatewayProjectOptions "},{"location":"python/open-api-gateway/index.html#smithyapigatewaypythonprojectoptions","text":"Configuration for the SmithyApiGatewayPythonProject.","title":"SmithyApiGatewayPythonProjectOptions "},{"location":"python/open-api-gateway/index.html#smithyapigatewaytsprojectoptions","text":"Configuration for the SmithyApiGatewayTsProject.","title":"SmithyApiGatewayTsProjectOptions "},{"location":"python/open-api-gateway/index.html#smithybuildoptions","text":"Options for the smithy build files.","title":"SmithyBuildOptions "},{"location":"python/open-api-gateway/index.html#smithycommon","text":"Properties common to smithy plugins and the root smithy build.","title":"SmithyCommon "},{"location":"python/open-api-gateway/index.html#smithymavenconfiguration","text":"Configuration for smithy maven dependencies.","title":"SmithyMavenConfiguration "},{"location":"python/open-api-gateway/index.html#smithyplugin","text":"A smithy plugin.","title":"SmithyPlugin "},{"location":"python/open-api-gateway/index.html#smithyprojection","text":"A smithy build projection.","title":"SmithyProjection "},{"location":"python/open-api-gateway/index.html#smithyservicename","text":"Represents a fully qualified name of a Smithy service. https://awslabs.github.io/smithy/2.0/spec/service-types.html","title":"SmithyServiceName "},{"location":"python/open-api-gateway/index.html#smithytransform","text":"A smithy build transform.","title":"SmithyTransform "},{"location":"python/open-api-gateway/index.html#classes","text":"","title":"Classes "},{"location":"python/open-api-gateway/index.html#authorizer","text":"An authorizer for authorizing API requests.","title":"Authorizer "},{"location":"python/open-api-gateway/index.html#authorizers_2","text":"Class used to construct authorizers for use in the OpenApiGatewayLambdaApi construct.","title":"Authorizers "},{"location":"python/open-api-gateway/index.html#cognitoauthorizer","text":"An authorizer that uses Cognito identity or access tokens.","title":"CognitoAuthorizer "},{"location":"python/open-api-gateway/index.html#customauthorizer","text":"An authorizer that uses a lambda function to authorize requests.","title":"CustomAuthorizer "},{"location":"python/open-api-gateway/index.html#iamauthorizer","text":"An IAM authorizer.","title":"IamAuthorizer "},{"location":"python/open-api-gateway/index.html#integration","text":"An integration for an API operation. You can extend this to implement your own integration if you like.","title":"Integration "},{"location":"python/open-api-gateway/index.html#integrations_1","text":"A collection of integrations to connect API operations with a backend to service requests.","title":"Integrations "},{"location":"python/open-api-gateway/index.html#lambdaintegration","text":"A lambda integration.","title":"LambdaIntegration "},{"location":"python/open-api-gateway/index.html#noneauthorizer","text":"No authorizer.","title":"NoneAuthorizer "},{"location":"python/open-api-gateway/index.html#openapigatewayjavaproject","text":"Synthesizes a Java Project with an OpenAPI spec, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests.","title":"OpenApiGatewayJavaProject "},{"location":"python/open-api-gateway/index.html#openapigatewaypythonproject","text":"Synthesizes a Python Project with an OpenAPI spec, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests.","title":"OpenApiGatewayPythonProject "},{"location":"python/open-api-gateway/index.html#openapigatewaytsproject","text":"Synthesizes a Typescript Project with an OpenAPI spec, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests.","title":"OpenApiGatewayTsProject "},{"location":"python/open-api-gateway/index.html#smithyapigatewayjavaproject","text":"Synthesizes a Java Project with a Smithy model, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests.","title":"SmithyApiGatewayJavaProject "},{"location":"python/open-api-gateway/index.html#smithyapigatewaypythonproject","text":"Synthesizes a Python Project with a Smithy model, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests.","title":"SmithyApiGatewayPythonProject "},{"location":"python/open-api-gateway/index.html#smithyapigatewaytsproject","text":"Synthesizes a Typescript Project with a Smithy model, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests.","title":"SmithyApiGatewayTsProject "},{"location":"python/open-api-gateway/index.html#enums","text":"","title":"Enums "},{"location":"python/open-api-gateway/index.html#clientlanguage","text":"Supported languages for client generation.","title":"ClientLanguage "},{"location":"python/open-api-gateway/index.html#customauthorizertype","text":"The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type","title":"CustomAuthorizerType "},{"location":"python/open-api-gateway/index.html#documentationformat","text":"Formats for documentation generation.","title":"DocumentationFormat "},{"location":"python/pdk-nag/index.html","text":"PDK Nag PDKNag ships with a helper utility that automatically configures CDKNag within your application. const app = PDKNag . app (); const stack = new Stack ( app , 'MyStack' ); ... As shown above, this will configure your application to have CDKNag run on synthesis. By default, CDK will trigger a failure on synth if any errors are encountered. To relax these, run the following: cdk synth --ignore-errors Conversely, CDK will not fail on synth if warnings are detected. To enforce that all warnings are resolved, run the following command: cdk synth --strict Instrumenting custom NagPacks By default, when creating a PDKNag application the AwsSolutions NagPack is instrumented. In order to specify custom NagPacks to instrument, you can configure the PDKApp as follows: import { PDKNag , AwsPrototypingChecks } from \"@aws-prototyping-sdk/pdk-nag\" ; const app = PDKNag . app ({ nagPacks : [ new AwsPrototypingChecks ()] }); In this example, the AwsPrototypingChecks NagPack has been configured to run instead of the default. Multiple NagPacks can also be instrumented by adding NagPack instances to the nagPacks array; API Reference Constructs PDKNagApp Initializers from aws_prototyping_sdk import pdk_nag pdk_nag . PDKNagApp ( analytics_reporting : bool = None , auto_synth : bool = None , context : typing . Mapping [ typing . Any ] = None , default_stack_synthesizer : IReusableStackSynthesizer = None , outdir : str = None , post_cli_context : typing . Mapping [ typing . Any ] = None , stack_traces : bool = None , tree_metadata : bool = None , fail_on_error : bool = None , fail_on_warning : bool = None , nag_packs : typing . List [ NagPack ] = None ) Name Type Description analytics_reporting bool Include runtime versioning information in the Stacks of this app. auto_synth bool Automatically call synth() before the program exits. context typing.Mapping[typing.Any] Additional context values for the application. default_stack_synthesizer aws_cdk.IReusableStackSynthesizer The stack synthesizer to use by default for all Stacks in the App. outdir str The output directory into which to emit synthesized artifacts. post_cli_context typing.Mapping[typing.Any] Additional context values for the application. stack_traces bool Include construct creation stack trace in the aws:cdk:trace metadata key of all constructs. tree_metadata bool Include construct tree metadata as part of the Cloud Assembly. fail_on_error bool Determines whether any errors encountered should trigger a test failure. fail_on_warning bool Determines whether any warnings encountered should trigger a test failure. nag_packs typing.List[cdk_nag.NagPack] Custom nag packs to execute. analytics_reporting Optional Type: bool Default: Value of 'aws:cdk:version-reporting' context key Include runtime versioning information in the Stacks of this app. auto_synth Optional Type: bool Default: true if running via CDK CLI ( CDK_OUTDIR is set), false otherwise Automatically call synth() before the program exits. If you set this, you don't have to call synth() explicitly. Note that this feature is only available for certain programming languages, and calling synth() is still recommended. context Optional Type: typing.Mapping[typing.Any] Default: no additional context Additional context values for the application. Context set by the CLI or the context key in cdk.json has precedence. Context can be read from any construct using node.getContext(key) . default_stack_synthesizer Optional Type: aws_cdk.IReusableStackSynthesizer Default: A DefaultStackSynthesizer with default settings The stack synthesizer to use by default for all Stacks in the App. The Stack Synthesizer controls aspects of synthesis and deployment, like how assets are referenced and what IAM roles to use. For more information, see the README of the main CDK package. outdir Optional Type: str Default: If this value is not set, considers the environment variable CDK_OUTDIR . If CDK_OUTDIR is not defined, uses a temp directory. The output directory into which to emit synthesized artifacts. You should never need to set this value. By default, the value you pass to the CLI's --output flag will be used, and if you change it to a different directory the CLI will fail to pick up the generated Cloud Assembly. This property is intended for internal and testing use. post_cli_context Optional Type: typing.Mapping[typing.Any] Default: no additional context Additional context values for the application. Context provided here has precedence over context set by: The CLI via --context The context key in cdk.json The AppProps.context property This property is recommended over the AppProps.context property since you can make final decision over which context value to take in your app. Context can be read from any construct using node.getContext(key) . Example // context from the CLI and from ` cdk . json ` are stored in the // CDK_CONTEXT env variable const cliContext = JSON . parse ( process . env . CDK_CONTEXT ! ); // determine whether to take the context passed in the CLI or not const determineValue = process . env . PROD ? cliContext . SOMEKEY : 'my-prod-value' ; new App ({ postCliContext : { SOMEKEY : determineValue , }, }); stack_traces Optional Type: bool Default: true stack traces are included unless aws:cdk:disable-stack-trace is set in the context. Include construct creation stack trace in the aws:cdk:trace metadata key of all constructs. tree_metadata Optional Type: bool Default: true Include construct tree metadata as part of the Cloud Assembly. fail_on_error Optional Type: bool Default: false Determines whether any errors encountered should trigger a test failure. fail_on_warning Optional Type: bool Default: false Determines whether any warnings encountered should trigger a test failure. nag_packs Optional Type: typing.List[cdk_nag.NagPack] Default: DEFAULT_NAG_PACKS Custom nag packs to execute. Methods Name Description to_string Returns a string representation of this construct. synth Synthesize this stage into a cloud assembly. add_nag_result No description. nag_results Returns a list of NagResult. to_string def to_string () -> str Returns a string representation of this construct. synth def synth ( force : bool = None , skip_validation : bool = None , validate_on_synthesis : bool = None ) -> CloudAssembly Synthesize this stage into a cloud assembly. Once an assembly has been synthesized, it cannot be modified. Subsequent calls will return the same assembly. force Optional Type: bool Default: false Force a re-synth, even if the stage has already been synthesized. This is used by tests to allow for incremental verification of the output. Do not use in production. skip_validation Optional Type: bool Default: false Should we skip construct validation. validate_on_synthesis Optional Type: bool Default: false Whether the stack should be validated after synthesis to check for error metadata. add_nag_result def add_nag_result ( messages : typing . List [ Message ], resource : str ) -> None messages Required Type: typing.List[ Message ] List of messages. resource Required Type: str Resource which triggered the message. nag_results def nag_results () -> typing . List [ NagResult ] Returns a list of NagResult. Note: app.synth() must be called before this to retrieve results. Static Functions Name Description is_construct Checks if x is a construct. is_stage Test whether the given construct is a stage. of Return the stage this construct is contained with, if available. is_app Checks if an object is an instance of the App class. is_construct from aws_prototyping_sdk import pdk_nag pdk_nag . PDKNagApp . is_construct ( x : typing . Any ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: typing.Any Any object. is_stage from aws_prototyping_sdk import pdk_nag pdk_nag . PDKNagApp . is_stage ( x : typing . Any ) Test whether the given construct is a stage. x Required Type: typing.Any of from aws_prototyping_sdk import pdk_nag pdk_nag . PDKNagApp . of ( construct : IConstruct ) Return the stage this construct is contained with, if available. If called on a nested stage, returns its parent. construct Required Type: constructs.IConstruct is_app from aws_prototyping_sdk import pdk_nag pdk_nag . PDKNagApp . is_app ( obj : typing . Any ) Checks if an object is an instance of the App class. obj Required Type: typing.Any The object to evaluate. Properties Name Type Description node constructs.Node The tree node. artifact_id str Artifact ID of the assembly if it is a nested stage. The root stage (app) will return an empty string. asset_outdir str The cloud assembly asset output directory. outdir str The cloud assembly output directory. stage_name str The name of the stage. account str The default account for all resources defined within this stage. parent_stage aws_cdk.Stage The parent stage or undefined if this is the app. region str The default region for all resources defined within this stage. nag_packs typing.List[cdk_nag.NagPack] No description. node Required node : Node Type: constructs.Node The tree node. artifact_id Required artifact_id : str Type: str Artifact ID of the assembly if it is a nested stage. The root stage (app) will return an empty string. Derived from the construct path. asset_outdir Required asset_outdir : str Type: str The cloud assembly asset output directory. outdir Required outdir : str Type: str The cloud assembly output directory. stage_name Required stage_name : str Type: str The name of the stage. Based on names of the parent stages separated by hypens. account Optional account : str Type: str The default account for all resources defined within this stage. parent_stage Optional parent_stage : Stage Type: aws_cdk.Stage The parent stage or undefined if this is the app. * region Optional region : str Type: str The default region for all resources defined within this stage. nag_packs Required nag_packs : typing . List [ NagPack ] Type: typing.List[cdk_nag.NagPack] Structs Message Message instance. Initializer from aws_prototyping_sdk import pdk_nag pdk_nag . Message ( message_description : str , message_type : str ) Properties Name Type Description message_description str Message description. message_type str Message type as returned from cdk-nag. message_description Required message_description : str Type: str Message description. message_type Required message_type : str Type: str Message type as returned from cdk-nag. NagResult Nag result. Initializer from aws_prototyping_sdk import pdk_nag pdk_nag . NagResult ( messages : typing . List [ Message ], resource : str ) Properties Name Type Description messages typing.List[ Message ] List of messages. resource str Resource which triggered the message. messages Required messages : typing . List [ Message ] Type: typing.List[ Message ] List of messages. resource Required resource : str Type: str Resource which triggered the message. PDKNagAppProps Initializer from aws_prototyping_sdk import pdk_nag pdk_nag . PDKNagAppProps ( analytics_reporting : bool = None , auto_synth : bool = None , context : typing . Mapping [ typing . Any ] = None , default_stack_synthesizer : IReusableStackSynthesizer = None , outdir : str = None , post_cli_context : typing . Mapping [ typing . Any ] = None , stack_traces : bool = None , tree_metadata : bool = None , fail_on_error : bool = None , fail_on_warning : bool = None , nag_packs : typing . List [ NagPack ] = None ) Properties Name Type Description analytics_reporting bool Include runtime versioning information in the Stacks of this app. auto_synth bool Automatically call synth() before the program exits. context typing.Mapping[typing.Any] Additional context values for the application. default_stack_synthesizer aws_cdk.IReusableStackSynthesizer The stack synthesizer to use by default for all Stacks in the App. outdir str The output directory into which to emit synthesized artifacts. post_cli_context typing.Mapping[typing.Any] Additional context values for the application. stack_traces bool Include construct creation stack trace in the aws:cdk:trace metadata key of all constructs. tree_metadata bool Include construct tree metadata as part of the Cloud Assembly. fail_on_error bool Determines whether any errors encountered should trigger a test failure. fail_on_warning bool Determines whether any warnings encountered should trigger a test failure. nag_packs typing.List[cdk_nag.NagPack] Custom nag packs to execute. analytics_reporting Optional analytics_reporting : bool Type: bool Default: Value of 'aws:cdk:version-reporting' context key Include runtime versioning information in the Stacks of this app. auto_synth Optional auto_synth : bool Type: bool Default: true if running via CDK CLI ( CDK_OUTDIR is set), false otherwise Automatically call synth() before the program exits. If you set this, you don't have to call synth() explicitly. Note that this feature is only available for certain programming languages, and calling synth() is still recommended. context Optional context : typing . Mapping [ typing . Any ] Type: typing.Mapping[typing.Any] Default: no additional context Additional context values for the application. Context set by the CLI or the context key in cdk.json has precedence. Context can be read from any construct using node.getContext(key) . default_stack_synthesizer Optional default_stack_synthesizer : IReusableStackSynthesizer Type: aws_cdk.IReusableStackSynthesizer Default: A DefaultStackSynthesizer with default settings The stack synthesizer to use by default for all Stacks in the App. The Stack Synthesizer controls aspects of synthesis and deployment, like how assets are referenced and what IAM roles to use. For more information, see the README of the main CDK package. outdir Optional outdir : str Type: str Default: If this value is not set, considers the environment variable CDK_OUTDIR . If CDK_OUTDIR is not defined, uses a temp directory. The output directory into which to emit synthesized artifacts. You should never need to set this value. By default, the value you pass to the CLI's --output flag will be used, and if you change it to a different directory the CLI will fail to pick up the generated Cloud Assembly. This property is intended for internal and testing use. post_cli_context Optional post_cli_context : typing . Mapping [ typing . Any ] Type: typing.Mapping[typing.Any] Default: no additional context Additional context values for the application. Context provided here has precedence over context set by: The CLI via --context The context key in cdk.json The AppProps.context property This property is recommended over the AppProps.context property since you can make final decision over which context value to take in your app. Context can be read from any construct using node.getContext(key) . Example // context from the CLI and from ` cdk . json ` are stored in the // CDK_CONTEXT env variable const cliContext = JSON . parse ( process . env . CDK_CONTEXT ! ); // determine whether to take the context passed in the CLI or not const determineValue = process . env . PROD ? cliContext . SOMEKEY : 'my-prod-value' ; new App ({ postCliContext : { SOMEKEY : determineValue , }, }); stack_traces Optional stack_traces : bool Type: bool Default: true stack traces are included unless aws:cdk:disable-stack-trace is set in the context. Include construct creation stack trace in the aws:cdk:trace metadata key of all constructs. tree_metadata Optional tree_metadata : bool Type: bool Default: true Include construct tree metadata as part of the Cloud Assembly. fail_on_error Optional fail_on_error : bool Type: bool Default: false Determines whether any errors encountered should trigger a test failure. fail_on_warning Optional fail_on_warning : bool Type: bool Default: false Determines whether any warnings encountered should trigger a test failure. nag_packs Optional nag_packs : typing . List [ NagPack ] Type: typing.List[cdk_nag.NagPack] Default: DEFAULT_NAG_PACKS Custom nag packs to execute. Classes AwsPrototypingChecks Check best practices for prototypes. Initializers from aws_prototyping_sdk import pdk_nag pdk_nag . AwsPrototypingChecks ( log_ignores : bool = None , reports : bool = None , suppression_ignore_condition : INagSuppressionIgnore = None , verbose : bool = None ) Name Type Description log_ignores bool Whether or not to log triggered rules that have been suppressed as informational messages (default: false). reports bool Whether or not to generate CSV compliance reports for applied Stacks in the App's output directory (default: true). suppression_ignore_condition cdk_nag.INagSuppressionIgnore Conditionally prevent rules from being suppressed (default: no user provided condition). verbose bool Whether or not to enable extended explanatory descriptions on warning, error, and logged ignore messages (default: false). log_ignores Optional Type: bool Whether or not to log triggered rules that have been suppressed as informational messages (default: false). reports Optional Type: bool Whether or not to generate CSV compliance reports for applied Stacks in the App's output directory (default: true). suppression_ignore_condition Optional Type: cdk_nag.INagSuppressionIgnore Conditionally prevent rules from being suppressed (default: no user provided condition). verbose Optional Type: bool Whether or not to enable extended explanatory descriptions on warning, error, and logged ignore messages (default: false). Methods Name Description visit Check if CfnResource and apply rules. visit def visit ( node : IConstruct ) -> None Check if CfnResource and apply rules. node Required Type: constructs.IConstruct Properties Name Type Description read_pack_name str No description. read_report_stacks typing.List[str] No description. read_pack_name Required read_pack_name : str Type: str read_report_stacks Required read_report_stacks : typing . List [ str ] Type: typing.List[str] PDKNag Helper for create a Nag Enabled App. Initializers from aws_prototyping_sdk import pdk_nag pdk_nag . PDKNag () Name Type Description Static Functions Name Description add_resource_suppressions_by_path_no_throw Wrapper around NagSuppressions which does not throw. app Returns an instance of an App with Nag enabled. get_stack_account_regex Returns a stack account regex. get_stack_partition_regex Returns a stack partition regex. get_stack_prefix Returns a prefix comprising of a delimited set of Stack Ids. get_stack_region_regex Returns a stack region regex. add_resource_suppressions_by_path_no_throw from aws_prototyping_sdk import pdk_nag pdk_nag . PDKNag . add_resource_suppressions_by_path_no_throw ( stack : Stack , path : str , suppressions : typing . List [ NagPackSuppression ], apply_to_children : bool = None ) Wrapper around NagSuppressions which does not throw. stack Required Type: aws_cdk.Stack stack instance. path Required Type: str resource path. suppressions Required Type: typing.List[cdk_nag.NagPackSuppression] list of suppressions to apply. apply_to_children Optional Type: bool whether to apply to children. app from aws_prototyping_sdk import pdk_nag pdk_nag . PDKNag . app ( analytics_reporting : bool = None , auto_synth : bool = None , context : typing . Mapping [ typing . Any ] = None , default_stack_synthesizer : IReusableStackSynthesizer = None , outdir : str = None , post_cli_context : typing . Mapping [ typing . Any ] = None , stack_traces : bool = None , tree_metadata : bool = None , fail_on_error : bool = None , fail_on_warning : bool = None , nag_packs : typing . List [ NagPack ] = None ) Returns an instance of an App with Nag enabled. analytics_reporting Optional Type: bool Default: Value of 'aws:cdk:version-reporting' context key Include runtime versioning information in the Stacks of this app. auto_synth Optional Type: bool Default: true if running via CDK CLI ( CDK_OUTDIR is set), false otherwise Automatically call synth() before the program exits. If you set this, you don't have to call synth() explicitly. Note that this feature is only available for certain programming languages, and calling synth() is still recommended. context Optional Type: typing.Mapping[typing.Any] Default: no additional context Additional context values for the application. Context set by the CLI or the context key in cdk.json has precedence. Context can be read from any construct using node.getContext(key) . default_stack_synthesizer Optional Type: aws_cdk.IReusableStackSynthesizer Default: A DefaultStackSynthesizer with default settings The stack synthesizer to use by default for all Stacks in the App. The Stack Synthesizer controls aspects of synthesis and deployment, like how assets are referenced and what IAM roles to use. For more information, see the README of the main CDK package. outdir Optional Type: str Default: If this value is not set, considers the environment variable CDK_OUTDIR . If CDK_OUTDIR is not defined, uses a temp directory. The output directory into which to emit synthesized artifacts. You should never need to set this value. By default, the value you pass to the CLI's --output flag will be used, and if you change it to a different directory the CLI will fail to pick up the generated Cloud Assembly. This property is intended for internal and testing use. post_cli_context Optional Type: typing.Mapping[typing.Any] Default: no additional context Additional context values for the application. Context provided here has precedence over context set by: The CLI via --context The context key in cdk.json The AppProps.context property This property is recommended over the AppProps.context property since you can make final decision over which context value to take in your app. Context can be read from any construct using node.getContext(key) . Example // context from the CLI and from ` cdk . json ` are stored in the // CDK_CONTEXT env variable const cliContext = JSON . parse ( process . env . CDK_CONTEXT ! ); // determine whether to take the context passed in the CLI or not const determineValue = process . env . PROD ? cliContext . SOMEKEY : 'my-prod-value' ; new App ({ postCliContext : { SOMEKEY : determineValue , }, }); stack_traces Optional Type: bool Default: true stack traces are included unless aws:cdk:disable-stack-trace is set in the context. Include construct creation stack trace in the aws:cdk:trace metadata key of all constructs. tree_metadata Optional Type: bool Default: true Include construct tree metadata as part of the Cloud Assembly. fail_on_error Optional Type: bool Default: false Determines whether any errors encountered should trigger a test failure. fail_on_warning Optional Type: bool Default: false Determines whether any warnings encountered should trigger a test failure. nag_packs Optional Type: typing.List[cdk_nag.NagPack] Default: DEFAULT_NAG_PACKS Custom nag packs to execute. get_stack_account_regex from aws_prototyping_sdk import pdk_nag pdk_nag . PDKNag . get_stack_account_regex ( stack : Stack ) Returns a stack account regex. stack Required Type: aws_cdk.Stack stack instance. get_stack_partition_regex from aws_prototyping_sdk import pdk_nag pdk_nag . PDKNag . get_stack_partition_regex ( stack : Stack ) Returns a stack partition regex. stack Required Type: aws_cdk.Stack stack instance. get_stack_prefix from aws_prototyping_sdk import pdk_nag pdk_nag . PDKNag . get_stack_prefix ( stack : Stack ) Returns a prefix comprising of a delimited set of Stack Ids. For example: StackA/NestedStackB/ stack Required Type: aws_cdk.Stack stack instance. get_stack_region_regex from aws_prototyping_sdk import pdk_nag pdk_nag . PDKNag . get_stack_region_regex ( stack : Stack ) Returns a stack region regex. stack Required Type: aws_cdk.Stack stack instance.","title":"Index"},{"location":"python/pdk-nag/index.html#pdk-nag","text":"PDKNag ships with a helper utility that automatically configures CDKNag within your application. const app = PDKNag . app (); const stack = new Stack ( app , 'MyStack' ); ... As shown above, this will configure your application to have CDKNag run on synthesis. By default, CDK will trigger a failure on synth if any errors are encountered. To relax these, run the following: cdk synth --ignore-errors Conversely, CDK will not fail on synth if warnings are detected. To enforce that all warnings are resolved, run the following command: cdk synth --strict","title":"PDK Nag"},{"location":"python/pdk-nag/index.html#instrumenting-custom-nagpacks","text":"By default, when creating a PDKNag application the AwsSolutions NagPack is instrumented. In order to specify custom NagPacks to instrument, you can configure the PDKApp as follows: import { PDKNag , AwsPrototypingChecks } from \"@aws-prototyping-sdk/pdk-nag\" ; const app = PDKNag . app ({ nagPacks : [ new AwsPrototypingChecks ()] }); In this example, the AwsPrototypingChecks NagPack has been configured to run instead of the default. Multiple NagPacks can also be instrumented by adding NagPack instances to the nagPacks array;","title":"Instrumenting custom NagPacks"},{"location":"python/pdk-nag/index.html#api-reference","text":"","title":"API Reference "},{"location":"python/pdk-nag/index.html#constructs","text":"","title":"Constructs "},{"location":"python/pdk-nag/index.html#pdknagapp","text":"","title":"PDKNagApp "},{"location":"python/pdk-nag/index.html#structs","text":"","title":"Structs "},{"location":"python/pdk-nag/index.html#message","text":"Message instance.","title":"Message "},{"location":"python/pdk-nag/index.html#nagresult","text":"Nag result.","title":"NagResult "},{"location":"python/pdk-nag/index.html#pdknagappprops","text":"","title":"PDKNagAppProps "},{"location":"python/pdk-nag/index.html#classes","text":"","title":"Classes "},{"location":"python/pdk-nag/index.html#awsprototypingchecks","text":"Check best practices for prototypes.","title":"AwsPrototypingChecks "},{"location":"python/pdk-nag/index.html#pdknag","text":"Helper for create a Nag Enabled App.","title":"PDKNag "},{"location":"python/pipeline/index.html","text":"The pipeline module vends an extension to CDK's CodePipeline construct, named PDKPipeline. It additionally creates a CodeCommit repository and by default is configured to build the project assumming nx-monorepo is being used (although this can be changed). A Sonarqube Scanner can also be configured to trigger a scan whenever the synth build job completes successfully. This Scanner is non-blocking and as such is not instrumented as part of the pipeline. The architecture for the PDKPipeline is as follows: CodeCommit repository -> CodePipeline |-> EventBridge Rule (On Build Succeded) -> CodeBuild (Sonar Scan) |-> Secret (sonarqube token) This module additionally vends multiple Projen Projects, one for each of the supported languages. These projects aim to bootstrap your project by providing sample code which uses the PDKPipeline construct. For example, in .projenrc.ts: new PDKPipelineTsProject ({ cdkVersion : \"2.1.0\" , defaultReleaseBranch : \"mainline\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-pipeline\" , }); This will generate a package in typescript containing CDK boilerplate for a pipeline stack (which instantiates PDKPipeline), sets up a Dev stage with an Application Stage containing an empty ApplicationStack (to be implemented). Once this package is synthesized, you can run npx projen and projen will synthesize your cloudformation. Alternatively, you can initialize a project using the cli (in an empty directory) for each of the supported languages as follows: # Typescript npx projen new --from aws-prototyping-sdk pdk-pipeline-ts # Python npx projen new --from aws-prototyping-sdk pdk-pipeline-py # Java npx projen new --from aws-prototyping-sdk pdk-pipeline-java CDK Nag In order to keep CDK Nag happy, make sure you build the pipeline before synth as per aws-cdk#18440 . API Reference Constructs PDKPipeline An extension to CodePipeline which configures sane defaults for a NX Monorepo codebase. In addition to this, it also creates a CodeCommit repository with automated PR builds and approvals. Initializers from aws_prototyping_sdk import pipeline pipeline . PDKPipeline ( scope : Construct , id : str , synth : IFileSetProducer , asset_publishing_code_build_defaults : CodeBuildOptions = None , cli_version : str = None , code_build_defaults : CodeBuildOptions = None , code_pipeline : Pipeline = None , cross_account_keys : bool = None , docker_credentials : typing . List [ DockerCredential ] = None , docker_enabled_for_self_mutation : bool = None , docker_enabled_for_synth : bool = None , enable_key_rotation : bool = None , pipeline_name : str = None , publish_assets_in_parallel : bool = None , reuse_cross_region_support_stacks : bool = None , role : IRole = None , self_mutation : bool = None , self_mutation_code_build_defaults : CodeBuildOptions = None , synth_code_build_defaults : CodeBuildOptions = None , use_change_sets : bool = None , primary_synth_directory : str , repository_name : str , code_commit_removal_policy : RemovalPolicy = None , default_branch_name : str = None , sonar_code_scanner_config : SonarCodeScannerConfig = None , synth_shell_step_partial_props : ShellStepProps = None ) Name Type Description scope constructs.Construct No description. id str No description. synth aws_cdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. asset_publishing_code_build_defaults aws_cdk.pipelines.CodeBuildOptions Additional customizations to apply to the asset publishing CodeBuild projects. cli_version str CDK CLI version to use in self-mutation and asset publishing steps. code_build_defaults aws_cdk.pipelines.CodeBuildOptions Customize the CodeBuild projects created for this pipeline. code_pipeline aws_cdk.aws_codepipeline.Pipeline An existing Pipeline to be reused and built upon. cross_account_keys bool Create KMS keys for the artifact buckets, allowing cross-account deployments. docker_credentials typing.List[aws_cdk.pipelines.DockerCredential] A list of credentials used to authenticate to Docker registries. docker_enabled_for_self_mutation bool Enable Docker for the self-mutate step. docker_enabled_for_synth bool Enable Docker for the 'synth' step. enable_key_rotation bool Enable KMS key rotation for the generated KMS keys. pipeline_name str The name of the CodePipeline pipeline. publish_assets_in_parallel bool Publish assets in multiple CodeBuild projects. reuse_cross_region_support_stacks bool Reuse the same cross region support stack for all pipelines in the App. role aws_cdk.aws_iam.IRole The IAM role to be assumed by this Pipeline. self_mutation bool Whether the pipeline will update itself. self_mutation_code_build_defaults aws_cdk.pipelines.CodeBuildOptions Additional customizations to apply to the self mutation CodeBuild projects. synth_code_build_defaults aws_cdk.pipelines.CodeBuildOptions Additional customizations to apply to the synthesize CodeBuild projects. use_change_sets bool Deploy every stack by creating a change set and executing it. primary_synth_directory str Output directory for cdk synthesized artifacts i.e: packages/infra/cdk.out. repository_name str Name of the CodeCommit repository to create. code_commit_removal_policy aws_cdk.RemovalPolicy Possible values for a resource's Removal Policy The removal policy controls what happens to the resource if it stops being managed by CloudFormation. default_branch_name str Branch to trigger the pipeline execution. sonar_code_scanner_config SonarCodeScannerConfig Configuration for enabling Sonarqube code scanning on a successful synth. synth_shell_step_partial_props aws_cdk.pipelines.ShellStepProps PDKPipeline by default assumes a NX Monorepo structure for it's codebase and uses sane defaults for the install and run commands. scope Required Type: constructs.Construct id Required Type: str synth Required Type: aws_cdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. The primary output of this step needs to be the cdk.out directory generated by the cdk synth command. If you use a ShellStep here and you don't configure an output directory, the output directory will automatically be assumed to be cdk.out . asset_publishing_code_build_defaults Optional Type: aws_cdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the asset publishing CodeBuild projects. cli_version Optional Type: str Default: Latest version CDK CLI version to use in self-mutation and asset publishing steps. If you want to lock the CDK CLI version used in the pipeline, by steps that are automatically generated for you, specify the version here. We recommend you do not specify this value, as not specifying it always uses the latest CLI version which is backwards compatible with old versions. If you do specify it, be aware that this version should always be equal to or higher than the version of the CDK framework used by the CDK app, when the CDK commands are run during your pipeline execution. When you change this version, the next time the SelfMutate step runs it will still be using the CLI of the the previous version that was in this property: it will only start using the new version after SelfMutate completes successfully. That means that if you want to update both framework and CLI version, you should update the CLI version first, commit, push and deploy, and only then update the framework version. code_build_defaults Optional Type: aws_cdk.pipelines.CodeBuildOptions Default: All projects run non-privileged build, SMALL instance, LinuxBuildImage.STANDARD_6_0 Customize the CodeBuild projects created for this pipeline. code_pipeline Optional Type: aws_cdk.aws_codepipeline.Pipeline Default: a new underlying pipeline is created. An existing Pipeline to be reused and built upon. [disable-awslint:ref-via-interface] cross_account_keys Optional Type: bool Default: false Create KMS keys for the artifact buckets, allowing cross-account deployments. The artifact buckets have to be encrypted to support deploying CDK apps to another account, so if you want to do that or want to have your artifact buckets encrypted, be sure to set this value to true . Be aware there is a cost associated with maintaining the KMS keys. docker_credentials Optional Type: typing.List[aws_cdk.pipelines.DockerCredential] Default: [] A list of credentials used to authenticate to Docker registries. Specify any credentials necessary within the pipeline to build, synth, update, or publish assets. docker_enabled_for_self_mutation Optional Type: bool Default: false Enable Docker for the self-mutate step. Set this to true if the pipeline itself uses Docker container assets (for example, if you use LinuxBuildImage.fromAsset() as the build image of a CodeBuild step in the pipeline). You do not need to set it if you build Docker image assets in the application Stages and Stacks that are deployed by this pipeline. Configures privileged mode for the self-mutation CodeBuild action. If you are about to turn this on in an already-deployed Pipeline, set the value to true first, commit and allow the pipeline to self-update, and only then use the Docker asset in the pipeline. docker_enabled_for_synth Optional Type: bool Default: false Enable Docker for the 'synth' step. Set this to true if you are using file assets that require \"bundling\" anywhere in your application (meaning an asset compilation step will be run with the tools provided by a Docker image), both for the Pipeline stack as well as the application stacks. A common way to use bundling assets in your application is by using the @aws-cdk/aws-lambda-nodejs library. Configures privileged mode for the synth CodeBuild action. If you are about to turn this on in an already-deployed Pipeline, set the value to true first, commit and allow the pipeline to self-update, and only then use the bundled asset. enable_key_rotation Optional Type: bool Default: false (key rotation is disabled) Enable KMS key rotation for the generated KMS keys. By default KMS key rotation is disabled, but will add additional costs when enabled. pipeline_name Optional Type: str Default: Automatically generated The name of the CodePipeline pipeline. publish_assets_in_parallel Optional Type: bool Default: true Publish assets in multiple CodeBuild projects. If set to false, use one Project per type to publish all assets. Publishing in parallel improves concurrency and may reduce publishing latency, but may also increase overall provisioning time of the CodeBuild projects. Experiment and see what value works best for you. reuse_cross_region_support_stacks Optional Type: bool Default: true (Use the same support stack for all pipelines in App) Reuse the same cross region support stack for all pipelines in the App. role Optional Type: aws_cdk.aws_iam.IRole Default: A new role is created The IAM role to be assumed by this Pipeline. self_mutation Optional Type: bool Default: true Whether the pipeline will update itself. This needs to be set to true to allow the pipeline to reconfigure itself when assets or stages are being added to it, and true is the recommended setting. You can temporarily set this to false while you are iterating on the pipeline itself and prefer to deploy changes using cdk deploy . self_mutation_code_build_defaults Optional Type: aws_cdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the self mutation CodeBuild projects. synth_code_build_defaults Optional Type: aws_cdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the synthesize CodeBuild projects. use_change_sets Optional Type: bool Default: true Deploy every stack by creating a change set and executing it. When enabled, creates a \"Prepare\" and \"Execute\" action for each stack. Disable to deploy the stack in one pipeline action. primary_synth_directory Required Type: str Output directory for cdk synthesized artifacts i.e: packages/infra/cdk.out. repository_name Required Type: str Name of the CodeCommit repository to create. code_commit_removal_policy Optional Type: aws_cdk.RemovalPolicy Possible values for a resource's Removal Policy The removal policy controls what happens to the resource if it stops being managed by CloudFormation. default_branch_name Optional Type: str Default: mainline Branch to trigger the pipeline execution. sonar_code_scanner_config Optional Type: SonarCodeScannerConfig Default: undefined Configuration for enabling Sonarqube code scanning on a successful synth. synth_shell_step_partial_props Optional Type: aws_cdk.pipelines.ShellStepProps PDKPipeline by default assumes a NX Monorepo structure for it's codebase and uses sane defaults for the install and run commands. To override these defaults and/or provide additional inputs, specify env settings, etc you can provide a partial ShellStepProps. Methods Name Description to_string Returns a string representation of this construct. add_stage Deploy a single Stage by itself. add_wave Add a Wave to the pipeline, for deploying multiple Stages in parallel. build_pipeline Send the current pipeline definition to the engine, and construct the pipeline. suppress_cdk_violations No description. to_string def to_string () -> str Returns a string representation of this construct. add_stage def add_stage ( stage : Stage , post : typing . List [ Step ] = None , pre : typing . List [ Step ] = None , stack_steps : typing . List [ StackSteps ] = None ) -> StageDeployment Deploy a single Stage by itself. Add a Stage to the pipeline, to be deployed in sequence with other Stages added to the pipeline. All Stacks in the stage will be deployed in an order automatically determined by their relative dependencies. stage Required Type: aws_cdk.Stage post Optional Type: typing.List[aws_cdk.pipelines.Step] Default: No additional steps Additional steps to run after all of the stacks in the stage. pre Optional Type: typing.List[aws_cdk.pipelines.Step] Default: No additional steps Additional steps to run before any of the stacks in the stage. stack_steps Optional Type: typing.List[aws_cdk.pipelines.StackSteps] Default: No additional instructions Instructions for stack level steps. add_wave def add_wave ( id : str , post : typing . List [ Step ] = None , pre : typing . List [ Step ] = None ) -> Wave Add a Wave to the pipeline, for deploying multiple Stages in parallel. Use the return object of this method to deploy multiple stages in parallel. Example: declare const pipeline : pipelines.CodePipeline ; const wave = pipeline . addWave ( 'MyWave' ); wave . addStage ( new MyApplicationStage ( this , 'Stage1' )); wave . addStage ( new MyApplicationStage ( this , 'Stage2' )); id Required Type: str post Optional Type: typing.List[aws_cdk.pipelines.Step] Default: No additional steps Additional steps to run after all of the stages in the wave. pre Optional Type: typing.List[aws_cdk.pipelines.Step] Default: No additional steps Additional steps to run before any of the stages in the wave. build_pipeline def build_pipeline () -> None Send the current pipeline definition to the engine, and construct the pipeline. It is not possible to modify the pipeline after calling this method. suppress_cdk_violations def suppress_cdk_violations () -> None Static Functions Name Description is_construct Checks if x is a construct. is_pipeline Return whether the given object extends PipelineBase . is_construct from aws_prototyping_sdk import pipeline pipeline . PDKPipeline . is_construct ( x : typing . Any ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: typing.Any Any object. is_pipeline from aws_prototyping_sdk import pipeline pipeline . PDKPipeline . is_pipeline ( x : typing . Any ) Return whether the given object extends PipelineBase . We do attribute detection since we can't reliably use 'instanceof'. x Required Type: typing.Any Properties Name Type Description node constructs.Node The tree node. cloud_assembly_file_set aws_cdk.pipelines.FileSet The FileSet tha contains the cloud assembly. synth aws_cdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. waves typing.List[aws_cdk.pipelines.Wave] The waves in this pipeline. pipeline aws_cdk.aws_codepipeline.Pipeline The CodePipeline pipeline that deploys the CDK app. self_mutation_enabled bool Whether SelfMutation is enabled for this CDK Pipeline. self_mutation_project aws_cdk.aws_codebuild.IProject The CodeBuild project that performs the SelfMutation. synth_project aws_cdk.aws_codebuild.IProject The CodeBuild project that performs the Synth. code_repository aws_cdk.aws_codecommit.Repository No description. node Required node : Node Type: constructs.Node The tree node. cloud_assembly_file_set Required cloud_assembly_file_set : FileSet Type: aws_cdk.pipelines.FileSet The FileSet tha contains the cloud assembly. This is the primary output of the synth step. synth Required synth : IFileSetProducer Type: aws_cdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. waves Required waves : typing . List [ Wave ] Type: typing.List[aws_cdk.pipelines.Wave] The waves in this pipeline. pipeline Required pipeline : Pipeline Type: aws_cdk.aws_codepipeline.Pipeline The CodePipeline pipeline that deploys the CDK app. Only available after the pipeline has been built. self_mutation_enabled Required self_mutation_enabled : bool Type: bool Whether SelfMutation is enabled for this CDK Pipeline. self_mutation_project Required self_mutation_project : IProject Type: aws_cdk.aws_codebuild.IProject The CodeBuild project that performs the SelfMutation. Will throw an error if this is accessed before buildPipeline() is called, or if selfMutation has been disabled. synth_project Required synth_project : IProject Type: aws_cdk.aws_codebuild.IProject The CodeBuild project that performs the Synth. Only available after the pipeline has been built. code_repository Required code_repository : Repository Type: aws_cdk.aws_codecommit.Repository SonarCodeScanner Initializers from aws_prototyping_sdk import pipeline pipeline . SonarCodeScanner ( scope : Construct , id : str , sonarqube_authorized_group : str , sonarqube_default_profile_or_gate_name : str , sonarqube_endpoint : str , sonarqube_project_name : str , cdk_out_dir : str = None , cfn_nag_ignore_path : str = None , exclude_globs_for_scan : typing . List [ str ] = None , include_globs_for_scan : typing . List [ str ] = None , pre_archive_commands : typing . List [ str ] = None , sonarqube_specific_profile_or_gate_name : str = None , sonarqube_tags : typing . List [ str ] = None , artifact_bucket_arn : str , synth_build_arn : str , artifact_bucket_key_arn : str = None ) Name Type Description scope constructs.Construct No description. id str No description. sonarqube_authorized_group str Group name in Sonarqube with access to administer this project. sonarqube_default_profile_or_gate_name str Default profile/gate name i.e: your org profile. sonarqube_endpoint str endpoint of the sonarqube instance i.e: https:// . sonarqube_project_name str Name of the project to create in Sonarqube. cdk_out_dir str directory containing the synthesized cdk resources. cfn_nag_ignore_path str path to a file containing the cfn nag suppression rules. exclude_globs_for_scan typing.List[str] glob patterns to exclude from sonar scan. include_globs_for_scan typing.List[str] glob patterns to include from sonar scan. pre_archive_commands typing.List[str] Hook which allows custom commands to be executed before the process commences the archival process. sonarqube_specific_profile_or_gate_name str Specific profile/gate name i.e: language specific. sonarqube_tags typing.List[str] Tags to associate with this project. artifact_bucket_arn str S3 bucket ARN containing the built artifacts from the synth build. synth_build_arn str ARN for the CodeBuild task responsible for executing the synth command. artifact_bucket_key_arn str Artifact bucket key ARN used to encrypt the artifacts. scope Required Type: constructs.Construct id Required Type: str sonarqube_authorized_group Required Type: str Group name in Sonarqube with access to administer this project. sonarqube_default_profile_or_gate_name Required Type: str Default profile/gate name i.e: your org profile. Note: These need to be set up in Sonarqube manually. sonarqube_endpoint Required Type: str endpoint of the sonarqube instance i.e: https:// . Note: Ensure a trailing '/' is not included. sonarqube_project_name Required Type: str Name of the project to create in Sonarqube. cdk_out_dir Optional Type: str directory containing the synthesized cdk resources. cfn_nag_ignore_path Optional Type: str path to a file containing the cfn nag suppression rules. exclude_globs_for_scan Optional Type: typing.List[str] glob patterns to exclude from sonar scan. include_globs_for_scan Optional Type: typing.List[str] glob patterns to include from sonar scan. pre_archive_commands Optional Type: typing.List[str] Hook which allows custom commands to be executed before the process commences the archival process. sonarqube_specific_profile_or_gate_name Optional Type: str Specific profile/gate name i.e: language specific. Note: These need to be set up in Sonarqube manually. sonarqube_tags Optional Type: typing.List[str] Tags to associate with this project. artifact_bucket_arn Required Type: str S3 bucket ARN containing the built artifacts from the synth build. synth_build_arn Required Type: str ARN for the CodeBuild task responsible for executing the synth command. artifact_bucket_key_arn Optional Type: str Artifact bucket key ARN used to encrypt the artifacts. Methods Name Description to_string Returns a string representation of this construct. to_string def to_string () -> str Returns a string representation of this construct. Static Functions Name Description is_construct Checks if x is a construct. is_construct from aws_prototyping_sdk import pipeline pipeline . SonarCodeScanner . is_construct ( x : typing . Any ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: typing.Any Any object. Properties Name Type Description node constructs.Node The tree node. node Required node : Node Type: constructs.Node The tree node. Structs PDKPipelineJavaProjectOptions Configuration options for the PDKPipelineJavaProject. Initializer from aws_prototyping_sdk import pipeline pipeline . PDKPipelineJavaProjectOptions ( name : str , commit_generated : bool = None , git_options : GitOptions = None , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , renovatebot : bool = None , renovatebot_options : RenovatebotOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge : bool = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_credentials : GithubCredentials = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , artifact_id : str , group_id : str , version : str , description : str = None , packaging : str = None , url : str = None , compile_options : MavenCompileOptions = None , deps : typing . List [ str ] = None , distdir : str = None , junit : bool = None , junit_options : JunitOptions = None , packaging_options : MavenPackagingOptions = None , projenrc_java : bool = None , projenrc_java_options : ProjenrcOptions = None , test_deps : typing . List [ str ] = None , sample : bool = None , sample_java_package : str = None , build_command : str = None , cdkout : str = None , context : typing . Mapping [ typing . Any ] = None , feature_flags : bool = None , require_approval : ApprovalLevel = None , watch_excludes : typing . List [ str ] = None , watch_includes : typing . List [ str ] = None , cdk_version : str , cdk_assert : bool = None , cdk_assertions : bool = None , cdk_dependencies : typing . List [ str ] = None , cdk_dependencies_as_deps : bool = None , cdk_test_dependencies : typing . List [ str ] = None , cdk_version_pinning : bool = None , constructs_version : str = None , main_class : str ) Properties Name Type Description name str This is the name of your project. commit_generated bool Whether to commit the managed files by default. git_options projen.GitOptions Configuration options for git. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. renovatebot bool Use renovatebot to handle dependency upgrades. renovatebot_options projen.RenovatebotOptions Options for renovatebot. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge bool Enable automatic merging on GitHub. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_credentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. artifact_id str The artifactId is generally the name that the project is known by. group_id str This is generally unique amongst an organization or a project. version str This is the last piece of the naming puzzle. description str Description of a project is always good. packaging str Project packaging format. url str The URL, like the name, is not required. compile_options projen.java.MavenCompileOptions Compile options. deps typing.List[str] List of runtime dependencies for this project. distdir str Final artifact output directory. junit bool Include junit tests. junit_options projen.java.JunitOptions junit options. packaging_options projen.java.MavenPackagingOptions Packaging options. projenrc_java bool Use projenrc in java. projenrc_java_options projen.java.ProjenrcOptions Options related to projenrc in java. test_deps typing.List[str] List of test dependencies for this project. sample bool Include sample code and test if the relevant directories don't exist. sample_java_package str The java package to use for the code sample. build_command str A command to execute before synthesis. cdkout str cdk.out directory. context typing.Mapping[typing.Any] Additional context to include in cdk.json . feature_flags bool Include all feature flags in cdk.json. require_approval projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watch_excludes typing.List[str] Glob patterns to exclude from cdk watch . watch_includes typing.List[str] Glob patterns to include in cdk watch . cdk_version str Minimum version of the AWS CDK to depend on. cdk_assert bool Warning: NodeJS only. cdk_assertions bool Install the assertions library? cdk_dependencies typing.List[str] Which AWS CDKv1 modules this project requires. cdk_dependencies_as_deps bool If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdk_test_dependencies typing.List[str] AWS CDK modules required for testing. cdk_version_pinning bool Use pinned version instead of caret version for CDK. constructs_version str Minimum version of the constructs library to depend on. main_class str The name of the Java class with the static main() method. name Required name : str Type: str Default: $BASEDIR This is the name of your project. commit_generated Optional commit_generated : bool Type: bool Default: true Whether to commit the managed files by default. git_options Optional git_options : GitOptions Type: projen.GitOptions Configuration options for git. logging Optional logging : LoggerOptions Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional outdir : str Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional parent : Project Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional projen_command : str Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional projenrc_json : bool Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional projenrc_json_options : ProjenrcOptions Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional renovatebot : bool Type: bool Default: false Use renovatebot to handle dependency upgrades. renovatebot_options Optional renovatebot_options : RenovatebotOptions Type: projen.RenovatebotOptions Default: default options Options for renovatebot. auto_approve_options Optional auto_approve_options : AutoApproveOptions Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge Optional auto_merge : bool Type: bool Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. auto_merge_options Optional auto_merge_options : AutoMergeOptions Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional clobber : bool Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional dev_container : bool Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional github : bool Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional github_options : GitHubOptions Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional gitpod : bool Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead mergify : bool Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead mergify_options : MergifyOptions Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level project_type : ProjectType Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_credentials Optional projen_credentials : GithubCredentials Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projen_token_secret ~~ Optional Deprecated: use projenCredentials projen_token_secret : str Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional readme : SampleReadmeProps Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional stale : bool Type: bool Default: false Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional stale_options : StaleOptions Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional vscode : bool Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. artifact_id Required artifact_id : str Type: str Default: \"my-app\" The artifactId is generally the name that the project is known by. Although the groupId is important, people within the group will rarely mention the groupId in discussion (they are often all be the same ID, such as the MojoHaus project groupId: org.codehaus.mojo). It, along with the groupId, creates a key that separates this project from every other project in the world (at least, it should :) ). Along with the groupId, the artifactId fully defines the artifact's living quarters within the repository. In the case of the above project, my-project lives in $M2_REPO/org/codehaus/mojo/my-project. group_id Required group_id : str Type: str Default: \"org.acme\" This is generally unique amongst an organization or a project. For example, all core Maven artifacts do (well, should) live under the groupId org.apache.maven. Group ID's do not necessarily use the dot notation, for example, the junit project. Note that the dot-notated groupId does not have to correspond to the package structure that the project contains. It is, however, a good practice to follow. When stored within a repository, the group acts much like the Java packaging structure does in an operating system. The dots are replaced by OS specific directory separators (such as '/' in Unix) which becomes a relative directory structure from the base repository. In the example given, the org.codehaus.mojo group lives within the directory $M2_REPO/org/codehaus/mojo. version Required version : str Type: str Default: \"0.1.0\" This is the last piece of the naming puzzle. groupId:artifactId denotes a single project but they cannot delineate which incarnation of that project we are talking about. Do we want the junit:junit of 2018 (version 4.12), or of 2007 (version 3.8.2)? In short: code changes, those changes should be versioned, and this element keeps those versions in line. It is also used within an artifact's repository to separate versions from each other. my-project version 1.0 files live in the directory structure $M2_REPO/org/codehaus/mojo/my-project/1.0. description Optional description : str Type: str Default: undefined Description of a project is always good. Although this should not replace formal documentation, a quick comment to any readers of the POM is always helpful. packaging Optional packaging : str Type: str Default: \"jar\" Project packaging format. url Optional url : str Type: str Default: undefined The URL, like the name, is not required. This is a nice gesture for projects users, however, so that they know where the project lives. compile_options Optional compile_options : MavenCompileOptions Type: projen.java.MavenCompileOptions Default: defaults Compile options. deps Optional deps : typing . List [ str ] Type: typing.List[str] Default: [] List of runtime dependencies for this project. Dependencies use the format: <groupId>/<artifactId>@<semver> Additional dependencies can be added via project.addDependency() . distdir Optional distdir : str Type: str Default: \"dist/java\" Final artifact output directory. junit Optional junit : bool Type: bool Default: true Include junit tests. junit_options Optional junit_options : JunitOptions Type: projen.java.JunitOptions Default: defaults junit options. packaging_options Optional packaging_options : MavenPackagingOptions Type: projen.java.MavenPackagingOptions Default: defaults Packaging options. projenrc_java Optional projenrc_java : bool Type: bool Default: true Use projenrc in java. This will install projen as a java dependency and will add a synth task which will compile & execute main() from src/main/java/projenrc.java . projenrc_java_options Optional projenrc_java_options : ProjenrcOptions Type: projen.java.ProjenrcOptions Default: default options Options related to projenrc in java. test_deps Optional test_deps : typing . List [ str ] Type: typing.List[str] Default: [] List of test dependencies for this project. Dependencies use the format: <groupId>/<artifactId>@<semver> Additional dependencies can be added via project.addTestDependency() . sample Optional sample : bool Type: bool Default: true Include sample code and test if the relevant directories don't exist. sample_java_package Optional sample_java_package : str Type: str Default: \"org.acme\" The java package to use for the code sample. build_command Optional build_command : str Type: str Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment. cdkout Optional cdkout : str Type: str Default: \"cdk.out\" cdk.out directory. context Optional context : typing . Mapping [ typing . Any ] Type: typing.Mapping[typing.Any] Default: no additional context Additional context to include in cdk.json . feature_flags Optional feature_flags : bool Type: bool Default: true Include all feature flags in cdk.json. require_approval Optional require_approval : ApprovalLevel Type: projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watch_excludes Optional watch_excludes : typing . List [ str ] Type: typing.List[str] Default: [] Glob patterns to exclude from cdk watch . watch_includes Optional watch_includes : typing . List [ str ] Type: typing.List[str] Default: [] Glob patterns to include in cdk watch . cdk_version Required cdk_version : str Type: str Default: \"2.1.0\" Minimum version of the AWS CDK to depend on. ~~ cdk_assert ~~ Optional Deprecated: The cdk_assert : bool Type: bool Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library? cdk_assertions Optional cdk_assertions : bool Type: bool Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib' ~~ cdk_dependencies ~~ Optional Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) cdk_dependencies : typing . List [ str ] Type: typing.List[str] Which AWS CDKv1 modules this project requires. ~~ cdk_dependencies_as_deps ~~ Optional Deprecated: Not supported in CDK v2. cdk_dependencies_as_deps : bool Type: bool Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects ~~ cdk_test_dependencies ~~ Optional Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead cdk_test_dependencies : typing . List [ str ] Type: typing.List[str] AWS CDK modules required for testing. cdk_version_pinning Optional cdk_version_pinning : bool Type: bool Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes. constructs_version Optional constructs_version : str Type: str Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on. main_class Required main_class : str Type: str Default: \"org.acme.MyApp\" The name of the Java class with the static main() method. This method should call app.synth() on the CDK app. PDKPipelineProps Properties to configure the PDKPipeline. Note: Due to limitations with JSII and generic support it should be noted that the synth, synthShellStepPartialProps.input and synthShellStepPartialProps.primaryOutputDirectory properties will be ignored if passed in to this construct. synthShellStepPartialProps.commands is marked as a required field, however if you pass in [] the default commands of this construct will be retained. Initializer from aws_prototyping_sdk import pipeline pipeline . PDKPipelineProps ( synth : IFileSetProducer , asset_publishing_code_build_defaults : CodeBuildOptions = None , cli_version : str = None , code_build_defaults : CodeBuildOptions = None , code_pipeline : Pipeline = None , cross_account_keys : bool = None , docker_credentials : typing . List [ DockerCredential ] = None , docker_enabled_for_self_mutation : bool = None , docker_enabled_for_synth : bool = None , enable_key_rotation : bool = None , pipeline_name : str = None , publish_assets_in_parallel : bool = None , reuse_cross_region_support_stacks : bool = None , role : IRole = None , self_mutation : bool = None , self_mutation_code_build_defaults : CodeBuildOptions = None , synth_code_build_defaults : CodeBuildOptions = None , use_change_sets : bool = None , primary_synth_directory : str , repository_name : str , code_commit_removal_policy : RemovalPolicy = None , default_branch_name : str = None , sonar_code_scanner_config : SonarCodeScannerConfig = None , synth_shell_step_partial_props : ShellStepProps = None ) Properties Name Type Description synth aws_cdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. asset_publishing_code_build_defaults aws_cdk.pipelines.CodeBuildOptions Additional customizations to apply to the asset publishing CodeBuild projects. cli_version str CDK CLI version to use in self-mutation and asset publishing steps. code_build_defaults aws_cdk.pipelines.CodeBuildOptions Customize the CodeBuild projects created for this pipeline. code_pipeline aws_cdk.aws_codepipeline.Pipeline An existing Pipeline to be reused and built upon. cross_account_keys bool Create KMS keys for the artifact buckets, allowing cross-account deployments. docker_credentials typing.List[aws_cdk.pipelines.DockerCredential] A list of credentials used to authenticate to Docker registries. docker_enabled_for_self_mutation bool Enable Docker for the self-mutate step. docker_enabled_for_synth bool Enable Docker for the 'synth' step. enable_key_rotation bool Enable KMS key rotation for the generated KMS keys. pipeline_name str The name of the CodePipeline pipeline. publish_assets_in_parallel bool Publish assets in multiple CodeBuild projects. reuse_cross_region_support_stacks bool Reuse the same cross region support stack for all pipelines in the App. role aws_cdk.aws_iam.IRole The IAM role to be assumed by this Pipeline. self_mutation bool Whether the pipeline will update itself. self_mutation_code_build_defaults aws_cdk.pipelines.CodeBuildOptions Additional customizations to apply to the self mutation CodeBuild projects. synth_code_build_defaults aws_cdk.pipelines.CodeBuildOptions Additional customizations to apply to the synthesize CodeBuild projects. use_change_sets bool Deploy every stack by creating a change set and executing it. primary_synth_directory str Output directory for cdk synthesized artifacts i.e: packages/infra/cdk.out. repository_name str Name of the CodeCommit repository to create. code_commit_removal_policy aws_cdk.RemovalPolicy Possible values for a resource's Removal Policy The removal policy controls what happens to the resource if it stops being managed by CloudFormation. default_branch_name str Branch to trigger the pipeline execution. sonar_code_scanner_config SonarCodeScannerConfig Configuration for enabling Sonarqube code scanning on a successful synth. synth_shell_step_partial_props aws_cdk.pipelines.ShellStepProps PDKPipeline by default assumes a NX Monorepo structure for it's codebase and uses sane defaults for the install and run commands. synth Required synth : IFileSetProducer Type: aws_cdk.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. The primary output of this step needs to be the cdk.out directory generated by the cdk synth command. If you use a ShellStep here and you don't configure an output directory, the output directory will automatically be assumed to be cdk.out . asset_publishing_code_build_defaults Optional asset_publishing_code_build_defaults : CodeBuildOptions Type: aws_cdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the asset publishing CodeBuild projects. cli_version Optional cli_version : str Type: str Default: Latest version CDK CLI version to use in self-mutation and asset publishing steps. If you want to lock the CDK CLI version used in the pipeline, by steps that are automatically generated for you, specify the version here. We recommend you do not specify this value, as not specifying it always uses the latest CLI version which is backwards compatible with old versions. If you do specify it, be aware that this version should always be equal to or higher than the version of the CDK framework used by the CDK app, when the CDK commands are run during your pipeline execution. When you change this version, the next time the SelfMutate step runs it will still be using the CLI of the the previous version that was in this property: it will only start using the new version after SelfMutate completes successfully. That means that if you want to update both framework and CLI version, you should update the CLI version first, commit, push and deploy, and only then update the framework version. code_build_defaults Optional code_build_defaults : CodeBuildOptions Type: aws_cdk.pipelines.CodeBuildOptions Default: All projects run non-privileged build, SMALL instance, LinuxBuildImage.STANDARD_6_0 Customize the CodeBuild projects created for this pipeline. code_pipeline Optional code_pipeline : Pipeline Type: aws_cdk.aws_codepipeline.Pipeline Default: a new underlying pipeline is created. An existing Pipeline to be reused and built upon. [disable-awslint:ref-via-interface] cross_account_keys Optional cross_account_keys : bool Type: bool Default: false Create KMS keys for the artifact buckets, allowing cross-account deployments. The artifact buckets have to be encrypted to support deploying CDK apps to another account, so if you want to do that or want to have your artifact buckets encrypted, be sure to set this value to true . Be aware there is a cost associated with maintaining the KMS keys. docker_credentials Optional docker_credentials : typing . List [ DockerCredential ] Type: typing.List[aws_cdk.pipelines.DockerCredential] Default: [] A list of credentials used to authenticate to Docker registries. Specify any credentials necessary within the pipeline to build, synth, update, or publish assets. docker_enabled_for_self_mutation Optional docker_enabled_for_self_mutation : bool Type: bool Default: false Enable Docker for the self-mutate step. Set this to true if the pipeline itself uses Docker container assets (for example, if you use LinuxBuildImage.fromAsset() as the build image of a CodeBuild step in the pipeline). You do not need to set it if you build Docker image assets in the application Stages and Stacks that are deployed by this pipeline. Configures privileged mode for the self-mutation CodeBuild action. If you are about to turn this on in an already-deployed Pipeline, set the value to true first, commit and allow the pipeline to self-update, and only then use the Docker asset in the pipeline. docker_enabled_for_synth Optional docker_enabled_for_synth : bool Type: bool Default: false Enable Docker for the 'synth' step. Set this to true if you are using file assets that require \"bundling\" anywhere in your application (meaning an asset compilation step will be run with the tools provided by a Docker image), both for the Pipeline stack as well as the application stacks. A common way to use bundling assets in your application is by using the @aws-cdk/aws-lambda-nodejs library. Configures privileged mode for the synth CodeBuild action. If you are about to turn this on in an already-deployed Pipeline, set the value to true first, commit and allow the pipeline to self-update, and only then use the bundled asset. enable_key_rotation Optional enable_key_rotation : bool Type: bool Default: false (key rotation is disabled) Enable KMS key rotation for the generated KMS keys. By default KMS key rotation is disabled, but will add additional costs when enabled. pipeline_name Optional pipeline_name : str Type: str Default: Automatically generated The name of the CodePipeline pipeline. publish_assets_in_parallel Optional publish_assets_in_parallel : bool Type: bool Default: true Publish assets in multiple CodeBuild projects. If set to false, use one Project per type to publish all assets. Publishing in parallel improves concurrency and may reduce publishing latency, but may also increase overall provisioning time of the CodeBuild projects. Experiment and see what value works best for you. reuse_cross_region_support_stacks Optional reuse_cross_region_support_stacks : bool Type: bool Default: true (Use the same support stack for all pipelines in App) Reuse the same cross region support stack for all pipelines in the App. role Optional role : IRole Type: aws_cdk.aws_iam.IRole Default: A new role is created The IAM role to be assumed by this Pipeline. self_mutation Optional self_mutation : bool Type: bool Default: true Whether the pipeline will update itself. This needs to be set to true to allow the pipeline to reconfigure itself when assets or stages are being added to it, and true is the recommended setting. You can temporarily set this to false while you are iterating on the pipeline itself and prefer to deploy changes using cdk deploy . self_mutation_code_build_defaults Optional self_mutation_code_build_defaults : CodeBuildOptions Type: aws_cdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the self mutation CodeBuild projects. synth_code_build_defaults Optional synth_code_build_defaults : CodeBuildOptions Type: aws_cdk.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the synthesize CodeBuild projects. use_change_sets Optional use_change_sets : bool Type: bool Default: true Deploy every stack by creating a change set and executing it. When enabled, creates a \"Prepare\" and \"Execute\" action for each stack. Disable to deploy the stack in one pipeline action. primary_synth_directory Required primary_synth_directory : str Type: str Output directory for cdk synthesized artifacts i.e: packages/infra/cdk.out. repository_name Required repository_name : str Type: str Name of the CodeCommit repository to create. code_commit_removal_policy Optional code_commit_removal_policy : RemovalPolicy Type: aws_cdk.RemovalPolicy Possible values for a resource's Removal Policy The removal policy controls what happens to the resource if it stops being managed by CloudFormation. default_branch_name Optional default_branch_name : str Type: str Default: mainline Branch to trigger the pipeline execution. sonar_code_scanner_config Optional sonar_code_scanner_config : SonarCodeScannerConfig Type: SonarCodeScannerConfig Default: undefined Configuration for enabling Sonarqube code scanning on a successful synth. synth_shell_step_partial_props Optional synth_shell_step_partial_props : ShellStepProps Type: aws_cdk.pipelines.ShellStepProps PDKPipeline by default assumes a NX Monorepo structure for it's codebase and uses sane defaults for the install and run commands. To override these defaults and/or provide additional inputs, specify env settings, etc you can provide a partial ShellStepProps. PDKPipelinePyProjectOptions Configuration options for the PDKPipelinePyProject. Initializer from aws_prototyping_sdk import pipeline pipeline . PDKPipelinePyProjectOptions ( name : str , commit_generated : bool = None , git_options : GitOptions = None , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , renovatebot : bool = None , renovatebot_options : RenovatebotOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge : bool = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_credentials : GithubCredentials = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , author_email : str , author_name : str , version : str , classifiers : typing . List [ str ] = None , description : str = None , homepage : str = None , license : str = None , package_name : str = None , poetry_options : PoetryPyprojectOptionsWithoutDeps = None , setup_config : typing . Mapping [ typing . Any ] = None , module_name : str , deps : typing . List [ str ] = None , dev_deps : typing . List [ str ] = None , pip : bool = None , poetry : bool = None , projenrc_js : bool = None , projenrc_js_options : ProjenrcOptions = None , projenrc_python : bool = None , projenrc_python_options : ProjenrcOptions = None , pytest : bool = None , pytest_options : PytestOptions = None , sample : bool = None , setuptools : bool = None , venv : bool = None , venv_options : VenvOptions = None , build_command : str = None , cdkout : str = None , context : typing . Mapping [ typing . Any ] = None , feature_flags : bool = None , require_approval : ApprovalLevel = None , watch_excludes : typing . List [ str ] = None , watch_includes : typing . List [ str ] = None , cdk_version : str , cdk_assert : bool = None , cdk_assertions : bool = None , cdk_dependencies : typing . List [ str ] = None , cdk_dependencies_as_deps : bool = None , cdk_test_dependencies : typing . List [ str ] = None , cdk_version_pinning : bool = None , constructs_version : str = None , app_entrypoint : str = None , testdir : str = None ) Properties Name Type Description name str This is the name of your project. commit_generated bool Whether to commit the managed files by default. git_options projen.GitOptions Configuration options for git. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. renovatebot bool Use renovatebot to handle dependency upgrades. renovatebot_options projen.RenovatebotOptions Options for renovatebot. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge bool Enable automatic merging on GitHub. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_credentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. author_email str Author's e-mail. author_name str Author's name. version str Version of the package. classifiers typing.List[str] A list of PyPI trove classifiers that describe the project. description str A short description of the package. homepage str A URL to the website of the project. license str License of this package as an SPDX identifier. package_name str Package name. poetry_options projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setup_config typing.Mapping[typing.Any] Additional fields to pass in the setup() function if using setuptools. module_name str Name of the python package as used in imports and filenames. deps typing.List[str] List of runtime dependencies for this project. dev_deps typing.List[str] List of dev dependencies for this project. pip bool Use pip with a requirements.txt file to track project dependencies. poetry bool Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrc_js bool Use projenrc in javascript. projenrc_js_options projen.javascript.ProjenrcOptions Options related to projenrc in JavaScript. projenrc_python bool Use projenrc in Python. projenrc_python_options projen.python.ProjenrcOptions Options related to projenrc in python. pytest bool Include pytest tests. pytest_options projen.python.PytestOptions pytest options. sample bool Include sample code and test if the relevant directories don't exist. setuptools bool Use setuptools with a setup.py script for packaging and publishing. venv bool Use venv to manage a virtual environment for installing dependencies inside. venv_options projen.python.VenvOptions Venv options. build_command str A command to execute before synthesis. cdkout str cdk.out directory. context typing.Mapping[typing.Any] Additional context to include in cdk.json . feature_flags bool Include all feature flags in cdk.json. require_approval projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watch_excludes typing.List[str] Glob patterns to exclude from cdk watch . watch_includes typing.List[str] Glob patterns to include in cdk watch . cdk_version str Minimum version of the AWS CDK to depend on. cdk_assert bool Warning: NodeJS only. cdk_assertions bool Install the assertions library? cdk_dependencies typing.List[str] Which AWS CDKv1 modules this project requires. cdk_dependencies_as_deps bool If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdk_test_dependencies typing.List[str] AWS CDK modules required for testing. cdk_version_pinning bool Use pinned version instead of caret version for CDK. constructs_version str Minimum version of the constructs library to depend on. app_entrypoint str The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). testdir str Python sources directory. name Required name : str Type: str Default: $BASEDIR This is the name of your project. commit_generated Optional commit_generated : bool Type: bool Default: true Whether to commit the managed files by default. git_options Optional git_options : GitOptions Type: projen.GitOptions Configuration options for git. logging Optional logging : LoggerOptions Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional outdir : str Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional parent : Project Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional projen_command : str Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional projenrc_json : bool Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional projenrc_json_options : ProjenrcOptions Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional renovatebot : bool Type: bool Default: false Use renovatebot to handle dependency upgrades. renovatebot_options Optional renovatebot_options : RenovatebotOptions Type: projen.RenovatebotOptions Default: default options Options for renovatebot. auto_approve_options Optional auto_approve_options : AutoApproveOptions Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge Optional auto_merge : bool Type: bool Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. auto_merge_options Optional auto_merge_options : AutoMergeOptions Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional clobber : bool Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional dev_container : bool Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional github : bool Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional github_options : GitHubOptions Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional gitpod : bool Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead mergify : bool Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead mergify_options : MergifyOptions Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level project_type : ProjectType Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_credentials Optional projen_credentials : GithubCredentials Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projen_token_secret ~~ Optional Deprecated: use projenCredentials projen_token_secret : str Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional readme : SampleReadmeProps Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional stale : bool Type: bool Default: false Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional stale_options : StaleOptions Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional vscode : bool Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. author_email Required author_email : str Type: str Default: $GIT_USER_EMAIL Author's e-mail. author_name Required author_name : str Type: str Default: $GIT_USER_NAME Author's name. version Required version : str Type: str Default: \"0.1.0\" Version of the package. classifiers Optional classifiers : typing . List [ str ] Type: typing.List[str] A list of PyPI trove classifiers that describe the project. https://pypi.org/classifiers/ description Optional description : str Type: str A short description of the package. homepage Optional homepage : str Type: str A URL to the website of the project. license Optional license : str Type: str License of this package as an SPDX identifier. package_name Optional package_name : str Type: str Package name. poetry_options Optional poetry_options : PoetryPyprojectOptionsWithoutDeps Type: projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setup_config Optional setup_config : typing . Mapping [ typing . Any ] Type: typing.Mapping[typing.Any] Additional fields to pass in the setup() function if using setuptools. module_name Required module_name : str Type: str Default: $PYTHON_MODULE_NAME Name of the python package as used in imports and filenames. Must only consist of alphanumeric characters and underscores. deps Optional deps : typing . List [ str ] Type: typing.List[str] Default: [] List of runtime dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDependency() . dev_deps Optional dev_deps : typing . List [ str ] Type: typing.List[str] Default: [] List of dev dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDevDependency() . pip Optional pip : bool Type: bool Default: true, unless poetry is true, then false Use pip with a requirements.txt file to track project dependencies. poetry Optional poetry : bool Type: bool Default: false Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. This feature is incompatible with pip, setuptools, or venv. If you set this option to true , then pip, setuptools, and venv must be set to false . projenrc_js Optional projenrc_js : bool Type: bool Default: false Use projenrc in javascript. This will install projen as a JavaScript dependency and add a synth task which will run .projenrc.js . projenrc_js_options Optional projenrc_js_options : ProjenrcOptions Type: projen.javascript.ProjenrcOptions Default: default options Options related to projenrc in JavaScript. projenrc_python Optional projenrc_python : bool Type: bool Default: true Use projenrc in Python. This will install projen as a Python dependency and add a synth task which will run .projenrc.py . projenrc_python_options Optional projenrc_python_options : ProjenrcOptions Type: projen.python.ProjenrcOptions Default: default options Options related to projenrc in python. pytest Optional pytest : bool Type: bool Default: true Include pytest tests. pytest_options Optional pytest_options : PytestOptions Type: projen.python.PytestOptions Default: defaults pytest options. sample Optional sample : bool Type: bool Default: true Include sample code and test if the relevant directories don't exist. setuptools Optional setuptools : bool Type: bool Default: true, unless poetry is true, then false Use setuptools with a setup.py script for packaging and publishing. venv Optional venv : bool Type: bool Default: true, unless poetry is true, then false Use venv to manage a virtual environment for installing dependencies inside. venv_options Optional venv_options : VenvOptions Type: projen.python.VenvOptions Default: defaults Venv options. build_command Optional build_command : str Type: str Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment. cdkout Optional cdkout : str Type: str Default: \"cdk.out\" cdk.out directory. context Optional context : typing . Mapping [ typing . Any ] Type: typing.Mapping[typing.Any] Default: no additional context Additional context to include in cdk.json . feature_flags Optional feature_flags : bool Type: bool Default: true Include all feature flags in cdk.json. require_approval Optional require_approval : ApprovalLevel Type: projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watch_excludes Optional watch_excludes : typing . List [ str ] Type: typing.List[str] Default: [] Glob patterns to exclude from cdk watch . watch_includes Optional watch_includes : typing . List [ str ] Type: typing.List[str] Default: [] Glob patterns to include in cdk watch . cdk_version Required cdk_version : str Type: str Default: \"2.1.0\" Minimum version of the AWS CDK to depend on. ~~ cdk_assert ~~ Optional Deprecated: The cdk_assert : bool Type: bool Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library? cdk_assertions Optional cdk_assertions : bool Type: bool Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib' ~~ cdk_dependencies ~~ Optional Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) cdk_dependencies : typing . List [ str ] Type: typing.List[str] Which AWS CDKv1 modules this project requires. ~~ cdk_dependencies_as_deps ~~ Optional Deprecated: Not supported in CDK v2. cdk_dependencies_as_deps : bool Type: bool Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects ~~ cdk_test_dependencies ~~ Optional Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead cdk_test_dependencies : typing . List [ str ] Type: typing.List[str] AWS CDK modules required for testing. cdk_version_pinning Optional cdk_version_pinning : bool Type: bool Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes. constructs_version Optional constructs_version : str Type: str Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on. app_entrypoint Optional app_entrypoint : str Type: str Default: \"app.py\" The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). testdir Optional testdir : str Type: str Default: \"tests\" Python sources directory. PDKPipelineTsProjectOptions Configuration options for the PDKPipelineTsProject. Initializer from aws_prototyping_sdk import pipeline pipeline . PDKPipelineTsProjectOptions ( name : str , commit_generated : bool = None , git_options : GitOptions = None , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , renovatebot : bool = None , renovatebot_options : RenovatebotOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge : bool = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_credentials : GithubCredentials = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , allow_library_dependencies : bool = None , author_email : str = None , author_name : str = None , author_organization : bool = None , author_url : str = None , auto_detect_bin : bool = None , bin : typing . Mapping [ str ] = None , bugs_email : str = None , bugs_url : str = None , bundled_deps : typing . List [ str ] = None , code_artifact_options : CodeArtifactOptions = None , deps : typing . List [ str ] = None , description : str = None , dev_deps : typing . List [ str ] = None , entrypoint : str = None , homepage : str = None , keywords : typing . List [ str ] = None , license : str = None , licensed : bool = None , max_node_version : str = None , min_node_version : str = None , npm_access : NpmAccess = None , npm_registry : str = None , npm_registry_url : str = None , npm_token_secret : str = None , package_manager : NodePackageManager = None , package_name : str = None , peer_dependency_options : PeerDependencyOptions = None , peer_deps : typing . List [ str ] = None , pnpm_version : str = None , repository : str = None , repository_directory : str = None , scoped_packages_options : typing . List [ ScopedPackagesOptions ] = None , scripts : typing . Mapping [ str ] = None , stability : str = None , jsii_release_version : str = None , major_version : typing . Union [ int , float ] = None , min_major_version : typing . Union [ int , float ] = None , npm_dist_tag : str = None , post_build_steps : typing . List [ JobStep ] = None , prerelease : str = None , publish_dry_run : bool = None , publish_tasks : bool = None , release_branches : typing . Mapping [ BranchOptions ] = None , release_every_commit : bool = None , release_failure_issue : bool = None , release_failure_issue_label : str = None , release_schedule : str = None , release_tag_prefix : str = None , release_trigger : ReleaseTrigger = None , release_workflow_name : str = None , release_workflow_setup_steps : typing . List [ JobStep ] = None , versionrc_options : typing . Mapping [ typing . Any ] = None , workflow_container_image : str = None , workflow_runs_on : typing . List [ str ] = None , default_release_branch : str , artifacts_directory : str = None , auto_approve_upgrades : bool = None , build_workflow : bool = None , build_workflow_triggers : Triggers = None , bundler_options : BundlerOptions = None , code_cov : bool = None , code_cov_token_secret : str = None , copyright_owner : str = None , copyright_period : str = None , dependabot : bool = None , dependabot_options : DependabotOptions = None , deps_upgrade : bool = None , deps_upgrade_options : UpgradeDependenciesOptions = None , gitignore : typing . List [ str ] = None , jest : bool = None , jest_options : JestOptions = None , mutable_build : bool = None , npmignore : typing . List [ str ] = None , npmignore_enabled : bool = None , package : bool = None , prettier : bool = None , prettier_options : PrettierOptions = None , projen_dev_dependency : bool = None , projenrc_js : bool = None , projenrc_js_options : ProjenrcOptions = None , projen_version : str = None , pull_request_template : bool = None , pull_request_template_contents : typing . List [ str ] = None , release : bool = None , release_to_npm : bool = None , release_workflow : bool = None , workflow_bootstrap_steps : typing . List [ JobStep ] = None , workflow_git_identity : GitIdentity = None , workflow_node_version : str = None , disable_tsconfig : bool = None , docgen : bool = None , docs_directory : str = None , entrypoint_types : str = None , eslint : bool = None , eslint_options : EslintOptions = None , libdir : str = None , projenrc_ts : bool = None , projenrc_ts_options : ProjenrcOptions = None , sample_code : bool = None , srcdir : str = None , testdir : str = None , tsconfig : TypescriptConfigOptions = None , tsconfig_dev : TypescriptConfigOptions = None , tsconfig_dev_file : str = None , typescript_version : str = None , build_command : str = None , cdkout : str = None , context : typing . Mapping [ typing . Any ] = None , feature_flags : bool = None , require_approval : ApprovalLevel = None , watch_excludes : typing . List [ str ] = None , watch_includes : typing . List [ str ] = None , cdk_version : str , cdk_assert : bool = None , cdk_assertions : bool = None , cdk_dependencies : typing . List [ str ] = None , cdk_dependencies_as_deps : bool = None , cdk_test_dependencies : typing . List [ str ] = None , cdk_version_pinning : bool = None , constructs_version : str = None , app_entrypoint : str = None , edge_lambda_auto_discover : bool = None , integration_test_auto_discover : bool = None , lambda_auto_discover : bool = None , lambda_extension_auto_discover : bool = None , lambda_options : LambdaFunctionCommonOptions = None ) Properties Name Type Description name str This is the name of your project. commit_generated bool Whether to commit the managed files by default. git_options projen.GitOptions Configuration options for git. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. renovatebot bool Use renovatebot to handle dependency upgrades. renovatebot_options projen.RenovatebotOptions Options for renovatebot. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge bool Enable automatic merging on GitHub. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_credentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. allow_library_dependencies bool Allow the project to include peerDependencies and bundledDependencies . author_email str Author's e-mail. author_name str Author's name. author_organization bool Is the author an organization. author_url str Author's URL / Website. auto_detect_bin bool Automatically add all executables under the bin directory to your package.json file under the bin section. bin typing.Mapping[str] Binary programs vended with your module. bugs_email str The email address to which issues should be reported. bugs_url str The url to your project's issue tracker. bundled_deps typing.List[str] List of dependencies to bundle into this module. code_artifact_options projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps typing.List[str] Runtime dependencies of this module. description str The description is just a string that helps people understand the purpose of the package. dev_deps typing.List[str] Build dependencies for this module. entrypoint str Module entrypoint ( main in package.json ). homepage str Package's Homepage / Website. keywords typing.List[str] Keywords to include in package.json . license str License's SPDX identifier. licensed bool Indicates if a license should be added. max_node_version str Minimum node.js version to require via engines (inclusive). min_node_version str Minimum Node.js version to require via package.json engines (inclusive). npm_access projen.javascript.NpmAccess Access level of the npm package. npm_registry str The host name of the npm registry to publish to. npm_registry_url str The base URL of the npm package registry. npm_token_secret str GitHub secret which contains the NPM token to use when publishing packages. package_manager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. package_name str The \"name\" in package.json. peer_dependency_options projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps typing.List[str] Peer dependencies for this module. pnpm_version str The version of PNPM to use if using PNPM as a package manager. repository str The repository is the location where the actual code for your package lives. repository_directory str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scoped_packages_options typing.List[projen.javascript.ScopedPackagesOptions] Options for privately hosted scoped packages. scripts typing.Mapping[str] npm scripts to include. stability str Package's Stability. jsii_release_version str Version requirement of publib which is used to publish modules to npm. major_version typing.Union[int, float] Major version to release from the default branch. min_major_version typing.Union[int, float] Minimal Major version to release. npm_dist_tag str The npmDistTag to use when publishing from the default branch. post_build_steps typing.List[projen.github.workflows.JobStep] Steps to execute after build as part of the release workflow. prerelease str Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run bool Instead of actually publishing to package managers, just print the publishing command. publish_tasks bool Define publishing tasks that can be executed manually as well as workflows. release_branches typing.Mapping[projen.release.BranchOptions] Defines additional release branches. release_every_commit bool Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue bool Create a github issue on every failed publishing task. release_failure_issue_label str The label to apply to issues indicating publish failures. release_schedule str CRON schedule to trigger new releases. release_tag_prefix str Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. release_trigger projen.release.ReleaseTrigger The release trigger to use. release_workflow_name str The name of the default release workflow. release_workflow_setup_steps typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options typing.Mapping[typing.Any] Custom configuration used when creating changelog with standard-version package. workflow_container_image str Container image to use for GitHub workflows. workflow_runs_on typing.List[str] Github Runner selection labels. default_release_branch str The name of the main release branch. artifacts_directory str A directory which will contain build artifacts. auto_approve_upgrades bool Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). build_workflow bool Define a GitHub workflow for building PRs. build_workflow_triggers projen.github.workflows.Triggers Build workflow triggers. bundler_options projen.javascript.BundlerOptions Options for Bundler . code_cov bool Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret str Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner str License copyright owner. copyright_period str The copyright years to put in the LICENSE file. dependabot bool Use dependabot to handle dependency upgrades. dependabot_options projen.github.DependabotOptions Options for dependabot. deps_upgrade bool Use github workflows to handle dependency upgrades. deps_upgrade_options projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore typing.List[str] Additional entries to .gitignore. jest bool Setup jest unit tests. jest_options projen.javascript.JestOptions Jest options. mutable_build bool Automatically update files modified during builds to pull-request branches. npmignore typing.List[str] Additional entries to .npmignore. npmignore_enabled bool Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package bool Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier bool Setup prettier. prettier_options projen.javascript.PrettierOptions Prettier options. projen_dev_dependency bool Indicates of \"projen\" should be installed as a devDependency. projenrc_js bool Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options projen.javascript.ProjenrcOptions Options for .projenrc.js. projen_version str Version of projen to install. pull_request_template bool Include a GitHub pull request template. pull_request_template_contents typing.List[str] The contents of the pull request template. release bool Add release management to this project. release_to_npm bool Automatically release to npm when new versions are introduced. release_workflow bool DEPRECATED: renamed to release . workflow_bootstrap_steps typing.List[projen.github.workflows.JobStep] Workflow steps to use in order to bootstrap this repo. workflow_git_identity projen.github.GitIdentity The git identity to use in workflows. workflow_node_version str The node version to use in GitHub workflows. disable_tsconfig bool Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen bool Docgen by Typedoc. docs_directory str Docs directory. entrypoint_types str The .d.ts file that includes the type declarations for this module. eslint bool Setup eslint. eslint_options projen.javascript.EslintOptions Eslint options. libdir str Typescript artifacts output directory. projenrc_ts bool Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code bool Generate one-time sample in src/ and test/ if there are no files there. srcdir str Typescript sources directory. testdir str Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfig_dev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file str The name of the development tsconfig.json file. typescript_version str TypeScript version to use. build_command str A command to execute before synthesis. cdkout str cdk.out directory. context typing.Mapping[typing.Any] Additional context to include in cdk.json . feature_flags bool Include all feature flags in cdk.json. require_approval projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watch_excludes typing.List[str] Glob patterns to exclude from cdk watch . watch_includes typing.List[str] Glob patterns to include in cdk watch . cdk_version str Minimum version of the AWS CDK to depend on. cdk_assert bool Warning: NodeJS only. cdk_assertions bool Install the assertions library? cdk_dependencies typing.List[str] Which AWS CDKv1 modules this project requires. cdk_dependencies_as_deps bool If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdk_test_dependencies typing.List[str] AWS CDK modules required for testing. cdk_version_pinning bool Use pinned version instead of caret version for CDK. constructs_version str Minimum version of the constructs library to depend on. app_entrypoint str The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). edge_lambda_auto_discover bool Automatically adds an cloudfront.experimental.EdgeFunction for each .edge-lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. integration_test_auto_discover bool Automatically discovers and creates integration tests for each .integ.ts file in under your test directory. lambda_auto_discover bool Automatically adds an awscdk.LambdaFunction for each .lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambda_extension_auto_discover bool Automatically adds an awscdk.LambdaExtension for each .lambda-extension.ts entrypoint in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambda_options projen.awscdk.LambdaFunctionCommonOptions Common options for all AWS Lambda functions. name Required name : str Type: str Default: $BASEDIR This is the name of your project. commit_generated Optional commit_generated : bool Type: bool Default: true Whether to commit the managed files by default. git_options Optional git_options : GitOptions Type: projen.GitOptions Configuration options for git. logging Optional logging : LoggerOptions Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional outdir : str Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional parent : Project Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional projen_command : str Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional projenrc_json : bool Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional projenrc_json_options : ProjenrcOptions Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional renovatebot : bool Type: bool Default: false Use renovatebot to handle dependency upgrades. renovatebot_options Optional renovatebot_options : RenovatebotOptions Type: projen.RenovatebotOptions Default: default options Options for renovatebot. auto_approve_options Optional auto_approve_options : AutoApproveOptions Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge Optional auto_merge : bool Type: bool Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. auto_merge_options Optional auto_merge_options : AutoMergeOptions Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional clobber : bool Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional dev_container : bool Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional github : bool Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional github_options : GitHubOptions Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional gitpod : bool Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead mergify : bool Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead mergify_options : MergifyOptions Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level project_type : ProjectType Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_credentials Optional projen_credentials : GithubCredentials Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projen_token_secret ~~ Optional Deprecated: use projenCredentials projen_token_secret : str Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional readme : SampleReadmeProps Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional stale : bool Type: bool Default: false Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional stale_options : StaleOptions Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional vscode : bool Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allow_library_dependencies Optional allow_library_dependencies : bool Type: bool Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. author_email Optional author_email : str Type: str Author's e-mail. author_name Optional author_name : str Type: str Author's name. author_organization Optional author_organization : bool Type: bool Is the author an organization. author_url Optional author_url : str Type: str Author's URL / Website. auto_detect_bin Optional auto_detect_bin : bool Type: bool Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional bin : typing . Mapping [ str ] Type: typing.Mapping[str] Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugs_email Optional bugs_email : str Type: str The email address to which issues should be reported. bugs_url Optional bugs_url : str Type: str The url to your project's issue tracker. bundled_deps Optional bundled_deps : typing . List [ str ] Type: typing.List[str] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. code_artifact_options Optional code_artifact_options : CodeArtifactOptions Type: projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional deps : typing . List [ str ] Type: typing.List[str] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'express' , 'lodash' , 'foo@^2' ] description Optional description : str Type: str The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description dev_deps Optional dev_deps : typing . List [ str ] Type: typing.List[str] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'typescript' , '@types/express' ] entrypoint Optional entrypoint : str Type: str Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional homepage : str Type: str Package's Homepage / Website. keywords Optional keywords : typing . List [ str ] Type: typing.List[str] Keywords to include in package.json . license Optional license : str Type: str Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional licensed : bool Type: bool Default: true Indicates if a license should be added. max_node_version Optional max_node_version : str Type: str Default: no max Minimum node.js version to require via engines (inclusive). min_node_version Optional min_node_version : str Type: str Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npm_access Optional npm_access : NpmAccess Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npm_registry ~~ Optional Deprecated: use npmRegistryUrl instead npm_registry : str Type: str The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npm_registry_url Optional npm_registry_url : str Type: str Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npm_token_secret Optional npm_token_secret : str Type: str Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. package_manager Optional package_manager : NodePackageManager Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. package_name Optional package_name : str Type: str Default: defaults to project name The \"name\" in package.json. peer_dependency_options Optional peer_dependency_options : PeerDependencyOptions Type: projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps Optional peer_deps : typing . List [ str ] Type: typing.List[str] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. pnpm_version Optional pnpm_version : str Type: str Default: \"7\" The version of PNPM to use if using PNPM as a package manager. repository Optional repository : str Type: str The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repository_directory Optional repository_directory : str Type: str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scoped_packages_options Optional scoped_packages_options : typing . List [ ScopedPackagesOptions ] Type: typing.List[projen.javascript.ScopedPackagesOptions] Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional scripts : typing . Mapping [ str ] Type: typing.Mapping[str] Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional stability : str Type: str Package's Stability. jsii_release_version Optional jsii_release_version : str Type: str Default: \"latest\" Version requirement of publib which is used to publish modules to npm. major_version Optional major_version : typing . Union [ int , float ] Type: typing.Union[int, float] Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. min_major_version Optional min_major_version : typing . Union [ int , float ] Type: typing.Union[int, float] Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npm_dist_tag Optional npm_dist_tag : str Type: str Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. post_build_steps Optional post_build_steps : typing . List [ JobStep ] Type: typing.List[projen.github.workflows.JobStep] Default: [] Steps to execute after build as part of the release workflow. prerelease Optional prerelease : str Type: str Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run Optional publish_dry_run : bool Type: bool Default: false Instead of actually publishing to package managers, just print the publishing command. publish_tasks Optional publish_tasks : bool Type: bool Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. release_branches Optional release_branches : typing . Mapping [ BranchOptions ] Type: typing.Mapping[projen.release.BranchOptions] Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ release_every_commit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead release_every_commit : bool Type: bool Default: true Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue Optional release_failure_issue : bool Type: bool Default: false Create a github issue on every failed publishing task. release_failure_issue_label Optional release_failure_issue_label : str Type: str Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ release_schedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead release_schedule : str Type: str Default: no scheduled releases CRON schedule to trigger new releases. release_tag_prefix Optional release_tag_prefix : str Type: str Default: \"v\" Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. release_trigger Optional release_trigger : ReleaseTrigger Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. release_workflow_name Optional release_workflow_name : str Type: str Default: \"Release\" The name of the default release workflow. release_workflow_setup_steps Optional release_workflow_setup_steps : typing . List [ JobStep ] Type: typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options Optional versionrc_options : typing . Mapping [ typing . Any ] Type: typing.Mapping[typing.Any] Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflow_container_image Optional workflow_container_image : str Type: str Default: default image Container image to use for GitHub workflows. workflow_runs_on Optional workflow_runs_on : typing . List [ str ] Type: typing.List[str] Default: [\"ubuntu-latest\"] Github Runner selection labels. default_release_branch Required default_release_branch : str Type: str Default: \"main\" The name of the main release branch. artifacts_directory Optional artifacts_directory : str Type: str Default: \"dist\" A directory which will contain build artifacts. auto_approve_upgrades Optional auto_approve_upgrades : bool Type: bool Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. build_workflow Optional build_workflow : bool Type: bool Default: true if not a subproject Define a GitHub workflow for building PRs. build_workflow_triggers Optional build_workflow_triggers : Triggers Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundler_options Optional bundler_options : BundlerOptions Type: projen.javascript.BundlerOptions Options for Bundler . code_cov Optional code_cov : bool Type: bool Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret Optional code_cov_token_secret : str Type: str Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner Optional copyright_owner : str Type: str Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyright_period Optional copyright_period : str Type: str Default: current year The copyright years to put in the LICENSE file. dependabot Optional dependabot : bool Type: bool Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabot_options Optional dependabot_options : DependabotOptions Type: projen.github.DependabotOptions Default: default options Options for dependabot. deps_upgrade Optional deps_upgrade : bool Type: bool Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . deps_upgrade_options Optional deps_upgrade_options : UpgradeDependenciesOptions Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional gitignore : typing . List [ str ] Type: typing.List[str] Additional entries to .gitignore. jest Optional jest : bool Type: bool Default: true Setup jest unit tests. jest_options Optional jest_options : JestOptions Type: projen.javascript.JestOptions Default: default options Jest options. mutable_build Optional mutable_build : bool Type: bool Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore npmignore : typing . List [ str ] Type: typing.List[str] Additional entries to .npmignore. npmignore_enabled Optional npmignore_enabled : bool Type: bool Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional package : bool Type: bool Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional prettier : bool Type: bool Default: false Setup prettier. prettier_options Optional prettier_options : PrettierOptions Type: projen.javascript.PrettierOptions Default: default options Prettier options. projen_dev_dependency Optional projen_dev_dependency : bool Type: bool Default: true Indicates of \"projen\" should be installed as a devDependency. projenrc_js Optional projenrc_js : bool Type: bool Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options Optional projenrc_js_options : ProjenrcOptions Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projen_version Optional projen_version : str Type: str Default: Defaults to the latest version. Version of projen to install. pull_request_template Optional pull_request_template : bool Type: bool Default: true Include a GitHub pull request template. pull_request_template_contents Optional pull_request_template_contents : typing . List [ str ] Type: typing.List[str] Default: default content The contents of the pull request template. release Optional release : bool Type: bool Default: true (false for subprojects) Add release management to this project. release_to_npm Optional release_to_npm : bool Type: bool Default: false Automatically release to npm when new versions are introduced. ~~ release_workflow ~~ Optional Deprecated: see release . release_workflow : bool Type: bool Default: true if not a subproject DEPRECATED: renamed to release . workflow_bootstrap_steps Optional workflow_bootstrap_steps : typing . List [ JobStep ] Type: typing.List[projen.github.workflows.JobStep] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflow_git_identity Optional workflow_git_identity : GitIdentity Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflow_node_version Optional workflow_node_version : str Type: str Default: same as minNodeVersion The node version to use in GitHub workflows. disable_tsconfig Optional disable_tsconfig : bool Type: bool Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional docgen : bool Type: bool Default: false Docgen by Typedoc. docs_directory Optional docs_directory : str Type: str Default: \"docs\" Docs directory. entrypoint_types Optional entrypoint_types : str Type: str Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional eslint : bool Type: bool Default: true Setup eslint. eslint_options Optional eslint_options : EslintOptions Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional libdir : str Type: str Default: \"lib\" Typescript artifacts output directory. projenrc_ts Optional projenrc_ts : bool Type: bool Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options Optional projenrc_ts_options : ProjenrcOptions Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code Optional sample_code : bool Type: bool Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional srcdir : str Type: str Default: \"src\" Typescript sources directory. testdir Optional testdir : str Type: str Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional tsconfig : TypescriptConfigOptions Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfig_dev Optional tsconfig_dev : TypescriptConfigOptions Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file Optional tsconfig_dev_file : str Type: str Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescript_version Optional typescript_version : str Type: str Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). build_command Optional build_command : str Type: str Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment. cdkout Optional cdkout : str Type: str Default: \"cdk.out\" cdk.out directory. context Optional context : typing . Mapping [ typing . Any ] Type: typing.Mapping[typing.Any] Default: no additional context Additional context to include in cdk.json . feature_flags Optional feature_flags : bool Type: bool Default: true Include all feature flags in cdk.json. require_approval Optional require_approval : ApprovalLevel Type: projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watch_excludes Optional watch_excludes : typing . List [ str ] Type: typing.List[str] Default: [] Glob patterns to exclude from cdk watch . watch_includes Optional watch_includes : typing . List [ str ] Type: typing.List[str] Default: [] Glob patterns to include in cdk watch . cdk_version Required cdk_version : str Type: str Default: \"2.1.0\" Minimum version of the AWS CDK to depend on. ~~ cdk_assert ~~ Optional Deprecated: The cdk_assert : bool Type: bool Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library? cdk_assertions Optional cdk_assertions : bool Type: bool Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib' ~~ cdk_dependencies ~~ Optional Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) cdk_dependencies : typing . List [ str ] Type: typing.List[str] Which AWS CDKv1 modules this project requires. ~~ cdk_dependencies_as_deps ~~ Optional Deprecated: Not supported in CDK v2. cdk_dependencies_as_deps : bool Type: bool Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects ~~ cdk_test_dependencies ~~ Optional Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead cdk_test_dependencies : typing . List [ str ] Type: typing.List[str] AWS CDK modules required for testing. cdk_version_pinning Optional cdk_version_pinning : bool Type: bool Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes. constructs_version Optional constructs_version : str Type: str Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on. app_entrypoint Optional app_entrypoint : str Type: str Default: \"main.ts\" The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). edge_lambda_auto_discover Optional edge_lambda_auto_discover : bool Type: bool Default: true Automatically adds an cloudfront.experimental.EdgeFunction for each .edge-lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. integration_test_auto_discover Optional integration_test_auto_discover : bool Type: bool Default: true Automatically discovers and creates integration tests for each .integ.ts file in under your test directory. lambda_auto_discover Optional lambda_auto_discover : bool Type: bool Default: true Automatically adds an awscdk.LambdaFunction for each .lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambda_extension_auto_discover Optional lambda_extension_auto_discover : bool Type: bool Default: true Automatically adds an awscdk.LambdaExtension for each .lambda-extension.ts entrypoint in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambda_options Optional lambda_options : LambdaFunctionCommonOptions Type: projen.awscdk.LambdaFunctionCommonOptions Default: default options Common options for all AWS Lambda functions. SonarCodeScannerConfig Initializer from aws_prototyping_sdk import pipeline pipeline . SonarCodeScannerConfig ( sonarqube_authorized_group : str , sonarqube_default_profile_or_gate_name : str , sonarqube_endpoint : str , sonarqube_project_name : str , cdk_out_dir : str = None , cfn_nag_ignore_path : str = None , exclude_globs_for_scan : typing . List [ str ] = None , include_globs_for_scan : typing . List [ str ] = None , pre_archive_commands : typing . List [ str ] = None , sonarqube_specific_profile_or_gate_name : str = None , sonarqube_tags : typing . List [ str ] = None ) Properties Name Type Description sonarqube_authorized_group str Group name in Sonarqube with access to administer this project. sonarqube_default_profile_or_gate_name str Default profile/gate name i.e: your org profile. sonarqube_endpoint str endpoint of the sonarqube instance i.e: https:// . sonarqube_project_name str Name of the project to create in Sonarqube. cdk_out_dir str directory containing the synthesized cdk resources. cfn_nag_ignore_path str path to a file containing the cfn nag suppression rules. exclude_globs_for_scan typing.List[str] glob patterns to exclude from sonar scan. include_globs_for_scan typing.List[str] glob patterns to include from sonar scan. pre_archive_commands typing.List[str] Hook which allows custom commands to be executed before the process commences the archival process. sonarqube_specific_profile_or_gate_name str Specific profile/gate name i.e: language specific. sonarqube_tags typing.List[str] Tags to associate with this project. sonarqube_authorized_group Required sonarqube_authorized_group : str Type: str Group name in Sonarqube with access to administer this project. sonarqube_default_profile_or_gate_name Required sonarqube_default_profile_or_gate_name : str Type: str Default profile/gate name i.e: your org profile. Note: These need to be set up in Sonarqube manually. sonarqube_endpoint Required sonarqube_endpoint : str Type: str endpoint of the sonarqube instance i.e: https:// . Note: Ensure a trailing '/' is not included. sonarqube_project_name Required sonarqube_project_name : str Type: str Name of the project to create in Sonarqube. cdk_out_dir Optional cdk_out_dir : str Type: str directory containing the synthesized cdk resources. cfn_nag_ignore_path Optional cfn_nag_ignore_path : str Type: str path to a file containing the cfn nag suppression rules. exclude_globs_for_scan Optional exclude_globs_for_scan : typing . List [ str ] Type: typing.List[str] glob patterns to exclude from sonar scan. include_globs_for_scan Optional include_globs_for_scan : typing . List [ str ] Type: typing.List[str] glob patterns to include from sonar scan. pre_archive_commands Optional pre_archive_commands : typing . List [ str ] Type: typing.List[str] Hook which allows custom commands to be executed before the process commences the archival process. sonarqube_specific_profile_or_gate_name Optional sonarqube_specific_profile_or_gate_name : str Type: str Specific profile/gate name i.e: language specific. Note: These need to be set up in Sonarqube manually. sonarqube_tags Optional sonarqube_tags : typing . List [ str ] Type: typing.List[str] Tags to associate with this project. SonarCodeScannerProps SonarCodeScanners properties. Initializer from aws_prototyping_sdk import pipeline pipeline . SonarCodeScannerProps ( sonarqube_authorized_group : str , sonarqube_default_profile_or_gate_name : str , sonarqube_endpoint : str , sonarqube_project_name : str , cdk_out_dir : str = None , cfn_nag_ignore_path : str = None , exclude_globs_for_scan : typing . List [ str ] = None , include_globs_for_scan : typing . List [ str ] = None , pre_archive_commands : typing . List [ str ] = None , sonarqube_specific_profile_or_gate_name : str = None , sonarqube_tags : typing . List [ str ] = None , artifact_bucket_arn : str , synth_build_arn : str , artifact_bucket_key_arn : str = None ) Properties Name Type Description sonarqube_authorized_group str Group name in Sonarqube with access to administer this project. sonarqube_default_profile_or_gate_name str Default profile/gate name i.e: your org profile. sonarqube_endpoint str endpoint of the sonarqube instance i.e: https:// . sonarqube_project_name str Name of the project to create in Sonarqube. cdk_out_dir str directory containing the synthesized cdk resources. cfn_nag_ignore_path str path to a file containing the cfn nag suppression rules. exclude_globs_for_scan typing.List[str] glob patterns to exclude from sonar scan. include_globs_for_scan typing.List[str] glob patterns to include from sonar scan. pre_archive_commands typing.List[str] Hook which allows custom commands to be executed before the process commences the archival process. sonarqube_specific_profile_or_gate_name str Specific profile/gate name i.e: language specific. sonarqube_tags typing.List[str] Tags to associate with this project. artifact_bucket_arn str S3 bucket ARN containing the built artifacts from the synth build. synth_build_arn str ARN for the CodeBuild task responsible for executing the synth command. artifact_bucket_key_arn str Artifact bucket key ARN used to encrypt the artifacts. sonarqube_authorized_group Required sonarqube_authorized_group : str Type: str Group name in Sonarqube with access to administer this project. sonarqube_default_profile_or_gate_name Required sonarqube_default_profile_or_gate_name : str Type: str Default profile/gate name i.e: your org profile. Note: These need to be set up in Sonarqube manually. sonarqube_endpoint Required sonarqube_endpoint : str Type: str endpoint of the sonarqube instance i.e: https:// . Note: Ensure a trailing '/' is not included. sonarqube_project_name Required sonarqube_project_name : str Type: str Name of the project to create in Sonarqube. cdk_out_dir Optional cdk_out_dir : str Type: str directory containing the synthesized cdk resources. cfn_nag_ignore_path Optional cfn_nag_ignore_path : str Type: str path to a file containing the cfn nag suppression rules. exclude_globs_for_scan Optional exclude_globs_for_scan : typing . List [ str ] Type: typing.List[str] glob patterns to exclude from sonar scan. include_globs_for_scan Optional include_globs_for_scan : typing . List [ str ] Type: typing.List[str] glob patterns to include from sonar scan. pre_archive_commands Optional pre_archive_commands : typing . List [ str ] Type: typing.List[str] Hook which allows custom commands to be executed before the process commences the archival process. sonarqube_specific_profile_or_gate_name Optional sonarqube_specific_profile_or_gate_name : str Type: str Specific profile/gate name i.e: language specific. Note: These need to be set up in Sonarqube manually. sonarqube_tags Optional sonarqube_tags : typing . List [ str ] Type: typing.List[str] Tags to associate with this project. artifact_bucket_arn Required artifact_bucket_arn : str Type: str S3 bucket ARN containing the built artifacts from the synth build. synth_build_arn Required synth_build_arn : str Type: str ARN for the CodeBuild task responsible for executing the synth command. artifact_bucket_key_arn Optional artifact_bucket_key_arn : str Type: str Artifact bucket key ARN used to encrypt the artifacts. Classes PDKPipelineJavaProject Synthesizes a Java Project with a CI/CD pipeline. Initializers from aws_prototyping_sdk import pipeline pipeline . PDKPipelineJavaProject ( name : str , commit_generated : bool = None , git_options : GitOptions = None , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , renovatebot : bool = None , renovatebot_options : RenovatebotOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge : bool = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_credentials : GithubCredentials = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , artifact_id : str , group_id : str , version : str , description : str = None , packaging : str = None , url : str = None , compile_options : MavenCompileOptions = None , deps : typing . List [ str ] = None , distdir : str = None , junit : bool = None , junit_options : JunitOptions = None , packaging_options : MavenPackagingOptions = None , projenrc_java : bool = None , projenrc_java_options : ProjenrcOptions = None , test_deps : typing . List [ str ] = None , sample : bool = None , sample_java_package : str = None , build_command : str = None , cdkout : str = None , context : typing . Mapping [ typing . Any ] = None , feature_flags : bool = None , require_approval : ApprovalLevel = None , watch_excludes : typing . List [ str ] = None , watch_includes : typing . List [ str ] = None , cdk_version : str , cdk_assert : bool = None , cdk_assertions : bool = None , cdk_dependencies : typing . List [ str ] = None , cdk_dependencies_as_deps : bool = None , cdk_test_dependencies : typing . List [ str ] = None , cdk_version_pinning : bool = None , constructs_version : str = None , main_class : str ) Name Type Description name str This is the name of your project. commit_generated bool Whether to commit the managed files by default. git_options projen.GitOptions Configuration options for git. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. renovatebot bool Use renovatebot to handle dependency upgrades. renovatebot_options projen.RenovatebotOptions Options for renovatebot. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge bool Enable automatic merging on GitHub. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_credentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. artifact_id str The artifactId is generally the name that the project is known by. group_id str This is generally unique amongst an organization or a project. version str This is the last piece of the naming puzzle. description str Description of a project is always good. packaging str Project packaging format. url str The URL, like the name, is not required. compile_options projen.java.MavenCompileOptions Compile options. deps typing.List[str] List of runtime dependencies for this project. distdir str Final artifact output directory. junit bool Include junit tests. junit_options projen.java.JunitOptions junit options. packaging_options projen.java.MavenPackagingOptions Packaging options. projenrc_java bool Use projenrc in java. projenrc_java_options projen.java.ProjenrcOptions Options related to projenrc in java. test_deps typing.List[str] List of test dependencies for this project. sample bool Include sample code and test if the relevant directories don't exist. sample_java_package str The java package to use for the code sample. build_command str A command to execute before synthesis. cdkout str cdk.out directory. context typing.Mapping[typing.Any] Additional context to include in cdk.json . feature_flags bool Include all feature flags in cdk.json. require_approval projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watch_excludes typing.List[str] Glob patterns to exclude from cdk watch . watch_includes typing.List[str] Glob patterns to include in cdk watch . cdk_version str Minimum version of the AWS CDK to depend on. cdk_assert bool Warning: NodeJS only. cdk_assertions bool Install the assertions library? cdk_dependencies typing.List[str] Which AWS CDKv1 modules this project requires. cdk_dependencies_as_deps bool If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdk_test_dependencies typing.List[str] AWS CDK modules required for testing. cdk_version_pinning bool Use pinned version instead of caret version for CDK. constructs_version str Minimum version of the constructs library to depend on. main_class str The name of the Java class with the static main() method. name Required Type: str Default: $BASEDIR This is the name of your project. commit_generated Optional Type: bool Default: true Whether to commit the managed files by default. git_options Optional Type: projen.GitOptions Configuration options for git. logging Optional Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional Type: bool Default: false Use renovatebot to handle dependency upgrades. renovatebot_options Optional Type: projen.RenovatebotOptions Default: default options Options for renovatebot. auto_approve_options Optional Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge Optional Type: bool Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. auto_merge_options Optional Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_credentials Optional Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projen_token_secret ~~ Optional Deprecated: use projenCredentials Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional Type: bool Default: false Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. artifact_id Required Type: str Default: \"my-app\" The artifactId is generally the name that the project is known by. Although the groupId is important, people within the group will rarely mention the groupId in discussion (they are often all be the same ID, such as the MojoHaus project groupId: org.codehaus.mojo). It, along with the groupId, creates a key that separates this project from every other project in the world (at least, it should :) ). Along with the groupId, the artifactId fully defines the artifact's living quarters within the repository. In the case of the above project, my-project lives in $M2_REPO/org/codehaus/mojo/my-project. group_id Required Type: str Default: \"org.acme\" This is generally unique amongst an organization or a project. For example, all core Maven artifacts do (well, should) live under the groupId org.apache.maven. Group ID's do not necessarily use the dot notation, for example, the junit project. Note that the dot-notated groupId does not have to correspond to the package structure that the project contains. It is, however, a good practice to follow. When stored within a repository, the group acts much like the Java packaging structure does in an operating system. The dots are replaced by OS specific directory separators (such as '/' in Unix) which becomes a relative directory structure from the base repository. In the example given, the org.codehaus.mojo group lives within the directory $M2_REPO/org/codehaus/mojo. version Required Type: str Default: \"0.1.0\" This is the last piece of the naming puzzle. groupId:artifactId denotes a single project but they cannot delineate which incarnation of that project we are talking about. Do we want the junit:junit of 2018 (version 4.12), or of 2007 (version 3.8.2)? In short: code changes, those changes should be versioned, and this element keeps those versions in line. It is also used within an artifact's repository to separate versions from each other. my-project version 1.0 files live in the directory structure $M2_REPO/org/codehaus/mojo/my-project/1.0. description Optional Type: str Default: undefined Description of a project is always good. Although this should not replace formal documentation, a quick comment to any readers of the POM is always helpful. packaging Optional Type: str Default: \"jar\" Project packaging format. url Optional Type: str Default: undefined The URL, like the name, is not required. This is a nice gesture for projects users, however, so that they know where the project lives. compile_options Optional Type: projen.java.MavenCompileOptions Default: defaults Compile options. deps Optional Type: typing.List[str] Default: [] List of runtime dependencies for this project. Dependencies use the format: <groupId>/<artifactId>@<semver> Additional dependencies can be added via project.addDependency() . distdir Optional Type: str Default: \"dist/java\" Final artifact output directory. junit Optional Type: bool Default: true Include junit tests. junit_options Optional Type: projen.java.JunitOptions Default: defaults junit options. packaging_options Optional Type: projen.java.MavenPackagingOptions Default: defaults Packaging options. projenrc_java Optional Type: bool Default: true Use projenrc in java. This will install projen as a java dependency and will add a synth task which will compile & execute main() from src/main/java/projenrc.java . projenrc_java_options Optional Type: projen.java.ProjenrcOptions Default: default options Options related to projenrc in java. test_deps Optional Type: typing.List[str] Default: [] List of test dependencies for this project. Dependencies use the format: <groupId>/<artifactId>@<semver> Additional dependencies can be added via project.addTestDependency() . sample Optional Type: bool Default: true Include sample code and test if the relevant directories don't exist. sample_java_package Optional Type: str Default: \"org.acme\" The java package to use for the code sample. build_command Optional Type: str Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment. cdkout Optional Type: str Default: \"cdk.out\" cdk.out directory. context Optional Type: typing.Mapping[typing.Any] Default: no additional context Additional context to include in cdk.json . feature_flags Optional Type: bool Default: true Include all feature flags in cdk.json. require_approval Optional Type: projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watch_excludes Optional Type: typing.List[str] Default: [] Glob patterns to exclude from cdk watch . watch_includes Optional Type: typing.List[str] Default: [] Glob patterns to include in cdk watch . cdk_version Required Type: str Default: \"2.1.0\" Minimum version of the AWS CDK to depend on. ~~ cdk_assert ~~ Optional Deprecated: The Type: bool Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library? cdk_assertions Optional Type: bool Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib' ~~ cdk_dependencies ~~ Optional Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) Type: typing.List[str] Which AWS CDKv1 modules this project requires. ~~ cdk_dependencies_as_deps ~~ Optional Deprecated: Not supported in CDK v2. Type: bool Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects ~~ cdk_test_dependencies ~~ Optional Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead Type: typing.List[str] AWS CDK modules required for testing. cdk_version_pinning Optional Type: bool Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes. constructs_version Optional Type: str Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on. main_class Required Type: str Default: \"org.acme.MyApp\" The name of the Java class with the static main() method. This method should call app.synth() on the CDK app. Methods Name Description add_exclude_from_cleanup Exclude the matching files from pre-synth cleanup. add_git_ignore Adds a .gitignore pattern. add_package_ignore Exclude these files from the bundled package. add_task Adds a new task to this project. add_tip Prints a \"tip\" message during synthesis. annotate_generated Marks the provided file(s) as being generated. post_synthesize Called after all components are synthesized. pre_synthesize Called before all components are synthesized. remove_task Removes a task from a project. run_task_command Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . try_find_file Finds a file at the specified relative path within this project and all its subprojects. try_find_json_file Finds a json file by name. try_find_object_file Finds an object file (like JsonFile, YamlFile, etc.) by name. try_remove_file Finds a file at the specified relative path within this project and removes it. add_dependency Adds a runtime dependency. add_plugin Adds a build plugin to the pom. add_test_dependency Adds a test dependency. add_cdk_dependency Adds an AWS CDK module dependencies. add_exclude_from_cleanup def add_exclude_from_cleanup ( globs : str ) -> None Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: str The glob patterns to match. add_git_ignore def add_git_ignore ( pattern : str ) -> None Adds a .gitignore pattern. pattern Required Type: str The glob pattern to ignore. add_package_ignore def add_package_ignore ( _pattern : str ) -> None Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . _pattern Required Type: str The glob pattern to exclude. add_task def add_task ( name : str , condition : str = None , cwd : str = None , description : str = None , env : typing . Mapping [ str ] = None , required_env : typing . List [ str ] = None , exec : str = None , receive_args : bool = None , steps : typing . List [ TaskStep ] = None ) -> Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: str The task name to add. condition Optional Type: str A shell command which determines if the this task should be executed. If the program exits with a zero exit code, steps will be executed. A non-zero code means that task will be skipped. cwd Optional Type: str Default: process.cwd() The working directory for all steps in this task (unless overridden by the step). description Optional Type: str Default: the task name The description of this build command. env Optional Type: typing.Mapping[str] Default: {} Defines environment variables for the execution of this task. Values in this map will be evaluated in a shell, so you can do stuff like $(echo \"foo\") . required_env Optional Type: typing.List[str] A set of environment variables that must be defined in order to execute this task. Task execution will fail if one of these is not defined. exec Optional Type: str Default: add steps using task.exec(command) or task.spawn(subtask) Shell command to execute as the first command of the task. receive_args Optional Type: bool Default: false Should the provided exec shell command receive args passed to the task. {@link TaskStepOptions.receiveArgs} steps Optional Type: typing.List[projen.TaskStep] List of task steps to run. ~~ add_tip ~~ def add_tip ( message : str ) -> None Prints a \"tip\" message during synthesis. message Required Type: str The message. annotate_generated def annotate_generated ( glob : str ) -> None Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: str the glob pattern to match (could be a file path). post_synthesize def post_synthesize () -> None Called after all components are synthesized. Order is not guaranteed. pre_synthesize def pre_synthesize () -> None Called before all components are synthesized. remove_task def remove_task ( name : str ) -> Task Removes a task from a project. name Required Type: str The name of the task to remove. run_task_command def run_task_command ( task : Task ) -> str Returns the shell command to execute in order to run a task. By default, this is npx projen@<version> <task> task Required Type: projen.Task The task for which the command is required. synth def synth () -> None Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" try_find_file def try_find_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and all its subprojects. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. ~~ try_find_json_file ~~ def try_find_json_file ( file_path : str ) -> JsonFile Finds a json file by name. file_path Required Type: str The file path. try_find_object_file def try_find_object_file ( file_path : str ) -> ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. file_path Required Type: str The file path. try_remove_file def try_remove_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and removes it. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. add_dependency def add_dependency ( spec : str ) -> None Adds a runtime dependency. spec Required Type: str Format <groupId>/<artifactId>@<semver> . add_plugin def add_plugin ( spec : str , configuration : typing . Mapping [ typing . Any ] = None , dependencies : typing . List [ str ] = None , executions : typing . List [ PluginExecution ] = None ) -> Dependency Adds a build plugin to the pom. The plug in is also added as a BUILD dep to the project. spec Required Type: str dependency spec ( group/artifact@version ). configuration Optional Type: typing.Mapping[typing.Any] Default: {} Plugin key/value configuration. dependencies Optional Type: typing.List[str] Default: [] You could configure the dependencies for the plugin. Dependencies are in <groupId>/<artifactId>@<semver> format. executions Optional Type: typing.List[projen.java.PluginExecution] Default: [] Plugin executions. add_test_dependency def add_test_dependency ( spec : str ) -> None Adds a test dependency. spec Required Type: str Format <groupId>/<artifactId>@<semver> . ~~ add_cdk_dependency ~~ def add_cdk_dependency ( modules : str ) -> None Adds an AWS CDK module dependencies. modules Required Type: str The list of modules to depend on (e.g. \"software.amazon.awscdk/aws-lambda\", \"software.amazon.awscdk/aws-iam\", etc). Properties Name Type Description build_task projen.Task No description. commit_generated bool Whether to commit the managed files by default. compile_task projen.Task No description. components typing.List[projen.Component] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected bool Whether or not the project is being ejected. files typing.List[projen.FileBase] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name str Project name. outdir str Absolute output directory of this project. package_task projen.Task No description. post_compile_task projen.Task No description. pre_compile_task projen.Task No description. project_build projen.ProjectBuild Manages the build process of the project. projen_command str The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. test_task projen.Task No description. default_task projen.Task This is the \"default\" task, the one that executes \"projen\". init_project projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. project_type projen.ProjectType No description. auto_approve projen.github.AutoApprove Auto approve set up for this project. dev_container projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. compile projen.java.MavenCompile Compile component. distdir str Maven artifact output directory. packaging projen.java.MavenPackaging Packaging component. pom projen.java.Pom API for managing pom.xml . junit projen.java.Junit JUnit component. projenrc projen.java.Projenrc Projenrc component. cdk_config projen.awscdk.CdkConfig The cdk.json file. cdk_deps projen.awscdk.AwsCdkDeps CDK dependency management helper class. cdk_tasks projen.awscdk.CdkTasks CDK tasks. main_class str The full name of the main class of the java app (package.Class). main_class_name str The name of the Java class with the static main() method. main_package str The name of the Java package that includes the main class. build_task Required build_task : Task Type: projen.Task commit_generated Required commit_generated : bool Type: bool Whether to commit the managed files by default. compile_task Required compile_task : Task Type: projen.Task components Required components : typing . List [ Component ] Type: typing.List[projen.Component] Returns all the components within this project. deps Required deps : Dependencies Type: projen.Dependencies Project dependencies. ejected Required ejected : bool Type: bool Whether or not the project is being ejected. files Required files : typing . List [ FileBase ] Type: typing.List[projen.FileBase] All files in this project. gitattributes Required gitattributes : GitAttributesFile Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required gitignore : IgnoreFile Type: projen.IgnoreFile .gitignore. logger Required logger : Logger Type: projen.Logger Logging utilities. name Required name : str Type: str Project name. outdir Required outdir : str Type: str Absolute output directory of this project. package_task Required package_task : Task Type: projen.Task post_compile_task Required post_compile_task : Task Type: projen.Task pre_compile_task Required pre_compile_task : Task Type: projen.Task project_build Required project_build : ProjectBuild Type: projen.ProjectBuild Manages the build process of the project. projen_command Required projen_command : str Type: str The command to use in order to run the projen CLI. root Required root : Project Type: projen.Project The root project. tasks Required tasks : Tasks Type: projen.Tasks Project tasks. test_task Required test_task : Task Type: projen.Task default_task Optional default_task : Task Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. init_project Optional init_project : InitProject Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional parent : Project Type: projen.Project A parent project. If undefined, this is the root project. project_type Required project_type : ProjectType Type: projen.ProjectType auto_approve Optional auto_approve : AutoApprove Type: projen.github.AutoApprove Auto approve set up for this project. dev_container Optional dev_container : DevContainer Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional github : GitHub Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional gitpod : Gitpod Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional vscode : VsCode Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. compile Required compile : MavenCompile Type: projen.java.MavenCompile Compile component. distdir Required distdir : str Type: str Maven artifact output directory. packaging Required packaging : MavenPackaging Type: projen.java.MavenPackaging Packaging component. pom Required pom : Pom Type: projen.java.Pom API for managing pom.xml . junit Optional junit : Junit Type: projen.java.Junit JUnit component. projenrc Optional projenrc : Projenrc Type: projen.java.Projenrc Projenrc component. cdk_config Required cdk_config : CdkConfig Type: projen.awscdk.CdkConfig The cdk.json file. cdk_deps Required cdk_deps : AwsCdkDeps Type: projen.awscdk.AwsCdkDeps CDK dependency management helper class. cdk_tasks Required cdk_tasks : CdkTasks Type: projen.awscdk.CdkTasks CDK tasks. main_class Required main_class : str Type: str The full name of the main class of the java app (package.Class). main_class_name Required main_class_name : str Type: str The name of the Java class with the static main() method. main_package Required main_package : str Type: str The name of the Java package that includes the main class. Constants Name Type Description DEFAULT_TASK str The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required DEFAULT_TASK : str Type: str The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. PDKPipelinePyProject Synthesizes a Python Project with a CI/CD pipeline. Initializers from aws_prototyping_sdk import pipeline pipeline . PDKPipelinePyProject ( name : str , commit_generated : bool = None , git_options : GitOptions = None , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , renovatebot : bool = None , renovatebot_options : RenovatebotOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge : bool = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_credentials : GithubCredentials = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , author_email : str , author_name : str , version : str , classifiers : typing . List [ str ] = None , description : str = None , homepage : str = None , license : str = None , package_name : str = None , poetry_options : PoetryPyprojectOptionsWithoutDeps = None , setup_config : typing . Mapping [ typing . Any ] = None , module_name : str , deps : typing . List [ str ] = None , dev_deps : typing . List [ str ] = None , pip : bool = None , poetry : bool = None , projenrc_js : bool = None , projenrc_js_options : ProjenrcOptions = None , projenrc_python : bool = None , projenrc_python_options : ProjenrcOptions = None , pytest : bool = None , pytest_options : PytestOptions = None , sample : bool = None , setuptools : bool = None , venv : bool = None , venv_options : VenvOptions = None , build_command : str = None , cdkout : str = None , context : typing . Mapping [ typing . Any ] = None , feature_flags : bool = None , require_approval : ApprovalLevel = None , watch_excludes : typing . List [ str ] = None , watch_includes : typing . List [ str ] = None , cdk_version : str , cdk_assert : bool = None , cdk_assertions : bool = None , cdk_dependencies : typing . List [ str ] = None , cdk_dependencies_as_deps : bool = None , cdk_test_dependencies : typing . List [ str ] = None , cdk_version_pinning : bool = None , constructs_version : str = None , app_entrypoint : str = None , testdir : str = None ) Name Type Description name str This is the name of your project. commit_generated bool Whether to commit the managed files by default. git_options projen.GitOptions Configuration options for git. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. renovatebot bool Use renovatebot to handle dependency upgrades. renovatebot_options projen.RenovatebotOptions Options for renovatebot. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge bool Enable automatic merging on GitHub. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_credentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. author_email str Author's e-mail. author_name str Author's name. version str Version of the package. classifiers typing.List[str] A list of PyPI trove classifiers that describe the project. description str A short description of the package. homepage str A URL to the website of the project. license str License of this package as an SPDX identifier. package_name str Package name. poetry_options projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setup_config typing.Mapping[typing.Any] Additional fields to pass in the setup() function if using setuptools. module_name str Name of the python package as used in imports and filenames. deps typing.List[str] List of runtime dependencies for this project. dev_deps typing.List[str] List of dev dependencies for this project. pip bool Use pip with a requirements.txt file to track project dependencies. poetry bool Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrc_js bool Use projenrc in javascript. projenrc_js_options projen.javascript.ProjenrcOptions Options related to projenrc in JavaScript. projenrc_python bool Use projenrc in Python. projenrc_python_options projen.python.ProjenrcOptions Options related to projenrc in python. pytest bool Include pytest tests. pytest_options projen.python.PytestOptions pytest options. sample bool Include sample code and test if the relevant directories don't exist. setuptools bool Use setuptools with a setup.py script for packaging and publishing. venv bool Use venv to manage a virtual environment for installing dependencies inside. venv_options projen.python.VenvOptions Venv options. build_command str A command to execute before synthesis. cdkout str cdk.out directory. context typing.Mapping[typing.Any] Additional context to include in cdk.json . feature_flags bool Include all feature flags in cdk.json. require_approval projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watch_excludes typing.List[str] Glob patterns to exclude from cdk watch . watch_includes typing.List[str] Glob patterns to include in cdk watch . cdk_version str Minimum version of the AWS CDK to depend on. cdk_assert bool Warning: NodeJS only. cdk_assertions bool Install the assertions library? cdk_dependencies typing.List[str] Which AWS CDKv1 modules this project requires. cdk_dependencies_as_deps bool If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdk_test_dependencies typing.List[str] AWS CDK modules required for testing. cdk_version_pinning bool Use pinned version instead of caret version for CDK. constructs_version str Minimum version of the constructs library to depend on. app_entrypoint str The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). testdir str Python sources directory. name Required Type: str Default: $BASEDIR This is the name of your project. commit_generated Optional Type: bool Default: true Whether to commit the managed files by default. git_options Optional Type: projen.GitOptions Configuration options for git. logging Optional Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional Type: bool Default: false Use renovatebot to handle dependency upgrades. renovatebot_options Optional Type: projen.RenovatebotOptions Default: default options Options for renovatebot. auto_approve_options Optional Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge Optional Type: bool Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. auto_merge_options Optional Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_credentials Optional Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projen_token_secret ~~ Optional Deprecated: use projenCredentials Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional Type: bool Default: false Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. author_email Required Type: str Default: $GIT_USER_EMAIL Author's e-mail. author_name Required Type: str Default: $GIT_USER_NAME Author's name. version Required Type: str Default: \"0.1.0\" Version of the package. classifiers Optional Type: typing.List[str] A list of PyPI trove classifiers that describe the project. https://pypi.org/classifiers/ description Optional Type: str A short description of the package. homepage Optional Type: str A URL to the website of the project. license Optional Type: str License of this package as an SPDX identifier. package_name Optional Type: str Package name. poetry_options Optional Type: projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setup_config Optional Type: typing.Mapping[typing.Any] Additional fields to pass in the setup() function if using setuptools. module_name Required Type: str Default: $PYTHON_MODULE_NAME Name of the python package as used in imports and filenames. Must only consist of alphanumeric characters and underscores. deps Optional Type: typing.List[str] Default: [] List of runtime dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDependency() . dev_deps Optional Type: typing.List[str] Default: [] List of dev dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDevDependency() . pip Optional Type: bool Default: true, unless poetry is true, then false Use pip with a requirements.txt file to track project dependencies. poetry Optional Type: bool Default: false Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. This feature is incompatible with pip, setuptools, or venv. If you set this option to true , then pip, setuptools, and venv must be set to false . projenrc_js Optional Type: bool Default: false Use projenrc in javascript. This will install projen as a JavaScript dependency and add a synth task which will run .projenrc.js . projenrc_js_options Optional Type: projen.javascript.ProjenrcOptions Default: default options Options related to projenrc in JavaScript. projenrc_python Optional Type: bool Default: true Use projenrc in Python. This will install projen as a Python dependency and add a synth task which will run .projenrc.py . projenrc_python_options Optional Type: projen.python.ProjenrcOptions Default: default options Options related to projenrc in python. pytest Optional Type: bool Default: true Include pytest tests. pytest_options Optional Type: projen.python.PytestOptions Default: defaults pytest options. sample Optional Type: bool Default: true Include sample code and test if the relevant directories don't exist. setuptools Optional Type: bool Default: true, unless poetry is true, then false Use setuptools with a setup.py script for packaging and publishing. venv Optional Type: bool Default: true, unless poetry is true, then false Use venv to manage a virtual environment for installing dependencies inside. venv_options Optional Type: projen.python.VenvOptions Default: defaults Venv options. build_command Optional Type: str Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment. cdkout Optional Type: str Default: \"cdk.out\" cdk.out directory. context Optional Type: typing.Mapping[typing.Any] Default: no additional context Additional context to include in cdk.json . feature_flags Optional Type: bool Default: true Include all feature flags in cdk.json. require_approval Optional Type: projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watch_excludes Optional Type: typing.List[str] Default: [] Glob patterns to exclude from cdk watch . watch_includes Optional Type: typing.List[str] Default: [] Glob patterns to include in cdk watch . cdk_version Required Type: str Default: \"2.1.0\" Minimum version of the AWS CDK to depend on. ~~ cdk_assert ~~ Optional Deprecated: The Type: bool Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library? cdk_assertions Optional Type: bool Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib' ~~ cdk_dependencies ~~ Optional Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) Type: typing.List[str] Which AWS CDKv1 modules this project requires. ~~ cdk_dependencies_as_deps ~~ Optional Deprecated: Not supported in CDK v2. Type: bool Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects ~~ cdk_test_dependencies ~~ Optional Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead Type: typing.List[str] AWS CDK modules required for testing. cdk_version_pinning Optional Type: bool Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes. constructs_version Optional Type: str Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on. app_entrypoint Optional Type: str Default: \"app.py\" The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). testdir Optional Type: str Default: \"tests\" Python sources directory. Methods Name Description add_exclude_from_cleanup Exclude the matching files from pre-synth cleanup. add_git_ignore Adds a .gitignore pattern. add_package_ignore Exclude these files from the bundled package. add_task Adds a new task to this project. add_tip Prints a \"tip\" message during synthesis. annotate_generated Marks the provided file(s) as being generated. post_synthesize Called after all components are synthesized. pre_synthesize Called before all components are synthesized. remove_task Removes a task from a project. run_task_command Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . try_find_file Finds a file at the specified relative path within this project and all its subprojects. try_find_json_file Finds a json file by name. try_find_object_file Finds an object file (like JsonFile, YamlFile, etc.) by name. try_remove_file Finds a file at the specified relative path within this project and removes it. add_dependency Adds a runtime dependency. add_dev_dependency Adds a dev dependency. add_exclude_from_cleanup def add_exclude_from_cleanup ( globs : str ) -> None Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: str The glob patterns to match. add_git_ignore def add_git_ignore ( pattern : str ) -> None Adds a .gitignore pattern. pattern Required Type: str The glob pattern to ignore. add_package_ignore def add_package_ignore ( _pattern : str ) -> None Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . _pattern Required Type: str The glob pattern to exclude. add_task def add_task ( name : str , condition : str = None , cwd : str = None , description : str = None , env : typing . Mapping [ str ] = None , required_env : typing . List [ str ] = None , exec : str = None , receive_args : bool = None , steps : typing . List [ TaskStep ] = None ) -> Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: str The task name to add. condition Optional Type: str A shell command which determines if the this task should be executed. If the program exits with a zero exit code, steps will be executed. A non-zero code means that task will be skipped. cwd Optional Type: str Default: process.cwd() The working directory for all steps in this task (unless overridden by the step). description Optional Type: str Default: the task name The description of this build command. env Optional Type: typing.Mapping[str] Default: {} Defines environment variables for the execution of this task. Values in this map will be evaluated in a shell, so you can do stuff like $(echo \"foo\") . required_env Optional Type: typing.List[str] A set of environment variables that must be defined in order to execute this task. Task execution will fail if one of these is not defined. exec Optional Type: str Default: add steps using task.exec(command) or task.spawn(subtask) Shell command to execute as the first command of the task. receive_args Optional Type: bool Default: false Should the provided exec shell command receive args passed to the task. {@link TaskStepOptions.receiveArgs} steps Optional Type: typing.List[projen.TaskStep] List of task steps to run. ~~ add_tip ~~ def add_tip ( message : str ) -> None Prints a \"tip\" message during synthesis. message Required Type: str The message. annotate_generated def annotate_generated ( glob : str ) -> None Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: str the glob pattern to match (could be a file path). post_synthesize def post_synthesize () -> None Called after all components are synthesized. Order is not guaranteed. pre_synthesize def pre_synthesize () -> None Called before all components are synthesized. remove_task def remove_task ( name : str ) -> Task Removes a task from a project. name Required Type: str The name of the task to remove. run_task_command def run_task_command ( task : Task ) -> str Returns the shell command to execute in order to run a task. By default, this is npx projen@<version> <task> task Required Type: projen.Task The task for which the command is required. synth def synth () -> None Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" try_find_file def try_find_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and all its subprojects. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. ~~ try_find_json_file ~~ def try_find_json_file ( file_path : str ) -> JsonFile Finds a json file by name. file_path Required Type: str The file path. try_find_object_file def try_find_object_file ( file_path : str ) -> ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. file_path Required Type: str The file path. try_remove_file def try_remove_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and removes it. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. add_dependency def add_dependency ( spec : str ) -> None Adds a runtime dependency. spec Required Type: str Format <module>@<semver> . add_dev_dependency def add_dev_dependency ( spec : str ) -> None Adds a dev dependency. spec Required Type: str Format <module>@<semver> . Properties Name Type Description build_task projen.Task No description. commit_generated bool Whether to commit the managed files by default. compile_task projen.Task No description. components typing.List[projen.Component] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected bool Whether or not the project is being ejected. files typing.List[projen.FileBase] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name str Project name. outdir str Absolute output directory of this project. package_task projen.Task No description. post_compile_task projen.Task No description. pre_compile_task projen.Task No description. project_build projen.ProjectBuild Manages the build process of the project. projen_command str The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. test_task projen.Task No description. default_task projen.Task This is the \"default\" task, the one that executes \"projen\". init_project projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. project_type projen.ProjectType No description. auto_approve projen.github.AutoApprove Auto approve set up for this project. dev_container projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. deps_manager projen.python.IPythonDeps API for managing dependencies. env_manager projen.python.IPythonEnv API for mangaging the Python runtime environment. module_name str Python module name (the project name, with any hyphens or periods replaced with underscores). version str Version of the package for distribution (should follow semver). packaging_manager projen.python.IPythonPackaging API for managing packaging the project as a library. pytest projen.python.Pytest Pytest component. app_entrypoint str The CDK app entrypoint. cdk_config projen.awscdk.CdkConfig cdk.json configuration. cdk_deps projen.awscdk.AwsCdkDeps No description. cdk_tasks projen.awscdk.CdkTasks Common CDK tasks. cdk_version str The CDK version this app is using. testdir str The directory in which the python tests reside. build_task Required build_task : Task Type: projen.Task commit_generated Required commit_generated : bool Type: bool Whether to commit the managed files by default. compile_task Required compile_task : Task Type: projen.Task components Required components : typing . List [ Component ] Type: typing.List[projen.Component] Returns all the components within this project. deps Required deps : Dependencies Type: projen.Dependencies Project dependencies. ejected Required ejected : bool Type: bool Whether or not the project is being ejected. files Required files : typing . List [ FileBase ] Type: typing.List[projen.FileBase] All files in this project. gitattributes Required gitattributes : GitAttributesFile Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required gitignore : IgnoreFile Type: projen.IgnoreFile .gitignore. logger Required logger : Logger Type: projen.Logger Logging utilities. name Required name : str Type: str Project name. outdir Required outdir : str Type: str Absolute output directory of this project. package_task Required package_task : Task Type: projen.Task post_compile_task Required post_compile_task : Task Type: projen.Task pre_compile_task Required pre_compile_task : Task Type: projen.Task project_build Required project_build : ProjectBuild Type: projen.ProjectBuild Manages the build process of the project. projen_command Required projen_command : str Type: str The command to use in order to run the projen CLI. root Required root : Project Type: projen.Project The root project. tasks Required tasks : Tasks Type: projen.Tasks Project tasks. test_task Required test_task : Task Type: projen.Task default_task Optional default_task : Task Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. init_project Optional init_project : InitProject Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional parent : Project Type: projen.Project A parent project. If undefined, this is the root project. project_type Required project_type : ProjectType Type: projen.ProjectType auto_approve Optional auto_approve : AutoApprove Type: projen.github.AutoApprove Auto approve set up for this project. dev_container Optional dev_container : DevContainer Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional github : GitHub Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional gitpod : Gitpod Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional vscode : VsCode Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. deps_manager Required deps_manager : IPythonDeps Type: projen.python.IPythonDeps API for managing dependencies. env_manager Required env_manager : IPythonEnv Type: projen.python.IPythonEnv API for mangaging the Python runtime environment. module_name Required module_name : str Type: str Python module name (the project name, with any hyphens or periods replaced with underscores). version Required version : str Type: str Version of the package for distribution (should follow semver). packaging_manager Optional packaging_manager : IPythonPackaging Type: projen.python.IPythonPackaging API for managing packaging the project as a library. Only applies when the projectType is LIB. pytest Optional pytest : Pytest Type: projen.python.Pytest Pytest component. app_entrypoint Required app_entrypoint : str Type: str The CDK app entrypoint. cdk_config Required cdk_config : CdkConfig Type: projen.awscdk.CdkConfig cdk.json configuration. cdk_deps Required cdk_deps : AwsCdkDeps Type: projen.awscdk.AwsCdkDeps cdk_tasks Required cdk_tasks : CdkTasks Type: projen.awscdk.CdkTasks Common CDK tasks. cdk_version Required cdk_version : str Type: str The CDK version this app is using. testdir Required testdir : str Type: str The directory in which the python tests reside. Constants Name Type Description DEFAULT_TASK str The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required DEFAULT_TASK : str Type: str The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. PDKPipelineTsProject Synthesizes a Typescript Project with a CI/CD pipeline. Initializers from aws_prototyping_sdk import pipeline pipeline . PDKPipelineTsProject ( name : str , commit_generated : bool = None , git_options : GitOptions = None , logging : LoggerOptions = None , outdir : str = None , parent : Project = None , projen_command : str = None , projenrc_json : bool = None , projenrc_json_options : ProjenrcOptions = None , renovatebot : bool = None , renovatebot_options : RenovatebotOptions = None , auto_approve_options : AutoApproveOptions = None , auto_merge : bool = None , auto_merge_options : AutoMergeOptions = None , clobber : bool = None , dev_container : bool = None , github : bool = None , github_options : GitHubOptions = None , gitpod : bool = None , mergify : bool = None , mergify_options : MergifyOptions = None , project_type : ProjectType = None , projen_credentials : GithubCredentials = None , projen_token_secret : str = None , readme : SampleReadmeProps = None , stale : bool = None , stale_options : StaleOptions = None , vscode : bool = None , allow_library_dependencies : bool = None , author_email : str = None , author_name : str = None , author_organization : bool = None , author_url : str = None , auto_detect_bin : bool = None , bin : typing . Mapping [ str ] = None , bugs_email : str = None , bugs_url : str = None , bundled_deps : typing . List [ str ] = None , code_artifact_options : CodeArtifactOptions = None , deps : typing . List [ str ] = None , description : str = None , dev_deps : typing . List [ str ] = None , entrypoint : str = None , homepage : str = None , keywords : typing . List [ str ] = None , license : str = None , licensed : bool = None , max_node_version : str = None , min_node_version : str = None , npm_access : NpmAccess = None , npm_registry : str = None , npm_registry_url : str = None , npm_token_secret : str = None , package_manager : NodePackageManager = None , package_name : str = None , peer_dependency_options : PeerDependencyOptions = None , peer_deps : typing . List [ str ] = None , pnpm_version : str = None , repository : str = None , repository_directory : str = None , scoped_packages_options : typing . List [ ScopedPackagesOptions ] = None , scripts : typing . Mapping [ str ] = None , stability : str = None , jsii_release_version : str = None , major_version : typing . Union [ int , float ] = None , min_major_version : typing . Union [ int , float ] = None , npm_dist_tag : str = None , post_build_steps : typing . List [ JobStep ] = None , prerelease : str = None , publish_dry_run : bool = None , publish_tasks : bool = None , release_branches : typing . Mapping [ BranchOptions ] = None , release_every_commit : bool = None , release_failure_issue : bool = None , release_failure_issue_label : str = None , release_schedule : str = None , release_tag_prefix : str = None , release_trigger : ReleaseTrigger = None , release_workflow_name : str = None , release_workflow_setup_steps : typing . List [ JobStep ] = None , versionrc_options : typing . Mapping [ typing . Any ] = None , workflow_container_image : str = None , workflow_runs_on : typing . List [ str ] = None , default_release_branch : str , artifacts_directory : str = None , auto_approve_upgrades : bool = None , build_workflow : bool = None , build_workflow_triggers : Triggers = None , bundler_options : BundlerOptions = None , code_cov : bool = None , code_cov_token_secret : str = None , copyright_owner : str = None , copyright_period : str = None , dependabot : bool = None , dependabot_options : DependabotOptions = None , deps_upgrade : bool = None , deps_upgrade_options : UpgradeDependenciesOptions = None , gitignore : typing . List [ str ] = None , jest : bool = None , jest_options : JestOptions = None , mutable_build : bool = None , npmignore : typing . List [ str ] = None , npmignore_enabled : bool = None , package : bool = None , prettier : bool = None , prettier_options : PrettierOptions = None , projen_dev_dependency : bool = None , projenrc_js : bool = None , projenrc_js_options : ProjenrcOptions = None , projen_version : str = None , pull_request_template : bool = None , pull_request_template_contents : typing . List [ str ] = None , release : bool = None , release_to_npm : bool = None , release_workflow : bool = None , workflow_bootstrap_steps : typing . List [ JobStep ] = None , workflow_git_identity : GitIdentity = None , workflow_node_version : str = None , disable_tsconfig : bool = None , docgen : bool = None , docs_directory : str = None , entrypoint_types : str = None , eslint : bool = None , eslint_options : EslintOptions = None , libdir : str = None , projenrc_ts : bool = None , projenrc_ts_options : ProjenrcOptions = None , sample_code : bool = None , srcdir : str = None , testdir : str = None , tsconfig : TypescriptConfigOptions = None , tsconfig_dev : TypescriptConfigOptions = None , tsconfig_dev_file : str = None , typescript_version : str = None , build_command : str = None , cdkout : str = None , context : typing . Mapping [ typing . Any ] = None , feature_flags : bool = None , require_approval : ApprovalLevel = None , watch_excludes : typing . List [ str ] = None , watch_includes : typing . List [ str ] = None , cdk_version : str , cdk_assert : bool = None , cdk_assertions : bool = None , cdk_dependencies : typing . List [ str ] = None , cdk_dependencies_as_deps : bool = None , cdk_test_dependencies : typing . List [ str ] = None , cdk_version_pinning : bool = None , constructs_version : str = None , app_entrypoint : str = None , edge_lambda_auto_discover : bool = None , integration_test_auto_discover : bool = None , lambda_auto_discover : bool = None , lambda_extension_auto_discover : bool = None , lambda_options : LambdaFunctionCommonOptions = None ) Name Type Description name str This is the name of your project. commit_generated bool Whether to commit the managed files by default. git_options projen.GitOptions Configuration options for git. logging projen.LoggerOptions Configure logging options such as verbosity. outdir str The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projen_command str The shell command to use in order to run the projen CLI. projenrc_json bool Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options projen.ProjenrcOptions Options for .projenrc.json. renovatebot bool Use renovatebot to handle dependency upgrades. renovatebot_options projen.RenovatebotOptions Options for renovatebot. auto_approve_options projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. auto_merge bool Enable automatic merging on GitHub. auto_merge_options projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber bool Add a clobber task which resets the repo to origin. dev_container bool Add a VSCode development environment (used for GitHub Codespaces). github bool Enable GitHub integration. github_options projen.github.GitHubOptions Options for GitHub integration. gitpod bool Add a Gitpod development environment. mergify bool Whether mergify should be enabled on this repository or not. mergify_options projen.github.MergifyOptions Options for mergify. project_type projen.ProjectType Which type of project this is (library/app). projen_credentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projen_token_secret str The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale bool Auto-close of stale issues and pull request. stale_options projen.github.StaleOptions Auto-close stale issues and pull requests. vscode bool Enable VSCode integration. allow_library_dependencies bool Allow the project to include peerDependencies and bundledDependencies . author_email str Author's e-mail. author_name str Author's name. author_organization bool Is the author an organization. author_url str Author's URL / Website. auto_detect_bin bool Automatically add all executables under the bin directory to your package.json file under the bin section. bin typing.Mapping[str] Binary programs vended with your module. bugs_email str The email address to which issues should be reported. bugs_url str The url to your project's issue tracker. bundled_deps typing.List[str] List of dependencies to bundle into this module. code_artifact_options projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps typing.List[str] Runtime dependencies of this module. description str The description is just a string that helps people understand the purpose of the package. dev_deps typing.List[str] Build dependencies for this module. entrypoint str Module entrypoint ( main in package.json ). homepage str Package's Homepage / Website. keywords typing.List[str] Keywords to include in package.json . license str License's SPDX identifier. licensed bool Indicates if a license should be added. max_node_version str Minimum node.js version to require via engines (inclusive). min_node_version str Minimum Node.js version to require via package.json engines (inclusive). npm_access projen.javascript.NpmAccess Access level of the npm package. npm_registry str The host name of the npm registry to publish to. npm_registry_url str The base URL of the npm package registry. npm_token_secret str GitHub secret which contains the NPM token to use when publishing packages. package_manager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. package_name str The \"name\" in package.json. peer_dependency_options projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps typing.List[str] Peer dependencies for this module. pnpm_version str The version of PNPM to use if using PNPM as a package manager. repository str The repository is the location where the actual code for your package lives. repository_directory str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scoped_packages_options typing.List[projen.javascript.ScopedPackagesOptions] Options for privately hosted scoped packages. scripts typing.Mapping[str] npm scripts to include. stability str Package's Stability. jsii_release_version str Version requirement of publib which is used to publish modules to npm. major_version typing.Union[int, float] Major version to release from the default branch. min_major_version typing.Union[int, float] Minimal Major version to release. npm_dist_tag str The npmDistTag to use when publishing from the default branch. post_build_steps typing.List[projen.github.workflows.JobStep] Steps to execute after build as part of the release workflow. prerelease str Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run bool Instead of actually publishing to package managers, just print the publishing command. publish_tasks bool Define publishing tasks that can be executed manually as well as workflows. release_branches typing.Mapping[projen.release.BranchOptions] Defines additional release branches. release_every_commit bool Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue bool Create a github issue on every failed publishing task. release_failure_issue_label str The label to apply to issues indicating publish failures. release_schedule str CRON schedule to trigger new releases. release_tag_prefix str Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. release_trigger projen.release.ReleaseTrigger The release trigger to use. release_workflow_name str The name of the default release workflow. release_workflow_setup_steps typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options typing.Mapping[typing.Any] Custom configuration used when creating changelog with standard-version package. workflow_container_image str Container image to use for GitHub workflows. workflow_runs_on typing.List[str] Github Runner selection labels. default_release_branch str The name of the main release branch. artifacts_directory str A directory which will contain build artifacts. auto_approve_upgrades bool Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). build_workflow bool Define a GitHub workflow for building PRs. build_workflow_triggers projen.github.workflows.Triggers Build workflow triggers. bundler_options projen.javascript.BundlerOptions Options for Bundler . code_cov bool Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret str Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner str License copyright owner. copyright_period str The copyright years to put in the LICENSE file. dependabot bool Use dependabot to handle dependency upgrades. dependabot_options projen.github.DependabotOptions Options for dependabot. deps_upgrade bool Use github workflows to handle dependency upgrades. deps_upgrade_options projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore typing.List[str] Additional entries to .gitignore. jest bool Setup jest unit tests. jest_options projen.javascript.JestOptions Jest options. mutable_build bool Automatically update files modified during builds to pull-request branches. npmignore typing.List[str] Additional entries to .npmignore. npmignore_enabled bool Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package bool Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier bool Setup prettier. prettier_options projen.javascript.PrettierOptions Prettier options. projen_dev_dependency bool Indicates of \"projen\" should be installed as a devDependency. projenrc_js bool Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options projen.javascript.ProjenrcOptions Options for .projenrc.js. projen_version str Version of projen to install. pull_request_template bool Include a GitHub pull request template. pull_request_template_contents typing.List[str] The contents of the pull request template. release bool Add release management to this project. release_to_npm bool Automatically release to npm when new versions are introduced. release_workflow bool DEPRECATED: renamed to release . workflow_bootstrap_steps typing.List[projen.github.workflows.JobStep] Workflow steps to use in order to bootstrap this repo. workflow_git_identity projen.github.GitIdentity The git identity to use in workflows. workflow_node_version str The node version to use in GitHub workflows. disable_tsconfig bool Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen bool Docgen by Typedoc. docs_directory str Docs directory. entrypoint_types str The .d.ts file that includes the type declarations for this module. eslint bool Setup eslint. eslint_options projen.javascript.EslintOptions Eslint options. libdir str Typescript artifacts output directory. projenrc_ts bool Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code bool Generate one-time sample in src/ and test/ if there are no files there. srcdir str Typescript sources directory. testdir str Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfig_dev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file str The name of the development tsconfig.json file. typescript_version str TypeScript version to use. build_command str A command to execute before synthesis. cdkout str cdk.out directory. context typing.Mapping[typing.Any] Additional context to include in cdk.json . feature_flags bool Include all feature flags in cdk.json. require_approval projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watch_excludes typing.List[str] Glob patterns to exclude from cdk watch . watch_includes typing.List[str] Glob patterns to include in cdk watch . cdk_version str Minimum version of the AWS CDK to depend on. cdk_assert bool Warning: NodeJS only. cdk_assertions bool Install the assertions library? cdk_dependencies typing.List[str] Which AWS CDKv1 modules this project requires. cdk_dependencies_as_deps bool If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdk_test_dependencies typing.List[str] AWS CDK modules required for testing. cdk_version_pinning bool Use pinned version instead of caret version for CDK. constructs_version str Minimum version of the constructs library to depend on. app_entrypoint str The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). edge_lambda_auto_discover bool Automatically adds an cloudfront.experimental.EdgeFunction for each .edge-lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. integration_test_auto_discover bool Automatically discovers and creates integration tests for each .integ.ts file in under your test directory. lambda_auto_discover bool Automatically adds an awscdk.LambdaFunction for each .lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambda_extension_auto_discover bool Automatically adds an awscdk.LambdaExtension for each .lambda-extension.ts entrypoint in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambda_options projen.awscdk.LambdaFunctionCommonOptions Common options for all AWS Lambda functions. name Required Type: str Default: $BASEDIR This is the name of your project. commit_generated Optional Type: bool Default: true Whether to commit the managed files by default. git_options Optional Type: projen.GitOptions Configuration options for git. logging Optional Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional Type: str Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional Type: projen.Project The parent project, if this project is part of a bigger project. projen_command Optional Type: str Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrc_json Optional Type: bool Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrc_json_options Optional Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional Type: bool Default: false Use renovatebot to handle dependency upgrades. renovatebot_options Optional Type: projen.RenovatebotOptions Default: default options Options for renovatebot. auto_approve_options Optional Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. auto_merge Optional Type: bool Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. auto_merge_options Optional Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional Type: bool Default: true Add a clobber task which resets the repo to origin. dev_container Optional Type: bool Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional Type: bool Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. github_options Optional Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional Type: bool Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead Type: bool Default: true Whether mergify should be enabled on this repository or not. ~~ mergify_options ~~ Optional Deprecated: use githubOptions.mergifyOptions instead Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ project_type ~~ Optional Deprecated: no longer supported at the base project level Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projen_credentials Optional Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projen_token_secret ~~ Optional Deprecated: use projenCredentials Type: str Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional Type: bool Default: false Auto-close of stale issues and pull request. See staleOptions for options. stale_options Optional Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional Type: bool Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allow_library_dependencies Optional Type: bool Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. author_email Optional Type: str Author's e-mail. author_name Optional Type: str Author's name. author_organization Optional Type: bool Is the author an organization. author_url Optional Type: str Author's URL / Website. auto_detect_bin Optional Type: bool Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional Type: typing.Mapping[str] Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugs_email Optional Type: str The email address to which issues should be reported. bugs_url Optional Type: str The url to your project's issue tracker. bundled_deps Optional Type: typing.List[str] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. code_artifact_options Optional Type: projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional Type: typing.List[str] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'express' , 'lodash' , 'foo@^2' ] description Optional Type: str The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description dev_deps Optional Type: typing.List[str] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'typescript' , '@types/express' ] entrypoint Optional Type: str Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional Type: str Package's Homepage / Website. keywords Optional Type: typing.List[str] Keywords to include in package.json . license Optional Type: str Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional Type: bool Default: true Indicates if a license should be added. max_node_version Optional Type: str Default: no max Minimum node.js version to require via engines (inclusive). min_node_version Optional Type: str Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npm_access Optional Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npm_registry ~~ Optional Deprecated: use npmRegistryUrl instead Type: str The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npm_registry_url Optional Type: str Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npm_token_secret Optional Type: str Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. package_manager Optional Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. package_name Optional Type: str Default: defaults to project name The \"name\" in package.json. peer_dependency_options Optional Type: projen.javascript.PeerDependencyOptions Options for peerDeps . peer_deps Optional Type: typing.List[str] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. pnpm_version Optional Type: str Default: \"7\" The version of PNPM to use if using PNPM as a package manager. repository Optional Type: str The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repository_directory Optional Type: str If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scoped_packages_options Optional Type: typing.List[projen.javascript.ScopedPackagesOptions] Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional Type: typing.Mapping[str] Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional Type: str Package's Stability. jsii_release_version Optional Type: str Default: \"latest\" Version requirement of publib which is used to publish modules to npm. major_version Optional Type: typing.Union[int, float] Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. min_major_version Optional Type: typing.Union[int, float] Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npm_dist_tag Optional Type: str Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. post_build_steps Optional Type: typing.List[projen.github.workflows.JobStep] Default: [] Steps to execute after build as part of the release workflow. prerelease Optional Type: str Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publish_dry_run Optional Type: bool Default: false Instead of actually publishing to package managers, just print the publishing command. publish_tasks Optional Type: bool Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. release_branches Optional Type: typing.Mapping[projen.release.BranchOptions] Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ release_every_commit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead Type: bool Default: true Automatically release new versions every commit to one of branches in releaseBranches . release_failure_issue Optional Type: bool Default: false Create a github issue on every failed publishing task. release_failure_issue_label Optional Type: str Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ release_schedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead Type: str Default: no scheduled releases CRON schedule to trigger new releases. release_tag_prefix Optional Type: str Default: \"v\" Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. release_trigger Optional Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. release_workflow_name Optional Type: str Default: \"Release\" The name of the default release workflow. release_workflow_setup_steps Optional Type: typing.List[projen.github.workflows.JobStep] A set of workflow steps to execute in order to setup the workflow container. versionrc_options Optional Type: typing.Mapping[typing.Any] Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflow_container_image Optional Type: str Default: default image Container image to use for GitHub workflows. workflow_runs_on Optional Type: typing.List[str] Default: [\"ubuntu-latest\"] Github Runner selection labels. default_release_branch Required Type: str Default: \"main\" The name of the main release branch. artifacts_directory Optional Type: str Default: \"dist\" A directory which will contain build artifacts. auto_approve_upgrades Optional Type: bool Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. build_workflow Optional Type: bool Default: true if not a subproject Define a GitHub workflow for building PRs. build_workflow_triggers Optional Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundler_options Optional Type: projen.javascript.BundlerOptions Options for Bundler . code_cov Optional Type: bool Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . code_cov_token_secret Optional Type: str Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyright_owner Optional Type: str Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyright_period Optional Type: str Default: current year The copyright years to put in the LICENSE file. dependabot Optional Type: bool Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabot_options Optional Type: projen.github.DependabotOptions Default: default options Options for dependabot. deps_upgrade Optional Type: bool Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . deps_upgrade_options Optional Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional Type: typing.List[str] Additional entries to .gitignore. jest Optional Type: bool Default: true Setup jest unit tests. jest_options Optional Type: projen.javascript.JestOptions Default: default options Jest options. mutable_build Optional Type: bool Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore Type: typing.List[str] Additional entries to .npmignore. npmignore_enabled Optional Type: bool Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional Type: bool Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional Type: bool Default: false Setup prettier. prettier_options Optional Type: projen.javascript.PrettierOptions Default: default options Prettier options. projen_dev_dependency Optional Type: bool Default: true Indicates of \"projen\" should be installed as a devDependency. projenrc_js Optional Type: bool Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrc_js_options Optional Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projen_version Optional Type: str Default: Defaults to the latest version. Version of projen to install. pull_request_template Optional Type: bool Default: true Include a GitHub pull request template. pull_request_template_contents Optional Type: typing.List[str] Default: default content The contents of the pull request template. release Optional Type: bool Default: true (false for subprojects) Add release management to this project. release_to_npm Optional Type: bool Default: false Automatically release to npm when new versions are introduced. ~~ release_workflow ~~ Optional Deprecated: see release . Type: bool Default: true if not a subproject DEPRECATED: renamed to release . workflow_bootstrap_steps Optional Type: typing.List[projen.github.workflows.JobStep] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflow_git_identity Optional Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflow_node_version Optional Type: str Default: same as minNodeVersion The node version to use in GitHub workflows. disable_tsconfig Optional Type: bool Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional Type: bool Default: false Docgen by Typedoc. docs_directory Optional Type: str Default: \"docs\" Docs directory. entrypoint_types Optional Type: str Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional Type: bool Default: true Setup eslint. eslint_options Optional Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional Type: str Default: \"lib\" Typescript artifacts output directory. projenrc_ts Optional Type: bool Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrc_ts_options Optional Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts. sample_code Optional Type: bool Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional Type: str Default: \"src\" Typescript sources directory. testdir Optional Type: str Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfig_dev Optional Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfig_dev_file Optional Type: str Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescript_version Optional Type: str Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). build_command Optional Type: str Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment. cdkout Optional Type: str Default: \"cdk.out\" cdk.out directory. context Optional Type: typing.Mapping[typing.Any] Default: no additional context Additional context to include in cdk.json . feature_flags Optional Type: bool Default: true Include all feature flags in cdk.json. require_approval Optional Type: projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watch_excludes Optional Type: typing.List[str] Default: [] Glob patterns to exclude from cdk watch . watch_includes Optional Type: typing.List[str] Default: [] Glob patterns to include in cdk watch . cdk_version Required Type: str Default: \"2.1.0\" Minimum version of the AWS CDK to depend on. ~~ cdk_assert ~~ Optional Deprecated: The Type: bool Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library? cdk_assertions Optional Type: bool Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib' ~~ cdk_dependencies ~~ Optional Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) Type: typing.List[str] Which AWS CDKv1 modules this project requires. ~~ cdk_dependencies_as_deps ~~ Optional Deprecated: Not supported in CDK v2. Type: bool Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects ~~ cdk_test_dependencies ~~ Optional Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead Type: typing.List[str] AWS CDK modules required for testing. cdk_version_pinning Optional Type: bool Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes. constructs_version Optional Type: str Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on. app_entrypoint Optional Type: str Default: \"main.ts\" The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). edge_lambda_auto_discover Optional Type: bool Default: true Automatically adds an cloudfront.experimental.EdgeFunction for each .edge-lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. integration_test_auto_discover Optional Type: bool Default: true Automatically discovers and creates integration tests for each .integ.ts file in under your test directory. lambda_auto_discover Optional Type: bool Default: true Automatically adds an awscdk.LambdaFunction for each .lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambda_extension_auto_discover Optional Type: bool Default: true Automatically adds an awscdk.LambdaExtension for each .lambda-extension.ts entrypoint in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambda_options Optional Type: projen.awscdk.LambdaFunctionCommonOptions Default: default options Common options for all AWS Lambda functions. Methods Name Description add_exclude_from_cleanup Exclude the matching files from pre-synth cleanup. add_git_ignore Adds a .gitignore pattern. add_package_ignore Exclude these files from the bundled package. add_task Adds a new task to this project. add_tip Prints a \"tip\" message during synthesis. annotate_generated Marks the provided file(s) as being generated. post_synthesize Called after all components are synthesized. pre_synthesize Called before all components are synthesized. remove_task Removes a task from a project. run_task_command Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . try_find_file Finds a file at the specified relative path within this project and all its subprojects. try_find_json_file Finds a json file by name. try_find_object_file Finds an object file (like JsonFile, YamlFile, etc.) by name. try_remove_file Finds a file at the specified relative path within this project and removes it. add_bins No description. add_bundled_deps Defines bundled dependencies. add_compile_command DEPRECATED. add_deps Defines normal dependencies. add_dev_deps Defines development/test dependencies. add_fields Directly set fields in package.json . add_keywords Adds keywords to package.json (deduplicated). add_peer_deps Defines peer dependencies. add_test_command DEPRECATED. has_script Indicates if a script by the name name is defined. remove_script Removes the npm script (always successful). render_workflow_setup Returns the set of workflow steps which should be executed to bootstrap a workflow. set_script Replaces the contents of an npm package.json script. add_cdk_dependency Adds an AWS CDK module dependencies. add_exclude_from_cleanup def add_exclude_from_cleanup ( globs : str ) -> None Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: str The glob patterns to match. add_git_ignore def add_git_ignore ( pattern : str ) -> None Adds a .gitignore pattern. pattern Required Type: str The glob pattern to ignore. add_package_ignore def add_package_ignore ( pattern : str ) -> None Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . pattern Required Type: str add_task def add_task ( name : str , condition : str = None , cwd : str = None , description : str = None , env : typing . Mapping [ str ] = None , required_env : typing . List [ str ] = None , exec : str = None , receive_args : bool = None , steps : typing . List [ TaskStep ] = None ) -> Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: str The task name to add. condition Optional Type: str A shell command which determines if the this task should be executed. If the program exits with a zero exit code, steps will be executed. A non-zero code means that task will be skipped. cwd Optional Type: str Default: process.cwd() The working directory for all steps in this task (unless overridden by the step). description Optional Type: str Default: the task name The description of this build command. env Optional Type: typing.Mapping[str] Default: {} Defines environment variables for the execution of this task. Values in this map will be evaluated in a shell, so you can do stuff like $(echo \"foo\") . required_env Optional Type: typing.List[str] A set of environment variables that must be defined in order to execute this task. Task execution will fail if one of these is not defined. exec Optional Type: str Default: add steps using task.exec(command) or task.spawn(subtask) Shell command to execute as the first command of the task. receive_args Optional Type: bool Default: false Should the provided exec shell command receive args passed to the task. {@link TaskStepOptions.receiveArgs} steps Optional Type: typing.List[projen.TaskStep] List of task steps to run. ~~ add_tip ~~ def add_tip ( message : str ) -> None Prints a \"tip\" message during synthesis. message Required Type: str The message. annotate_generated def annotate_generated ( glob : str ) -> None Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: str the glob pattern to match (could be a file path). post_synthesize def post_synthesize () -> None Called after all components are synthesized. Order is not guaranteed. pre_synthesize def pre_synthesize () -> None Called before all components are synthesized. remove_task def remove_task ( name : str ) -> Task Removes a task from a project. name Required Type: str The name of the task to remove. run_task_command def run_task_command ( task : Task ) -> str Returns the shell command to execute in order to run a task. This will typically be npx projen TASK . task Required Type: projen.Task The task for which the command is required. synth def synth () -> None Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" try_find_file def try_find_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and all its subprojects. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. ~~ try_find_json_file ~~ def try_find_json_file ( file_path : str ) -> JsonFile Finds a json file by name. file_path Required Type: str The file path. try_find_object_file def try_find_object_file ( file_path : str ) -> ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. file_path Required Type: str The file path. try_remove_file def try_remove_file ( file_path : str ) -> FileBase Finds a file at the specified relative path within this project and removes it. file_path Required Type: str The file path. If this path is relative, it will be resolved from the root of this project. add_bins def add_bins ( bins : typing . Mapping [ str ] ) -> None bins Required Type: typing.Mapping[str] add_bundled_deps def add_bundled_deps ( deps : str ) -> None Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json . deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ add_compile_command ~~ def add_compile_command ( commands : str ) -> None DEPRECATED. commands Required Type: str add_deps def add_deps ( deps : str ) -> None Defines normal dependencies. deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . add_dev_deps def add_dev_deps ( deps : str ) -> None Defines development/test dependencies. deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . add_fields def add_fields ( fields : typing . Mapping [ typing . Any ] ) -> None Directly set fields in package.json . fields Required Type: typing.Mapping[typing.Any] The fields to set. add_keywords def add_keywords ( keywords : str ) -> None Adds keywords to package.json (deduplicated). keywords Required Type: str The keywords to add. add_peer_deps def add_peer_deps ( deps : str ) -> None Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers. deps Required Type: str Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ add_test_command ~~ def add_test_command ( commands : str ) -> None DEPRECATED. commands Required Type: str has_script def has_script ( name : str ) -> bool Indicates if a script by the name name is defined. name Required Type: str The name of the script. remove_script def remove_script ( name : str ) -> None Removes the npm script (always successful). name Required Type: str The name of the script. render_workflow_setup def render_workflow_setup ( mutable : bool = None ) -> typing . List [ JobStep ] Returns the set of workflow steps which should be executed to bootstrap a workflow. mutable Optional Type: bool Default: false Should the pacakge lockfile be updated? set_script def set_script ( name : str , command : str ) -> None Replaces the contents of an npm package.json script. name Required Type: str The script name. command Required Type: str The command to execute. add_cdk_dependency def add_cdk_dependency ( modules : str ) -> None Adds an AWS CDK module dependencies. modules Required Type: str The list of modules to depend on. Properties Name Type Description build_task projen.Task No description. commit_generated bool Whether to commit the managed files by default. compile_task projen.Task No description. components typing.List[projen.Component] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected bool Whether or not the project is being ejected. files typing.List[projen.FileBase] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name str Project name. outdir str Absolute output directory of this project. package_task projen.Task No description. post_compile_task projen.Task No description. pre_compile_task projen.Task No description. project_build projen.ProjectBuild Manages the build process of the project. projen_command str The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. test_task projen.Task No description. default_task projen.Task This is the \"default\" task, the one that executes \"projen\". init_project projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. project_type projen.ProjectType No description. auto_approve projen.github.AutoApprove Auto approve set up for this project. dev_container projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. allow_library_dependencies bool No description. artifacts_directory str The build output directory. artifacts_javascript_directory str The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler projen.javascript.Bundler No description. entrypoint str No description. manifest typing.Any No description. package projen.javascript.NodePackage API for managing the node package. package_manager projen.javascript.NodePackageManager The package manager to use. run_script_command str The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). auto_merge projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. build_workflow projen.build.BuildWorkflow The PR build GitHub workflow. build_workflow_job_id str The job ID of the build workflow. jest projen.javascript.Jest The Jest configuration (if enabled). max_node_version str Maximum node version required by this package. min_node_version str Minimum node.js version required by this package. npmignore projen.IgnoreFile The .npmignore file. prettier projen.javascript.Prettier No description. publisher projen.release.Publisher Package publisher. release projen.release.Release Release management. upgrade_workflow projen.javascript.UpgradeDependencies The upgrade workflow. docs_directory str No description. libdir str The directory in which compiled .js files reside. srcdir str The directory in which the .ts sources reside. testdir str The directory in which tests reside. tsconfig_dev projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watch_task projen.Task The \"watch\" task. docgen bool No description. eslint projen.javascript.Eslint No description. tsconfig projen.javascript.TypescriptConfig No description. tsconfig_eslint projen.javascript.TypescriptConfig No description. app_entrypoint str The CDK app entrypoint. cdk_config projen.awscdk.CdkConfig cdk.json configuration. cdk_deps projen.awscdk.AwsCdkDeps No description. cdk_tasks projen.awscdk.CdkTasks Common CDK tasks. cdk_version str The CDK version this app is using. build_task Required build_task : Task Type: projen.Task commit_generated Required commit_generated : bool Type: bool Whether to commit the managed files by default. compile_task Required compile_task : Task Type: projen.Task components Required components : typing . List [ Component ] Type: typing.List[projen.Component] Returns all the components within this project. deps Required deps : Dependencies Type: projen.Dependencies Project dependencies. ejected Required ejected : bool Type: bool Whether or not the project is being ejected. files Required files : typing . List [ FileBase ] Type: typing.List[projen.FileBase] All files in this project. gitattributes Required gitattributes : GitAttributesFile Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required gitignore : IgnoreFile Type: projen.IgnoreFile .gitignore. logger Required logger : Logger Type: projen.Logger Logging utilities. name Required name : str Type: str Project name. outdir Required outdir : str Type: str Absolute output directory of this project. package_task Required package_task : Task Type: projen.Task post_compile_task Required post_compile_task : Task Type: projen.Task pre_compile_task Required pre_compile_task : Task Type: projen.Task project_build Required project_build : ProjectBuild Type: projen.ProjectBuild Manages the build process of the project. projen_command Required projen_command : str Type: str The command to use in order to run the projen CLI. root Required root : Project Type: projen.Project The root project. tasks Required tasks : Tasks Type: projen.Tasks Project tasks. test_task Required test_task : Task Type: projen.Task default_task Optional default_task : Task Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. init_project Optional init_project : InitProject Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional parent : Project Type: projen.Project A parent project. If undefined, this is the root project. project_type Required project_type : ProjectType Type: projen.ProjectType auto_approve Optional auto_approve : AutoApprove Type: projen.github.AutoApprove Auto approve set up for this project. dev_container Optional dev_container : DevContainer Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional github : GitHub Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional gitpod : Gitpod Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional vscode : VsCode Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. ~~ allow_library_dependencies ~~ Required Deprecated: use package.allowLibraryDependencies allow_library_dependencies : bool Type: bool artifacts_directory Required artifacts_directory : str Type: str The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg . artifacts_javascript_directory Required artifacts_javascript_directory : str Type: str The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler Required bundler : Bundler Type: projen.javascript.Bundler ~~ entrypoint ~~ Required Deprecated: use package.entrypoint entrypoint : str Type: str ~~ manifest ~~ Required Deprecated: use package.addField(x, y) manifest : typing . Any Type: typing.Any package Required package : NodePackage Type: projen.javascript.NodePackage API for managing the node package. ~~ package_manager ~~ Required Deprecated: use package.packageManager package_manager : NodePackageManager Type: projen.javascript.NodePackageManager The package manager to use. run_script_command Required run_script_command : str Type: str The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). auto_merge Optional auto_merge : AutoMerge Type: projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. build_workflow Optional build_workflow : BuildWorkflow Type: projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled. build_workflow_job_id Optional build_workflow_job_id : str Type: str The job ID of the build workflow. jest Optional jest : Jest Type: projen.javascript.Jest The Jest configuration (if enabled). max_node_version Optional max_node_version : str Type: str Maximum node version required by this package. min_node_version Optional min_node_version : str Type: str Minimum node.js version required by this package. npmignore Optional npmignore : IgnoreFile Type: projen.IgnoreFile The .npmignore file. prettier Optional prettier : Prettier Type: projen.javascript.Prettier ~~ publisher ~~ Optional Deprecated: use release.publisher . publisher : Publisher Type: projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow. release Optional release : Release Type: projen.release.Release Release management. upgrade_workflow Optional upgrade_workflow : UpgradeDependencies Type: projen.javascript.UpgradeDependencies The upgrade workflow. docs_directory Required docs_directory : str Type: str libdir Required libdir : str Type: str The directory in which compiled .js files reside. srcdir Required srcdir : str Type: str The directory in which the .ts sources reside. testdir Required testdir : str Type: str The directory in which tests reside. tsconfig_dev Required tsconfig_dev : TypescriptConfig Type: projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watch_task Required watch_task : Task Type: projen.Task The \"watch\" task. docgen Optional docgen : bool Type: bool eslint Optional eslint : Eslint Type: projen.javascript.Eslint tsconfig Optional tsconfig : TypescriptConfig Type: projen.javascript.TypescriptConfig tsconfig_eslint Optional tsconfig_eslint : TypescriptConfig Type: projen.javascript.TypescriptConfig app_entrypoint Required app_entrypoint : str Type: str The CDK app entrypoint. cdk_config Required cdk_config : CdkConfig Type: projen.awscdk.CdkConfig cdk.json configuration. cdk_deps Required cdk_deps : AwsCdkDeps Type: projen.awscdk.AwsCdkDeps cdk_tasks Required cdk_tasks : CdkTasks Type: projen.awscdk.CdkTasks Common CDK tasks. cdk_version Required cdk_version : str Type: str The CDK version this app is using. Constants Name Type Description DEFAULT_TASK str The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required DEFAULT_TASK : str Type: str The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files.","title":"Index"},{"location":"python/pipeline/index.html#cdk-nag","text":"In order to keep CDK Nag happy, make sure you build the pipeline before synth as per aws-cdk#18440 .","title":"CDK Nag"},{"location":"python/pipeline/index.html#api-reference","text":"","title":"API Reference "},{"location":"python/pipeline/index.html#constructs","text":"","title":"Constructs "},{"location":"python/pipeline/index.html#pdkpipeline","text":"An extension to CodePipeline which configures sane defaults for a NX Monorepo codebase. In addition to this, it also creates a CodeCommit repository with automated PR builds and approvals.","title":"PDKPipeline "},{"location":"python/pipeline/index.html#sonarcodescanner","text":"","title":"SonarCodeScanner "},{"location":"python/pipeline/index.html#structs","text":"","title":"Structs "},{"location":"python/pipeline/index.html#pdkpipelinejavaprojectoptions","text":"Configuration options for the PDKPipelineJavaProject.","title":"PDKPipelineJavaProjectOptions "},{"location":"python/pipeline/index.html#pdkpipelineprops","text":"Properties to configure the PDKPipeline. Note: Due to limitations with JSII and generic support it should be noted that the synth, synthShellStepPartialProps.input and synthShellStepPartialProps.primaryOutputDirectory properties will be ignored if passed in to this construct. synthShellStepPartialProps.commands is marked as a required field, however if you pass in [] the default commands of this construct will be retained.","title":"PDKPipelineProps "},{"location":"python/pipeline/index.html#pdkpipelinepyprojectoptions","text":"Configuration options for the PDKPipelinePyProject.","title":"PDKPipelinePyProjectOptions "},{"location":"python/pipeline/index.html#pdkpipelinetsprojectoptions","text":"Configuration options for the PDKPipelineTsProject.","title":"PDKPipelineTsProjectOptions "},{"location":"python/pipeline/index.html#sonarcodescannerconfig","text":"","title":"SonarCodeScannerConfig "},{"location":"python/pipeline/index.html#sonarcodescannerprops","text":"SonarCodeScanners properties.","title":"SonarCodeScannerProps "},{"location":"python/pipeline/index.html#classes","text":"","title":"Classes "},{"location":"python/pipeline/index.html#pdkpipelinejavaproject","text":"Synthesizes a Java Project with a CI/CD pipeline.","title":"PDKPipelineJavaProject "},{"location":"python/pipeline/index.html#pdkpipelinepyproject","text":"Synthesizes a Python Project with a CI/CD pipeline.","title":"PDKPipelinePyProject "},{"location":"python/pipeline/index.html#pdkpipelinetsproject","text":"Synthesizes a Typescript Project with a CI/CD pipeline.","title":"PDKPipelineTsProject "},{"location":"python/static-website/index.html","text":"Experimental Warning This is packaged in a separate module while the API is being stabilized. This package is subject to non-backward compatible changes or removal in any future version. Breaking changes will be announced in the release notes. Whilst you may use this package, you may need to update your source code when upgrading to a newer version. Once we stabilize the module, it will be included into the stable aws-prototyping-sdk library. Experimental Usage To use this package, add a dependency on: aws_prototyping_sdk.static_website The static-website module is able to deploy your pre-packaged static website content into an S3 Bucket, fronted by Cloudfront. This module uses an Origin Access Identity to ensure your Bucket can only be accessed via Cloudfront and is configured to only allow HTTPS requests by default. Custom runtime configurations can also be specified which will emit a runtime-config.json file along with your website content. Typically this includes resource Arns, Id's etc which may need to be referenced from your website. This package uses sane defaults and at a minimum only requires the path to your website assets. Below is a conceptual view of the default architecture this module creates: Cloudfront Distribution (HTTPS only) -> S3 Bucket (Private via OAI) |_ WAF V2 ACL |_ index.html (+ other website files and assets) |_ runtime-config.json A typical use case is to create a static website with AuthN. To accomplish this, we can leverage the UserIdentity to create the User Pool (Cognito by default) and Identity Pool. We can then pipe the respective pool id's as runtimeOptions into the StaticWebsite. After the website is deployed, these values can be interrogated from the runtime-config.json deployed alongside the website in order to perform authentication within the app using something like the Amplify Auth API . # Example automatically generated from non-compiling source. May contain errors. user_identity = UserIdentity ( self , \"UserIdentity\" ) StaticWebsite ( self , \"StaticWebsite\" , website_content_path = \"<relative>/<path>/<to>/<built>/<website>\" , runtime_options = { \"json_payload\" : { \"region\" : Stack . of ( self ) . region , \"identity_pool_id\" : user_identity . identity_pool . identity_pool_id , \"user_pool_id\" : user_identity . user_pool . user_pool_id , \"user_pool_web_client_id\" : user_identity . user_pool_client . user_pool_client_id } } ) API Reference Constructs CloudfrontWebAcl This construct creates a WAFv2 Web ACL for cloudfront in the us-east-1 region (required for cloudfront) no matter the region of the parent cdk stack. Initializers import aws_prototyping_sdk.static_website aws_prototyping_sdk . static_website . CloudfrontWebAcl ( scope : Construct , id : str , cidr_allow_list : CidrAllowList = None , managed_rules : typing . List [ ManagedRule ] = None ) Name Type Description scope constructs.Construct No description. id str No description. cidr_allow_list CidrAllowList List of cidr ranges to allow. managed_rules typing.List[ ManagedRule ] List of managed rules to apply to the web acl. scope Required Type: constructs.Construct id Required Type: str cidr_allow_list Optional Type: CidrAllowList Default: undefined List of cidr ranges to allow. managed_rules Optional Type: typing.List[ ManagedRule ] Default: [{ vendor: \"AWS\", name: \"AWSManagedRulesCommonRuleSet\" }] List of managed rules to apply to the web acl. Methods Name Description to_string Returns a string representation of this construct. to_string def to_string () -> str Returns a string representation of this construct. Static Functions Name Description is_construct Checks if x is a construct. is_construct import aws_prototyping_sdk.static_website aws_prototyping_sdk . static_website . CloudfrontWebAcl . is_construct ( x : typing . Any ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: typing.Any Any object. Properties Name Type Description node constructs.Node The tree node. web_acl_arn str No description. web_acl_id str No description. node Required node : Node Type: constructs.Node The tree node. web_acl_arn Required web_acl_arn : str Type: str web_acl_id Required web_acl_id : str Type: str StaticWebsite Deploys a Static Website using by default a private S3 bucket as an origin and Cloudfront as the entrypoint. This construct configures a webAcl containing rules that are generally applicable to web applications. This provides protection against exploitation of a wide range of vulnerabilities, including some of the high risk and commonly occurring vulnerabilities described in OWASP publications such as OWASP Top 10. Initializers import aws_prototyping_sdk.static_website aws_prototyping_sdk . static_website . StaticWebsite ( scope : Construct , id : str , website_content_path : str , default_website_bucket_encryption : BucketEncryption = None , default_website_bucket_encryption_key : Key = None , distribution_props : DistributionProps = None , runtime_options : RuntimeOptions = None , web_acl_props : CloudFrontWebAclProps = None , website_bucket : IBucket = None ) Name Type Description scope constructs.Construct No description. id str No description. website_content_path str Path to the directory containing the static website files and assets. default_website_bucket_encryption aws_cdk.aws_s3.BucketEncryption Bucket encryption to use for the default bucket. default_website_bucket_encryption_key aws_cdk.aws_kms.Key A predefined KMS customer encryption key to use for the default bucket that gets created. distribution_props aws_cdk.aws_cloudfront.DistributionProps Custom distribution properties. runtime_options RuntimeOptions Dynamic configuration which gets resolved only during deployment. web_acl_props CloudFrontWebAclProps Limited configuration settings for the generated webAcl. website_bucket aws_cdk.aws_s3.IBucket Predefined bucket to deploy the website into. scope Required Type: constructs.Construct id Required Type: str website_content_path Required Type: str Path to the directory containing the static website files and assets. This directory must contain an index.html file. default_website_bucket_encryption Optional Type: aws_cdk.aws_s3.BucketEncryption Default: \"S3MANAGED\" Bucket encryption to use for the default bucket. Supported options are KMS or S3MANAGED. Note: If planning to use KMS, ensure you associate a Lambda Edge function to sign requests to S3 as OAI does not currently support KMS encryption. Refer to { @link https://aws.amazon.com/blogs/networking-and-content-delivery/serving-sse-kms-encrypted-content-from-s3-using-cloudfront/ } default_website_bucket_encryption_key Optional Type: aws_cdk.aws_kms.Key A predefined KMS customer encryption key to use for the default bucket that gets created. Note: This is only used if the websiteBucket is left undefined, otherwise all settings from the provided websiteBucket will be used. distribution_props Optional Type: aws_cdk.aws_cloudfront.DistributionProps Custom distribution properties. Note: defaultBehaviour.origin is a required parameter, however it will not be used as this construct will wire it on your behalf. You will need to pass in an instance of StaticWebsiteOrigin (NoOp) to keep the compiler happy. runtime_options Optional Type: RuntimeOptions Dynamic configuration which gets resolved only during deployment. web_acl_props Optional Type: CloudFrontWebAclProps Limited configuration settings for the generated webAcl. For more advanced settings, create your own ACL and pass in the webAclId as a param to distributionProps. Note: If pass in your own ACL, make sure the SCOPE is CLOUDFRONT and it is created in us-east-1. website_bucket Optional Type: aws_cdk.aws_s3.IBucket Predefined bucket to deploy the website into. Methods Name Description to_string Returns a string representation of this construct. to_string def to_string () -> str Returns a string representation of this construct. Static Functions Name Description is_construct Checks if x is a construct. is_construct import aws_prototyping_sdk.static_website aws_prototyping_sdk . static_website . StaticWebsite . is_construct ( x : typing . Any ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: typing.Any Any object. Properties Name Type Description node constructs.Node The tree node. bucket_deployment aws_cdk.aws_s3_deployment.BucketDeployment No description. cloud_front_distribution aws_cdk.aws_cloudfront.Distribution No description. website_bucket aws_cdk.aws_s3.IBucket No description. node Required node : Node Type: constructs.Node The tree node. bucket_deployment Required bucket_deployment : BucketDeployment Type: aws_cdk.aws_s3_deployment.BucketDeployment cloud_front_distribution Required cloud_front_distribution : Distribution Type: aws_cdk.aws_cloudfront.Distribution website_bucket Required website_bucket : IBucket Type: aws_cdk.aws_s3.IBucket Structs CidrAllowList Representation of a CIDR range. Initializer import aws_prototyping_sdk.static_website aws_prototyping_sdk . static_website . CidrAllowList ( cidr_ranges : typing . List [ str ], cidr_type : str ) Properties Name Type Description cidr_ranges typing.List[str] Specify an IPv4 address by using CIDR notation. cidr_type str Type of CIDR range. cidr_ranges Required cidr_ranges : typing . List [ str ] Type: typing.List[str] Specify an IPv4 address by using CIDR notation. For example: To configure AWS WAF to allow, block, or count requests that originated from the IP address 192.0.2.44, specify 192.0.2.44/32 . To configure AWS WAF to allow, block, or count requests that originated from IP addresses from 192.0.2.0 to 192.0.2.255, specify 192.0.2.0/24 . For more information about CIDR notation, see the Wikipedia entry Classless Inter-Domain Routing . Specify an IPv6 address by using CIDR notation. For example: To configure AWS WAF to allow, block, or count requests that originated from the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify 1111:0000:0000:0000:0000:0000:0000:0111/128 . To configure AWS WAF to allow, block, or count requests that originated from IP addresses 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify 1111:0000:0000:0000:0000:0000:0000:0000/64 . cidr_type Required cidr_type : str Type: str Type of CIDR range. CloudFrontWebAclProps Properties to configure the web acl. Initializer import aws_prototyping_sdk.static_website aws_prototyping_sdk . static_website . CloudFrontWebAclProps ( cidr_allow_list : CidrAllowList = None , managed_rules : typing . List [ ManagedRule ] = None ) Properties Name Type Description cidr_allow_list CidrAllowList List of cidr ranges to allow. managed_rules typing.List[ ManagedRule ] List of managed rules to apply to the web acl. cidr_allow_list Optional cidr_allow_list : CidrAllowList Type: CidrAllowList Default: undefined List of cidr ranges to allow. managed_rules Optional managed_rules : typing . List [ ManagedRule ] Type: typing.List[ ManagedRule ] Default: [{ vendor: \"AWS\", name: \"AWSManagedRulesCommonRuleSet\" }] List of managed rules to apply to the web acl. ManagedRule Represents a WAF V2 managed rule. Initializer import aws_prototyping_sdk.static_website aws_prototyping_sdk . static_website . ManagedRule ( name : str , vendor : str ) Properties Name Type Description name str The name of the managed rule group. vendor str The name of the managed rule group vendor. name Required name : str Type: str The name of the managed rule group. You use this, along with the vendor name, to identify the rule group. vendor Required vendor : str Type: str The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group. RuntimeOptions Dynamic configuration which gets resolved only during deployment. Example # Example automatically generated from non-compiling source. May contain errors. # Will store a JSON file called runtime-config.json in the root of the StaticWebsite S3 bucket containing any # and all resolved values. runtime_config = { \"json_payload\" : { \"bucket_arn\" : s3_bucket . bucket_arn }} StaticWebsite ( scope , \"StaticWebsite\" , website_content_path = \"path/to/website\" , runtime_config = runtime_config ) Initializer import aws_prototyping_sdk.static_website aws_prototyping_sdk . static_website . RuntimeOptions ( json_payload : typing . Any , json_file_name : str = None ) Properties Name Type Description json_payload typing.Any Arbitrary JSON payload containing runtime values to deploy. json_file_name str File name to store runtime configuration (jsonPayload). json_payload Required json_payload : typing . Any Type: typing.Any Arbitrary JSON payload containing runtime values to deploy. Typically this contains resourceArns, etc which are only known at deploy time. Example # Example automatically generated from non-compiling source. May contain errors. userPoolId : some . userPool . userPoolId , someResourceArnsome . resource . Arn json_file_name Optional json_file_name : str Type: str Default: \"runtime-config.json\" File name to store runtime configuration (jsonPayload). Must follow pattern: '*.json' StaticWebsiteProps Properties for configuring the StaticWebsite. Initializer import aws_prototyping_sdk.static_website aws_prototyping_sdk . static_website . StaticWebsiteProps ( website_content_path : str , default_website_bucket_encryption : BucketEncryption = None , default_website_bucket_encryption_key : Key = None , distribution_props : DistributionProps = None , runtime_options : RuntimeOptions = None , web_acl_props : CloudFrontWebAclProps = None , website_bucket : IBucket = None ) Properties Name Type Description website_content_path str Path to the directory containing the static website files and assets. default_website_bucket_encryption aws_cdk.aws_s3.BucketEncryption Bucket encryption to use for the default bucket. default_website_bucket_encryption_key aws_cdk.aws_kms.Key A predefined KMS customer encryption key to use for the default bucket that gets created. distribution_props aws_cdk.aws_cloudfront.DistributionProps Custom distribution properties. runtime_options RuntimeOptions Dynamic configuration which gets resolved only during deployment. web_acl_props CloudFrontWebAclProps Limited configuration settings for the generated webAcl. website_bucket aws_cdk.aws_s3.IBucket Predefined bucket to deploy the website into. website_content_path Required website_content_path : str Type: str Path to the directory containing the static website files and assets. This directory must contain an index.html file. default_website_bucket_encryption Optional default_website_bucket_encryption : BucketEncryption Type: aws_cdk.aws_s3.BucketEncryption Default: \"S3MANAGED\" Bucket encryption to use for the default bucket. Supported options are KMS or S3MANAGED. Note: If planning to use KMS, ensure you associate a Lambda Edge function to sign requests to S3 as OAI does not currently support KMS encryption. Refer to { @link https://aws.amazon.com/blogs/networking-and-content-delivery/serving-sse-kms-encrypted-content-from-s3-using-cloudfront/ } default_website_bucket_encryption_key Optional default_website_bucket_encryption_key : Key Type: aws_cdk.aws_kms.Key A predefined KMS customer encryption key to use for the default bucket that gets created. Note: This is only used if the websiteBucket is left undefined, otherwise all settings from the provided websiteBucket will be used. distribution_props Optional distribution_props : DistributionProps Type: aws_cdk.aws_cloudfront.DistributionProps Custom distribution properties. Note: defaultBehaviour.origin is a required parameter, however it will not be used as this construct will wire it on your behalf. You will need to pass in an instance of StaticWebsiteOrigin (NoOp) to keep the compiler happy. runtime_options Optional runtime_options : RuntimeOptions Type: RuntimeOptions Dynamic configuration which gets resolved only during deployment. web_acl_props Optional web_acl_props : CloudFrontWebAclProps Type: CloudFrontWebAclProps Limited configuration settings for the generated webAcl. For more advanced settings, create your own ACL and pass in the webAclId as a param to distributionProps. Note: If pass in your own ACL, make sure the SCOPE is CLOUDFRONT and it is created in us-east-1. website_bucket Optional website_bucket : IBucket Type: aws_cdk.aws_s3.IBucket Predefined bucket to deploy the website into. Classes StaticWebsiteOrigin Implements: aws_cdk.aws_cloudfront.IOrigin If passing in distributionProps, the default behaviour.origin is a required parameter. An instance of this class can be passed in to make the compiler happy. Initializers import aws_prototyping_sdk.static_website aws_prototyping_sdk . static_website . StaticWebsiteOrigin () Name Type Description Methods Name Description bind The method called when a given Origin is added (for the first time) to a Distribution. bind def bind ( _scope : Construct , origin_id : str ) -> OriginBindConfig The method called when a given Origin is added (for the first time) to a Distribution. _scope Required Type: constructs.Construct origin_id Required Type: str The identifier of this Origin, as assigned by the Distribution this Origin has been used added to.","title":"Index"},{"location":"python/static-website/index.html#api-reference","text":"","title":"API Reference "},{"location":"python/static-website/index.html#constructs","text":"","title":"Constructs "},{"location":"python/static-website/index.html#cloudfrontwebacl","text":"This construct creates a WAFv2 Web ACL for cloudfront in the us-east-1 region (required for cloudfront) no matter the region of the parent cdk stack.","title":"CloudfrontWebAcl "},{"location":"python/static-website/index.html#staticwebsite","text":"Deploys a Static Website using by default a private S3 bucket as an origin and Cloudfront as the entrypoint. This construct configures a webAcl containing rules that are generally applicable to web applications. This provides protection against exploitation of a wide range of vulnerabilities, including some of the high risk and commonly occurring vulnerabilities described in OWASP publications such as OWASP Top 10.","title":"StaticWebsite "},{"location":"python/static-website/index.html#structs","text":"","title":"Structs "},{"location":"python/static-website/index.html#cidrallowlist","text":"Representation of a CIDR range.","title":"CidrAllowList "},{"location":"python/static-website/index.html#cloudfrontwebaclprops","text":"Properties to configure the web acl.","title":"CloudFrontWebAclProps "},{"location":"python/static-website/index.html#managedrule","text":"Represents a WAF V2 managed rule.","title":"ManagedRule "},{"location":"python/static-website/index.html#runtimeoptions","text":"Dynamic configuration which gets resolved only during deployment. Example # Example automatically generated from non-compiling source. May contain errors. # Will store a JSON file called runtime-config.json in the root of the StaticWebsite S3 bucket containing any # and all resolved values. runtime_config = { \"json_payload\" : { \"bucket_arn\" : s3_bucket . bucket_arn }} StaticWebsite ( scope , \"StaticWebsite\" , website_content_path = \"path/to/website\" , runtime_config = runtime_config )","title":"RuntimeOptions "},{"location":"python/static-website/index.html#staticwebsiteprops","text":"Properties for configuring the StaticWebsite.","title":"StaticWebsiteProps "},{"location":"python/static-website/index.html#classes","text":"","title":"Classes "},{"location":"python/static-website/index.html#staticwebsiteorigin","text":"Implements: aws_cdk.aws_cloudfront.IOrigin If passing in distributionProps, the default behaviour.origin is a required parameter. An instance of this class can be passed in to make the compiler happy.","title":"StaticWebsiteOrigin "},{"location":"troubleshooting/codepipeline-random-build-errors.html","text":"I get random build failures in CodePipeline even though my project builds on my dev machine Error [ yarn run v1.22.19 [ $ npx projen build build \u00bb pre-compile | rm -rf lib build \u00bb compile | tsc \u2014build Killed Task \"build \u00bb compile\" failed when executing \"tsc \u2014build\" ( cwd: /codebuild/output/src728343998/src/packages/myPackage ) First, add --verbose to your package\u2019s compileTask to see what is the error. You may see a little bit more: [ yarn run v1.22.19 [ $ npx projen build build \u00bb pre-compile | rm -rf lib build \u00bb compile | tsc \u2014build \u2014verbose 3 :18:29 AM - Projects in this build: tsconfig.json 3 :18:30 AM - Project 'tsconfig.json' is out of date because output file 'lib/index.js' does not exist # <-- this is something new 3 :18:30 AM - Building project '/codebuild/output/src728343998/src/packages/myPackage/tsconfig.json' ... Killed Task \"build \u00bb compile\" failed when executing \"tsc \u2014build \u2014verbose\" ( cwd: /codebuild/output/src728343998/src/packages/myPackage ) Possible solutions Try to run yarn eslint and see if that was the problem. If you have changes in the repo, push it to monorepo . Try to upsize the pipeline\u2019s codeBuild build environment. The default environment has only 3GB of RAM and 2vCPUs which may not be sufficient to handle large projects: const this . pipeline = new PDKPipeline ( this , \"AppPipeline\" , { ..., codeBuildDefaults : { buildEnvironment : { computeType : ComputeType.LARGE , // or MEDIUM or X2_LARGE }, }, }); After the change, deploy your pipeline manually because self-mutation won\u2019t be in effect until the code builds.","title":"CodePipeline build failures"},{"location":"troubleshooting/codepipeline-random-build-errors.html#i-get-random-build-failures-in-codepipeline-even-though-my-project-builds-on-my-dev-machine","text":"","title":"I get random build failures in CodePipeline even though my project builds on my dev machine"},{"location":"troubleshooting/codepipeline-random-build-errors.html#error","text":"[ yarn run v1.22.19 [ $ npx projen build build \u00bb pre-compile | rm -rf lib build \u00bb compile | tsc \u2014build Killed Task \"build \u00bb compile\" failed when executing \"tsc \u2014build\" ( cwd: /codebuild/output/src728343998/src/packages/myPackage ) First, add --verbose to your package\u2019s compileTask to see what is the error. You may see a little bit more: [ yarn run v1.22.19 [ $ npx projen build build \u00bb pre-compile | rm -rf lib build \u00bb compile | tsc \u2014build \u2014verbose 3 :18:29 AM - Projects in this build: tsconfig.json 3 :18:30 AM - Project 'tsconfig.json' is out of date because output file 'lib/index.js' does not exist # <-- this is something new 3 :18:30 AM - Building project '/codebuild/output/src728343998/src/packages/myPackage/tsconfig.json' ... Killed Task \"build \u00bb compile\" failed when executing \"tsc \u2014build \u2014verbose\" ( cwd: /codebuild/output/src728343998/src/packages/myPackage )","title":"Error"},{"location":"troubleshooting/codepipeline-random-build-errors.html#possible-solutions","text":"Try to run yarn eslint and see if that was the problem. If you have changes in the repo, push it to monorepo . Try to upsize the pipeline\u2019s codeBuild build environment. The default environment has only 3GB of RAM and 2vCPUs which may not be sufficient to handle large projects: const this . pipeline = new PDKPipeline ( this , \"AppPipeline\" , { ..., codeBuildDefaults : { buildEnvironment : { computeType : ComputeType.LARGE , // or MEDIUM or X2_LARGE }, }, }); After the change, deploy your pipeline manually because self-mutation won\u2019t be in effect until the code builds.","title":"Possible solutions"},{"location":"troubleshooting/cognito-auth-middleware.html","text":"How do I setup a Cognito Auth Middleware for a generated Smithy/Open API client? import { Middleware } from \"@myProject/my-openapi-project-generated-typescript\" ; import { Auth as AmplifyAuth } from \"aws-amplify\" ; const cognitoAuthMiddleware : Middleware = { pre : async ({ init , url }) => ({ url , init : { ... init , headers : { ... init . headers , \"Content-Type\" : \"application/json\" , Authorization : ( await AmplifyAuth . currentSession ()) . getIdToken () . getJwtToken (), }, }, }), };","title":"Cognito Auth Middleware"},{"location":"troubleshooting/cognito-auth-middleware.html#how-do-i-setup-a-cognito-auth-middleware-for-a-generated-smithyopen-api-client","text":"import { Middleware } from \"@myProject/my-openapi-project-generated-typescript\" ; import { Auth as AmplifyAuth } from \"aws-amplify\" ; const cognitoAuthMiddleware : Middleware = { pre : async ({ init , url }) => ({ url , init : { ... init , headers : { ... init . headers , \"Content-Type\" : \"application/json\" , Authorization : ( await AmplifyAuth . currentSession ()) . getIdToken () . getJwtToken (), }, }, }), };","title":"How do I setup a Cognito Auth Middleware for a generated Smithy/Open API client?"},{"location":"troubleshooting/err-out-of-range-pdk.html","text":"I get ERR_OUT_OF_RANGE error while working on PDK The error [ ...totyping-sdk ] Error: Command ( npm pack \"/Users/<user>/projects/aws/aws-prototyping-sdk/packages/aws-prototyping-sdk\" ) failed with status 1 : [ ...totyping-sdk ] #STDERR> npm ERR! code ERR_OUT_OF_RANGE [ ...totyping-sdk ] #STDERR> npm ERR! The value of \"length\" is out of range. It must be >= 0 && <= 2147483647. Received 3411173948 [ ...totyping-sdk ] #STDERR> [ ...totyping-sdk ] #STDERR> npm ERR! A complete log of this run can be found in: [ ...totyping-sdk ] #STDERR> npm ERR! /Users/<user>/.npm/_logs/2022-08-21T10_56_27_554Z-debug-0.log [ ...totyping-sdk ] #STDERR> [ ...totyping-sdk ] #STDOUT> [ ...totyping-sdk ] at ChildProcess.<anonymous> ( /Users/<user>/projects/aws/aws-prototyping-sdk/node_modules/jsii-pacmak/lib/util.js:175:27 ) [ ...totyping-sdk ] at Object.onceWrapper ( node:events:642:26 ) [ ...totyping-sdk ] at ChildProcess.emit ( node:events:527:28 ) [ ...totyping-sdk ] at maybeClose ( node:internal/child_process:1090:16 ) [ ...totyping-sdk ] at Socket.<anonymous> ( node:internal/child_process:449:11 ) [ ...totyping-sdk ] at Socket.emit ( node:events:527:28 ) [ ...totyping-sdk ] at Pipe.<anonymous> ( node:net:715:12 ) [ ...totyping-sdk ] Task \"build \u00bb package \u00bb package-all \u00bb package:js\" failed when executing \"jsii-pacmak -v --target js\" ( cwd: /Users/<user>/projects/aws/aws-prototyping-sdk/packages/aws-prototyping-sdk ) error Command failed with exit code 1 . Solution Delete the dist folder in packages/aws-prototyping-sdk .","title":"ERR_OUT_OF_RANGE error"},{"location":"troubleshooting/err-out-of-range-pdk.html#i-get-err_out_of_range-error-while-working-on-pdk","text":"","title":"I get ERR_OUT_OF_RANGE error while working on PDK"},{"location":"troubleshooting/err-out-of-range-pdk.html#the-error","text":"[ ...totyping-sdk ] Error: Command ( npm pack \"/Users/<user>/projects/aws/aws-prototyping-sdk/packages/aws-prototyping-sdk\" ) failed with status 1 : [ ...totyping-sdk ] #STDERR> npm ERR! code ERR_OUT_OF_RANGE [ ...totyping-sdk ] #STDERR> npm ERR! The value of \"length\" is out of range. It must be >= 0 && <= 2147483647. Received 3411173948 [ ...totyping-sdk ] #STDERR> [ ...totyping-sdk ] #STDERR> npm ERR! A complete log of this run can be found in: [ ...totyping-sdk ] #STDERR> npm ERR! /Users/<user>/.npm/_logs/2022-08-21T10_56_27_554Z-debug-0.log [ ...totyping-sdk ] #STDERR> [ ...totyping-sdk ] #STDOUT> [ ...totyping-sdk ] at ChildProcess.<anonymous> ( /Users/<user>/projects/aws/aws-prototyping-sdk/node_modules/jsii-pacmak/lib/util.js:175:27 ) [ ...totyping-sdk ] at Object.onceWrapper ( node:events:642:26 ) [ ...totyping-sdk ] at ChildProcess.emit ( node:events:527:28 ) [ ...totyping-sdk ] at maybeClose ( node:internal/child_process:1090:16 ) [ ...totyping-sdk ] at Socket.<anonymous> ( node:internal/child_process:449:11 ) [ ...totyping-sdk ] at Socket.emit ( node:events:527:28 ) [ ...totyping-sdk ] at Pipe.<anonymous> ( node:net:715:12 ) [ ...totyping-sdk ] Task \"build \u00bb package \u00bb package-all \u00bb package:js\" failed when executing \"jsii-pacmak -v --target js\" ( cwd: /Users/<user>/projects/aws/aws-prototyping-sdk/packages/aws-prototyping-sdk ) error Command failed with exit code 1 .","title":"The error"},{"location":"troubleshooting/err-out-of-range-pdk.html#solution","text":"Delete the dist folder in packages/aws-prototyping-sdk .","title":"Solution"},{"location":"troubleshooting/fix-cdk-version.html","text":"I want to use a fixed CDK/Constructs package version const cdkVersion = ...; const constructsVersion = ...; monorepo . tryFindObjectFile ( \"package.json\" ) ? . addOverride ( \"resolutions\" , { \"**/aws-cdk-lib\" : cdkVersion , \"**/constructs\" : constructsVersion , })","title":"Custom CDK version"},{"location":"troubleshooting/fix-cdk-version.html#i-want-to-use-a-fixed-cdkconstructs-package-version","text":"const cdkVersion = ...; const constructsVersion = ...; monorepo . tryFindObjectFile ( \"package.json\" ) ? . addOverride ( \"resolutions\" , { \"**/aws-cdk-lib\" : cdkVersion , \"**/constructs\" : constructsVersion , })","title":"I want to use a fixed CDK/Constructs package version"},{"location":"troubleshooting/include-js-in-project.html","text":"How do I include js files in my project? Option #1 - via tsconfig const myPackage = new TypeScriptProject ({ // ... tsconfig : { compilerOptions : { allowJs : true , // <-------- }, }, tsconfigDev : { compilerOptions : { allowJs : true , // <--------- }, }, }); myPackage . tsconfig ? . addInclude ( \"src/**/*.js\" ); // OR more specific path: // myPackage.tsconfig?.addInclude(\"src/**/@lambda/**/*.js\"); Option #2 - with rsync ( example ) this . compileTask . exec ( 'rsync -a ./src/** ./lib --include=\"*/\" --include=\"**/*.js\" --exclude=\"*\" --prune-empty-dirs' );","title":"Include JS files"},{"location":"troubleshooting/include-js-in-project.html#how-do-i-include-js-files-in-my-project","text":"","title":"How do I include js files in my project?"},{"location":"troubleshooting/include-js-in-project.html#option-1-via-tsconfig","text":"const myPackage = new TypeScriptProject ({ // ... tsconfig : { compilerOptions : { allowJs : true , // <-------- }, }, tsconfigDev : { compilerOptions : { allowJs : true , // <--------- }, }, }); myPackage . tsconfig ? . addInclude ( \"src/**/*.js\" ); // OR more specific path: // myPackage.tsconfig?.addInclude(\"src/**/@lambda/**/*.js\");","title":"Option #1 - via tsconfig"},{"location":"troubleshooting/include-js-in-project.html#option-2-with-rsync-example","text":"this . compileTask . exec ( 'rsync -a ./src/** ./lib --include=\"*/\" --include=\"**/*.js\" --exclude=\"*\" --prune-empty-dirs' );","title":"Option #2 - with rsync (example)"},{"location":"troubleshooting/jest-warnings-globals-deprecated.html","text":"I\u2019m getting Jest (WARN) Define ts-jest config under globals is deprecated warnings The warning ts-jest [ ts-jest-transformer ] ( WARN ) Define ` ts-jest ` config under ` globals ` is deprecated. Please do transform: { <transform_regex>: [ 'ts-jest' , { /* ts-jest config goes here in Jest */ }] , } , Solution Add jestOptions when you extend or instantiate NxMonorepoProject : jestOptions : { jestConfig : { transform : { \"\\\\.[jt]sx?$\" : [ \"ts-jest\" , { tsconfig : \"tsconfig.dev.json\" }], }, }, },","title":"Jest deprecated warnings"},{"location":"troubleshooting/jest-warnings-globals-deprecated.html#im-getting-jest-warn-define-ts-jest-config-under-globals-is-deprecated-warnings","text":"","title":"I\u2019m getting Jest (WARN) Define ts-jest config under globals is deprecated warnings"},{"location":"troubleshooting/jest-warnings-globals-deprecated.html#the-warning","text":"ts-jest [ ts-jest-transformer ] ( WARN ) Define ` ts-jest ` config under ` globals ` is deprecated. Please do transform: { <transform_regex>: [ 'ts-jest' , { /* ts-jest config goes here in Jest */ }] , } ,","title":"The warning"},{"location":"troubleshooting/jest-warnings-globals-deprecated.html#solution","text":"Add jestOptions when you extend or instantiate NxMonorepoProject : jestOptions : { jestConfig : { transform : { \"\\\\.[jt]sx?$\" : [ \"ts-jest\" , { tsconfig : \"tsconfig.dev.json\" }], }, }, },","title":"Solution"},{"location":"troubleshooting/mapbox-gl-error.html","text":"I receive @types/mapbox-gl TS2304 errors I get this error when I add a CloudscapeReactTsWebsiteProject to my project: myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 328 ,19 ) : error TS2304: Cannot find name 'ImageData' . myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 329 ,19 ) : error TS2304: Cannot find name 'ImageBitmap' . myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 339 ,19 ) : error TS2304: Cannot find name 'ImageData' . myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 340 ,19 ) : error TS2304: Cannot find name 'ImageBitmap' . myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 347 ,86 ) : error TS2304: Cannot find name 'ImageBitmap' . myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 1230 ,33 ) : error TS2304: Cannot find name 'Node' . myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 1359 ,52 ) : error TS2304: Cannot find name 'ImageData' . myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 1359 ,64 ) : error TS2304: Cannot find name 'ImageBitmap' . myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 1387 ,43 ) : error TS2304: Cannot find name 'ImageData' . myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 1387 ,55 ) : error TS2304: Cannot find name 'ImageBitmap' . myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 2027 ,58 ) : error TS2304: Cannot find name 'WebGLContextEvent' . myPackage: \ud83d\udc7e Task \"build \u00bb compile\" failed when executing \"tsc --build\" ( cwd: /Users/<user>/projects/myProject/packages/myPackage ) Solution When you instantiate a TypeScriptProject or extend it, add this to the constructor tsconfig : { compilerOptions : { lib : [ \"es2019\" , \"dom\" ], }, },","title":"@types/mapbox-gl errors"},{"location":"troubleshooting/mapbox-gl-error.html#i-receive-typesmapbox-gl-ts2304-errors","text":"I get this error when I add a CloudscapeReactTsWebsiteProject to my project: myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 328 ,19 ) : error TS2304: Cannot find name 'ImageData' . myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 329 ,19 ) : error TS2304: Cannot find name 'ImageBitmap' . myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 339 ,19 ) : error TS2304: Cannot find name 'ImageData' . myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 340 ,19 ) : error TS2304: Cannot find name 'ImageBitmap' . myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 347 ,86 ) : error TS2304: Cannot find name 'ImageBitmap' . myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 1230 ,33 ) : error TS2304: Cannot find name 'Node' . myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 1359 ,52 ) : error TS2304: Cannot find name 'ImageData' . myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 1359 ,64 ) : error TS2304: Cannot find name 'ImageBitmap' . myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 1387 ,43 ) : error TS2304: Cannot find name 'ImageData' . myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 1387 ,55 ) : error TS2304: Cannot find name 'ImageBitmap' . myPackage: ../../node_modules/@types/mapbox-gl/index.d.ts ( 2027 ,58 ) : error TS2304: Cannot find name 'WebGLContextEvent' . myPackage: \ud83d\udc7e Task \"build \u00bb compile\" failed when executing \"tsc --build\" ( cwd: /Users/<user>/projects/myProject/packages/myPackage )","title":"I receive @types/mapbox-gl TS2304 errors"},{"location":"troubleshooting/mapbox-gl-error.html#solution","text":"When you instantiate a TypeScriptProject or extend it, add this to the constructor tsconfig : { compilerOptions : { lib : [ \"es2019\" , \"dom\" ], }, },","title":"Solution"},{"location":"troubleshooting/new-package-projen-fail.html","text":"I create a new package in my project, but running npx projen fails Make sure that when you create a new package you don\u2019t set any interdependencies neither for the package nor of the package. Dependencies accessible from npm repo are ok. Otherwise, you get an error message that some dependencies are not available. 1 - Create the package // STEP 1 -- create the package new TypeScriptProject ({ parent : this.monorepoProject , outdir : \"packages/my-package\" , defaultReleaseBranch : this.defaultReleaseBranch , name : \"my-package\" , deps : [ \"aws-cdk-lib\" , // <-- this is ok \"constructs\" , myOtherPackage . package . packageName // <-- DON'T ADD dependency to other package ], devDeps : [] }); 2 - run npx projen # Step 2 -- run `npx projen` npx projen 3 - Assign to variable // STEP 3 - Assign to variable const myPackage = new TypeScriptProject ({ // <--- you can assign to a variable now parent : this.monorepoProject , outdir : \"packages/my-package\" , defaultReleaseBranch : this.defaultReleaseBranch , name : \"my-package\" , deps : [ \"aws-cdk-lib\" , \"constructs\" , myOtherPackage . package . packageName // <-- you can add a dependency now ], devDeps : [] }); const myOtherPackage2 = new TypeScriptProject ({ ..., deps : [ ..., myPackage . package . packageName // <-- you can add dependency to your new package in another package ] }); 4 - run npx projen again # STEP 4 -- run \"npx projen\" again npx projen","title":"How to add new project"},{"location":"troubleshooting/new-package-projen-fail.html#i-create-a-new-package-in-my-project-but-running-npx-projen-fails","text":"Make sure that when you create a new package you don\u2019t set any interdependencies neither for the package nor of the package. Dependencies accessible from npm repo are ok. Otherwise, you get an error message that some dependencies are not available.","title":"I create a new package in my project, but running npx projen fails"},{"location":"troubleshooting/new-package-projen-fail.html#1-create-the-package","text":"// STEP 1 -- create the package new TypeScriptProject ({ parent : this.monorepoProject , outdir : \"packages/my-package\" , defaultReleaseBranch : this.defaultReleaseBranch , name : \"my-package\" , deps : [ \"aws-cdk-lib\" , // <-- this is ok \"constructs\" , myOtherPackage . package . packageName // <-- DON'T ADD dependency to other package ], devDeps : [] });","title":"1 - Create the package"},{"location":"troubleshooting/new-package-projen-fail.html#2-run-npx-projen","text":"# Step 2 -- run `npx projen` npx projen","title":"2 - run npx projen"},{"location":"troubleshooting/new-package-projen-fail.html#3-assign-to-variable","text":"// STEP 3 - Assign to variable const myPackage = new TypeScriptProject ({ // <--- you can assign to a variable now parent : this.monorepoProject , outdir : \"packages/my-package\" , defaultReleaseBranch : this.defaultReleaseBranch , name : \"my-package\" , deps : [ \"aws-cdk-lib\" , \"constructs\" , myOtherPackage . package . packageName // <-- you can add a dependency now ], devDeps : [] }); const myOtherPackage2 = new TypeScriptProject ({ ..., deps : [ ..., myPackage . package . packageName // <-- you can add dependency to your new package in another package ] });","title":"3 - Assign to variable"},{"location":"troubleshooting/new-package-projen-fail.html#4-run-npx-projen-again","text":"# STEP 4 -- run \"npx projen\" again npx projen","title":"4 - run npx projen again"},{"location":"troubleshooting/openapi-gw-internal-workspace-remove.html","text":"OpenApiGatewayTsProject / SmithyApiGatewayTsProject \u201cinternal\u201d workspace is not necessary after creation Leaving the workspaces in the project\u2019s package.json may mess with some processes, e.g.: generating typedoc documentation. To remove: mySmithyApiProject . tryFindObjectFile ( \"package.json\" ) ? . addDeletionOverride ( \"workspaces\" );","title":"open-api-gateway workspace removal"},{"location":"troubleshooting/openapi-gw-internal-workspace-remove.html#openapigatewaytsproject-smithyapigatewaytsproject-internal-workspace-is-not-necessary-after-creation","text":"Leaving the workspaces in the project\u2019s package.json may mess with some processes, e.g.: generating typedoc documentation. To remove: mySmithyApiProject . tryFindObjectFile ( \"package.json\" ) ? . addDeletionOverride ( \"workspaces\" );","title":"OpenApiGatewayTsProject / SmithyApiGatewayTsProject \u201cinternal\u201d workspace is not necessary after creation"},{"location":"troubleshooting/override-predefined-task.html","text":"I want to change a \u201cpre-defined\u201d task (e.g.: add --verbose to a tsc compile task) Use the reset function: myPackage . compileTask . reset ( \"tsc --build --verbose\" );","title":"Override pre-defined tasks"},{"location":"troubleshooting/override-predefined-task.html#i-want-to-change-a-pre-defined-task-eg-add-verbose-to-a-tsc-compile-task","text":"Use the reset function: myPackage . compileTask . reset ( \"tsc --build --verbose\" );","title":"I want to change a \u201cpre-defined\u201d task (e.g.: add --verbose to a tsc compile task)"},{"location":"troubleshooting/parameters-between-stacks.html","text":"Passing parameters between CDK stacks will cause Unresolved resource dependencies error while trying to deploy Links Cross stack values do not work with Source.data/jsonData [CDK github] Nested stack runtime-config.json properties [PDK github] TLDR; Create SSM Parameters in the stack where you create e.g.: a userPool // in UserIdentityStack this . userIdentity = new UserIdentity ( this , \"UserIdentity\" ); new StringParameter ( this , \"userPoolIdSsmParam\" , { parameterName : ssmParamNames.userPoolId , stringValue : this.userIdentity.userPool.userPoolId , }); Setup explicit dependencies between stacks/constructs // in ApplicationStack websiteStack . node . addDependency ( userIdentityStack ); Use already created SSM Parameters in the dependent stack // in WebsiteStack const userPoolIdParam = StringParameter . fromStringParameterName ( this , \"userPoolIdSsmParam\" , ssmParamNames . userPoolId ); const website = new StaticWebsite ( this , \"Website\" , { websiteContentPath : ... , runtimeOptions : { jsonPayload : { ..., userPoolId : userPoolIdParam.stringValue , ..., } } })","title":"Unresolved resource dependencies error"},{"location":"troubleshooting/parameters-between-stacks.html#passing-parameters-between-cdk-stacks-will-cause-unresolved-resource-dependencies-error-while-trying-to-deploy","text":"","title":"Passing parameters between CDK stacks will cause Unresolved resource dependencies error while trying to deploy"},{"location":"troubleshooting/parameters-between-stacks.html#links","text":"Cross stack values do not work with Source.data/jsonData [CDK github] Nested stack runtime-config.json properties [PDK github]","title":"Links"},{"location":"troubleshooting/parameters-between-stacks.html#tldr","text":"Create SSM Parameters in the stack where you create e.g.: a userPool // in UserIdentityStack this . userIdentity = new UserIdentity ( this , \"UserIdentity\" ); new StringParameter ( this , \"userPoolIdSsmParam\" , { parameterName : ssmParamNames.userPoolId , stringValue : this.userIdentity.userPool.userPoolId , }); Setup explicit dependencies between stacks/constructs // in ApplicationStack websiteStack . node . addDependency ( userIdentityStack ); Use already created SSM Parameters in the dependent stack // in WebsiteStack const userPoolIdParam = StringParameter . fromStringParameterName ( this , \"userPoolIdSsmParam\" , ssmParamNames . userPoolId ); const website = new StaticWebsite ( this , \"Website\" , { websiteContentPath : ... , runtimeOptions : { jsonPayload : { ..., userPoolId : userPoolIdParam.stringValue , ..., } } })","title":"TLDR;"},{"location":"troubleshooting/projen-samplecode-off.html","text":"I don\u2019t want projen to generate sample code and tests const myPackage = new TypeScriptProject ({ parent : this.monorepoProject , outdir : \"packages/my-package\" , defaultReleaseBranch : this.defaultReleaseBranch , name : \"my-package\" , sampleCode : false , // <-------- turn off sampleCode });","title":"Disable sample code generation"},{"location":"troubleshooting/projen-samplecode-off.html#i-dont-want-projen-to-generate-sample-code-and-tests","text":"const myPackage = new TypeScriptProject ({ parent : this.monorepoProject , outdir : \"packages/my-package\" , defaultReleaseBranch : this.defaultReleaseBranch , name : \"my-package\" , sampleCode : false , // <-------- turn off sampleCode });","title":"I don\u2019t want projen to generate sample code and tests"},{"location":"troubleshooting/react-duplicate-identifier.html","text":"I get react -related duplicate identifier error The error myPackage: ../../../../node_modules/@types/react/index.d.ts ( 3131 ,14 ) : error TS2300: Duplicate identifier 'LibraryManagedAttributes' . myPackage: ../../../../node_modules/@types/react-dom/node_modules/@types/react/index.d.ts ( 3131 ,14 ) : error TS2300: Duplicate identifier 'LibraryManagedAttributes' . myPackage: \ud83d\udc7e Task \"build \u00bb compile\" failed when executing \"tsc --build\" ( cwd: /Users/<user>/projects/myProject/packages/myPackage/generated/typescript ) Solution react-dom depends on @types/react@* while react may have another version in your project, meaning multiple versions are present. // fix react version example monorepoProject . package . addPackageResolutions ( \"@types/react@^18.0.21\" );","title":"React duplicate identifier error"},{"location":"troubleshooting/react-duplicate-identifier.html#i-get-react-related-duplicate-identifier-error","text":"","title":"I get react-related duplicate identifier error"},{"location":"troubleshooting/react-duplicate-identifier.html#the-error","text":"myPackage: ../../../../node_modules/@types/react/index.d.ts ( 3131 ,14 ) : error TS2300: Duplicate identifier 'LibraryManagedAttributes' . myPackage: ../../../../node_modules/@types/react-dom/node_modules/@types/react/index.d.ts ( 3131 ,14 ) : error TS2300: Duplicate identifier 'LibraryManagedAttributes' . myPackage: \ud83d\udc7e Task \"build \u00bb compile\" failed when executing \"tsc --build\" ( cwd: /Users/<user>/projects/myProject/packages/myPackage/generated/typescript )","title":"The error"},{"location":"troubleshooting/react-duplicate-identifier.html#solution","text":"react-dom depends on @types/react@* while react may have another version in your project, meaning multiple versions are present. // fix react version example monorepoProject . package . addPackageResolutions ( \"@types/react@^18.0.21\" );","title":"Solution"},{"location":"troubleshooting/react-router-dom-reload-fail.html","text":"My react-router-dom router doesn\u2019t work when reloading the page or loading with a non-root URL Reference link: aws-prototyping-sdk#69 Add distributionProps to your StaticWebsite : import { StaticWebsite , StaticWebsiteOrigin , } from \"@aws-prototyping-sdk/static-website\" ; ... const adminWebsite = new StaticWebsite ( this , \"Website\" , { websiteContentPath : path.join ( appsDir , \"website\" , \"build\" ), runtimeOptions : { jsonPayload : { region : Stack.of ( this ). region , identityPoolId : identityPoolIdParam.stringValue , userPoolId : userPoolIdParam.stringValue , userPoolWebClientId : userPoolClientIdParam.stringValue , apiUrl : webApiUrlParam.stringValue , }, }, distributionProps : { defaultBehavior : { origin : StaticWebsiteOrigin , }, errorResponses : [ { httpStatus : 404 , responseHttpStatus : 404 , responsePagePath : \"/\" , }, ], }, });","title":"react-router-dom page reload"},{"location":"troubleshooting/react-router-dom-reload-fail.html#my-react-router-dom-router-doesnt-work-when-reloading-the-page-or-loading-with-a-non-root-url","text":"Reference link: aws-prototyping-sdk#69 Add distributionProps to your StaticWebsite : import { StaticWebsite , StaticWebsiteOrigin , } from \"@aws-prototyping-sdk/static-website\" ; ... const adminWebsite = new StaticWebsite ( this , \"Website\" , { websiteContentPath : path.join ( appsDir , \"website\" , \"build\" ), runtimeOptions : { jsonPayload : { region : Stack.of ( this ). region , identityPoolId : identityPoolIdParam.stringValue , userPoolId : userPoolIdParam.stringValue , userPoolWebClientId : userPoolClientIdParam.stringValue , apiUrl : webApiUrlParam.stringValue , }, }, distributionProps : { defaultBehavior : { origin : StaticWebsiteOrigin , }, errorResponses : [ { httpStatus : 404 , responseHttpStatus : 404 , responsePagePath : \"/\" , }, ], }, });","title":"My react-router-dom router doesn\u2019t work when reloading the page or loading with a non-root URL"},{"location":"troubleshooting/smithy-pascalcase-fieldname.html","text":"I have PascalCase field names of my structure definition in a Smithy model In general, generated code is making all field names of Smithy models camelCase and it takes care of marshalling/unmarshalling those models from/to JSON. When you\u2019re using your generated handler code and/or trying to feed your data into your services, use the generated xxxFromJSON functions ON THE TOP LEVEL . Example const resp = await ddbClient . query (...). promise (); ... // wrong - will fail - if you have any PascalCase attribute names in any of the \"item\"s return { statusCode : 200 , headers : corsHeaders , body : ListMyEntityResponseContentFromJSON ({ data : resp.Items.map (( item ) => MyEntityFromJSON ( item )), }), }; const resp = await ddbClient . query (...). promise (); ... // right - only use \"top level\" <EntityName>FromJSON method return { statusCode : 200 , headers : corsHeaders , body : ListMyEntityResponseContentFromJSON ({ data : resp.Items , }), }; Note In general, when it comes to generated code, the following rules apply: <EntityName>FromJSON will create an internal representation of the entity (i.e.: PascalCase field names are converted to camelCase ). Use this method after you fetched your data (e.g.: from DB) and try to send it over the network , while handling it with the same generated code on the client side. <EntityName>ToJSON will create the real (original) representation of your data from the internal representation (i.e.: internally camelCase field names are converted back to PascalCase ). Use this if you received data from the client side (serialized by the generated code) and would like to store your data in a data store .","title":"Smithy PascalCase field names"},{"location":"troubleshooting/smithy-pascalcase-fieldname.html#i-have-pascalcase-field-names-of-my-structure-definition-in-a-smithy-model","text":"In general, generated code is making all field names of Smithy models camelCase and it takes care of marshalling/unmarshalling those models from/to JSON. When you\u2019re using your generated handler code and/or trying to feed your data into your services, use the generated xxxFromJSON functions ON THE TOP LEVEL .","title":"I have PascalCase field names of my structure definition in a Smithy model"},{"location":"troubleshooting/smithy-pascalcase-fieldname.html#example","text":"const resp = await ddbClient . query (...). promise (); ... // wrong - will fail - if you have any PascalCase attribute names in any of the \"item\"s return { statusCode : 200 , headers : corsHeaders , body : ListMyEntityResponseContentFromJSON ({ data : resp.Items.map (( item ) => MyEntityFromJSON ( item )), }), }; const resp = await ddbClient . query (...). promise (); ... // right - only use \"top level\" <EntityName>FromJSON method return { statusCode : 200 , headers : corsHeaders , body : ListMyEntityResponseContentFromJSON ({ data : resp.Items , }), };","title":"Example"},{"location":"troubleshooting/smithy-pascalcase-fieldname.html#note","text":"In general, when it comes to generated code, the following rules apply: <EntityName>FromJSON will create an internal representation of the entity (i.e.: PascalCase field names are converted to camelCase ). Use this method after you fetched your data (e.g.: from DB) and try to send it over the network , while handling it with the same generated code on the client side. <EntityName>ToJSON will create the real (original) representation of your data from the internal representation (i.e.: internally camelCase field names are converted back to PascalCase ). Use this if you received data from the client side (serialized by the generated code) and would like to store your data in a data store .","title":"Note"},{"location":"troubleshooting/typedoc-config-package.html","text":"Fine-tune typedoc configuration inside packages myProject . addFields ({ typedoc : { entryPoint : \"src/index.ts\" , readmeFile : \"./README.md\" , displayName : \"My Project\" , tsConfig : \"./tsconfig.json\" } }); Check the typedoc docs for setting up for monorepo: https://typedoc.org/guides/monorepo/","title":"Package-level typedoc config"},{"location":"troubleshooting/typedoc-config-package.html#fine-tune-typedoc-configuration-inside-packages","text":"myProject . addFields ({ typedoc : { entryPoint : \"src/index.ts\" , readmeFile : \"./README.md\" , displayName : \"My Project\" , tsConfig : \"./tsconfig.json\" } }); Check the typedoc docs for setting up for monorepo: https://typedoc.org/guides/monorepo/","title":"Fine-tune typedoc configuration inside packages"},{"location":"troubleshooting/typedoc-heap-out-of-mem-error.html","text":"typedoc fails while generating docs with Javascript heap out of memory error Set max_old_space_size in NODE_OPTIONS : myMonoRepo . addTask ( \"doc:generate\" , { exec : \"NODE_OPTIONS=--max_old_space_size=16384 npx typedoc\" , // experiment with the value needed }); Note: Make sure there is enough RAM in your code build environment if you automate this using CodePipeline .","title":"Typedoc JS heap out of mem error"},{"location":"troubleshooting/typedoc-heap-out-of-mem-error.html#typedoc-fails-while-generating-docs-with-javascript-heap-out-of-memory-error","text":"Set max_old_space_size in NODE_OPTIONS : myMonoRepo . addTask ( \"doc:generate\" , { exec : \"NODE_OPTIONS=--max_old_space_size=16384 npx typedoc\" , // experiment with the value needed }); Note: Make sure there is enough RAM in your code build environment if you automate this using CodePipeline .","title":"typedoc fails while generating docs with Javascript heap out of memory error"},{"location":"typescript/aws-arch/index.html","text":"Experimental Warning This is packaged in a separate module while the API is being stabilized. This package is subject to non-backward compatible changes or removal in any future version. Breaking changes will be announced in the release notes. Whilst you may use this package, you may need to update your source code when upgrading to a newer version. Once we stabilize the module, it will be included into the stable aws-prototyping-sdk library. Experimental Usage To use this package, add a dependency on: @aws-prototyping-sdk/aws-arch aws-arch (AWS Architecture) Library to provide metadata for AWS Services and AWS Resources. This package generates mappings between @aws-cdk/cfnspec and AWS Architecture Icons , and resolves resource metadata between these systems to infer a normalized definition of an AwsService and AwsResource . The primary aim of this package is to provide a consistent mechanism for other libraries to retrieve naming and assets associated with CloudFormation resources, and by extension CDK resources. Get Started yarn add '@aws-prototyping-sdk/aws-arch' import { AwsArchitecture } from \"@aws-prototyping-sdk/aws-arch\" ; const s3Bucket = AwsArchitecture . getResource ( \"AWS::S3::Bucket\" ); const s3Service = AwsArchitecture . getService ( s3Bucket . service ); console . log ( s3Bucket ); console . log ( s3Service ); // => console.log(s3Bucket); { \"name\" : \"Amazon Simple Storage Service Bucket\" , \"cfnType\" : \"AWS::S3::Bucket\" , \"awsAssetName\" : \"Amazon-Simple-Storage-Service_Bucket\" , \"awsAssetIcon\" : \"resources/Amazon-Simple-Storage-Service_Bucket.png\" , \"service\" : \"S3\" } // => console.log(s3Service); { \"provider\" : \"AWS\" , \"name\" : \"Amazon Simple Storage Service\" , \"cfnName\" : \"S3\" , \"awsAssetIcon\" : \"services/Amazon-Simple-Storage-Service.png\" , \"awsAssetName\" : \"Amazon-Simple-Storage-Service\" } Aws Achritecture Icons Retrieve category , service , and resource AWS Architecture Icons . Icon methods return relative asset key paths, as most frameworks have the concept of a base path (imagepaths). Use AwsArchitecture.resolveAssetPath(...) to get absolute path. Retrieve icon based on CloudFormation Resource Type Resource Icon const s3Bucket = AwsArchitecture . getResource ( \"AWS::S3::Bucket\" ); const s3BucketPng = s3Bucket . icon ( \"png\" ); // => \"storage/s3/bucket.png\" const s3BucketSvg = s3Bucket . icon ( \"svg\" ); // => \"storage/s3/bucket.svg\" // Resolve absolute path for icons AwsArchitecture . resolveAssetPath ( s3BucketPng ); // => /User/example/.../node_modules/@aws-prototyping-sdk/aws-arc/assets/storage/s3/bucket.png Service Icon const s3Service = AwsArchitecture . getResource ( \"AWS::S3::Bucket\" ). service ; // equivalent to: `AwsArchitecture.getService(\"S3\")` const s3ServicePng = s3Service . icon ( \"png\" ); // => \"storage/s3/service_icon.png\" const s3ServiceSvg = s3Service . icon ( \"svg\" ); // => \"storage/s3/service_icon.svg\" // Resolve absolute path for icons AwsArchitecture . resolveAssetPath ( s3ServicePng ); // => /User/example/.../node_modules/@aws-prototyping-sdk/aws-arc/assets/storage/s3/service_icon.png Category Icon const storageCategory = AwsArchitecture . getResource ( \"AWS::S3::Bucket\" ). service . category ; // equivalent to: `AwsArchitecture.getCategory(\"storage\")` const storageCategoryPng = storageCategory . icon ( \"png\" ); // => \"storage/category_icon.png\" const storageCategorySvg = storageCategory . icon ( \"svg\" ); // => \"storage/category_icon.svg\" // Resolve absolute path for icons AwsArchitecture . resolveAssetPath ( storageCategoryPng ); // => /User/example/.../node_modules/@aws-prototyping-sdk/aws-arc/assets/storage/category_icon.png Development This package auto-generates many types and asset files from external sources, which are then auto mapped based on common patterns and explict mappings for edge-cases. The auto-generation is handled by /scripts files which can be run via corresponding package scripts (eg: npx projen generate:assets => /scripts/generate-assets.ts ). There is an implicit sequential order the scripts must be called in due to dependencies, which is handled by npx projen generate script. The generate script is also invoked prior to npx projen build if generated asset directory does not exist. For local development of packages that depend on aws-arch package, you will need to call npx projen generate && npx projen compile (or npx projen build ) prior to locally importing this package. To update AWS Architecture Icons , change the url in ASSET_PACKAGE_ZIP_URL . API Reference Structs ArrowFormat Theme arrow format definition. Initializer import { aws_arch } from '@aws-prototyping-sdk/aws-arch' const arrowFormat : aws_arch.ArrowFormat = { ... } Properties Name Type Description color string | boolean No description. head string No description. style string No description. tail string No description. width number No description. color Required public readonly color : string | boolean ; Type: string | boolean head Required public readonly head : string ; Type: string style Required public readonly style : string ; Type: string tail Required public readonly tail : string ; Type: string width Required public readonly width : number ; Type: number AwsCategoryDefinition Category definition. Initializer import { aws_arch } from '@aws-prototyping-sdk/aws-arch' const awsCategoryDefinition : aws_arch.AwsCategoryDefinition = { ... } Properties Name Type Description fillColor string No description. gradientColor string No description. id string No description. name string No description. fontColor string No description. variants string[] No description. fillColor Required public readonly fillColor : string ; Type: string gradientColor Required public readonly gradientColor : string ; Type: string id Required public readonly id : string ; Type: string name Required public readonly name : string ; Type: string fontColor Optional public readonly fontColor : string ; Type: string variants Optional public readonly variants : string []; Type: string[] AwsDrawioResourceIconStyle Drawio resource icon style definition for AWS Resources. Initializer import { AwsDrawioResourceIconStyle } from '@aws-prototyping-sdk/aws-arch' const awsDrawioResourceIconStyle : AwsDrawioResourceIconStyle = { ... } Properties Name Type Description align string No description. aspect string No description. dashed number No description. fontSize number No description. fontStyle string | number No description. gradientDirection string No description. html number No description. outlineConnect number No description. strokeColor string No description. verticalAlign string No description. verticalLabelPosition string No description. pointerEvent number No description. fillColor string No description. fontColor string No description. gradientColor string No description. resIcon aws-prototyping-sdk/aws-arch.aws_arch.DrawioSpec.Aws4.ShapeNames No description. shape aws-prototyping-sdk/aws-arch.aws_arch.DrawioAws4ParentShapes No description. align Required public readonly align : string ; Type: string aspect Required public readonly aspect : string ; Type: string dashed Required public readonly dashed : number ; Type: number fontSize Required public readonly fontSize : number ; Type: number fontStyle Required public readonly fontStyle : string | number ; Type: string | number gradientDirection Required public readonly gradientDirection : string ; Type: string html Required public readonly html : number ; Type: number outlineConnect Required public readonly outlineConnect : number ; Type: number strokeColor Required public readonly strokeColor : string ; Type: string verticalAlign Required public readonly verticalAlign : string ; Type: string verticalLabelPosition Required public readonly verticalLabelPosition : string ; Type: string pointerEvent Optional public readonly pointerEvent : number ; Type: number fillColor Required public readonly fillColor : string ; Type: string fontColor Required public readonly fontColor : string ; Type: string gradientColor Required public readonly gradientColor : string ; Type: string resIcon Required public readonly resIcon : ShapeNames ; Type: aws-prototyping-sdk/aws-arch.aws_arch.DrawioSpec.Aws4.ShapeNames shape Required public readonly shape : DrawioAws4ParentShapes ; Type: aws-prototyping-sdk/aws-arch.aws_arch.DrawioAws4ParentShapes AwsDrawioShapeStyle Drawio shape based style definition. Initializer import { AwsDrawioShapeStyle } from '@aws-prototyping-sdk/aws-arch' const awsDrawioShapeStyle : AwsDrawioShapeStyle = { ... } Properties Name Type Description align string No description. aspect string No description. dashed number No description. fontSize number No description. fontStyle string | number No description. gradientDirection string No description. html number No description. outlineConnect number No description. strokeColor string No description. verticalAlign string No description. verticalLabelPosition string No description. pointerEvent number No description. fillColor string No description. fontColor string No description. gradientColor string No description. shape aws-prototyping-sdk/aws-arch.aws_arch.DrawioSpec.Aws4.ShapeNames No description. align Required public readonly align : string ; Type: string aspect Required public readonly aspect : string ; Type: string dashed Required public readonly dashed : number ; Type: number fontSize Required public readonly fontSize : number ; Type: number fontStyle Required public readonly fontStyle : string | number ; Type: string | number gradientDirection Required public readonly gradientDirection : string ; Type: string html Required public readonly html : number ; Type: number outlineConnect Required public readonly outlineConnect : number ; Type: number strokeColor Required public readonly strokeColor : string ; Type: string verticalAlign Required public readonly verticalAlign : string ; Type: string verticalLabelPosition Required public readonly verticalLabelPosition : string ; Type: string pointerEvent Optional public readonly pointerEvent : number ; Type: number fillColor Required public readonly fillColor : string ; Type: string fontColor Required public readonly fontColor : string ; Type: string gradientColor Required public readonly gradientColor : string ; Type: string shape Required public readonly shape : ShapeNames ; Type: aws-prototyping-sdk/aws-arch.aws_arch.DrawioSpec.Aws4.ShapeNames DrawioAwsResourceIconStyleBase Based style definition for drawio aws resource icon. Initializer import { aws_arch } from '@aws-prototyping-sdk/aws-arch' const drawioAwsResourceIconStyleBase : aws_arch.DrawioAwsResourceIconStyleBase = { ... } Properties Name Type Description align string No description. aspect string No description. dashed number No description. fontSize number No description. fontStyle string | number No description. gradientDirection string No description. html number No description. outlineConnect number No description. strokeColor string No description. verticalAlign string No description. verticalLabelPosition string No description. pointerEvent number No description. fillColor string No description. fontColor string No description. gradientColor string No description. align Required public readonly align : string ; Type: string aspect Required public readonly aspect : string ; Type: string dashed Required public readonly dashed : number ; Type: number fontSize Required public readonly fontSize : number ; Type: number fontStyle Required public readonly fontStyle : string | number ; Type: string | number gradientDirection Required public readonly gradientDirection : string ; Type: string html Required public readonly html : number ; Type: number outlineConnect Required public readonly outlineConnect : number ; Type: number strokeColor Required public readonly strokeColor : string ; Type: string verticalAlign Required public readonly verticalAlign : string ; Type: string verticalLabelPosition Required public readonly verticalLabelPosition : string ; Type: string pointerEvent Optional public readonly pointerEvent : number ; Type: number fillColor Required public readonly fillColor : string ; Type: string fontColor Required public readonly fontColor : string ; Type: string gradientColor Required public readonly gradientColor : string ; Type: string DrawioAwsShapeStyleBase Base definition of drawio aws shape style. Initializer import { aws_arch } from '@aws-prototyping-sdk/aws-arch' const drawioAwsShapeStyleBase : aws_arch.DrawioAwsShapeStyleBase = { ... } Properties Name Type Description align string No description. aspect string No description. dashed number No description. fontSize number No description. fontStyle string | number No description. gradientDirection string No description. html number No description. outlineConnect number No description. strokeColor string No description. verticalAlign string No description. verticalLabelPosition string No description. pointerEvent number No description. align Required public readonly align : string ; Type: string aspect Required public readonly aspect : string ; Type: string dashed Required public readonly dashed : number ; Type: number fontSize Required public readonly fontSize : number ; Type: number fontStyle Required public readonly fontStyle : string | number ; Type: string | number gradientDirection Required public readonly gradientDirection : string ; Type: string html Required public readonly html : number ; Type: number outlineConnect Required public readonly outlineConnect : number ; Type: number strokeColor Required public readonly strokeColor : string ; Type: string verticalAlign Required public readonly verticalAlign : string ; Type: string verticalLabelPosition Required public readonly verticalLabelPosition : string ; Type: string pointerEvent Optional public readonly pointerEvent : number ; Type: number GroupFormat Theme group format definition. Initializer import { aws_arch } from '@aws-prototyping-sdk/aws-arch' const groupFormat : aws_arch.GroupFormat = { ... } Properties Name Type Description bgcolor string | boolean No description. borderColor string | boolean No description. borderStyle string No description. color string | boolean No description. iconPng string No description. labelLocation string No description. bgcolor Required public readonly bgcolor : string | boolean ; Type: string | boolean borderColor Required public readonly borderColor : string | boolean ; Type: string | boolean borderStyle Required public readonly borderStyle : string ; Type: string color Required public readonly color : string | boolean ; Type: string | boolean iconPng Optional public readonly iconPng : string ; Type: string labelLocation Optional public readonly labelLocation : string ; Type: string ParsedAssetKey Parsed asset key. Initializer import { ParsedAssetKey } from '@aws-prototyping-sdk/aws-arch' const parsedAssetKey : ParsedAssetKey = { ... } Properties Name Type Description assetKey string Reference to the full key that was parsed. basename string The last segment of the key (which is the nested icon). category string Category id. instanceType string The instance type if key is for an ec2 instance. iotThing string The iot thing if key is for an iot thing. resource string Resource id if key is for a resource. service string Service id if key is partitioned by resource. assetKey Required public readonly assetKey : string ; Type: string Reference to the full key that was parsed. basename Required public readonly basename : string ; Type: string The last segment of the key (which is the nested icon). For instances and things this includes the dir prefix. category Required public readonly category : string ; Type: string Category id. instanceType Optional public readonly instanceType : string ; Type: string The instance type if key is for an ec2 instance. iotThing Optional public readonly iotThing : string ; Type: string The iot thing if key is for an iot thing. resource Optional public readonly resource : string ; Type: string Resource id if key is for a resource. service Optional public readonly service : string ; Type: string Service id if key is partitioned by resource. ParsedAssetKey Parsed asset key. Initializer import { aws_arch } from '@aws-prototyping-sdk/aws-arch' const parsedAssetKey : aws_arch.ParsedAssetKey = { ... } Properties Name Type Description assetKey string Reference to the full key that was parsed. basename string The last segment of the key (which is the nested icon). category string Category id. instanceType string The instance type if key is for an ec2 instance. iotThing string The iot thing if key is for an iot thing. resource string Resource id if key is for a resource. service string Service id if key is partitioned by resource. assetKey Required public readonly assetKey : string ; Type: string Reference to the full key that was parsed. basename Required public readonly basename : string ; Type: string The last segment of the key (which is the nested icon). For instances and things this includes the dir prefix. category Required public readonly category : string ; Type: string Category id. instanceType Optional public readonly instanceType : string ; Type: string The instance type if key is for an ec2 instance. iotThing Optional public readonly iotThing : string ; Type: string The iot thing if key is for an iot thing. resource Optional public readonly resource : string ; Type: string Resource id if key is for a resource. service Optional public readonly service : string ; Type: string Service id if key is partitioned by resource. Theme Theme definition. Initializer import { aws_arch } from '@aws-prototyping-sdk/aws-arch' const theme : aws_arch.Theme = { ... } Properties Name Type Description arrows aws-prototyping-sdk/aws-arch.aws_arch.ThemeArrows No description. backgrounds aws-prototyping-sdk/aws-arch.aws_arch.ThemeBackgrounds No description. groups aws-prototyping-sdk/aws-arch.aws_arch.ThemeGroups No description. id string No description. text aws-prototyping-sdk/aws-arch.aws_arch.ThemeText No description. arrows Required public readonly arrows : ThemeArrows ; Type: aws-prototyping-sdk/aws-arch.aws_arch.ThemeArrows backgrounds Required public readonly backgrounds : ThemeBackgrounds ; Type: aws-prototyping-sdk/aws-arch.aws_arch.ThemeBackgrounds groups Required public readonly groups : ThemeGroups ; Type: aws-prototyping-sdk/aws-arch.aws_arch.ThemeGroups id Required public readonly id : string ; Type: string text Required public readonly text : ThemeText ; Type: aws-prototyping-sdk/aws-arch.aws_arch.ThemeText ThemeArrows Theme arrow dictionary. Initializer import { aws_arch } from '@aws-prototyping-sdk/aws-arch' const themeArrows : aws_arch.ThemeArrows = { ... } Properties Name Type Description child aws-prototyping-sdk/aws-arch.aws_arch.ArrowFormat No description. default aws-prototyping-sdk/aws-arch.aws_arch.ArrowFormat No description. dependency aws-prototyping-sdk/aws-arch.aws_arch.ArrowFormat No description. reference aws-prototyping-sdk/aws-arch.aws_arch.ArrowFormat No description. child Required public readonly child : ArrowFormat ; Type: aws-prototyping-sdk/aws-arch.aws_arch.ArrowFormat default Required public readonly default : ArrowFormat ; Type: aws-prototyping-sdk/aws-arch.aws_arch.ArrowFormat dependency Required public readonly dependency : ArrowFormat ; Type: aws-prototyping-sdk/aws-arch.aws_arch.ArrowFormat reference Required public readonly reference : ArrowFormat ; Type: aws-prototyping-sdk/aws-arch.aws_arch.ArrowFormat ThemeBackgrounds Theme background dictionary. Initializer import { aws_arch } from '@aws-prototyping-sdk/aws-arch' const themeBackgrounds : aws_arch.ThemeBackgrounds = { ... } Properties Name Type Description base string No description. generic string No description. private string No description. public string No description. base Required public readonly base : string ; Type: string generic Required public readonly generic : string ; Type: string private Required public readonly private : string ; Type: string public Required public readonly public : string ; Type: string ThemeGroups Theme group dicionary. Initializer import { aws_arch } from '@aws-prototyping-sdk/aws-arch' const themeGroups : aws_arch.ThemeGroups = { ... } Properties Name Type Description autoScalingGroup aws-prototyping-sdk/aws-arch.aws_arch.GroupFormat No description. availabilityZone aws-prototyping-sdk/aws-arch.aws_arch.GroupFormat No description. awsAccount aws-prototyping-sdk/aws-arch.aws_arch.GroupFormat No description. awsIoTGreengrass aws-prototyping-sdk/aws-arch.aws_arch.GroupFormat No description. awsIoTGreengrassDeployment aws-prototyping-sdk/aws-arch.aws_arch.GroupFormat No description. awsStepFunctionsWorkflow aws-prototyping-sdk/aws-arch.aws_arch.GroupFormat No description. cloud aws-prototyping-sdk/aws-arch.aws_arch.GroupFormat No description. cloudAlt aws-prototyping-sdk/aws-arch.aws_arch.GroupFormat No description. corporateDataCenter aws-prototyping-sdk/aws-arch.aws_arch.GroupFormat No description. ec2InstanceContents aws-prototyping-sdk/aws-arch.aws_arch.GroupFormat No description. elasticBeanstalkContainer aws-prototyping-sdk/aws-arch.aws_arch.GroupFormat No description. generic aws-prototyping-sdk/aws-arch.aws_arch.GroupFormat No description. genericAlt aws-prototyping-sdk/aws-arch.aws_arch.GroupFormat No description. privateSubnet aws-prototyping-sdk/aws-arch.aws_arch.GroupFormat No description. publicSubnet aws-prototyping-sdk/aws-arch.aws_arch.GroupFormat No description. region aws-prototyping-sdk/aws-arch.aws_arch.GroupFormat No description. securityGroup aws-prototyping-sdk/aws-arch.aws_arch.GroupFormat No description. serverContents aws-prototyping-sdk/aws-arch.aws_arch.GroupFormat No description. spotFleet aws-prototyping-sdk/aws-arch.aws_arch.GroupFormat No description. vpc aws-prototyping-sdk/aws-arch.aws_arch.GroupFormat No description. autoScalingGroup Required public readonly autoScalingGroup : GroupFormat ; Type: aws-prototyping-sdk/aws-arch.aws_arch.GroupFormat availabilityZone Required public readonly availabilityZone : GroupFormat ; Type: aws-prototyping-sdk/aws-arch.aws_arch.GroupFormat awsAccount Required public readonly awsAccount : GroupFormat ; Type: aws-prototyping-sdk/aws-arch.aws_arch.GroupFormat awsIoTGreengrass Required public readonly awsIoTGreengrass : GroupFormat ; Type: aws-prototyping-sdk/aws-arch.aws_arch.GroupFormat awsIoTGreengrassDeployment Required public readonly awsIoTGreengrassDeployment : GroupFormat ; Type: aws-prototyping-sdk/aws-arch.aws_arch.GroupFormat awsStepFunctionsWorkflow Required public readonly awsStepFunctionsWorkflow : GroupFormat ; Type: aws-prototyping-sdk/aws-arch.aws_arch.GroupFormat cloud Required public readonly cloud : GroupFormat ; Type: aws-prototyping-sdk/aws-arch.aws_arch.GroupFormat cloudAlt Required public readonly cloudAlt : GroupFormat ; Type: aws-prototyping-sdk/aws-arch.aws_arch.GroupFormat corporateDataCenter Required public readonly corporateDataCenter : GroupFormat ; Type: aws-prototyping-sdk/aws-arch.aws_arch.GroupFormat ec2InstanceContents Required public readonly ec2InstanceContents : GroupFormat ; Type: aws-prototyping-sdk/aws-arch.aws_arch.GroupFormat elasticBeanstalkContainer Required public readonly elasticBeanstalkContainer : GroupFormat ; Type: aws-prototyping-sdk/aws-arch.aws_arch.GroupFormat generic Required public readonly generic : GroupFormat ; Type: aws-prototyping-sdk/aws-arch.aws_arch.GroupFormat genericAlt Required public readonly genericAlt : GroupFormat ; Type: aws-prototyping-sdk/aws-arch.aws_arch.GroupFormat privateSubnet Required public readonly privateSubnet : GroupFormat ; Type: aws-prototyping-sdk/aws-arch.aws_arch.GroupFormat publicSubnet Required public readonly publicSubnet : GroupFormat ; Type: aws-prototyping-sdk/aws-arch.aws_arch.GroupFormat region Required public readonly region : GroupFormat ; Type: aws-prototyping-sdk/aws-arch.aws_arch.GroupFormat securityGroup Required public readonly securityGroup : GroupFormat ; Type: aws-prototyping-sdk/aws-arch.aws_arch.GroupFormat serverContents Required public readonly serverContents : GroupFormat ; Type: aws-prototyping-sdk/aws-arch.aws_arch.GroupFormat spotFleet Required public readonly spotFleet : GroupFormat ; Type: aws-prototyping-sdk/aws-arch.aws_arch.GroupFormat vpc Required public readonly vpc : GroupFormat ; Type: aws-prototyping-sdk/aws-arch.aws_arch.GroupFormat ThemeText Theme text dictionary. Initializer import { aws_arch } from '@aws-prototyping-sdk/aws-arch' const themeText : aws_arch.ThemeText = { ... } Properties Name Type Description default string No description. primary string No description. secondary string No description. tertiary string No description. default Required public readonly default : string ; Type: string primary Required public readonly primary : string ; Type: string secondary Required public readonly secondary : string ; Type: string tertiary Required public readonly tertiary : string ; Type: string Classes AwsArchitecture AwsArchitecture provides an interface for retrieving the inferred normalization between @aws-cdk/cfnspec and AWS Architecture Icons systems for all CloudFormation \"services\" and \"resources\". Static Functions Name Description formatAssetPath Gets formatted asset path including extension and theme. getCategory Get specific category based on id. getInstanceTypeIcon Get icon for EC2 instance type. getRdsInstanceTypeIcon Get icon for RDS instance type. getResource Get resource based on Cfn Resource Type (eg: AWS::S3::Bucket). getService Get specific service based on identifier (eg: S3, AWS::S3, AWS::S3::Bucket). parseAssetPath Parse assets path into part descriptor. resolveAssetPath Resolve relative asset path to absolute asset path. resolveAssetSvgDataUrl Resolve relative asset path as SVG Data URL . formatAssetPath import { AwsArchitecture } from '@aws-prototyping-sdk/aws-arch' AwsArchitecture . formatAssetPath ( qualifiedAssetKey : string , format : string , theme? : string ) Gets formatted asset path including extension and theme. qualifiedAssetKey Required Type: string The qualified asset key (eg: compute/ec2/service_icon, storage/s3/bucket). format Required Type: string The format to return (eg: png, svg). theme Optional Type: string (Optional) The theme to use, if not specific or now matching asset for the them, the default theme is used. getCategory import { AwsArchitecture } from '@aws-prototyping-sdk/aws-arch' AwsArchitecture . getCategory ( category : string ) Get specific category based on id. {@link AwsCategory.getCategory} category Required Type: string getInstanceTypeIcon import { AwsArchitecture } from '@aws-prototyping-sdk/aws-arch' AwsArchitecture . getInstanceTypeIcon ( instanceType : string , format? : string , theme? : string ) Get icon for EC2 instance type. instanceType Required Type: string The { @link AwsAsset.InstanceType} to get icon for. format Optional Type: string The format of icon. theme Optional Type: string Optional theme. getRdsInstanceTypeIcon import { AwsArchitecture } from '@aws-prototyping-sdk/aws-arch' AwsArchitecture . getRdsInstanceTypeIcon ( instanceType : string , format? : string , theme? : string ) Get icon for RDS instance type. instanceType Required Type: string The { @link AwsAsset.RdsInstanceType} to get icon for. format Optional Type: string The format of icon. theme Optional Type: string Optional theme. getResource import { AwsArchitecture } from '@aws-prototyping-sdk/aws-arch' AwsArchitecture . getResource ( cfnType : string ) Get resource based on Cfn Resource Type (eg: AWS::S3::Bucket). {@link AwsResource.getResource} cfnType Required Type: string getService import { AwsArchitecture } from '@aws-prototyping-sdk/aws-arch' AwsArchitecture . getService ( identifier : string ) Get specific service based on identifier (eg: S3, AWS::S3, AWS::S3::Bucket). {@link AwsSerfice.getService} identifier Required Type: string parseAssetPath import { AwsArchitecture } from '@aws-prototyping-sdk/aws-arch' AwsArchitecture . parseAssetPath ( assetPath : string ) Parse assets path into part descriptor. assetPath Required Type: string Absolute or relative asset file path to parse. resolveAssetPath import { AwsArchitecture } from '@aws-prototyping-sdk/aws-arch' AwsArchitecture . resolveAssetPath ( assetPath : string ) Resolve relative asset path to absolute asset path. assetPath Required Type: string The relative asset path to resolve. resolveAssetSvgDataUrl import { AwsArchitecture } from '@aws-prototyping-sdk/aws-arch' AwsArchitecture . resolveAssetSvgDataUrl ( svgAssetPath : string ) Resolve relative asset path as SVG Data URL . data:image/svg+xml;base64,... svgAssetPath Required Type: string The relative path of svg asset to resolve. Properties Name Type Description assetDirectory string The absolute directory where AWS Architecture Icons are stored and retrieved. categories {[ key: string ]: AwsCategory } Get all categories. resources {[ key: string ]: AwsResource } Get all resources. services {[ key: string ]: AwsService } Get all services. assetDirectory Required public readonly assetDirectory : string ; Type: string The absolute directory where AWS Architecture Icons are stored and retrieved. categories Required public readonly categories : {[ key : string ] : AwsCategory }; Type: {[ key: string ]: AwsCategory } Get all categories. {@link AwsCategory.categories} resources Required public readonly resources : {[ key : string ] : AwsResource }; Type: {[ key: string ]: AwsResource } Get all resources. {@link AwsResource.resources} services Required public readonly services : {[ key : string ] : AwsService }; Type: {[ key: string ]: AwsService } Get all services. {@link AwsService.services} AwsCategory AwsCategory class provides an interface for normalizing category metadata between mapped systems. Methods Name Description categoryServices Gets a list of all services within this category. icon Retrieves a well-formatted relative path to the icon for this given category in the specified format. categoryServices public categoryServices () : AwsService [] Gets a list of all services within this category. icon public icon ( format : string , theme? : string ) : string Retrieves a well-formatted relative path to the icon for this given category in the specified format. format Required Type: string theme Optional Type: string Static Functions Name Description getCategory Get { @link AwsCategory} based on { @link AwsCategoryId}. getCategory import { AwsCategory } from '@aws-prototyping-sdk/aws-arch' AwsCategory . getCategory ( id : string ) Get { @link AwsCategory} based on { @link AwsCategoryId}. id Required Type: string The id of the category to retrieve. Properties Name Type Description categories {[ key: string ]: AwsCategory } Get record of all categories keyed by category id. fillColor string Fill color for the category. fontColor string Font color for the category. gradientColor string Gradien color for the category. id string The unique id of the category. name string The proper name of the category. variants string[] Alternative names used to identity this category. drawioStyles AwsCategoryDrawioStyles Drawio style definition for this category. categories Required public readonly categories : {[ key : string ] : AwsCategory }; Type: {[ key: string ]: AwsCategory } Get record of all categories keyed by category id. fillColor Required public readonly fillColor : string ; Type: string Fill color for the category. fontColor Required public readonly fontColor : string ; Type: string Font color for the category. gradientColor Required public readonly gradientColor : string ; Type: string Gradien color for the category. id Required public readonly id : string ; Type: string The unique id of the category. Example \"security_identity_compliance\" name Required public readonly name : string ; Type: string The proper name of the category. Example \"Security, Identity, & Compliance\" variants Required public readonly variants : string []; Type: string[] Alternative names used to identity this category. drawioStyles Optional public readonly drawioStyles : AwsCategoryDrawioStyles ; Type: AwsCategoryDrawioStyles Drawio style definition for this category. AwsCategoryDrawioStyles AwsCategoryDrawioStyles is a utility class for constructing drawio shape styles for services and resources. Initializers import { AwsCategoryDrawioStyles } from '@aws-prototyping-sdk/aws-arch' new AwsCategoryDrawioStyles ( categoryShape : ShapeNames , base : DrawioAwsResourceIconStyleBase ) Name Type Description categoryShape aws-prototyping-sdk/aws-arch.aws_arch.DrawioSpec.Aws4.ShapeNames No description. base aws-prototyping-sdk/aws-arch.aws_arch.DrawioAwsResourceIconStyleBase No description. categoryShape Required Type: aws-prototyping-sdk/aws-arch.aws_arch.DrawioSpec.Aws4.ShapeNames base Required Type: aws-prototyping-sdk/aws-arch.aws_arch.DrawioAwsResourceIconStyleBase Methods Name Description getResourceStyle Gets the drawio style for a resource based on the category style. getServiceStyle Gets the drawio style for a service based on the category style. getResourceStyle public getResourceStyle ( resourceShape : ShapeNames ) : AwsDrawioShapeStyle Gets the drawio style for a resource based on the category style. resourceShape Required Type: aws-prototyping-sdk/aws-arch.aws_arch.DrawioSpec.Aws4.ShapeNames The resource shape to style based on category. getServiceStyle public getServiceStyle ( serviceShape : ShapeNames ) : AwsDrawioResourceIconStyle Gets the drawio style for a service based on the category style. serviceShape Required Type: aws-prototyping-sdk/aws-arch.aws_arch.DrawioSpec.Aws4.ShapeNames The service shape to style based on category. Properties Name Type Description base aws-prototyping-sdk/aws-arch.aws_arch.DrawioAwsResourceIconStyleBase No description. categoryShape aws-prototyping-sdk/aws-arch.aws_arch.DrawioSpec.Aws4.ShapeNames No description. categoryStyle AwsDrawioResourceIconStyle Get the drawio style for this category. base Required public readonly base : DrawioAwsResourceIconStyleBase ; Type: aws-prototyping-sdk/aws-arch.aws_arch.DrawioAwsResourceIconStyleBase categoryShape Required public readonly categoryShape : ShapeNames ; Type: aws-prototyping-sdk/aws-arch.aws_arch.DrawioSpec.Aws4.ShapeNames categoryStyle Required public readonly categoryStyle : AwsDrawioResourceIconStyle ; Type: AwsDrawioResourceIconStyle Get the drawio style for this category. AwsResource AwsResource class provides an interface for normalizing resource metadata between mapped systems. Methods Name Description drawioStyle Gets the draiwio style for the resource. getCategoryIcon Gets the category icon for the resource. getGeneralIcon Gets the general icon for the resource if available. getResourceIcon Gets the resource specific icon for the resource. getServiceIcon Gets the service icon for the resource. icon Gets the best icon match for the resource following the order of: 1. drawioStyle public drawioStyle () : AwsDrawioShapeStyle Gets the draiwio style for the resource. getCategoryIcon public getCategoryIcon ( format : string , theme? : string ) : string Gets the category icon for the resource. This maybe different than { @link AwsResource.service.category.icon} based on mappings overrides, which if do not exist will fallback to { @link AwsResource.service.category.icon}. {@link AwsService.icon} format Required Type: string The format of icon. theme Optional Type: string Optional theme. getGeneralIcon public getGeneralIcon ( format : string , theme? : string ) : string Gets the general icon for the resource if available. format Required Type: string The format of icon. theme Optional Type: string Optional theme. getResourceIcon public getResourceIcon ( format : string , theme? : string ) : string Gets the resource specific icon for the resource. format Required Type: string The format of icon. theme Optional Type: string Optional theme. getServiceIcon public getServiceIcon ( format : string , theme? : string ) : string Gets the service icon for the resource. This maybe different than { @link AwsResource.service.icon} based on mappings overrides, which if do not exist will fallback to { @link AwsResource.service.icon}. {@link AwsService.icon} format Required Type: string The format of icon. theme Optional Type: string Optional theme. icon public icon ( format : string , theme? : string ) : string Gets the best icon match for the resource following the order of: 1. explicit resource icon 2. general icon 3. service icon format Required Type: string The format of icon. theme Optional Type: string Optional theme. Static Functions Name Description findResource Find { @link AwsResource} associated with given value. getResource Get { @link AwsResource} by CloudFormation resource type. findResource import { AwsResource } from '@aws-prototyping-sdk/aws-arch' AwsResource . findResource ( value : string ) Find { @link AwsResource} associated with given value. value Required Type: string The value to match { @link AwsResource}; can be id, asset key, full name, etc. getResource import { AwsResource } from '@aws-prototyping-sdk/aws-arch' AwsResource . getResource ( cfnResourceType : string ) Get { @link AwsResource} by CloudFormation resource type. cfnResourceType Required Type: string Fully qualifief CloudFormation resource type (eg: AWS:S3:Bucket). Properties Name Type Description resources {[ key: string ]: AwsResource } Get record of all resources keyed by resource id. cfnResourceType string Fully-qualified CloudFormation resource type (eg: \"AWS:S3:Bucket\"). service AwsService The { @link AwsService} the resource belongs to. drawioShape aws-prototyping-sdk/aws-arch.aws_arch.DrawioSpec.Aws4.ShapeNames The drawio shape mapped to this resource, or undefined if no mapping. fullName string The proper full name of the resource. resources Required public readonly resources : {[ key : string ] : AwsResource }; Type: {[ key: string ]: AwsResource } Get record of all resources keyed by resource id. cfnResourceType Required public readonly cfnResourceType : string ; Type: string Fully-qualified CloudFormation resource type (eg: \"AWS:S3:Bucket\"). service Required public readonly service : AwsService ; Type: AwsService The { @link AwsService} the resource belongs to. drawioShape Optional public readonly drawioShape : ShapeNames ; Type: aws-prototyping-sdk/aws-arch.aws_arch.DrawioSpec.Aws4.ShapeNames The drawio shape mapped to this resource, or undefined if no mapping. fullName Optional public readonly fullName : string ; Type: string The proper full name of the resource. Example \"Bucket\" , \"Amazon S3 on Outposts\" AwsService AwsService class provides an interface for normalizing service metadata between mapped systems. Methods Name Description drawioStyle Get drawio style for this service. icon Get relative asset icon for the service for a given format and optional theme. serviceResources List all resources of this service. drawioStyle public drawioStyle () : AwsDrawioResourceIconStyle Get drawio style for this service. icon public icon ( format : string , theme? : string ) : string Get relative asset icon for the service for a given format and optional theme. format Required Type: string The format of icon. theme Optional Type: string Optional theme. serviceResources public serviceResources () : AwsResource [] List all resources of this service. Static Functions Name Description findService Finds the { @link AwsService} associated with a given value. getService Get { @link AwsService} by CloudFormation \"service\" name, where service name is expressed as <provider>::<service>::<resource> . findService import { AwsService } from '@aws-prototyping-sdk/aws-arch' AwsService . findService ( value : string ) Finds the { @link AwsService} associated with a given value. value Required Type: string Value to match { @link AwsService}, which can be id , assetKey , fullName , etc. getService import { AwsService } from '@aws-prototyping-sdk/aws-arch' AwsService . getService ( cfnService : string ) Get { @link AwsService} by CloudFormation \"service\" name, where service name is expressed as <provider>::<service>::<resource> . cfnService Required Type: string The service name to retrieve { @link AwsService} for. Properties Name Type Description services {[ key: string ]: AwsService } Get record of all { @link AwsService}s keyed by id . cfnProvider string The CloudFormation \"provider\" for the service, as expressed by <provicer>::<service>::<resource> . cfnService string The CloudFormation \"service\" for the service, as expressed by <provicer>::<service>::<resource> . fullName string The proper full name of the service. category AwsCategory The category the service belongs to, or undefined if does not belong to a category. drawioShape aws-prototyping-sdk/aws-arch.aws_arch.DrawioSpec.Aws4.ShapeNames Drawio shape associated with this service, or undefined if service not mapped to draiwio shape. pricingMetadata aws-prototyping-sdk/aws-arch.aws_arch.PricingManifest.Service Get service pricing metadata. pricingServiceCode string The pricing serviceCode associated with this service, or undefined if service not mapped to pricing. services Required public readonly services : {[ key : string ] : AwsService }; Type: {[ key: string ]: AwsService } Get record of all { @link AwsService}s keyed by id . cfnProvider Required public readonly cfnProvider : string ; Type: string The CloudFormation \"provider\" for the service, as expressed by <provicer>::<service>::<resource> . cfnService Required public readonly cfnService : string ; Type: string The CloudFormation \"service\" for the service, as expressed by <provicer>::<service>::<resource> . fullName Required public readonly fullName : string ; Type: string The proper full name of the service. Example \"AWS Glue\" , \"Amazon S3\" category Optional public readonly category : AwsCategory ; Type: AwsCategory The category the service belongs to, or undefined if does not belong to a category. drawioShape Optional public readonly drawioShape : ShapeNames ; Type: aws-prototyping-sdk/aws-arch.aws_arch.DrawioSpec.Aws4.ShapeNames Drawio shape associated with this service, or undefined if service not mapped to draiwio shape. pricingMetadata Optional public readonly pricingMetadata : Service ; Type: aws-prototyping-sdk/aws-arch.aws_arch.PricingManifest.Service Get service pricing metadata. pricingServiceCode Optional public readonly pricingServiceCode : string ; Type: string The pricing serviceCode associated with this service, or undefined if service not mapped to pricing. Enums DarkPalette Dark theme color palette. Members Name Description PUBLIC No description. PRIVATE No description. GENERIC No description. PRIMARY No description. SECONDARY No description. TERTIARY No description. PUBLIC PRIVATE GENERIC PRIMARY SECONDARY TERTIARY DrawioAws4ParentShapes Draiwio aws4 parent shapes enum. Members Name Description RESOURCE_ICON No description. RESOURCE_ICON LightPalette Light theme color palette. Members Name Description PUBLIC No description. PRIVATE No description. GENERIC No description. PRIMARY No description. SECONDARY No description. TERTIARY No description. PUBLIC PRIVATE GENERIC PRIMARY SECONDARY TERTIARY","title":"Index"},{"location":"typescript/aws-arch/index.html#aws-arch-aws-architecture","text":"Library to provide metadata for AWS Services and AWS Resources. This package generates mappings between @aws-cdk/cfnspec and AWS Architecture Icons , and resolves resource metadata between these systems to infer a normalized definition of an AwsService and AwsResource . The primary aim of this package is to provide a consistent mechanism for other libraries to retrieve naming and assets associated with CloudFormation resources, and by extension CDK resources.","title":"aws-arch (AWS Architecture)"},{"location":"typescript/aws-arch/index.html#get-started","text":"yarn add '@aws-prototyping-sdk/aws-arch' import { AwsArchitecture } from \"@aws-prototyping-sdk/aws-arch\" ; const s3Bucket = AwsArchitecture . getResource ( \"AWS::S3::Bucket\" ); const s3Service = AwsArchitecture . getService ( s3Bucket . service ); console . log ( s3Bucket ); console . log ( s3Service ); // => console.log(s3Bucket); { \"name\" : \"Amazon Simple Storage Service Bucket\" , \"cfnType\" : \"AWS::S3::Bucket\" , \"awsAssetName\" : \"Amazon-Simple-Storage-Service_Bucket\" , \"awsAssetIcon\" : \"resources/Amazon-Simple-Storage-Service_Bucket.png\" , \"service\" : \"S3\" } // => console.log(s3Service); { \"provider\" : \"AWS\" , \"name\" : \"Amazon Simple Storage Service\" , \"cfnName\" : \"S3\" , \"awsAssetIcon\" : \"services/Amazon-Simple-Storage-Service.png\" , \"awsAssetName\" : \"Amazon-Simple-Storage-Service\" }","title":"Get Started"},{"location":"typescript/aws-arch/index.html#aws-achritecture-icons","text":"Retrieve category , service , and resource AWS Architecture Icons . Icon methods return relative asset key paths, as most frameworks have the concept of a base path (imagepaths). Use AwsArchitecture.resolveAssetPath(...) to get absolute path.","title":"Aws Achritecture Icons"},{"location":"typescript/aws-arch/index.html#development","text":"This package auto-generates many types and asset files from external sources, which are then auto mapped based on common patterns and explict mappings for edge-cases. The auto-generation is handled by /scripts files which can be run via corresponding package scripts (eg: npx projen generate:assets => /scripts/generate-assets.ts ). There is an implicit sequential order the scripts must be called in due to dependencies, which is handled by npx projen generate script. The generate script is also invoked prior to npx projen build if generated asset directory does not exist. For local development of packages that depend on aws-arch package, you will need to call npx projen generate && npx projen compile (or npx projen build ) prior to locally importing this package. To update AWS Architecture Icons , change the url in ASSET_PACKAGE_ZIP_URL .","title":"Development"},{"location":"typescript/aws-arch/index.html#api-reference","text":"","title":"API Reference "},{"location":"typescript/aws-arch/index.html#structs","text":"","title":"Structs "},{"location":"typescript/aws-arch/index.html#arrowformat","text":"Theme arrow format definition.","title":"ArrowFormat "},{"location":"typescript/aws-arch/index.html#awscategorydefinition","text":"Category definition.","title":"AwsCategoryDefinition "},{"location":"typescript/aws-arch/index.html#awsdrawioresourceiconstyle","text":"Drawio resource icon style definition for AWS Resources.","title":"AwsDrawioResourceIconStyle "},{"location":"typescript/aws-arch/index.html#awsdrawioshapestyle","text":"Drawio shape based style definition.","title":"AwsDrawioShapeStyle "},{"location":"typescript/aws-arch/index.html#drawioawsresourceiconstylebase","text":"Based style definition for drawio aws resource icon.","title":"DrawioAwsResourceIconStyleBase "},{"location":"typescript/aws-arch/index.html#drawioawsshapestylebase","text":"Base definition of drawio aws shape style.","title":"DrawioAwsShapeStyleBase "},{"location":"typescript/aws-arch/index.html#groupformat","text":"Theme group format definition.","title":"GroupFormat "},{"location":"typescript/aws-arch/index.html#parsedassetkey","text":"Parsed asset key.","title":"ParsedAssetKey "},{"location":"typescript/aws-arch/index.html#parsedassetkey_1","text":"Parsed asset key.","title":"ParsedAssetKey "},{"location":"typescript/aws-arch/index.html#theme","text":"Theme definition.","title":"Theme "},{"location":"typescript/aws-arch/index.html#themearrows","text":"Theme arrow dictionary.","title":"ThemeArrows "},{"location":"typescript/aws-arch/index.html#themebackgrounds","text":"Theme background dictionary.","title":"ThemeBackgrounds "},{"location":"typescript/aws-arch/index.html#themegroups","text":"Theme group dicionary.","title":"ThemeGroups "},{"location":"typescript/aws-arch/index.html#themetext","text":"Theme text dictionary.","title":"ThemeText "},{"location":"typescript/aws-arch/index.html#classes","text":"","title":"Classes "},{"location":"typescript/aws-arch/index.html#awsarchitecture","text":"AwsArchitecture provides an interface for retrieving the inferred normalization between @aws-cdk/cfnspec and AWS Architecture Icons systems for all CloudFormation \"services\" and \"resources\".","title":"AwsArchitecture "},{"location":"typescript/aws-arch/index.html#awscategory","text":"AwsCategory class provides an interface for normalizing category metadata between mapped systems.","title":"AwsCategory "},{"location":"typescript/aws-arch/index.html#awscategorydrawiostyles","text":"AwsCategoryDrawioStyles is a utility class for constructing drawio shape styles for services and resources.","title":"AwsCategoryDrawioStyles "},{"location":"typescript/aws-arch/index.html#awsresource","text":"AwsResource class provides an interface for normalizing resource metadata between mapped systems.","title":"AwsResource "},{"location":"typescript/aws-arch/index.html#awsservice","text":"AwsService class provides an interface for normalizing service metadata between mapped systems.","title":"AwsService "},{"location":"typescript/aws-arch/index.html#enums","text":"","title":"Enums "},{"location":"typescript/aws-arch/index.html#darkpalette","text":"Dark theme color palette.","title":"DarkPalette "},{"location":"typescript/aws-arch/index.html#drawioaws4parentshapes","text":"Draiwio aws4 parent shapes enum.","title":"DrawioAws4ParentShapes "},{"location":"typescript/aws-arch/index.html#lightpalette","text":"Light theme color palette.","title":"LightPalette "},{"location":"typescript/cdk-graph/index.html","text":"Experimental Warning This is packaged in a separate module while the API is being stabilized. This package is subject to non-backward compatible changes or removal in any future version. Breaking changes will be announced in the release notes. Whilst you may use this package, you may need to update your source code when upgrading to a newer version. Once we stabilize the module, it will be included into the stable aws-prototyping-sdk library. Experimental Usage To use this package, add a dependency on: @aws-prototyping-sdk/cdk-graph CDK Graph ( @aws-prototyping-sdk/cdk-graph ) More comprehensive documentation to come as this package stabilizes This package is the core framework for supporting additional cdk based automation and tooling, such as diagraming, cost modeling, security and compliance, in a holistic and comprehensive way. This package provides the following functionality: Synthesizes a serialized graph (nodes and edges) from CDK source code. Provides runtime interface for interacting with the graph (in-memory database-like graph store). Provides plugin framework for additional tooling to utilize and extend the graph. The goal of this framework is to enable bespoke tooling to be built without having to first traverse the CDK Tree and Metadata to build a graph. Projects like cdk-dia generate a bespoke in-memory graph that is then utilized to generate diagrams; while the diagram generation is the core value it must first have a graph to act upon and currently is required to generate this undifferentiated graph to provide its diagrams. By standardizing on the graph interface necessary to build complex tooling, we can more rapidly build new tooling that focuses on its core value. Available Plugins Name Description Screenshot Links Diagram Generate cloud infrastructure diagrams from cdk graph Quick Start Instrument CDK App with CdkGraph #!/usr/bin/env node import * as cdk from \"aws-cdk-lib\" ; import { MyStack } from \"../lib/my-stack\" ; import { CdkGraph } from \"@aws-prototyping-sdk/cdk-graph\" ; const app = new cdk . App (); new MyStack ( app , \"MyStack\" ); // Add CdkGraph after other construct added to app new CdkGraph ( app ); Using Plugins #!/usr/bin/env node import * as cdk from \"aws-cdk-lib\" ; import { MyStack } from \"../lib/my-stack\" ; import { CdkGraph } from \"@aws-prototyping-sdk/cdk-graph\" ; import { ExamplePlugin } from \"@aws-prototyping-sdk/cdk-graph-plugin-example\" ; // does not exist, just example const app = new cdk . App (); new MyStack ( app , \"MyStack\" ); // Add CdkGraph after other construct added to app new CdkGraph ( app , { plugins : [ new ExamplePlugin ()], }); Config Configuration is supported through the .cdkgraphrc.js and depending on the plugin, through passing config to the plugin instance. Config precedence follows 1) defaults, 2) cdkgraphrc, 3) instance. // .cdkgraphrc.js module . exports = { // Defaults to \"<cdk.out>/cdkgraph\" outdir : \"reports/graph\" , // plugin configuration example : { verbose : true , reportType : \"csv\" , }, }; #!/usr/bin/env node import * as cdk from \"aws-cdk-lib\" ; import { MyStack } from \"../lib/my-stack\" ; import { CdkGraph } from \"@aws-prototyping-sdk/cdk-graph\" ; import { ExamplePlugin } from \"@aws-prototyping-sdk/cdk-graph-plugin-example\" ; // does not exist, just example const app = new cdk . App (); new MyStack ( app , \"MyStack\" ); // Add CdkGraph after other construct added to app new CdkGraph ( app , { plugins : [ new ExamplePlugin ({ // Will override .cdkgraphrc.js value verbose : false , }), ], }); Plugin Interface /** CdkGraph **Plugin** interface */ export interface ICdkGraphPlugin { /** Unique identifier for this plugin */ readonly id : string ; /** Plugin version */ readonly version : Version ; /** List of plugins this plugin depends on, including optional semver version (eg: [\"foo\", \"bar@1.2\"]) */ readonly dependencies? : string []; /** * Binds the plugin to the CdkGraph instance. Enables plugins to receive base configs. */ bind : IGraphPluginBindCallback ; /** * Node visitor callback for construct tree traversal. This follows IAspect.visit pattern, but the order * of visitor traversal in managed by the CdkGraph. */ inspect? : IGraphVisitorCallback ; /** * Called during CDK synthesize to generate synchronous artifacts based on the in-memory graph passed * to the plugin. This is called in fifo order of plugins. */ synthesize? : IGraphSynthesizeCallback ; /** * Generate asynchronous reports based on the graph. This is not automatically called when synthesizing CDK. * Developer must explicitly add `await graphInstance.report()` to the CDK bin or invoke this outside * of the CDK synth. In either case, the plugin receives the in-memory graph interface when invoked, as the * CdkGraph will deserialize the graph prior to invoking the plugin report. */ report? : IGraphReportCallback ; } Plugin operations are automatically invoked by CdkGraph in the order they are defined in the plugins property. The invocation flow of plugins follows: 1) bind , 2) inspect , 3) synthesize , 4) async report . Asynchronous Plugins Some plugins may requiring performing asynchronous requests, or may make expensive operations that are best left outside of the synthesis process. CdkGraph support asynchronous operations through the async report() method of plugins. However, since CDK does not support asynchronous operations during synthesis, this must be wired up a bit differently. #!/usr/bin/env node import * as cdk from \"aws-cdk-lib\" ; import { MyStack } from \"../lib/my-stack\" ; import { CdkGraph } from \"@aws-prototyping-sdk/cdk-graph\" ; import { ExampleAsyncPlugin } from \"@aws-prototyping-sdk/cdk-graph-plugin-async-example\" ; // does not exist, just example ( async () => { const app = new cdk . App (); new MyStack ( app , \"MyStack\" ); // Add CdkGraph after other construct added to app const graph = new CdkGraph ( app , { plugins : [ new ExampleAsyncPlugin ()], }); // invokes all plugin `report()` operations asynchronously (in order they are defined in `plugins` property) await graph . report (); })(); Example Plugin Implementation Very basic example of implementing a plugin. Once the first actual plugins have been published this will be updated to reference those as examples. import { CdkGraph , CdkGraphContext , ICdkGraphPlugin , } from \"@aws-prototyping-sdk/cdk-graph\" ; export class CdkGraphExamplePlugin implements ICdkGraphPlugin { static readonly ARTIFACT_NS = \"EXAMPLE\" ; static readonly ID = \"example\" ; static readonly VERSION = \"0.0.0\" ; get id () : string { return CdkGraphDiagramPlugin . ID ; } get version () : string { return CdkGraphDiagramPlugin . VERSION ; } readonly dependencies? : string [] = []; /** @internal */ private _graph? : CdkGraph ; bind ( graph : CdkGraph ) : void { this . _graph = graph ; } synthesize ( context : CdkGraphContext ) : void { const pluginConfig = this . config as Required < IPluginConfig > ; // Get counts of all resources const cfnResourceCounts = context . store . counts . cfnResources ; // Write plugin artifact context . writeArtifact ( this , \"EXAMPLE\" , \"example.json\" , JSON . stringify ( cfnResourceCounts , null , 2 ) ); } async report ( context : CdkGraphContext ) : void { // perform async operation here utilizing graph store const cfnResourceCounts = context . store . counts . cfnResources ; const fetchedData = await fetch ( \"https://example.com/data\" , { method : \"POST\" , body : JSON.stringify ( cfnResourceCounts ), }); // Write plugin artifact for fetched data context . writeArtifact ( this , \"EXAMPLE:FETCHED\" , \"example-fetched.json\" , JSON . stringify ( fetchedData , null , 2 ) ); } } Path to Stability The below is a rough checklist of task necessary to elevate this from experimental to stable. [ ] Dynamic versioning and Semver enforcement (store, plugins, etc) [ ] Support running async report() method outside of CDK synthesis process [ ] Find alternative synthesis solution that doesn't utilize CDK internals [ ] Support custom Nodes and Edges [ ] Improve logging, bookkeeping, and debugging [ ] Implement store upgrade solution [ ] Battle test the implementation against several plugins [ ] Battle test the implementation in all target languages (currently tested in Typescript, but vended in all PDK supported languages) [ ] Receive community feedback to validate approach API Reference Constructs CdkGraph CdkGraph construct is the cdk-graph framework controller that is responsible for computing the graph, storing serialized graph, and instrumenting plugins per the plugin contract. Initializers import { CdkGraph } from '@aws-prototyping-sdk/cdk-graph' new CdkGraph ( root : Construct , props? : ICdkGraphProps ) Name Type Description root constructs.Construct No description. props ICdkGraphProps No description. root Required Type: constructs.Construct props Optional Type: ICdkGraphProps Methods Name Description toString Returns a string representation of this construct. report Asynchronous report generation. This operation enables running expensive and non-synchronous report generation by plugins post synthesis. toString public toString () : string Returns a string representation of this construct. report public report () : void Asynchronous report generation. This operation enables running expensive and non-synchronous report generation by plugins post synthesis. If a given plugin requires performing asynchronous operations or is general expensive, it should utilize report rather than synthesize . Static Functions Name Description isConstruct Checks if x is a construct. isConstruct import { CdkGraph } from '@aws-prototyping-sdk/cdk-graph' CdkGraph . isConstruct ( x : any ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: any Any object. Properties Name Type Description node constructs.Node The tree node. config CdkGraphConfig Config. plugins ICdkGraphPlugin [] List of plugins registered with this instance. root constructs.Construct No description. graphContext CdkGraphContext Get the context for the graph instance. node Required public readonly node : Node ; Type: constructs.Node The tree node. config Required public readonly config : CdkGraphConfig ; Type: CdkGraphConfig Config. plugins Required public readonly plugins : ICdkGraphPlugin []; Type: ICdkGraphPlugin [] List of plugins registered with this instance. root Required public readonly root : Construct ; Type: constructs.Construct graphContext Optional public readonly graphContext : CdkGraphContext ; Type: CdkGraphContext Get the context for the graph instance. This will be undefined before construct synthesis has initiated. Constants Name Type Description ID string Fixed CdkGraph construct id. VERSION string Current CdkGraph semantic version. ID Required public readonly ID : string ; Type: string Fixed CdkGraph construct id. VERSION Required public readonly VERSION : string ; Type: string Current CdkGraph semantic version. Structs Attributes Serializable attributes mapping. Initializer import { SerializedGraph } from '@aws-prototyping-sdk/cdk-graph' const attributes : SerializedGraph.Attributes = { ... } CdkGraphArtifact CdkGraph artifact definition. Initializer import { CdkGraphArtifact } from '@aws-prototyping-sdk/cdk-graph' const cdkGraphArtifact : CdkGraphArtifact = { ... } Properties Name Type Description filename string Filename of the artifact. filepath string Full path where artifact is stored. id string The unique type of the artifact. source string The source of the artifact (such as plugin, or core system, etc). description string Description of artifact. filename Required public readonly filename : string ; Type: string Filename of the artifact. filepath Required public readonly filepath : string ; Type: string Full path where artifact is stored. id Required public readonly id : string ; Type: string The unique type of the artifact. source Required public readonly source : string ; Type: string The source of the artifact (such as plugin, or core system, etc). description Optional public readonly description : string ; Type: string Description of artifact. CdkGraphConfig CdkGraph configuration definition. Initializer import { CdkGraphConfig } from '@aws-prototyping-sdk/cdk-graph' const cdkGraphConfig : CdkGraphConfig = { ... } Properties Name Type Description outdir string Directory where artifacts are written. outdir Optional public readonly outdir : string ; Type: string Default: \" /cdkgraph\" Directory where artifacts are written. The key <cdk.out> will be replaced with the synthesizer cdk outdir . Relative paths not prefixed with <cdk.out> will be relative to process.cwd ConstructInfo Source information on a construct (class fqn and version). https://github.com/aws/aws-cdk/blob/cea1039e3664fdfa89c6f00cdaeb1a0185a12678/packages/%40aws-cdk/core/lib/private/runtime-info.ts#L22 Initializer import { ConstructInfo } from '@aws-prototyping-sdk/cdk-graph' const constructInfo : ConstructInfo = { ... } Properties Name Type Description fqn string No description. version string No description. fqn Required public readonly fqn : string ; Type: string version Required public readonly version : string ; Type: string Edge Serializable graph edge entity. Initializer import { SerializedGraph } from '@aws-prototyping-sdk/cdk-graph' const edge : SerializedGraph.Edge = { ... } Properties Name Type Description uuid string Universally unique identity. attributes aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Serializable entity attributes. flags FlagEnum [] Serializable entity flags. metadata constructs.MetadataEntry[] Serializable entity metadata. tags aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Serializable entity tags. direction EdgeDirectionEnum Indicates the direction in which the edge is directed. edgeType EdgeTypeEnum Type of edge. source string UUID of edge source node (tail). target string UUID of edge target node (head). uuid Required public readonly uuid : string ; Type: string Universally unique identity. attributes Optional public readonly attributes : Attributes ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Serializable entity attributes. {@link Attributes} flags Optional public readonly flags : FlagEnum []; Type: FlagEnum [] Serializable entity flags. {@link FlagEnum} metadata Optional public readonly metadata : MetadataEntry []; Type: constructs.MetadataEntry[] Serializable entity metadata. {@link Metadata} tags Optional public readonly tags : Tags ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Serializable entity tags. {@link Tags} direction Required public readonly direction : EdgeDirectionEnum ; Type: EdgeDirectionEnum Indicates the direction in which the edge is directed. edgeType Required public readonly edgeType : EdgeTypeEnum ; Type: EdgeTypeEnum Type of edge. source Required public readonly source : string ; Type: string UUID of edge source node (tail). target Required public readonly target : string ; Type: string UUID of edge target node (head). Entity Serializable graph entity. Initializer import { SerializedGraph } from '@aws-prototyping-sdk/cdk-graph' const entity : SerializedGraph.Entity = { ... } Properties Name Type Description uuid string Universally unique identity. attributes aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Serializable entity attributes. flags FlagEnum [] Serializable entity flags. metadata constructs.MetadataEntry[] Serializable entity metadata. tags aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Serializable entity tags. uuid Required public readonly uuid : string ; Type: string Universally unique identity. attributes Optional public readonly attributes : Attributes ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Serializable entity attributes. {@link Attributes} flags Optional public readonly flags : FlagEnum []; Type: FlagEnum [] Serializable entity flags. {@link FlagEnum} metadata Optional public readonly metadata : MetadataEntry []; Type: constructs.MetadataEntry[] Serializable entity metadata. {@link Metadata} tags Optional public readonly tags : Tags ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Serializable entity tags. {@link Tags} GraphStore Serializable graph store. Initializer import { SerializedGraph } from '@aws-prototyping-sdk/cdk-graph' const graphStore : SerializedGraph.GraphStore = { ... } Properties Name Type Description edges aws-prototyping-sdk/cdk-graph.SerializedGraph.Edge [] List of edges. tree aws-prototyping-sdk/cdk-graph.SerializedGraph.Node Node tree. version string Store version. edges Required public readonly edges : Edge []; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Edge [] List of edges. tree Required public readonly tree : Node ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Node Node tree. version Required public readonly version : string ; Type: string Store version. InferredNodeProps Inferred node props. Initializer import { InferredNodeProps } from '@aws-prototyping-sdk/cdk-graph' const inferredNodeProps : InferredNodeProps = { ... } Properties Name Type Description uuid string Universally unique identity. attributes aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Serializable entity attributes. flags FlagEnum [] Serializable entity flags. metadata constructs.MetadataEntry[] Serializable entity metadata. tags aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Serializable entity tags. dependencies string[] No description. unresolvedReferences UnresolvedReference [] No description. cfnType string No description. constructInfo ConstructInfo No description. logicalId string No description. uuid Required public readonly uuid : string ; Type: string Universally unique identity. attributes Optional public readonly attributes : Attributes ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Serializable entity attributes. {@link Attributes} flags Optional public readonly flags : FlagEnum []; Type: FlagEnum [] Serializable entity flags. {@link FlagEnum} metadata Optional public readonly metadata : MetadataEntry []; Type: constructs.MetadataEntry[] Serializable entity metadata. {@link Metadata} tags Optional public readonly tags : Tags ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Serializable entity tags. {@link Tags} dependencies Required public readonly dependencies : string []; Type: string[] unresolvedReferences Required public readonly unresolvedReferences : UnresolvedReference []; Type: UnresolvedReference [] cfnType Optional public readonly cfnType : string ; Type: string constructInfo Optional public readonly constructInfo : ConstructInfo ; Type: ConstructInfo logicalId Optional public readonly logicalId : string ; Type: string Node Serializable graph node entity. Initializer import { SerializedGraph } from '@aws-prototyping-sdk/cdk-graph' const node : SerializedGraph.Node = { ... } Properties Name Type Description uuid string Universally unique identity. attributes aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Serializable entity attributes. flags FlagEnum [] Serializable entity flags. metadata constructs.MetadataEntry[] Serializable entity metadata. tags aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Serializable entity tags. id string Node id within parent (unique only between parent child nodes). nodeType NodeTypeEnum Node type. path string Node path. cfnType string CloudFormation resource type for this node. children {[ key: string ]: aws-prototyping-sdk/cdk-graph.SerializedGraph.Node } Child node record. constructInfo ConstructInfo Synthesized construct information defining jii resolution data. edges string[] List of edge UUIDs where this node is the source . logicalId string Logical id of the node, which is only unique within containing stack. parent string UUID of node parent. stack string UUID of node stack. uuid Required public readonly uuid : string ; Type: string Universally unique identity. attributes Optional public readonly attributes : Attributes ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Serializable entity attributes. {@link Attributes} flags Optional public readonly flags : FlagEnum []; Type: FlagEnum [] Serializable entity flags. {@link FlagEnum} metadata Optional public readonly metadata : MetadataEntry []; Type: constructs.MetadataEntry[] Serializable entity metadata. {@link Metadata} tags Optional public readonly tags : Tags ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Serializable entity tags. {@link Tags} id Required public readonly id : string ; Type: string Node id within parent (unique only between parent child nodes). nodeType Required public readonly nodeType : NodeTypeEnum ; Type: NodeTypeEnum Node type. path Required public readonly path : string ; Type: string Node path. cfnType Optional public readonly cfnType : string ; Type: string CloudFormation resource type for this node. children Optional public readonly children : {[ key : string ] : Node }; Type: {[ key: string ]: aws-prototyping-sdk/cdk-graph.SerializedGraph.Node } Child node record. constructInfo Optional public readonly constructInfo : ConstructInfo ; Type: ConstructInfo Synthesized construct information defining jii resolution data. edges Optional public readonly edges : string []; Type: string[] List of edge UUIDs where this node is the source . logicalId Optional public readonly logicalId : string ; Type: string Logical id of the node, which is only unique within containing stack. parent Optional public readonly parent : string ; Type: string UUID of node parent. stack Optional public readonly stack : string ; Type: string UUID of node stack. PlainObject Serializable plain object value (JSII supported). Initializer import { SerializedGraph } from '@aws-prototyping-sdk/cdk-graph' const plainObject : SerializedGraph.PlainObject = { ... } Tags Serializable dictionary of tags (key value pairs). Initializer import { SerializedGraph } from '@aws-prototyping-sdk/cdk-graph' const tags : SerializedGraph.Tags = { ... } UnresolvedReference Unresolved reference struct. During graph computation references are unresolved and stored in this struct. Initializer import { UnresolvedReference } from '@aws-prototyping-sdk/cdk-graph' const unresolvedReference : UnresolvedReference = { ... } Properties Name Type Description referenceType ReferenceTypeEnum No description. source string No description. target string No description. value string | number | boolean | aws-prototyping-sdk/cdk-graph.SerializedGraph.PlainObject | string | number | boolean | aws-prototyping-sdk/cdk-graph.SerializedGraph.PlainObject [] No description. referenceType Required public readonly referenceType : ReferenceTypeEnum ; Type: ReferenceTypeEnum source Required public readonly source : string ; Type: string target Required public readonly target : string ; Type: string value Optional public readonly value : string | number | boolean | PlainObject | string | number | boolean | PlainObject []; Type: string | number | boolean | aws-prototyping-sdk/cdk-graph.SerializedGraph.PlainObject | string | number | boolean | aws-prototyping-sdk/cdk-graph.SerializedGraph.PlainObject [] Classes AppNode AppNode defines a cdk App. Initializers import { Graph } from '@aws-prototyping-sdk/cdk-graph' new Graph . AppNode ( props : IAppNodeProps ) Name Type Description props aws-prototyping-sdk/cdk-graph.Graph.IAppNodeProps No description. props Required Type: aws-prototyping-sdk/cdk-graph.Graph.IAppNodeProps Methods Name Description addAttribute Add attribute. addFlag Add flag. addMetadata Add metadata entry. addTag Add tag. applyData Applies data (attributes, metadata, tags, flag) to entity. findMetadata Retrieves all metadata entries of a given type. getAttribute Get attribute by key. getTag Get tag by key. hasAttribute Indicates if entity has a given attribute defined, and optionally with a specific value. hasFlag Indicates if entity has a given flag. hasMetadata Indicates if entity has matching metadata entry. hasTag Indicates if entity has tag, optionally verifying tag value. mutateDestroy Destroys this node by removing all references and removing this node from the store. setAttribute Set attribute. setTag Set tag. addChild Add child node. addLink Add link to another node. addReverseLink Add link from another node. doesDependOn Indicates if this node depends on another node . doesReference Indicates if this node references another node . find Recursively find the nearest sub-node matching predicate. findAll Return this construct and all of its sub-nodes in the given order. findAllLinks Return all direct links of this node and that of all sub-nodes. findAncestor Find nearest ancestor of this node matching given predicate. findChild Find child with given id . findLink Find link of this node based on predicate. findLinks Find all links of this node based on predicate. getCfnProp Get specific CloudFormation property. getChild Get child node with given id . getLinkChains Resolve all link chains. getNearestAncestor Gets the nearest common ancestor shared between this node and another node . isAncestor Indicates if a specific node is an ancestor of this node . isChild Indicates if specific node is a child of this node . mutateCollapse Collapses all sub-nodes of this node into this node . mutateCollapseTo Collapses this node into an ancestor . mutateCollapseToParent Collapses this node into it's parent node . mutateHoist Hoist this node to an ancestor by removing it from its current parent node and in turn moving it to the ancestor. mutateMove Move this node into a new parent node. mutateRemoveChild Remove a child node from this node . mutateRemoveLink Remove a link from this node . mutateRemoveReverseLink Remove a link to this node . mutateUncluster Hoist all children to parent and collapse node to parent. toString Get string representation of this node. addAttribute public addAttribute ( key : string , value : any ) : void Add attribute. key Required Type: string value Required Type: any addFlag public addFlag ( flag : FlagEnum ) : void Add flag. flag Required Type: FlagEnum addMetadata public addMetadata ( metadataType : string , data : any ) : void Add metadata entry. metadataType Required Type: string data Required Type: any addTag public addTag ( key : string , value : string ) : void Add tag. key Required Type: string value Required Type: string applyData public applyData ( data : IBaseEntityDataProps , overwrite? : boolean , applyFlags? : boolean ) : void Applies data (attributes, metadata, tags, flag) to entity. Generally used only for mutations such as collapse and consume to retain data. data Required Type: aws-prototyping-sdk/cdk-graph.Graph.IBaseEntityDataProps The data to apply. overwrite Optional Type: boolean applyFlags Optional Type: boolean Indicates if data is overwritten - Indicates if flags should be applied. findMetadata public findMetadata ( metadataType : string ) : MetadataEntry [] Retrieves all metadata entries of a given type. metadataType Required Type: string getAttribute public getAttribute ( key : string ) : any Get attribute by key. key Required Type: string getTag public getTag ( key : string ) : string Get tag by key. key Required Type: string hasAttribute public hasAttribute ( key : string , value? : any ) : boolean Indicates if entity has a given attribute defined, and optionally with a specific value. key Required Type: string value Optional Type: any hasFlag public hasFlag ( flag : FlagEnum ) : boolean Indicates if entity has a given flag. flag Required Type: FlagEnum hasMetadata public hasMetadata ( metadataType : string , data : any ) : boolean Indicates if entity has matching metadata entry. metadataType Required Type: string data Required Type: any hasTag public hasTag ( key : string , value? : string ) : boolean Indicates if entity has tag, optionally verifying tag value. key Required Type: string value Optional Type: string mutateDestroy public mutateDestroy ( strict? : boolean ) : void Destroys this node by removing all references and removing this node from the store. strict Optional Type: boolean Indicates that this node must not have references. setAttribute public setAttribute ( key : string , value : any ) : void Set attribute. This will overwrite existing attribute. key Required Type: string value Required Type: any setTag public setTag ( key : string , value : string ) : void Set tag. Will overwrite existing tag. key Required Type: string value Required Type: string addChild public addChild ( node : Node ) : void Add child node. node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node addLink public addLink ( edge : Edge ) : void Add link to another node. edge Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge addReverseLink public addReverseLink ( edge : Edge ) : void Add link from another node. edge Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge doesDependOn public doesDependOn ( node : Node ) : boolean Indicates if this node depends on another node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node doesReference public doesReference ( node : Node ) : boolean Indicates if this node references another node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node find public find ( predicate : INodePredicate ) : Node Recursively find the nearest sub-node matching predicate. predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.INodePredicate findAll public findAll ( options? : IFindNodeOptions ) : Node [] Return this construct and all of its sub-nodes in the given order. Optionally filter nodes based on predicate. options Optional Type: aws-prototyping-sdk/cdk-graph.Graph.IFindNodeOptions findAllLinks public findAllLinks ( options? : IFindEdgeOptions ) : Edge [] Return all direct links of this node and that of all sub-nodes. Optionally filter links based on predicate. options Optional Type: aws-prototyping-sdk/cdk-graph.Graph.IFindEdgeOptions findAncestor public findAncestor ( predicate : INodePredicate , max? : number ) : Node Find nearest ancestor of this node matching given predicate. predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.INodePredicate Predicate to match ancestor. max Optional Type: number findChild public findChild ( id : string ) : Node Find child with given id . Similar to find but does not throw error if no child found. id Required Type: string findLink public findLink ( predicate : IEdgePredicate , reverse? : boolean , follow? : boolean , direct? : boolean ) : Edge Find link of this node based on predicate. By default this will follow link chains to evaluate the predicate against and return the matching direct link of this node. predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.IEdgePredicate Edge predicate function to match edge. reverse Optional Type: boolean Indicates if links are search in reverse order. follow Optional Type: boolean Indicates if link chain is followed. direct Optional Type: boolean Indicates that only direct links should be searched. findLinks public findLinks ( predicate : IEdgePredicate , reverse? : boolean , follow? : boolean , direct? : boolean ) : Edge [] Find all links of this node based on predicate. By default this will follow link chains to evaluate the predicate against and return the matching direct links of this node. predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.IEdgePredicate Edge predicate function to match edge. reverse Optional Type: boolean Indicates if links are search in reverse order. follow Optional Type: boolean Indicates if link chain is followed. direct Optional Type: boolean Indicates that only direct links should be searched. getCfnProp public getCfnProp ( key : string ) : string | number | boolean | PlainObject | string | number | boolean | PlainObject [] Get specific CloudFormation property. key Required Type: string getChild public getChild ( id : string ) : Node Get child node with given id . id Required Type: string getLinkChains public getLinkChains ( reverse? : boolean ) : object [] Resolve all link chains. {@link EdgeChain} reverse Optional Type: boolean getNearestAncestor public getNearestAncestor ( node : Node ) : Node Gets the nearest common ancestor shared between this node and another node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node isAncestor public isAncestor ( ancestor : Node ) : boolean Indicates if a specific node is an ancestor of this node . ancestor Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node isChild public isChild ( node : Node ) : boolean Indicates if specific node is a child of this node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateCollapse public mutateCollapse () : void Collapses all sub-nodes of this node into this node . mutateCollapseTo public mutateCollapseTo ( ancestor : Node ) : Node Collapses this node into an ancestor . ancestor Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateCollapseToParent public mutateCollapseToParent () : Node Collapses this node into it's parent node . mutateHoist public mutateHoist ( newParent : Node ) : void Hoist this node to an ancestor by removing it from its current parent node and in turn moving it to the ancestor. newParent Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateMove public mutateMove ( newParent : Node ) : void Move this node into a new parent node. newParent Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node The parent to move this node to. mutateRemoveChild public mutateRemoveChild ( node : Node ) : boolean Remove a child node from this node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateRemoveLink public mutateRemoveLink ( link : Edge ) : boolean Remove a link from this node . link Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge mutateRemoveReverseLink public mutateRemoveReverseLink ( link : Edge ) : boolean Remove a link to this node . link Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge mutateUncluster public mutateUncluster () : void Hoist all children to parent and collapse node to parent. toString public toString () : string Get string representation of this node. Static Functions Name Description isAppNode Indicates if node is a { @link AppNode}. isAppNode import { Graph } from '@aws-prototyping-sdk/cdk-graph' Graph . AppNode . isAppNode ( node : Node ) Indicates if node is a { @link AppNode}. node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node Properties Name Type Description attributes aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Get readonly record of all attributes. flags FlagEnum [] Get readonly list of all flags. isDestroyed boolean Indicates if the entity has been destroyed (eg: removed from store). isMutated boolean Indicates if the entity has had destructive mutations applied. metadata constructs.MetadataEntry[] Get readonly list of all metadata entries. store aws-prototyping-sdk/cdk-graph.Graph.Store Reference to the store. tags aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Get readonly record of all tags. uuid string Universally unique identifier. allowDestructiveMutations boolean Indicates if this node allows destructive mutations. children aws-prototyping-sdk/cdk-graph.Graph.Node [] Get all direct child nodes. dependedOnBy aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that depend on this node . dependencies aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that this node depends on . dependencyLinks aws-prototyping-sdk/cdk-graph.Graph.Dependency [] Gets list of { @link Dependency} links (edges) where this node is the source . depth number Indicates the depth of the node relative to root (0). id string Node id, which is only unique within parent scope. isAsset boolean Indicates if this node is considered a { @link FlagEnum.ASSET}. isCfnFqn boolean Indicates if node ConstructInfoFqn denotes a aws-cdk-lib.*.Cfn* construct. isCluster boolean Indicates if this node is considered a { @link FlagEnum.CLUSTER}. isCustomResource boolean Indicates if node is a Custom Resource . isExtraneous boolean Indicates if this node is considered a { @link FlagEnum.EXTRANEOUS} node or determined to be extraneous: - Clusters that contain no children. isGraphContainer boolean Indicates if this node is considered a { @link FlagEnum.GRAPH_CONTAINER}. isLeaf boolean Indicates if this node is a leaf node, which means it does not have children. isTopLevel boolean Indicates if node is direct child of the graph root node. links aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all links (edges) in which this node is the source . nodeType NodeTypeEnum Type of node. path string Path of the node. referencedBy aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that reference this node . referenceLinks aws-prototyping-sdk/cdk-graph.Graph.Reference [] Gets list of { @link Reference} links (edges) where this node is the source . references aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that this node references . reverseDependencyLinks aws-prototyping-sdk/cdk-graph.Graph.Dependency [] Gets list of { @link Dependency} links (edges) where this node is the target . reverseLinks aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all links (edges) in which this node is the target . reverseReferenceLinks aws-prototyping-sdk/cdk-graph.Graph.Reference [] Gets list of { @link Reference} links (edges) where this node is the target . scopes aws-prototyping-sdk/cdk-graph.Graph.Node [] Gets descending ordered list of ancestors from the root. siblings aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of siblings of this node. cfnProps aws-prototyping-sdk/cdk-graph.SerializedGraph.PlainObject Gets CloudFormation properties for this node. cfnType string Get the CloudFormation resource type for this node. constructInfo ConstructInfo Synthesized construct information defining jii resolution data. constructInfoFqn string Synthesized construct information defining jii resolution data. logicalId string Logical id of the node, which is only unique within containing stack. parent aws-prototyping-sdk/cdk-graph.Graph.Node Parent node. rootStack aws-prototyping-sdk/cdk-graph.Graph.StackNode Get root stack. stack aws-prototyping-sdk/cdk-graph.Graph.StackNode Stack the node is contained in. attributes Required public readonly attributes : Attributes ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Get readonly record of all attributes. flags Required public readonly flags : FlagEnum []; Type: FlagEnum [] Get readonly list of all flags. isDestroyed Required public readonly isDestroyed : boolean ; Type: boolean Indicates if the entity has been destroyed (eg: removed from store). isMutated Required public readonly isMutated : boolean ; Type: boolean Indicates if the entity has had destructive mutations applied. metadata Required public readonly metadata : MetadataEntry []; Type: constructs.MetadataEntry[] Get readonly list of all metadata entries. store Required public readonly store : Store ; Type: aws-prototyping-sdk/cdk-graph.Graph.Store Reference to the store. tags Required public readonly tags : Tags ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Get readonly record of all tags. uuid Required public readonly uuid : string ; Type: string Universally unique identifier. allowDestructiveMutations Required public readonly allowDestructiveMutations : boolean ; Type: boolean Indicates if this node allows destructive mutations. {@link Store.allowDestructiveMutations} children Required public readonly children : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get all direct child nodes. dependedOnBy Required public readonly dependedOnBy : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that depend on this node . {@link Node.reverseDependencyLinks} dependencies Required public readonly dependencies : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that this node depends on . {@link Node.dependencyLinks} dependencyLinks Required public readonly dependencyLinks : Dependency []; Type: aws-prototyping-sdk/cdk-graph.Graph.Dependency [] Gets list of { @link Dependency} links (edges) where this node is the source . depth Required public readonly depth : number ; Type: number Indicates the depth of the node relative to root (0). id Required public readonly id : string ; Type: string Node id, which is only unique within parent scope. isAsset Required public readonly isAsset : boolean ; Type: boolean Indicates if this node is considered a { @link FlagEnum.ASSET}. isCfnFqn Required public readonly isCfnFqn : boolean ; Type: boolean Indicates if node ConstructInfoFqn denotes a aws-cdk-lib.*.Cfn* construct. {@link FlagEnum.CFN_FQN} isCluster Required public readonly isCluster : boolean ; Type: boolean Indicates if this node is considered a { @link FlagEnum.CLUSTER}. isCustomResource Required public readonly isCustomResource : boolean ; Type: boolean Indicates if node is a Custom Resource . isExtraneous Required public readonly isExtraneous : boolean ; Type: boolean Indicates if this node is considered a { @link FlagEnum.EXTRANEOUS} node or determined to be extraneous: - Clusters that contain no children. isGraphContainer Required public readonly isGraphContainer : boolean ; Type: boolean Indicates if this node is considered a { @link FlagEnum.GRAPH_CONTAINER}. isLeaf Required public readonly isLeaf : boolean ; Type: boolean Indicates if this node is a leaf node, which means it does not have children. isTopLevel Required public readonly isTopLevel : boolean ; Type: boolean Indicates if node is direct child of the graph root node. links Required public readonly links : Edge []; Type: aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all links (edges) in which this node is the source . nodeType Required public readonly nodeType : NodeTypeEnum ; Type: NodeTypeEnum Type of node. path Required public readonly path : string ; Type: string Path of the node. referencedBy Required public readonly referencedBy : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that reference this node . {@link Node.reverseReferenceLinks} referenceLinks Required public readonly referenceLinks : Reference []; Type: aws-prototyping-sdk/cdk-graph.Graph.Reference [] Gets list of { @link Reference} links (edges) where this node is the source . references Required public readonly references : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that this node references . {@link Node.referenceLinks} reverseDependencyLinks Required public readonly reverseDependencyLinks : Dependency []; Type: aws-prototyping-sdk/cdk-graph.Graph.Dependency [] Gets list of { @link Dependency} links (edges) where this node is the target . reverseLinks Required public readonly reverseLinks : Edge []; Type: aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all links (edges) in which this node is the target . reverseReferenceLinks Required public readonly reverseReferenceLinks : Reference []; Type: aws-prototyping-sdk/cdk-graph.Graph.Reference [] Gets list of { @link Reference} links (edges) where this node is the target . scopes Required public readonly scopes : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Gets descending ordered list of ancestors from the root. siblings Required public readonly siblings : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of siblings of this node. cfnProps Optional public readonly cfnProps : PlainObject ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.PlainObject Gets CloudFormation properties for this node. cfnType Optional public readonly cfnType : string ; Type: string Get the CloudFormation resource type for this node. constructInfo Optional public readonly constructInfo : ConstructInfo ; Type: ConstructInfo Synthesized construct information defining jii resolution data. constructInfoFqn Optional public readonly constructInfoFqn : string ; Type: string Synthesized construct information defining jii resolution data. logicalId Optional public readonly logicalId : string ; Type: string Logical id of the node, which is only unique within containing stack. parent Optional public readonly parent : Node ; Type: aws-prototyping-sdk/cdk-graph.Graph.Node Parent node. Only the root node should not have parent. rootStack Optional public readonly rootStack : StackNode ; Type: aws-prototyping-sdk/cdk-graph.Graph.StackNode Get root stack. stack Optional public readonly stack : StackNode ; Type: aws-prototyping-sdk/cdk-graph.Graph.StackNode Stack the node is contained in. Constants Name Type Description PATH string Fixed path of the App. UUID string Fixed UUID for App node. PATH Required public readonly PATH : string ; Type: string Fixed path of the App. UUID Required public readonly UUID : string ; Type: string Fixed UUID for App node. AttributeReference Attribute type reference edge. Initializers import { Graph } from '@aws-prototyping-sdk/cdk-graph' new Graph . AttributeReference ( props : IAttributeReferenceProps ) Name Type Description props aws-prototyping-sdk/cdk-graph.Graph.IAttributeReferenceProps No description. props Required Type: aws-prototyping-sdk/cdk-graph.Graph.IAttributeReferenceProps Methods Name Description addAttribute Add attribute. addFlag Add flag. addMetadata Add metadata entry. addTag Add tag. applyData Applies data (attributes, metadata, tags, flag) to entity. findMetadata Retrieves all metadata entries of a given type. getAttribute Get attribute by key. getTag Get tag by key. hasAttribute Indicates if entity has a given attribute defined, and optionally with a specific value. hasFlag Indicates if entity has a given flag. hasMetadata Indicates if entity has matching metadata entry. hasTag Indicates if entity has tag, optionally verifying tag value. mutateDestroy Destroy the edge. setAttribute Set attribute. setTag Set tag. isEquivalent Indicates if this edge is equivalent to another edge. mutateConsume Merge an equivalent edge's data into this edge and destroy the other edge. mutateDirection Change the edge direction . mutateSource Change the edge source . mutateTarget Change the edge target . toString Get string representation of this edge. resolveChain Resolve reference chain. resolveTargets Resolve targets by following potential edge chain. addAttribute public addAttribute ( key : string , value : any ) : void Add attribute. key Required Type: string value Required Type: any addFlag public addFlag ( flag : FlagEnum ) : void Add flag. flag Required Type: FlagEnum addMetadata public addMetadata ( metadataType : string , data : any ) : void Add metadata entry. metadataType Required Type: string data Required Type: any addTag public addTag ( key : string , value : string ) : void Add tag. key Required Type: string value Required Type: string applyData public applyData ( data : IBaseEntityDataProps , overwrite? : boolean , applyFlags? : boolean ) : void Applies data (attributes, metadata, tags, flag) to entity. Generally used only for mutations such as collapse and consume to retain data. data Required Type: aws-prototyping-sdk/cdk-graph.Graph.IBaseEntityDataProps The data to apply. overwrite Optional Type: boolean applyFlags Optional Type: boolean Indicates if data is overwritten - Indicates if flags should be applied. findMetadata public findMetadata ( metadataType : string ) : MetadataEntry [] Retrieves all metadata entries of a given type. metadataType Required Type: string getAttribute public getAttribute ( key : string ) : any Get attribute by key. key Required Type: string getTag public getTag ( key : string ) : string Get tag by key. key Required Type: string hasAttribute public hasAttribute ( key : string , value? : any ) : boolean Indicates if entity has a given attribute defined, and optionally with a specific value. key Required Type: string value Optional Type: any hasFlag public hasFlag ( flag : FlagEnum ) : boolean Indicates if entity has a given flag. flag Required Type: FlagEnum hasMetadata public hasMetadata ( metadataType : string , data : any ) : boolean Indicates if entity has matching metadata entry. metadataType Required Type: string data Required Type: any hasTag public hasTag ( key : string , value? : string ) : boolean Indicates if entity has tag, optionally verifying tag value. key Required Type: string value Optional Type: string mutateDestroy public mutateDestroy ( _strict? : boolean ) : void Destroy the edge. Remove all references and remove from store. _strict Optional Type: boolean setAttribute public setAttribute ( key : string , value : any ) : void Set attribute. This will overwrite existing attribute. key Required Type: string value Required Type: any setTag public setTag ( key : string , value : string ) : void Set tag. Will overwrite existing tag. key Required Type: string value Required Type: string isEquivalent public isEquivalent ( edge : Edge ) : boolean Indicates if this edge is equivalent to another edge. Edges are considered equivalent if they share same type, source, and target. edge Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge mutateConsume public mutateConsume ( edge : Edge ) : void Merge an equivalent edge's data into this edge and destroy the other edge. Used during filtering operations to consolidate equivalent edges. edge Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge The edge to consume. mutateDirection public mutateDirection ( direction : EdgeDirectionEnum ) : void Change the edge direction . direction Required Type: EdgeDirectionEnum mutateSource public mutateSource ( node : Node ) : void Change the edge source . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateTarget public mutateTarget ( node : Node ) : void Change the edge target . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node toString public toString () : string Get string representation of this edge. resolveChain public resolveChain () : object Resolve reference chain. resolveTargets public resolveTargets () : Node [] Resolve targets by following potential edge chain. {@link EdgeChain} Static Functions Name Description findAllInChain Find all matching edges based on predicate within an EdgeChain. findInChain Find first edge matching predicate within an EdgeChain. isRef Indicates if edge is a Ref based { @link Reference} edge. isReference Indicates if edge is a { @link Reference}. isAtt Indicates if edge in an Fn::GetAtt { @link Reference}. findAllInChain import { Graph } from '@aws-prototyping-sdk/cdk-graph' Graph . AttributeReference . findAllInChain ( chain : object , predicate : IEdgePredicate ) Find all matching edges based on predicate within an EdgeChain. chain Required Type: object predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.IEdgePredicate findInChain import { Graph } from '@aws-prototyping-sdk/cdk-graph' Graph . AttributeReference . findInChain ( chain : object , predicate : IEdgePredicate ) Find first edge matching predicate within an EdgeChain. chain Required Type: object predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.IEdgePredicate isRef import { Graph } from '@aws-prototyping-sdk/cdk-graph' Graph . AttributeReference . isRef ( edge : Edge ) Indicates if edge is a Ref based { @link Reference} edge. edge Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge isReference import { Graph } from '@aws-prototyping-sdk/cdk-graph' Graph . AttributeReference . isReference ( edge : Edge ) Indicates if edge is a { @link Reference}. edge Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge isAtt import { Graph } from '@aws-prototyping-sdk/cdk-graph' Graph . AttributeReference . isAtt ( edge : Edge ) Indicates if edge in an Fn::GetAtt { @link Reference}. edge Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge Properties Name Type Description attributes aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Get readonly record of all attributes. flags FlagEnum [] Get readonly list of all flags. isDestroyed boolean Indicates if the entity has been destroyed (eg: removed from store). isMutated boolean Indicates if the entity has had destructive mutations applied. metadata constructs.MetadataEntry[] Get readonly list of all metadata entries. store aws-prototyping-sdk/cdk-graph.Graph.Store Reference to the store. tags aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Get readonly record of all tags. uuid string Universally unique identifier. allowDestructiveMutations boolean Indicates if edge allows destructive mutations. direction EdgeDirectionEnum Indicates the direction in which the edge is directed. edgeType EdgeTypeEnum Type of edge. isClosed boolean Indicates if the Edge's source and target are the same, or were the same when it was created (prior to mutations). isCrossStack boolean Indicates if source and target nodes reside in different root stacks. isExtraneous boolean Indicates if edge is extraneous which is determined by explicitly having EXTRANEOUS flag added and/or being a closed loop (source===target). source aws-prototyping-sdk/cdk-graph.Graph.Node Edge source is the node that defines the edge (tail). target aws-prototyping-sdk/cdk-graph.Graph.Node Edge target is the node being referenced by the source (head). referenceType ReferenceTypeEnum Get type of reference. value string Get the resolved attribute value. attributes Required public readonly attributes : Attributes ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Get readonly record of all attributes. flags Required public readonly flags : FlagEnum []; Type: FlagEnum [] Get readonly list of all flags. isDestroyed Required public readonly isDestroyed : boolean ; Type: boolean Indicates if the entity has been destroyed (eg: removed from store). isMutated Required public readonly isMutated : boolean ; Type: boolean Indicates if the entity has had destructive mutations applied. metadata Required public readonly metadata : MetadataEntry []; Type: constructs.MetadataEntry[] Get readonly list of all metadata entries. store Required public readonly store : Store ; Type: aws-prototyping-sdk/cdk-graph.Graph.Store Reference to the store. tags Required public readonly tags : Tags ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Get readonly record of all tags. uuid Required public readonly uuid : string ; Type: string Universally unique identifier. allowDestructiveMutations Required public readonly allowDestructiveMutations : boolean ; Type: boolean Indicates if edge allows destructive mutations. direction Required public readonly direction : EdgeDirectionEnum ; Type: EdgeDirectionEnum Indicates the direction in which the edge is directed. edgeType Required public readonly edgeType : EdgeTypeEnum ; Type: EdgeTypeEnum Type of edge. isClosed Required public readonly isClosed : boolean ; Type: boolean Indicates if the Edge's source and target are the same, or were the same when it was created (prior to mutations). To check whether it was originally closed, use hasFlag(FlagEnum.CLOSED_EDGE) instead. isCrossStack Required public readonly isCrossStack : boolean ; Type: boolean Indicates if source and target nodes reside in different root stacks. isExtraneous Required public readonly isExtraneous : boolean ; Type: boolean Indicates if edge is extraneous which is determined by explicitly having EXTRANEOUS flag added and/or being a closed loop (source===target). source Required public readonly source : Node ; Type: aws-prototyping-sdk/cdk-graph.Graph.Node Edge source is the node that defines the edge (tail). target Required public readonly target : Node ; Type: aws-prototyping-sdk/cdk-graph.Graph.Node Edge target is the node being referenced by the source (head). referenceType Required public readonly referenceType : ReferenceTypeEnum ; Type: ReferenceTypeEnum Get type of reference. value Required public readonly value : string ; Type: string Get the resolved attribute value. Constants Name Type Description ATT_TYPE string Attribute defining the type of reference. PREFIX string Edge prefix to denote Fn::GetAtt type reference edge. ATT_VALUE string Attribute key for resolved value of attribute reference. ATT_TYPE Required public readonly ATT_TYPE : string ; Type: string Attribute defining the type of reference. PREFIX Required public readonly PREFIX : string ; Type: string Edge prefix to denote Fn::GetAtt type reference edge. ATT_VALUE Required public readonly ATT_VALUE : string ; Type: string Attribute key for resolved value of attribute reference. BaseEntity Implements: aws-prototyping-sdk/cdk-graph.SerializedGraph.ISerializableEntity Base class for all store entities (Node and Edges). Initializers import { Graph } from '@aws-prototyping-sdk/cdk-graph' new Graph . BaseEntity ( props : IBaseEntityProps ) Name Type Description props aws-prototyping-sdk/cdk-graph.Graph.IBaseEntityProps No description. props Required Type: aws-prototyping-sdk/cdk-graph.Graph.IBaseEntityProps Methods Name Description addAttribute Add attribute. addFlag Add flag. addMetadata Add metadata entry. addTag Add tag. applyData Applies data (attributes, metadata, tags, flag) to entity. findMetadata Retrieves all metadata entries of a given type. getAttribute Get attribute by key. getTag Get tag by key. hasAttribute Indicates if entity has a given attribute defined, and optionally with a specific value. hasFlag Indicates if entity has a given flag. hasMetadata Indicates if entity has matching metadata entry. hasTag Indicates if entity has tag, optionally verifying tag value. mutateDestroy Destroy the entity be removing all references and removing from store. setAttribute Set attribute. setTag Set tag. addAttribute public addAttribute ( key : string , value : any ) : void Add attribute. key Required Type: string value Required Type: any addFlag public addFlag ( flag : FlagEnum ) : void Add flag. flag Required Type: FlagEnum addMetadata public addMetadata ( metadataType : string , data : any ) : void Add metadata entry. metadataType Required Type: string data Required Type: any addTag public addTag ( key : string , value : string ) : void Add tag. key Required Type: string value Required Type: string applyData public applyData ( data : IBaseEntityDataProps , overwrite? : boolean , applyFlags? : boolean ) : void Applies data (attributes, metadata, tags, flag) to entity. Generally used only for mutations such as collapse and consume to retain data. data Required Type: aws-prototyping-sdk/cdk-graph.Graph.IBaseEntityDataProps The data to apply. overwrite Optional Type: boolean applyFlags Optional Type: boolean Indicates if data is overwritten - Indicates if flags should be applied. findMetadata public findMetadata ( metadataType : string ) : MetadataEntry [] Retrieves all metadata entries of a given type. metadataType Required Type: string getAttribute public getAttribute ( key : string ) : any Get attribute by key. key Required Type: string getTag public getTag ( key : string ) : string Get tag by key. key Required Type: string hasAttribute public hasAttribute ( key : string , value? : any ) : boolean Indicates if entity has a given attribute defined, and optionally with a specific value. key Required Type: string value Optional Type: any hasFlag public hasFlag ( flag : FlagEnum ) : boolean Indicates if entity has a given flag. flag Required Type: FlagEnum hasMetadata public hasMetadata ( metadataType : string , data : any ) : boolean Indicates if entity has matching metadata entry. metadataType Required Type: string data Required Type: any hasTag public hasTag ( key : string , value? : string ) : boolean Indicates if entity has tag, optionally verifying tag value. key Required Type: string value Optional Type: string mutateDestroy public mutateDestroy ( strict? : boolean ) : void Destroy the entity be removing all references and removing from store. strict Optional Type: boolean If strict , then entity must not have any references remaining when attempting to destroy. setAttribute public setAttribute ( key : string , value : any ) : void Set attribute. This will overwrite existing attribute. key Required Type: string value Required Type: any setTag public setTag ( key : string , value : string ) : void Set tag. Will overwrite existing tag. key Required Type: string value Required Type: string Properties Name Type Description attributes aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Get readonly record of all attributes. flags FlagEnum [] Get readonly list of all flags. isDestroyed boolean Indicates if the entity has been destroyed (eg: removed from store). isMutated boolean Indicates if the entity has had destructive mutations applied. metadata constructs.MetadataEntry[] Get readonly list of all metadata entries. store aws-prototyping-sdk/cdk-graph.Graph.Store Reference to the store. tags aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Get readonly record of all tags. uuid string Universally unique identifier. attributes Required public readonly attributes : Attributes ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Get readonly record of all attributes. flags Required public readonly flags : FlagEnum []; Type: FlagEnum [] Get readonly list of all flags. isDestroyed Required public readonly isDestroyed : boolean ; Type: boolean Indicates if the entity has been destroyed (eg: removed from store). isMutated Required public readonly isMutated : boolean ; Type: boolean Indicates if the entity has had destructive mutations applied. metadata Required public readonly metadata : MetadataEntry []; Type: constructs.MetadataEntry[] Get readonly list of all metadata entries. store Required public readonly store : Store ; Type: aws-prototyping-sdk/cdk-graph.Graph.Store Reference to the store. tags Required public readonly tags : Tags ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Get readonly record of all tags. uuid Required public readonly uuid : string ; Type: string Universally unique identifier. CdkGraphContext CdkGraph context. Initializers import { CdkGraphContext } from '@aws-prototyping-sdk/cdk-graph' new CdkGraphContext ( store : Store , outdir : string ) Name Type Description store aws-prototyping-sdk/cdk-graph.Graph.Store No description. outdir string No description. store Required Type: aws-prototyping-sdk/cdk-graph.Graph.Store outdir Required Type: string Methods Name Description getArtifact Get CdkGraph artifact by id. hasArtifactFile Indicates if context has an artifact with filename defined. logArtifact Logs an artifact entry. writeArtifact Writes artifact data to outdir and logs the entry. getArtifact public getArtifact ( id : string ) : CdkGraphArtifact Get CdkGraph artifact by id. id Required Type: string hasArtifactFile public hasArtifactFile ( filename : string ) : boolean Indicates if context has an artifact with filename defined. filename Required Type: string logArtifact public logArtifact ( source : CdkGraph | ICdkGraphPlugin , id : string , filepath : string , description? : string ) : CdkGraphArtifact Logs an artifact entry. In general this should not be called directly, as writeArtifact should be utilized to perform writing and logging artifacts. However some plugins utilize other tools that generate the artifacts, in which case the plugin would call this method to log the entry. source Required Type: CdkGraph | ICdkGraphPlugin The source of the artifact, such as the name of plugin. id Required Type: string Unique id of the artifact. filepath Required Type: string Full path where the artifact is stored. description Optional Type: string Description of the artifact. writeArtifact public writeArtifact ( source : CdkGraph | ICdkGraphPlugin , id : string , filename : string , data : string , description? : string ) : CdkGraphArtifact Writes artifact data to outdir and logs the entry. source Required Type: CdkGraph | ICdkGraphPlugin The source of the artifact, such as the name of plugin. id Required Type: string Unique id of the artifact. filename Required Type: string Relative name of the file. data Required Type: string description Optional Type: string Description of the artifact. Properties Name Type Description artifacts {[ key: string ]: CdkGraphArtifact } Get record of all graph artifacts keyed by artifact id. graphJson CdkGraphArtifact Get CdkGraph core graph.json artifact. outdir string No description. store aws-prototyping-sdk/cdk-graph.Graph.Store No description. artifacts Required public readonly artifacts : {[ key : string ] : CdkGraphArtifact }; Type: {[ key: string ]: CdkGraphArtifact } Get record of all graph artifacts keyed by artifact id. graphJson Required public readonly graphJson : CdkGraphArtifact ; Type: CdkGraphArtifact Get CdkGraph core graph.json artifact. outdir Required public readonly outdir : string ; Type: string store Required public readonly store : Store ; Type: aws-prototyping-sdk/cdk-graph.Graph.Store CfnResourceNode CfnResourceNode defines an L1 cdk resource. Initializers import { Graph } from '@aws-prototyping-sdk/cdk-graph' new Graph . CfnResourceNode ( props : ICfnResourceNodeProps ) Name Type Description props aws-prototyping-sdk/cdk-graph.Graph.ICfnResourceNodeProps No description. props Required Type: aws-prototyping-sdk/cdk-graph.Graph.ICfnResourceNodeProps Methods Name Description addAttribute Add attribute. addFlag Add flag. addMetadata Add metadata entry. addTag Add tag. applyData Applies data (attributes, metadata, tags, flag) to entity. findMetadata Retrieves all metadata entries of a given type. getAttribute Get attribute by key. getTag Get tag by key. hasAttribute Indicates if entity has a given attribute defined, and optionally with a specific value. hasFlag Indicates if entity has a given flag. hasMetadata Indicates if entity has matching metadata entry. hasTag Indicates if entity has tag, optionally verifying tag value. mutateDestroy Destroys this node by removing all references and removing this node from the store. setAttribute Set attribute. setTag Set tag. addChild Add child node. addLink Add link to another node. addReverseLink Add link from another node. doesDependOn Indicates if this node depends on another node . doesReference Indicates if this node references another node . find Recursively find the nearest sub-node matching predicate. findAll Return this construct and all of its sub-nodes in the given order. findAllLinks Return all direct links of this node and that of all sub-nodes. findAncestor Find nearest ancestor of this node matching given predicate. findChild Find child with given id . findLink Find link of this node based on predicate. findLinks Find all links of this node based on predicate. getCfnProp Get specific CloudFormation property. getChild Get child node with given id . getLinkChains Resolve all link chains. getNearestAncestor Gets the nearest common ancestor shared between this node and another node . isAncestor Indicates if a specific node is an ancestor of this node . isChild Indicates if specific node is a child of this node . mutateCollapse Collapses all sub-nodes of this node into this node . mutateCollapseTo Collapses this node into an ancestor . mutateCollapseToParent Collapses this node into it's parent node . mutateHoist Hoist this node to an ancestor by removing it from its current parent node and in turn moving it to the ancestor. mutateMove Move this node into a new parent node. mutateRemoveChild Remove a child node from this node . mutateRemoveLink Remove a link from this node . mutateRemoveReverseLink Remove a link to this node . mutateUncluster Hoist all children to parent and collapse node to parent. toString Get string representation of this node. isEquivalentFqn Evaluates if CfnResourceNode fqn is equivalent to ResourceNode fqn. addAttribute public addAttribute ( key : string , value : any ) : void Add attribute. key Required Type: string value Required Type: any addFlag public addFlag ( flag : FlagEnum ) : void Add flag. flag Required Type: FlagEnum addMetadata public addMetadata ( metadataType : string , data : any ) : void Add metadata entry. metadataType Required Type: string data Required Type: any addTag public addTag ( key : string , value : string ) : void Add tag. key Required Type: string value Required Type: string applyData public applyData ( data : IBaseEntityDataProps , overwrite? : boolean , applyFlags? : boolean ) : void Applies data (attributes, metadata, tags, flag) to entity. Generally used only for mutations such as collapse and consume to retain data. data Required Type: aws-prototyping-sdk/cdk-graph.Graph.IBaseEntityDataProps The data to apply. overwrite Optional Type: boolean applyFlags Optional Type: boolean Indicates if data is overwritten - Indicates if flags should be applied. findMetadata public findMetadata ( metadataType : string ) : MetadataEntry [] Retrieves all metadata entries of a given type. metadataType Required Type: string getAttribute public getAttribute ( key : string ) : any Get attribute by key. key Required Type: string getTag public getTag ( key : string ) : string Get tag by key. key Required Type: string hasAttribute public hasAttribute ( key : string , value? : any ) : boolean Indicates if entity has a given attribute defined, and optionally with a specific value. key Required Type: string value Optional Type: any hasFlag public hasFlag ( flag : FlagEnum ) : boolean Indicates if entity has a given flag. flag Required Type: FlagEnum hasMetadata public hasMetadata ( metadataType : string , data : any ) : boolean Indicates if entity has matching metadata entry. metadataType Required Type: string data Required Type: any hasTag public hasTag ( key : string , value? : string ) : boolean Indicates if entity has tag, optionally verifying tag value. key Required Type: string value Optional Type: string mutateDestroy public mutateDestroy ( strict? : boolean ) : void Destroys this node by removing all references and removing this node from the store. strict Optional Type: boolean setAttribute public setAttribute ( key : string , value : any ) : void Set attribute. This will overwrite existing attribute. key Required Type: string value Required Type: any setTag public setTag ( key : string , value : string ) : void Set tag. Will overwrite existing tag. key Required Type: string value Required Type: string addChild public addChild ( node : Node ) : void Add child node. node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node addLink public addLink ( edge : Edge ) : void Add link to another node. edge Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge addReverseLink public addReverseLink ( edge : Edge ) : void Add link from another node. edge Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge doesDependOn public doesDependOn ( node : Node ) : boolean Indicates if this node depends on another node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node doesReference public doesReference ( node : Node ) : boolean Indicates if this node references another node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node find public find ( predicate : INodePredicate ) : Node Recursively find the nearest sub-node matching predicate. predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.INodePredicate findAll public findAll ( options? : IFindNodeOptions ) : Node [] Return this construct and all of its sub-nodes in the given order. Optionally filter nodes based on predicate. options Optional Type: aws-prototyping-sdk/cdk-graph.Graph.IFindNodeOptions findAllLinks public findAllLinks ( options? : IFindEdgeOptions ) : Edge [] Return all direct links of this node and that of all sub-nodes. Optionally filter links based on predicate. options Optional Type: aws-prototyping-sdk/cdk-graph.Graph.IFindEdgeOptions findAncestor public findAncestor ( predicate : INodePredicate , max? : number ) : Node Find nearest ancestor of this node matching given predicate. predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.INodePredicate Predicate to match ancestor. max Optional Type: number findChild public findChild ( id : string ) : Node Find child with given id . Similar to find but does not throw error if no child found. id Required Type: string findLink public findLink ( predicate : IEdgePredicate , reverse? : boolean , follow? : boolean , direct? : boolean ) : Edge Find link of this node based on predicate. By default this will follow link chains to evaluate the predicate against and return the matching direct link of this node. predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.IEdgePredicate Edge predicate function to match edge. reverse Optional Type: boolean Indicates if links are search in reverse order. follow Optional Type: boolean Indicates if link chain is followed. direct Optional Type: boolean Indicates that only direct links should be searched. findLinks public findLinks ( predicate : IEdgePredicate , reverse? : boolean , follow? : boolean , direct? : boolean ) : Edge [] Find all links of this node based on predicate. By default this will follow link chains to evaluate the predicate against and return the matching direct links of this node. predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.IEdgePredicate Edge predicate function to match edge. reverse Optional Type: boolean Indicates if links are search in reverse order. follow Optional Type: boolean Indicates if link chain is followed. direct Optional Type: boolean Indicates that only direct links should be searched. getCfnProp public getCfnProp ( key : string ) : string | number | boolean | PlainObject | string | number | boolean | PlainObject [] Get specific CloudFormation property. key Required Type: string getChild public getChild ( id : string ) : Node Get child node with given id . id Required Type: string getLinkChains public getLinkChains ( reverse? : boolean ) : object [] Resolve all link chains. {@link EdgeChain} reverse Optional Type: boolean getNearestAncestor public getNearestAncestor ( node : Node ) : Node Gets the nearest common ancestor shared between this node and another node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node isAncestor public isAncestor ( ancestor : Node ) : boolean Indicates if a specific node is an ancestor of this node . ancestor Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node isChild public isChild ( node : Node ) : boolean Indicates if specific node is a child of this node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateCollapse public mutateCollapse () : void Collapses all sub-nodes of this node into this node . mutateCollapseTo public mutateCollapseTo ( ancestor : Node ) : Node Collapses this node into an ancestor . ancestor Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateCollapseToParent public mutateCollapseToParent () : Node Collapses this node into it's parent node . mutateHoist public mutateHoist ( newParent : Node ) : void Hoist this node to an ancestor by removing it from its current parent node and in turn moving it to the ancestor. newParent Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateMove public mutateMove ( newParent : Node ) : void Move this node into a new parent node. newParent Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node The parent to move this node to. mutateRemoveChild public mutateRemoveChild ( node : Node ) : boolean Remove a child node from this node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateRemoveLink public mutateRemoveLink ( link : Edge ) : boolean Remove a link from this node . link Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge mutateRemoveReverseLink public mutateRemoveReverseLink ( link : Edge ) : boolean Remove a link to this node . link Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge mutateUncluster public mutateUncluster () : void Hoist all children to parent and collapse node to parent. toString public toString () : string Get string representation of this node. isEquivalentFqn public isEquivalentFqn ( resource : ResourceNode ) : boolean Evaluates if CfnResourceNode fqn is equivalent to ResourceNode fqn. Example `aws-cdk-lib.aws_lambda.Function` => `aws-cdk-lib.aws_lambda.CfnFunction` resource Required Type: aws-prototyping-sdk/cdk-graph.Graph.ResourceNode { @link Graph.ResourceNode} to compare. Static Functions Name Description isCfnResourceNode Indicates if a node is a { @link CfnResourceNode}. isCfnResourceNode import { Graph } from '@aws-prototyping-sdk/cdk-graph' Graph . CfnResourceNode . isCfnResourceNode ( node : Node ) Indicates if a node is a { @link CfnResourceNode}. node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node Properties Name Type Description attributes aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Get readonly record of all attributes. flags FlagEnum [] Get readonly list of all flags. isDestroyed boolean Indicates if the entity has been destroyed (eg: removed from store). isMutated boolean Indicates if the entity has had destructive mutations applied. metadata constructs.MetadataEntry[] Get readonly list of all metadata entries. store aws-prototyping-sdk/cdk-graph.Graph.Store Reference to the store. tags aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Get readonly record of all tags. uuid string Universally unique identifier. allowDestructiveMutations boolean Indicates if this node allows destructive mutations. children aws-prototyping-sdk/cdk-graph.Graph.Node [] Get all direct child nodes. dependedOnBy aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that depend on this node . dependencies aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that this node depends on . dependencyLinks aws-prototyping-sdk/cdk-graph.Graph.Dependency [] Gets list of { @link Dependency} links (edges) where this node is the source . depth number Indicates the depth of the node relative to root (0). id string Node id, which is only unique within parent scope. isAsset boolean Indicates if this node is considered a { @link FlagEnum.ASSET}. isCfnFqn boolean Indicates if node ConstructInfoFqn denotes a aws-cdk-lib.*.Cfn* construct. isCluster boolean Indicates if this node is considered a { @link FlagEnum.CLUSTER}. isCustomResource boolean Indicates if node is a Custom Resource . isExtraneous boolean Indicates if this node is considered a { @link FlagEnum.EXTRANEOUS} node or determined to be extraneous: - Clusters that contain no children. isGraphContainer boolean Indicates if this node is considered a { @link FlagEnum.GRAPH_CONTAINER}. isLeaf boolean Indicates if this node is a leaf node, which means it does not have children. isTopLevel boolean Indicates if node is direct child of the graph root node. links aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all links (edges) in which this node is the source . nodeType NodeTypeEnum Type of node. path string Path of the node. referencedBy aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that reference this node . referenceLinks aws-prototyping-sdk/cdk-graph.Graph.Reference [] Gets list of { @link Reference} links (edges) where this node is the source . references aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that this node references . reverseDependencyLinks aws-prototyping-sdk/cdk-graph.Graph.Dependency [] Gets list of { @link Dependency} links (edges) where this node is the target . reverseLinks aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all links (edges) in which this node is the target . reverseReferenceLinks aws-prototyping-sdk/cdk-graph.Graph.Reference [] Gets list of { @link Reference} links (edges) where this node is the target . scopes aws-prototyping-sdk/cdk-graph.Graph.Node [] Gets descending ordered list of ancestors from the root. siblings aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of siblings of this node. cfnProps aws-prototyping-sdk/cdk-graph.SerializedGraph.PlainObject Gets CloudFormation properties for this node. cfnType string Get the CloudFormation resource type for this node. constructInfo ConstructInfo Synthesized construct information defining jii resolution data. constructInfoFqn string Synthesized construct information defining jii resolution data. logicalId string Logical id of the node, which is only unique within containing stack. parent aws-prototyping-sdk/cdk-graph.Graph.Node Parent node. rootStack aws-prototyping-sdk/cdk-graph.Graph.StackNode Get root stack. stack aws-prototyping-sdk/cdk-graph.Graph.StackNode Stack the node is contained in. isImport boolean Indicates if this CfnResource is imported (eg: s3.Bucket.fromBucketArn ). resource aws-prototyping-sdk/cdk-graph.Graph.ResourceNode Reference to the L2 Resource that wraps this L1 CfnResource if it is wrapped. attributes Required public readonly attributes : Attributes ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Get readonly record of all attributes. flags Required public readonly flags : FlagEnum []; Type: FlagEnum [] Get readonly list of all flags. isDestroyed Required public readonly isDestroyed : boolean ; Type: boolean Indicates if the entity has been destroyed (eg: removed from store). isMutated Required public readonly isMutated : boolean ; Type: boolean Indicates if the entity has had destructive mutations applied. metadata Required public readonly metadata : MetadataEntry []; Type: constructs.MetadataEntry[] Get readonly list of all metadata entries. store Required public readonly store : Store ; Type: aws-prototyping-sdk/cdk-graph.Graph.Store Reference to the store. tags Required public readonly tags : Tags ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Get readonly record of all tags. uuid Required public readonly uuid : string ; Type: string Universally unique identifier. allowDestructiveMutations Required public readonly allowDestructiveMutations : boolean ; Type: boolean Indicates if this node allows destructive mutations. {@link Store.allowDestructiveMutations} children Required public readonly children : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get all direct child nodes. dependedOnBy Required public readonly dependedOnBy : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that depend on this node . {@link Node.reverseDependencyLinks} dependencies Required public readonly dependencies : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that this node depends on . {@link Node.dependencyLinks} dependencyLinks Required public readonly dependencyLinks : Dependency []; Type: aws-prototyping-sdk/cdk-graph.Graph.Dependency [] Gets list of { @link Dependency} links (edges) where this node is the source . depth Required public readonly depth : number ; Type: number Indicates the depth of the node relative to root (0). id Required public readonly id : string ; Type: string Node id, which is only unique within parent scope. isAsset Required public readonly isAsset : boolean ; Type: boolean Indicates if this node is considered a { @link FlagEnum.ASSET}. isCfnFqn Required public readonly isCfnFqn : boolean ; Type: boolean Indicates if node ConstructInfoFqn denotes a aws-cdk-lib.*.Cfn* construct. {@link FlagEnum.CFN_FQN} isCluster Required public readonly isCluster : boolean ; Type: boolean Indicates if this node is considered a { @link FlagEnum.CLUSTER}. isCustomResource Required public readonly isCustomResource : boolean ; Type: boolean Indicates if node is a Custom Resource . isExtraneous Required public readonly isExtraneous : boolean ; Type: boolean Indicates if this node is considered a { @link FlagEnum.EXTRANEOUS} node or determined to be extraneous: - Clusters that contain no children. isGraphContainer Required public readonly isGraphContainer : boolean ; Type: boolean Indicates if this node is considered a { @link FlagEnum.GRAPH_CONTAINER}. isLeaf Required public readonly isLeaf : boolean ; Type: boolean Indicates if this node is a leaf node, which means it does not have children. isTopLevel Required public readonly isTopLevel : boolean ; Type: boolean Indicates if node is direct child of the graph root node. links Required public readonly links : Edge []; Type: aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all links (edges) in which this node is the source . nodeType Required public readonly nodeType : NodeTypeEnum ; Type: NodeTypeEnum Type of node. path Required public readonly path : string ; Type: string Path of the node. referencedBy Required public readonly referencedBy : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that reference this node . {@link Node.reverseReferenceLinks} referenceLinks Required public readonly referenceLinks : Reference []; Type: aws-prototyping-sdk/cdk-graph.Graph.Reference [] Gets list of { @link Reference} links (edges) where this node is the source . references Required public readonly references : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that this node references . {@link Node.referenceLinks} reverseDependencyLinks Required public readonly reverseDependencyLinks : Dependency []; Type: aws-prototyping-sdk/cdk-graph.Graph.Dependency [] Gets list of { @link Dependency} links (edges) where this node is the target . reverseLinks Required public readonly reverseLinks : Edge []; Type: aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all links (edges) in which this node is the target . reverseReferenceLinks Required public readonly reverseReferenceLinks : Reference []; Type: aws-prototyping-sdk/cdk-graph.Graph.Reference [] Gets list of { @link Reference} links (edges) where this node is the target . scopes Required public readonly scopes : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Gets descending ordered list of ancestors from the root. siblings Required public readonly siblings : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of siblings of this node. cfnProps Optional public readonly cfnProps : PlainObject ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.PlainObject Gets CloudFormation properties for this node. cfnType Optional public readonly cfnType : string ; Type: string Get the CloudFormation resource type for this node. constructInfo Optional public readonly constructInfo : ConstructInfo ; Type: ConstructInfo Synthesized construct information defining jii resolution data. constructInfoFqn Optional public readonly constructInfoFqn : string ; Type: string Synthesized construct information defining jii resolution data. logicalId Optional public readonly logicalId : string ; Type: string Logical id of the node, which is only unique within containing stack. parent Optional public readonly parent : Node ; Type: aws-prototyping-sdk/cdk-graph.Graph.Node Parent node. Only the root node should not have parent. rootStack Optional public readonly rootStack : StackNode ; Type: aws-prototyping-sdk/cdk-graph.Graph.StackNode Get root stack. stack Optional public readonly stack : StackNode ; Type: aws-prototyping-sdk/cdk-graph.Graph.StackNode Stack the node is contained in. isImport Required public readonly isImport : boolean ; Type: boolean Indicates if this CfnResource is imported (eg: s3.Bucket.fromBucketArn ). resource Optional public readonly resource : ResourceNode ; Type: aws-prototyping-sdk/cdk-graph.Graph.ResourceNode Reference to the L2 Resource that wraps this L1 CfnResource if it is wrapped. Constants Name Type Description ATT_IMPORT_ARN_TOKEN string Normalized CfnReference attribute. ATT_IMPORT_ARN_TOKEN Required public readonly ATT_IMPORT_ARN_TOKEN : string ; Type: string Normalized CfnReference attribute. Dependency Dependency edge class defines CloudFormation dependency between resources. Initializers import { Graph } from '@aws-prototyping-sdk/cdk-graph' new Graph . Dependency ( props : ITypedEdgeProps ) Name Type Description props aws-prototyping-sdk/cdk-graph.Graph.ITypedEdgeProps No description. props Required Type: aws-prototyping-sdk/cdk-graph.Graph.ITypedEdgeProps Methods Name Description addAttribute Add attribute. addFlag Add flag. addMetadata Add metadata entry. addTag Add tag. applyData Applies data (attributes, metadata, tags, flag) to entity. findMetadata Retrieves all metadata entries of a given type. getAttribute Get attribute by key. getTag Get tag by key. hasAttribute Indicates if entity has a given attribute defined, and optionally with a specific value. hasFlag Indicates if entity has a given flag. hasMetadata Indicates if entity has matching metadata entry. hasTag Indicates if entity has tag, optionally verifying tag value. mutateDestroy Destroy the edge. setAttribute Set attribute. setTag Set tag. isEquivalent Indicates if this edge is equivalent to another edge. mutateConsume Merge an equivalent edge's data into this edge and destroy the other edge. mutateDirection Change the edge direction . mutateSource Change the edge source . mutateTarget Change the edge target . toString Get string representation of this edge. addAttribute public addAttribute ( key : string , value : any ) : void Add attribute. key Required Type: string value Required Type: any addFlag public addFlag ( flag : FlagEnum ) : void Add flag. flag Required Type: FlagEnum addMetadata public addMetadata ( metadataType : string , data : any ) : void Add metadata entry. metadataType Required Type: string data Required Type: any addTag public addTag ( key : string , value : string ) : void Add tag. key Required Type: string value Required Type: string applyData public applyData ( data : IBaseEntityDataProps , overwrite? : boolean , applyFlags? : boolean ) : void Applies data (attributes, metadata, tags, flag) to entity. Generally used only for mutations such as collapse and consume to retain data. data Required Type: aws-prototyping-sdk/cdk-graph.Graph.IBaseEntityDataProps The data to apply. overwrite Optional Type: boolean applyFlags Optional Type: boolean Indicates if data is overwritten - Indicates if flags should be applied. findMetadata public findMetadata ( metadataType : string ) : MetadataEntry [] Retrieves all metadata entries of a given type. metadataType Required Type: string getAttribute public getAttribute ( key : string ) : any Get attribute by key. key Required Type: string getTag public getTag ( key : string ) : string Get tag by key. key Required Type: string hasAttribute public hasAttribute ( key : string , value? : any ) : boolean Indicates if entity has a given attribute defined, and optionally with a specific value. key Required Type: string value Optional Type: any hasFlag public hasFlag ( flag : FlagEnum ) : boolean Indicates if entity has a given flag. flag Required Type: FlagEnum hasMetadata public hasMetadata ( metadataType : string , data : any ) : boolean Indicates if entity has matching metadata entry. metadataType Required Type: string data Required Type: any hasTag public hasTag ( key : string , value? : string ) : boolean Indicates if entity has tag, optionally verifying tag value. key Required Type: string value Optional Type: string mutateDestroy public mutateDestroy ( _strict? : boolean ) : void Destroy the edge. Remove all references and remove from store. _strict Optional Type: boolean setAttribute public setAttribute ( key : string , value : any ) : void Set attribute. This will overwrite existing attribute. key Required Type: string value Required Type: any setTag public setTag ( key : string , value : string ) : void Set tag. Will overwrite existing tag. key Required Type: string value Required Type: string isEquivalent public isEquivalent ( edge : Edge ) : boolean Indicates if this edge is equivalent to another edge. Edges are considered equivalent if they share same type, source, and target. edge Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge mutateConsume public mutateConsume ( edge : Edge ) : void Merge an equivalent edge's data into this edge and destroy the other edge. Used during filtering operations to consolidate equivalent edges. edge Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge The edge to consume. mutateDirection public mutateDirection ( direction : EdgeDirectionEnum ) : void Change the edge direction . direction Required Type: EdgeDirectionEnum mutateSource public mutateSource ( node : Node ) : void Change the edge source . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateTarget public mutateTarget ( node : Node ) : void Change the edge target . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node toString public toString () : string Get string representation of this edge. Static Functions Name Description findAllInChain Find all matching edges based on predicate within an EdgeChain. findInChain Find first edge matching predicate within an EdgeChain. isDependency Indicates if given edge is a { @link Dependency} edge. findAllInChain import { Graph } from '@aws-prototyping-sdk/cdk-graph' Graph . Dependency . findAllInChain ( chain : object , predicate : IEdgePredicate ) Find all matching edges based on predicate within an EdgeChain. chain Required Type: object predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.IEdgePredicate findInChain import { Graph } from '@aws-prototyping-sdk/cdk-graph' Graph . Dependency . findInChain ( chain : object , predicate : IEdgePredicate ) Find first edge matching predicate within an EdgeChain. chain Required Type: object predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.IEdgePredicate isDependency import { Graph } from '@aws-prototyping-sdk/cdk-graph' Graph . Dependency . isDependency ( edge : Edge ) Indicates if given edge is a { @link Dependency} edge. edge Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge Properties Name Type Description attributes aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Get readonly record of all attributes. flags FlagEnum [] Get readonly list of all flags. isDestroyed boolean Indicates if the entity has been destroyed (eg: removed from store). isMutated boolean Indicates if the entity has had destructive mutations applied. metadata constructs.MetadataEntry[] Get readonly list of all metadata entries. store aws-prototyping-sdk/cdk-graph.Graph.Store Reference to the store. tags aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Get readonly record of all tags. uuid string Universally unique identifier. allowDestructiveMutations boolean Indicates if edge allows destructive mutations. direction EdgeDirectionEnum Indicates the direction in which the edge is directed. edgeType EdgeTypeEnum Type of edge. isClosed boolean Indicates if the Edge's source and target are the same, or were the same when it was created (prior to mutations). isCrossStack boolean Indicates if source and target nodes reside in different root stacks. isExtraneous boolean Indicates if edge is extraneous which is determined by explicitly having EXTRANEOUS flag added and/or being a closed loop (source===target). source aws-prototyping-sdk/cdk-graph.Graph.Node Edge source is the node that defines the edge (tail). target aws-prototyping-sdk/cdk-graph.Graph.Node Edge target is the node being referenced by the source (head). attributes Required public readonly attributes : Attributes ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Get readonly record of all attributes. flags Required public readonly flags : FlagEnum []; Type: FlagEnum [] Get readonly list of all flags. isDestroyed Required public readonly isDestroyed : boolean ; Type: boolean Indicates if the entity has been destroyed (eg: removed from store). isMutated Required public readonly isMutated : boolean ; Type: boolean Indicates if the entity has had destructive mutations applied. metadata Required public readonly metadata : MetadataEntry []; Type: constructs.MetadataEntry[] Get readonly list of all metadata entries. store Required public readonly store : Store ; Type: aws-prototyping-sdk/cdk-graph.Graph.Store Reference to the store. tags Required public readonly tags : Tags ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Get readonly record of all tags. uuid Required public readonly uuid : string ; Type: string Universally unique identifier. allowDestructiveMutations Required public readonly allowDestructiveMutations : boolean ; Type: boolean Indicates if edge allows destructive mutations. direction Required public readonly direction : EdgeDirectionEnum ; Type: EdgeDirectionEnum Indicates the direction in which the edge is directed. edgeType Required public readonly edgeType : EdgeTypeEnum ; Type: EdgeTypeEnum Type of edge. isClosed Required public readonly isClosed : boolean ; Type: boolean Indicates if the Edge's source and target are the same, or were the same when it was created (prior to mutations). To check whether it was originally closed, use hasFlag(FlagEnum.CLOSED_EDGE) instead. isCrossStack Required public readonly isCrossStack : boolean ; Type: boolean Indicates if source and target nodes reside in different root stacks. isExtraneous Required public readonly isExtraneous : boolean ; Type: boolean Indicates if edge is extraneous which is determined by explicitly having EXTRANEOUS flag added and/or being a closed loop (source===target). source Required public readonly source : Node ; Type: aws-prototyping-sdk/cdk-graph.Graph.Node Edge source is the node that defines the edge (tail). target Required public readonly target : Node ; Type: aws-prototyping-sdk/cdk-graph.Graph.Node Edge target is the node being referenced by the source (head). Constants Name Type Description PREFIX string Edge prefix to denote dependency edge. PREFIX Required public readonly PREFIX : string ; Type: string Edge prefix to denote dependency edge. Edge Implements: aws-prototyping-sdk/cdk-graph.SerializedGraph.ISerializableEdge Edge class defines a link (relationship) between nodes, as in standard graph theory . Initializers import { Graph } from '@aws-prototyping-sdk/cdk-graph' new Graph . Edge ( props : IEdgeProps ) Name Type Description props aws-prototyping-sdk/cdk-graph.Graph.IEdgeProps No description. props Required Type: aws-prototyping-sdk/cdk-graph.Graph.IEdgeProps Methods Name Description addAttribute Add attribute. addFlag Add flag. addMetadata Add metadata entry. addTag Add tag. applyData Applies data (attributes, metadata, tags, flag) to entity. findMetadata Retrieves all metadata entries of a given type. getAttribute Get attribute by key. getTag Get tag by key. hasAttribute Indicates if entity has a given attribute defined, and optionally with a specific value. hasFlag Indicates if entity has a given flag. hasMetadata Indicates if entity has matching metadata entry. hasTag Indicates if entity has tag, optionally verifying tag value. mutateDestroy Destroy the edge. setAttribute Set attribute. setTag Set tag. isEquivalent Indicates if this edge is equivalent to another edge. mutateConsume Merge an equivalent edge's data into this edge and destroy the other edge. mutateDirection Change the edge direction . mutateSource Change the edge source . mutateTarget Change the edge target . toString Get string representation of this edge. addAttribute public addAttribute ( key : string , value : any ) : void Add attribute. key Required Type: string value Required Type: any addFlag public addFlag ( flag : FlagEnum ) : void Add flag. flag Required Type: FlagEnum addMetadata public addMetadata ( metadataType : string , data : any ) : void Add metadata entry. metadataType Required Type: string data Required Type: any addTag public addTag ( key : string , value : string ) : void Add tag. key Required Type: string value Required Type: string applyData public applyData ( data : IBaseEntityDataProps , overwrite? : boolean , applyFlags? : boolean ) : void Applies data (attributes, metadata, tags, flag) to entity. Generally used only for mutations such as collapse and consume to retain data. data Required Type: aws-prototyping-sdk/cdk-graph.Graph.IBaseEntityDataProps The data to apply. overwrite Optional Type: boolean applyFlags Optional Type: boolean Indicates if data is overwritten - Indicates if flags should be applied. findMetadata public findMetadata ( metadataType : string ) : MetadataEntry [] Retrieves all metadata entries of a given type. metadataType Required Type: string getAttribute public getAttribute ( key : string ) : any Get attribute by key. key Required Type: string getTag public getTag ( key : string ) : string Get tag by key. key Required Type: string hasAttribute public hasAttribute ( key : string , value? : any ) : boolean Indicates if entity has a given attribute defined, and optionally with a specific value. key Required Type: string value Optional Type: any hasFlag public hasFlag ( flag : FlagEnum ) : boolean Indicates if entity has a given flag. flag Required Type: FlagEnum hasMetadata public hasMetadata ( metadataType : string , data : any ) : boolean Indicates if entity has matching metadata entry. metadataType Required Type: string data Required Type: any hasTag public hasTag ( key : string , value? : string ) : boolean Indicates if entity has tag, optionally verifying tag value. key Required Type: string value Optional Type: string mutateDestroy public mutateDestroy ( _strict? : boolean ) : void Destroy the edge. Remove all references and remove from store. _strict Optional Type: boolean setAttribute public setAttribute ( key : string , value : any ) : void Set attribute. This will overwrite existing attribute. key Required Type: string value Required Type: any setTag public setTag ( key : string , value : string ) : void Set tag. Will overwrite existing tag. key Required Type: string value Required Type: string isEquivalent public isEquivalent ( edge : Edge ) : boolean Indicates if this edge is equivalent to another edge. Edges are considered equivalent if they share same type, source, and target. edge Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge mutateConsume public mutateConsume ( edge : Edge ) : void Merge an equivalent edge's data into this edge and destroy the other edge. Used during filtering operations to consolidate equivalent edges. edge Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge The edge to consume. mutateDirection public mutateDirection ( direction : EdgeDirectionEnum ) : void Change the edge direction . direction Required Type: EdgeDirectionEnum mutateSource public mutateSource ( node : Node ) : void Change the edge source . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateTarget public mutateTarget ( node : Node ) : void Change the edge target . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node toString public toString () : string Get string representation of this edge. Static Functions Name Description findAllInChain Find all matching edges based on predicate within an EdgeChain. findInChain Find first edge matching predicate within an EdgeChain. findAllInChain import { Graph } from '@aws-prototyping-sdk/cdk-graph' Graph . Edge . findAllInChain ( chain : object , predicate : IEdgePredicate ) Find all matching edges based on predicate within an EdgeChain. chain Required Type: object predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.IEdgePredicate findInChain import { Graph } from '@aws-prototyping-sdk/cdk-graph' Graph . Edge . findInChain ( chain : object , predicate : IEdgePredicate ) Find first edge matching predicate within an EdgeChain. chain Required Type: object predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.IEdgePredicate Properties Name Type Description attributes aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Get readonly record of all attributes. flags FlagEnum [] Get readonly list of all flags. isDestroyed boolean Indicates if the entity has been destroyed (eg: removed from store). isMutated boolean Indicates if the entity has had destructive mutations applied. metadata constructs.MetadataEntry[] Get readonly list of all metadata entries. store aws-prototyping-sdk/cdk-graph.Graph.Store Reference to the store. tags aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Get readonly record of all tags. uuid string Universally unique identifier. allowDestructiveMutations boolean Indicates if edge allows destructive mutations. direction EdgeDirectionEnum Indicates the direction in which the edge is directed. edgeType EdgeTypeEnum Type of edge. isClosed boolean Indicates if the Edge's source and target are the same, or were the same when it was created (prior to mutations). isCrossStack boolean Indicates if source and target nodes reside in different root stacks. isExtraneous boolean Indicates if edge is extraneous which is determined by explicitly having EXTRANEOUS flag added and/or being a closed loop (source===target). source aws-prototyping-sdk/cdk-graph.Graph.Node Edge source is the node that defines the edge (tail). target aws-prototyping-sdk/cdk-graph.Graph.Node Edge target is the node being referenced by the source (head). attributes Required public readonly attributes : Attributes ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Get readonly record of all attributes. flags Required public readonly flags : FlagEnum []; Type: FlagEnum [] Get readonly list of all flags. isDestroyed Required public readonly isDestroyed : boolean ; Type: boolean Indicates if the entity has been destroyed (eg: removed from store). isMutated Required public readonly isMutated : boolean ; Type: boolean Indicates if the entity has had destructive mutations applied. metadata Required public readonly metadata : MetadataEntry []; Type: constructs.MetadataEntry[] Get readonly list of all metadata entries. store Required public readonly store : Store ; Type: aws-prototyping-sdk/cdk-graph.Graph.Store Reference to the store. tags Required public readonly tags : Tags ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Get readonly record of all tags. uuid Required public readonly uuid : string ; Type: string Universally unique identifier. allowDestructiveMutations Required public readonly allowDestructiveMutations : boolean ; Type: boolean Indicates if edge allows destructive mutations. direction Required public readonly direction : EdgeDirectionEnum ; Type: EdgeDirectionEnum Indicates the direction in which the edge is directed. edgeType Required public readonly edgeType : EdgeTypeEnum ; Type: EdgeTypeEnum Type of edge. isClosed Required public readonly isClosed : boolean ; Type: boolean Indicates if the Edge's source and target are the same, or were the same when it was created (prior to mutations). To check whether it was originally closed, use hasFlag(FlagEnum.CLOSED_EDGE) instead. isCrossStack Required public readonly isCrossStack : boolean ; Type: boolean Indicates if source and target nodes reside in different root stacks. isExtraneous Required public readonly isExtraneous : boolean ; Type: boolean Indicates if edge is extraneous which is determined by explicitly having EXTRANEOUS flag added and/or being a closed loop (source===target). source Required public readonly source : Node ; Type: aws-prototyping-sdk/cdk-graph.Graph.Node Edge source is the node that defines the edge (tail). target Required public readonly target : Node ; Type: aws-prototyping-sdk/cdk-graph.Graph.Node Edge target is the node being referenced by the source (head). ImportReference Import reference defines Fn::ImportValue type reference edge. Initializers import { Graph } from '@aws-prototyping-sdk/cdk-graph' new Graph . ImportReference ( props : ITypedEdgeProps ) Name Type Description props aws-prototyping-sdk/cdk-graph.Graph.ITypedEdgeProps No description. props Required Type: aws-prototyping-sdk/cdk-graph.Graph.ITypedEdgeProps Methods Name Description addAttribute Add attribute. addFlag Add flag. addMetadata Add metadata entry. addTag Add tag. applyData Applies data (attributes, metadata, tags, flag) to entity. findMetadata Retrieves all metadata entries of a given type. getAttribute Get attribute by key. getTag Get tag by key. hasAttribute Indicates if entity has a given attribute defined, and optionally with a specific value. hasFlag Indicates if entity has a given flag. hasMetadata Indicates if entity has matching metadata entry. hasTag Indicates if entity has tag, optionally verifying tag value. mutateDestroy Destroy the edge. setAttribute Set attribute. setTag Set tag. isEquivalent Indicates if this edge is equivalent to another edge. mutateConsume Merge an equivalent edge's data into this edge and destroy the other edge. mutateDirection Change the edge direction . mutateSource Change the edge source . mutateTarget Change the edge target . toString Get string representation of this edge. resolveChain Resolve reference chain. resolveTargets Resolve targets by following potential edge chain. addAttribute public addAttribute ( key : string , value : any ) : void Add attribute. key Required Type: string value Required Type: any addFlag public addFlag ( flag : FlagEnum ) : void Add flag. flag Required Type: FlagEnum addMetadata public addMetadata ( metadataType : string , data : any ) : void Add metadata entry. metadataType Required Type: string data Required Type: any addTag public addTag ( key : string , value : string ) : void Add tag. key Required Type: string value Required Type: string applyData public applyData ( data : IBaseEntityDataProps , overwrite? : boolean , applyFlags? : boolean ) : void Applies data (attributes, metadata, tags, flag) to entity. Generally used only for mutations such as collapse and consume to retain data. data Required Type: aws-prototyping-sdk/cdk-graph.Graph.IBaseEntityDataProps The data to apply. overwrite Optional Type: boolean applyFlags Optional Type: boolean Indicates if data is overwritten - Indicates if flags should be applied. findMetadata public findMetadata ( metadataType : string ) : MetadataEntry [] Retrieves all metadata entries of a given type. metadataType Required Type: string getAttribute public getAttribute ( key : string ) : any Get attribute by key. key Required Type: string getTag public getTag ( key : string ) : string Get tag by key. key Required Type: string hasAttribute public hasAttribute ( key : string , value? : any ) : boolean Indicates if entity has a given attribute defined, and optionally with a specific value. key Required Type: string value Optional Type: any hasFlag public hasFlag ( flag : FlagEnum ) : boolean Indicates if entity has a given flag. flag Required Type: FlagEnum hasMetadata public hasMetadata ( metadataType : string , data : any ) : boolean Indicates if entity has matching metadata entry. metadataType Required Type: string data Required Type: any hasTag public hasTag ( key : string , value? : string ) : boolean Indicates if entity has tag, optionally verifying tag value. key Required Type: string value Optional Type: string mutateDestroy public mutateDestroy ( _strict? : boolean ) : void Destroy the edge. Remove all references and remove from store. _strict Optional Type: boolean setAttribute public setAttribute ( key : string , value : any ) : void Set attribute. This will overwrite existing attribute. key Required Type: string value Required Type: any setTag public setTag ( key : string , value : string ) : void Set tag. Will overwrite existing tag. key Required Type: string value Required Type: string isEquivalent public isEquivalent ( edge : Edge ) : boolean Indicates if this edge is equivalent to another edge. Edges are considered equivalent if they share same type, source, and target. edge Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge mutateConsume public mutateConsume ( edge : Edge ) : void Merge an equivalent edge's data into this edge and destroy the other edge. Used during filtering operations to consolidate equivalent edges. edge Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge The edge to consume. mutateDirection public mutateDirection ( direction : EdgeDirectionEnum ) : void Change the edge direction . direction Required Type: EdgeDirectionEnum mutateSource public mutateSource ( node : Node ) : void Change the edge source . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateTarget public mutateTarget ( node : Node ) : void Change the edge target . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node toString public toString () : string Get string representation of this edge. resolveChain public resolveChain () : object Resolve reference chain. resolveTargets public resolveTargets () : Node [] Resolve targets by following potential edge chain. {@link EdgeChain} Static Functions Name Description findAllInChain Find all matching edges based on predicate within an EdgeChain. findInChain Find first edge matching predicate within an EdgeChain. isRef Indicates if edge is a Ref based { @link Reference} edge. isReference Indicates if edge is a { @link Reference}. isImport Indicates if edge is Fn::ImportValue based { @link Reference}. findAllInChain import { Graph } from '@aws-prototyping-sdk/cdk-graph' Graph . ImportReference . findAllInChain ( chain : object , predicate : IEdgePredicate ) Find all matching edges based on predicate within an EdgeChain. chain Required Type: object predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.IEdgePredicate findInChain import { Graph } from '@aws-prototyping-sdk/cdk-graph' Graph . ImportReference . findInChain ( chain : object , predicate : IEdgePredicate ) Find first edge matching predicate within an EdgeChain. chain Required Type: object predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.IEdgePredicate isRef import { Graph } from '@aws-prototyping-sdk/cdk-graph' Graph . ImportReference . isRef ( edge : Edge ) Indicates if edge is a Ref based { @link Reference} edge. edge Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge isReference import { Graph } from '@aws-prototyping-sdk/cdk-graph' Graph . ImportReference . isReference ( edge : Edge ) Indicates if edge is a { @link Reference}. edge Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge isImport import { Graph } from '@aws-prototyping-sdk/cdk-graph' Graph . ImportReference . isImport ( edge : Edge ) Indicates if edge is Fn::ImportValue based { @link Reference}. edge Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge Properties Name Type Description attributes aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Get readonly record of all attributes. flags FlagEnum [] Get readonly list of all flags. isDestroyed boolean Indicates if the entity has been destroyed (eg: removed from store). isMutated boolean Indicates if the entity has had destructive mutations applied. metadata constructs.MetadataEntry[] Get readonly list of all metadata entries. store aws-prototyping-sdk/cdk-graph.Graph.Store Reference to the store. tags aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Get readonly record of all tags. uuid string Universally unique identifier. allowDestructiveMutations boolean Indicates if edge allows destructive mutations. direction EdgeDirectionEnum Indicates the direction in which the edge is directed. edgeType EdgeTypeEnum Type of edge. isClosed boolean Indicates if the Edge's source and target are the same, or were the same when it was created (prior to mutations). isCrossStack boolean Indicates if source and target nodes reside in different root stacks. isExtraneous boolean Indicates if edge is extraneous which is determined by explicitly having EXTRANEOUS flag added and/or being a closed loop (source===target). source aws-prototyping-sdk/cdk-graph.Graph.Node Edge source is the node that defines the edge (tail). target aws-prototyping-sdk/cdk-graph.Graph.Node Edge target is the node being referenced by the source (head). referenceType ReferenceTypeEnum Get type of reference. attributes Required public readonly attributes : Attributes ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Get readonly record of all attributes. flags Required public readonly flags : FlagEnum []; Type: FlagEnum [] Get readonly list of all flags. isDestroyed Required public readonly isDestroyed : boolean ; Type: boolean Indicates if the entity has been destroyed (eg: removed from store). isMutated Required public readonly isMutated : boolean ; Type: boolean Indicates if the entity has had destructive mutations applied. metadata Required public readonly metadata : MetadataEntry []; Type: constructs.MetadataEntry[] Get readonly list of all metadata entries. store Required public readonly store : Store ; Type: aws-prototyping-sdk/cdk-graph.Graph.Store Reference to the store. tags Required public readonly tags : Tags ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Get readonly record of all tags. uuid Required public readonly uuid : string ; Type: string Universally unique identifier. allowDestructiveMutations Required public readonly allowDestructiveMutations : boolean ; Type: boolean Indicates if edge allows destructive mutations. direction Required public readonly direction : EdgeDirectionEnum ; Type: EdgeDirectionEnum Indicates the direction in which the edge is directed. edgeType Required public readonly edgeType : EdgeTypeEnum ; Type: EdgeTypeEnum Type of edge. isClosed Required public readonly isClosed : boolean ; Type: boolean Indicates if the Edge's source and target are the same, or were the same when it was created (prior to mutations). To check whether it was originally closed, use hasFlag(FlagEnum.CLOSED_EDGE) instead. isCrossStack Required public readonly isCrossStack : boolean ; Type: boolean Indicates if source and target nodes reside in different root stacks. isExtraneous Required public readonly isExtraneous : boolean ; Type: boolean Indicates if edge is extraneous which is determined by explicitly having EXTRANEOUS flag added and/or being a closed loop (source===target). source Required public readonly source : Node ; Type: aws-prototyping-sdk/cdk-graph.Graph.Node Edge source is the node that defines the edge (tail). target Required public readonly target : Node ; Type: aws-prototyping-sdk/cdk-graph.Graph.Node Edge target is the node being referenced by the source (head). referenceType Required public readonly referenceType : ReferenceTypeEnum ; Type: ReferenceTypeEnum Get type of reference. Constants Name Type Description ATT_TYPE string Attribute defining the type of reference. PREFIX string Edge prefix to denote Fn::ImportValue type reference edge. ATT_TYPE Required public readonly ATT_TYPE : string ; Type: string Attribute defining the type of reference. PREFIX Required public readonly PREFIX : string ; Type: string Edge prefix to denote Fn::ImportValue type reference edge. NestedStackNode NestedStackNode defines a cdk NestedStack. Initializers import { Graph } from '@aws-prototyping-sdk/cdk-graph' new Graph . NestedStackNode ( props : INestedStackNodeProps ) Name Type Description props aws-prototyping-sdk/cdk-graph.Graph.INestedStackNodeProps No description. props Required Type: aws-prototyping-sdk/cdk-graph.Graph.INestedStackNodeProps Methods Name Description addAttribute Add attribute. addFlag Add flag. addMetadata Add metadata entry. addTag Add tag. applyData Applies data (attributes, metadata, tags, flag) to entity. findMetadata Retrieves all metadata entries of a given type. getAttribute Get attribute by key. getTag Get tag by key. hasAttribute Indicates if entity has a given attribute defined, and optionally with a specific value. hasFlag Indicates if entity has a given flag. hasMetadata Indicates if entity has matching metadata entry. hasTag Indicates if entity has tag, optionally verifying tag value. mutateDestroy Destroys this node by removing all references and removing this node from the store. setAttribute Set attribute. setTag Set tag. addChild Add child node. addLink Add link to another node. addReverseLink Add link from another node. doesDependOn Indicates if this node depends on another node . doesReference Indicates if this node references another node . find Recursively find the nearest sub-node matching predicate. findAll Return this construct and all of its sub-nodes in the given order. findAllLinks Return all direct links of this node and that of all sub-nodes. findAncestor Find nearest ancestor of this node matching given predicate. findChild Find child with given id . findLink Find link of this node based on predicate. findLinks Find all links of this node based on predicate. getCfnProp Get specific CloudFormation property. getChild Get child node with given id . getLinkChains Resolve all link chains. getNearestAncestor Gets the nearest common ancestor shared between this node and another node . isAncestor Indicates if a specific node is an ancestor of this node . isChild Indicates if specific node is a child of this node . mutateCollapse Collapses all sub-nodes of this node into this node . mutateCollapseTo Collapses this node into an ancestor . mutateCollapseToParent Collapses this node into it's parent node . mutateHoist Hoist this node to an ancestor by removing it from its current parent node and in turn moving it to the ancestor. mutateMove Move this node into a new parent node. mutateRemoveChild Remove a child node from this node . mutateRemoveLink Remove a link from this node . mutateRemoveReverseLink Remove a link to this node . mutateUncluster Hoist all children to parent and collapse node to parent. toString Get string representation of this node. addOutput Associate { @link OutputNode} with this stack. addParameter Associate { @link ParameterNode} with this stack. findOutput Find { @link OutputNode} with logicalId defined by this stack. findParameter Find { @link ParameterNode} with parameterId defined by this stack. mutateRemoveOutput Disassociate { @link OutputNode} from this stack. mutateRemoveParameter Disassociate { @link ParameterNode} from this stack. addAttribute public addAttribute ( key : string , value : any ) : void Add attribute. key Required Type: string value Required Type: any addFlag public addFlag ( flag : FlagEnum ) : void Add flag. flag Required Type: FlagEnum addMetadata public addMetadata ( metadataType : string , data : any ) : void Add metadata entry. metadataType Required Type: string data Required Type: any addTag public addTag ( key : string , value : string ) : void Add tag. key Required Type: string value Required Type: string applyData public applyData ( data : IBaseEntityDataProps , overwrite? : boolean , applyFlags? : boolean ) : void Applies data (attributes, metadata, tags, flag) to entity. Generally used only for mutations such as collapse and consume to retain data. data Required Type: aws-prototyping-sdk/cdk-graph.Graph.IBaseEntityDataProps The data to apply. overwrite Optional Type: boolean applyFlags Optional Type: boolean Indicates if data is overwritten - Indicates if flags should be applied. findMetadata public findMetadata ( metadataType : string ) : MetadataEntry [] Retrieves all metadata entries of a given type. metadataType Required Type: string getAttribute public getAttribute ( key : string ) : any Get attribute by key. key Required Type: string getTag public getTag ( key : string ) : string Get tag by key. key Required Type: string hasAttribute public hasAttribute ( key : string , value? : any ) : boolean Indicates if entity has a given attribute defined, and optionally with a specific value. key Required Type: string value Optional Type: any hasFlag public hasFlag ( flag : FlagEnum ) : boolean Indicates if entity has a given flag. flag Required Type: FlagEnum hasMetadata public hasMetadata ( metadataType : string , data : any ) : boolean Indicates if entity has matching metadata entry. metadataType Required Type: string data Required Type: any hasTag public hasTag ( key : string , value? : string ) : boolean Indicates if entity has tag, optionally verifying tag value. key Required Type: string value Optional Type: string mutateDestroy public mutateDestroy ( strict? : boolean ) : void Destroys this node by removing all references and removing this node from the store. strict Optional Type: boolean setAttribute public setAttribute ( key : string , value : any ) : void Set attribute. This will overwrite existing attribute. key Required Type: string value Required Type: any setTag public setTag ( key : string , value : string ) : void Set tag. Will overwrite existing tag. key Required Type: string value Required Type: string addChild public addChild ( node : Node ) : void Add child node. node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node addLink public addLink ( edge : Edge ) : void Add link to another node. edge Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge addReverseLink public addReverseLink ( edge : Edge ) : void Add link from another node. edge Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge doesDependOn public doesDependOn ( node : Node ) : boolean Indicates if this node depends on another node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node doesReference public doesReference ( node : Node ) : boolean Indicates if this node references another node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node find public find ( predicate : INodePredicate ) : Node Recursively find the nearest sub-node matching predicate. predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.INodePredicate findAll public findAll ( options? : IFindNodeOptions ) : Node [] Return this construct and all of its sub-nodes in the given order. Optionally filter nodes based on predicate. options Optional Type: aws-prototyping-sdk/cdk-graph.Graph.IFindNodeOptions findAllLinks public findAllLinks ( options? : IFindEdgeOptions ) : Edge [] Return all direct links of this node and that of all sub-nodes. Optionally filter links based on predicate. options Optional Type: aws-prototyping-sdk/cdk-graph.Graph.IFindEdgeOptions findAncestor public findAncestor ( predicate : INodePredicate , max? : number ) : Node Find nearest ancestor of this node matching given predicate. predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.INodePredicate Predicate to match ancestor. max Optional Type: number findChild public findChild ( id : string ) : Node Find child with given id . Similar to find but does not throw error if no child found. id Required Type: string findLink public findLink ( predicate : IEdgePredicate , reverse? : boolean , follow? : boolean , direct? : boolean ) : Edge Find link of this node based on predicate. By default this will follow link chains to evaluate the predicate against and return the matching direct link of this node. predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.IEdgePredicate Edge predicate function to match edge. reverse Optional Type: boolean Indicates if links are search in reverse order. follow Optional Type: boolean Indicates if link chain is followed. direct Optional Type: boolean Indicates that only direct links should be searched. findLinks public findLinks ( predicate : IEdgePredicate , reverse? : boolean , follow? : boolean , direct? : boolean ) : Edge [] Find all links of this node based on predicate. By default this will follow link chains to evaluate the predicate against and return the matching direct links of this node. predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.IEdgePredicate Edge predicate function to match edge. reverse Optional Type: boolean Indicates if links are search in reverse order. follow Optional Type: boolean Indicates if link chain is followed. direct Optional Type: boolean Indicates that only direct links should be searched. getCfnProp public getCfnProp ( key : string ) : string | number | boolean | PlainObject | string | number | boolean | PlainObject [] Get specific CloudFormation property. key Required Type: string getChild public getChild ( id : string ) : Node Get child node with given id . id Required Type: string getLinkChains public getLinkChains ( reverse? : boolean ) : object [] Resolve all link chains. {@link EdgeChain} reverse Optional Type: boolean getNearestAncestor public getNearestAncestor ( node : Node ) : Node Gets the nearest common ancestor shared between this node and another node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node isAncestor public isAncestor ( ancestor : Node ) : boolean Indicates if a specific node is an ancestor of this node . ancestor Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node isChild public isChild ( node : Node ) : boolean Indicates if specific node is a child of this node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateCollapse public mutateCollapse () : void Collapses all sub-nodes of this node into this node . mutateCollapseTo public mutateCollapseTo ( ancestor : Node ) : Node Collapses this node into an ancestor . ancestor Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateCollapseToParent public mutateCollapseToParent () : Node Collapses this node into it's parent node . mutateHoist public mutateHoist ( newParent : Node ) : void Hoist this node to an ancestor by removing it from its current parent node and in turn moving it to the ancestor. newParent Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateMove public mutateMove ( newParent : Node ) : void Move this node into a new parent node. newParent Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node The parent to move this node to. mutateRemoveChild public mutateRemoveChild ( node : Node ) : boolean Remove a child node from this node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateRemoveLink public mutateRemoveLink ( link : Edge ) : boolean Remove a link from this node . link Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge mutateRemoveReverseLink public mutateRemoveReverseLink ( link : Edge ) : boolean Remove a link to this node . link Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge mutateUncluster public mutateUncluster () : void Hoist all children to parent and collapse node to parent. toString public toString () : string Get string representation of this node. addOutput public addOutput ( node : OutputNode ) : void Associate { @link OutputNode} with this stack. node Required Type: aws-prototyping-sdk/cdk-graph.Graph.OutputNode addParameter public addParameter ( node : ParameterNode ) : void Associate { @link ParameterNode} with this stack. node Required Type: aws-prototyping-sdk/cdk-graph.Graph.ParameterNode findOutput public findOutput ( logicalId : string ) : OutputNode Find { @link OutputNode} with logicalId defined by this stack. logicalId Required Type: string findParameter public findParameter ( parameterId : string ) : ParameterNode Find { @link ParameterNode} with parameterId defined by this stack. parameterId Required Type: string mutateRemoveOutput public mutateRemoveOutput ( node : OutputNode ) : boolean Disassociate { @link OutputNode} from this stack. node Required Type: aws-prototyping-sdk/cdk-graph.Graph.OutputNode mutateRemoveParameter public mutateRemoveParameter ( node : ParameterNode ) : boolean Disassociate { @link ParameterNode} from this stack. node Required Type: aws-prototyping-sdk/cdk-graph.Graph.ParameterNode Static Functions Name Description isStackNode Indicates if node is a { @link StackNode}. of Gets the { @link StackNode} containing a given resource. isNestedStackNode Indicates if node is a { @link NestedStackNode}. isStackNode import { Graph } from '@aws-prototyping-sdk/cdk-graph' Graph . NestedStackNode . isStackNode ( node : Node ) Indicates if node is a { @link StackNode}. node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node of import { Graph } from '@aws-prototyping-sdk/cdk-graph' Graph . NestedStackNode . of ( node : Node ) Gets the { @link StackNode} containing a given resource. node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node isNestedStackNode import { Graph } from '@aws-prototyping-sdk/cdk-graph' Graph . NestedStackNode . isNestedStackNode ( node : Node ) Indicates if node is a { @link NestedStackNode}. node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node Properties Name Type Description attributes aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Get readonly record of all attributes. flags FlagEnum [] Get readonly list of all flags. isDestroyed boolean Indicates if the entity has been destroyed (eg: removed from store). isMutated boolean Indicates if the entity has had destructive mutations applied. metadata constructs.MetadataEntry[] Get readonly list of all metadata entries. store aws-prototyping-sdk/cdk-graph.Graph.Store Reference to the store. tags aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Get readonly record of all tags. uuid string Universally unique identifier. allowDestructiveMutations boolean Indicates if this node allows destructive mutations. children aws-prototyping-sdk/cdk-graph.Graph.Node [] Get all direct child nodes. dependedOnBy aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that depend on this node . dependencies aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that this node depends on . dependencyLinks aws-prototyping-sdk/cdk-graph.Graph.Dependency [] Gets list of { @link Dependency} links (edges) where this node is the source . depth number Indicates the depth of the node relative to root (0). id string Node id, which is only unique within parent scope. isAsset boolean Indicates if this node is considered a { @link FlagEnum.ASSET}. isCfnFqn boolean Indicates if node ConstructInfoFqn denotes a aws-cdk-lib.*.Cfn* construct. isCluster boolean Indicates if this node is considered a { @link FlagEnum.CLUSTER}. isCustomResource boolean Indicates if node is a Custom Resource . isExtraneous boolean Indicates if this node is considered a { @link FlagEnum.EXTRANEOUS} node or determined to be extraneous: - Clusters that contain no children. isGraphContainer boolean Indicates if this node is considered a { @link FlagEnum.GRAPH_CONTAINER}. isLeaf boolean Indicates if this node is a leaf node, which means it does not have children. isTopLevel boolean Indicates if node is direct child of the graph root node. links aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all links (edges) in which this node is the source . nodeType NodeTypeEnum Type of node. path string Path of the node. referencedBy aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that reference this node . referenceLinks aws-prototyping-sdk/cdk-graph.Graph.Reference [] Gets list of { @link Reference} links (edges) where this node is the source . references aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that this node references . reverseDependencyLinks aws-prototyping-sdk/cdk-graph.Graph.Dependency [] Gets list of { @link Dependency} links (edges) where this node is the target . reverseLinks aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all links (edges) in which this node is the target . reverseReferenceLinks aws-prototyping-sdk/cdk-graph.Graph.Reference [] Gets list of { @link Reference} links (edges) where this node is the target . scopes aws-prototyping-sdk/cdk-graph.Graph.Node [] Gets descending ordered list of ancestors from the root. siblings aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of siblings of this node. cfnProps aws-prototyping-sdk/cdk-graph.SerializedGraph.PlainObject Gets CloudFormation properties for this node. cfnType string Get the CloudFormation resource type for this node. constructInfo ConstructInfo Synthesized construct information defining jii resolution data. constructInfoFqn string Synthesized construct information defining jii resolution data. logicalId string Logical id of the node, which is only unique within containing stack. parent aws-prototyping-sdk/cdk-graph.Graph.Node Parent node. rootStack aws-prototyping-sdk/cdk-graph.Graph.StackNode Get root stack. stack aws-prototyping-sdk/cdk-graph.Graph.StackNode Stack the node is contained in. exports aws-prototyping-sdk/cdk-graph.Graph.OutputNode [] Get all exported { @link OutputNode}s defined by this stack. outputs aws-prototyping-sdk/cdk-graph.Graph.OutputNode [] Get all { @link OutputNode}s defined by this stack. parameters aws-prototyping-sdk/cdk-graph.Graph.ParameterNode [] Get all { @link ParameterNode}s defined by this stack. stage aws-prototyping-sdk/cdk-graph.Graph.StageNode Get { @link StageNode} containing this stack. parentStack aws-prototyping-sdk/cdk-graph.Graph.StackNode Get parent stack of this nested stack. attributes Required public readonly attributes : Attributes ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Get readonly record of all attributes. flags Required public readonly flags : FlagEnum []; Type: FlagEnum [] Get readonly list of all flags. isDestroyed Required public readonly isDestroyed : boolean ; Type: boolean Indicates if the entity has been destroyed (eg: removed from store). isMutated Required public readonly isMutated : boolean ; Type: boolean Indicates if the entity has had destructive mutations applied. metadata Required public readonly metadata : MetadataEntry []; Type: constructs.MetadataEntry[] Get readonly list of all metadata entries. store Required public readonly store : Store ; Type: aws-prototyping-sdk/cdk-graph.Graph.Store Reference to the store. tags Required public readonly tags : Tags ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Get readonly record of all tags. uuid Required public readonly uuid : string ; Type: string Universally unique identifier. allowDestructiveMutations Required public readonly allowDestructiveMutations : boolean ; Type: boolean Indicates if this node allows destructive mutations. {@link Store.allowDestructiveMutations} children Required public readonly children : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get all direct child nodes. dependedOnBy Required public readonly dependedOnBy : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that depend on this node . {@link Node.reverseDependencyLinks} dependencies Required public readonly dependencies : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that this node depends on . {@link Node.dependencyLinks} dependencyLinks Required public readonly dependencyLinks : Dependency []; Type: aws-prototyping-sdk/cdk-graph.Graph.Dependency [] Gets list of { @link Dependency} links (edges) where this node is the source . depth Required public readonly depth : number ; Type: number Indicates the depth of the node relative to root (0). id Required public readonly id : string ; Type: string Node id, which is only unique within parent scope. isAsset Required public readonly isAsset : boolean ; Type: boolean Indicates if this node is considered a { @link FlagEnum.ASSET}. isCfnFqn Required public readonly isCfnFqn : boolean ; Type: boolean Indicates if node ConstructInfoFqn denotes a aws-cdk-lib.*.Cfn* construct. {@link FlagEnum.CFN_FQN} isCluster Required public readonly isCluster : boolean ; Type: boolean Indicates if this node is considered a { @link FlagEnum.CLUSTER}. isCustomResource Required public readonly isCustomResource : boolean ; Type: boolean Indicates if node is a Custom Resource . isExtraneous Required public readonly isExtraneous : boolean ; Type: boolean Indicates if this node is considered a { @link FlagEnum.EXTRANEOUS} node or determined to be extraneous: - Clusters that contain no children. isGraphContainer Required public readonly isGraphContainer : boolean ; Type: boolean Indicates if this node is considered a { @link FlagEnum.GRAPH_CONTAINER}. isLeaf Required public readonly isLeaf : boolean ; Type: boolean Indicates if this node is a leaf node, which means it does not have children. isTopLevel Required public readonly isTopLevel : boolean ; Type: boolean Indicates if node is direct child of the graph root node. links Required public readonly links : Edge []; Type: aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all links (edges) in which this node is the source . nodeType Required public readonly nodeType : NodeTypeEnum ; Type: NodeTypeEnum Type of node. path Required public readonly path : string ; Type: string Path of the node. referencedBy Required public readonly referencedBy : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that reference this node . {@link Node.reverseReferenceLinks} referenceLinks Required public readonly referenceLinks : Reference []; Type: aws-prototyping-sdk/cdk-graph.Graph.Reference [] Gets list of { @link Reference} links (edges) where this node is the source . references Required public readonly references : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that this node references . {@link Node.referenceLinks} reverseDependencyLinks Required public readonly reverseDependencyLinks : Dependency []; Type: aws-prototyping-sdk/cdk-graph.Graph.Dependency [] Gets list of { @link Dependency} links (edges) where this node is the target . reverseLinks Required public readonly reverseLinks : Edge []; Type: aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all links (edges) in which this node is the target . reverseReferenceLinks Required public readonly reverseReferenceLinks : Reference []; Type: aws-prototyping-sdk/cdk-graph.Graph.Reference [] Gets list of { @link Reference} links (edges) where this node is the target . scopes Required public readonly scopes : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Gets descending ordered list of ancestors from the root. siblings Required public readonly siblings : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of siblings of this node. cfnProps Optional public readonly cfnProps : PlainObject ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.PlainObject Gets CloudFormation properties for this node. cfnType Optional public readonly cfnType : string ; Type: string Get the CloudFormation resource type for this node. constructInfo Optional public readonly constructInfo : ConstructInfo ; Type: ConstructInfo Synthesized construct information defining jii resolution data. constructInfoFqn Optional public readonly constructInfoFqn : string ; Type: string Synthesized construct information defining jii resolution data. logicalId Optional public readonly logicalId : string ; Type: string Logical id of the node, which is only unique within containing stack. parent Optional public readonly parent : Node ; Type: aws-prototyping-sdk/cdk-graph.Graph.Node Parent node. Only the root node should not have parent. rootStack Optional public readonly rootStack : StackNode ; Type: aws-prototyping-sdk/cdk-graph.Graph.StackNode Get root stack. stack Optional public readonly stack : StackNode ; Type: aws-prototyping-sdk/cdk-graph.Graph.StackNode Stack the node is contained in. exports Required public readonly exports : OutputNode []; Type: aws-prototyping-sdk/cdk-graph.Graph.OutputNode [] Get all exported { @link OutputNode}s defined by this stack. outputs Required public readonly outputs : OutputNode []; Type: aws-prototyping-sdk/cdk-graph.Graph.OutputNode [] Get all { @link OutputNode}s defined by this stack. parameters Required public readonly parameters : ParameterNode []; Type: aws-prototyping-sdk/cdk-graph.Graph.ParameterNode [] Get all { @link ParameterNode}s defined by this stack. stage Optional public readonly stage : StageNode ; Type: aws-prototyping-sdk/cdk-graph.Graph.StageNode Get { @link StageNode} containing this stack. parentStack Optional public readonly parentStack : StackNode ; Type: aws-prototyping-sdk/cdk-graph.Graph.StackNode Get parent stack of this nested stack. Node Implements: aws-prototyping-sdk/cdk-graph.SerializedGraph.ISerializableNode Node class is the base definition of node entities in the graph, as in standard graph theory . Initializers import { Graph } from '@aws-prototyping-sdk/cdk-graph' new Graph . Node ( props : INodeProps ) Name Type Description props aws-prototyping-sdk/cdk-graph.Graph.INodeProps No description. props Required Type: aws-prototyping-sdk/cdk-graph.Graph.INodeProps Methods Name Description addAttribute Add attribute. addFlag Add flag. addMetadata Add metadata entry. addTag Add tag. applyData Applies data (attributes, metadata, tags, flag) to entity. findMetadata Retrieves all metadata entries of a given type. getAttribute Get attribute by key. getTag Get tag by key. hasAttribute Indicates if entity has a given attribute defined, and optionally with a specific value. hasFlag Indicates if entity has a given flag. hasMetadata Indicates if entity has matching metadata entry. hasTag Indicates if entity has tag, optionally verifying tag value. mutateDestroy Destroys this node by removing all references and removing this node from the store. setAttribute Set attribute. setTag Set tag. addChild Add child node. addLink Add link to another node. addReverseLink Add link from another node. doesDependOn Indicates if this node depends on another node . doesReference Indicates if this node references another node . find Recursively find the nearest sub-node matching predicate. findAll Return this construct and all of its sub-nodes in the given order. findAllLinks Return all direct links of this node and that of all sub-nodes. findAncestor Find nearest ancestor of this node matching given predicate. findChild Find child with given id . findLink Find link of this node based on predicate. findLinks Find all links of this node based on predicate. getCfnProp Get specific CloudFormation property. getChild Get child node with given id . getLinkChains Resolve all link chains. getNearestAncestor Gets the nearest common ancestor shared between this node and another node . isAncestor Indicates if a specific node is an ancestor of this node . isChild Indicates if specific node is a child of this node . mutateCollapse Collapses all sub-nodes of this node into this node . mutateCollapseTo Collapses this node into an ancestor . mutateCollapseToParent Collapses this node into it's parent node . mutateHoist Hoist this node to an ancestor by removing it from its current parent node and in turn moving it to the ancestor. mutateMove Move this node into a new parent node. mutateRemoveChild Remove a child node from this node . mutateRemoveLink Remove a link from this node . mutateRemoveReverseLink Remove a link to this node . mutateUncluster Hoist all children to parent and collapse node to parent. toString Get string representation of this node. addAttribute public addAttribute ( key : string , value : any ) : void Add attribute. key Required Type: string value Required Type: any addFlag public addFlag ( flag : FlagEnum ) : void Add flag. flag Required Type: FlagEnum addMetadata public addMetadata ( metadataType : string , data : any ) : void Add metadata entry. metadataType Required Type: string data Required Type: any addTag public addTag ( key : string , value : string ) : void Add tag. key Required Type: string value Required Type: string applyData public applyData ( data : IBaseEntityDataProps , overwrite? : boolean , applyFlags? : boolean ) : void Applies data (attributes, metadata, tags, flag) to entity. Generally used only for mutations such as collapse and consume to retain data. data Required Type: aws-prototyping-sdk/cdk-graph.Graph.IBaseEntityDataProps The data to apply. overwrite Optional Type: boolean applyFlags Optional Type: boolean Indicates if data is overwritten - Indicates if flags should be applied. findMetadata public findMetadata ( metadataType : string ) : MetadataEntry [] Retrieves all metadata entries of a given type. metadataType Required Type: string getAttribute public getAttribute ( key : string ) : any Get attribute by key. key Required Type: string getTag public getTag ( key : string ) : string Get tag by key. key Required Type: string hasAttribute public hasAttribute ( key : string , value? : any ) : boolean Indicates if entity has a given attribute defined, and optionally with a specific value. key Required Type: string value Optional Type: any hasFlag public hasFlag ( flag : FlagEnum ) : boolean Indicates if entity has a given flag. flag Required Type: FlagEnum hasMetadata public hasMetadata ( metadataType : string , data : any ) : boolean Indicates if entity has matching metadata entry. metadataType Required Type: string data Required Type: any hasTag public hasTag ( key : string , value? : string ) : boolean Indicates if entity has tag, optionally verifying tag value. key Required Type: string value Optional Type: string mutateDestroy public mutateDestroy ( strict? : boolean ) : void Destroys this node by removing all references and removing this node from the store. strict Optional Type: boolean Indicates that this node must not have references. setAttribute public setAttribute ( key : string , value : any ) : void Set attribute. This will overwrite existing attribute. key Required Type: string value Required Type: any setTag public setTag ( key : string , value : string ) : void Set tag. Will overwrite existing tag. key Required Type: string value Required Type: string addChild public addChild ( node : Node ) : void Add child node. node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node addLink public addLink ( edge : Edge ) : void Add link to another node. edge Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge addReverseLink public addReverseLink ( edge : Edge ) : void Add link from another node. edge Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge doesDependOn public doesDependOn ( node : Node ) : boolean Indicates if this node depends on another node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node doesReference public doesReference ( node : Node ) : boolean Indicates if this node references another node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node find public find ( predicate : INodePredicate ) : Node Recursively find the nearest sub-node matching predicate. predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.INodePredicate findAll public findAll ( options? : IFindNodeOptions ) : Node [] Return this construct and all of its sub-nodes in the given order. Optionally filter nodes based on predicate. options Optional Type: aws-prototyping-sdk/cdk-graph.Graph.IFindNodeOptions findAllLinks public findAllLinks ( options? : IFindEdgeOptions ) : Edge [] Return all direct links of this node and that of all sub-nodes. Optionally filter links based on predicate. options Optional Type: aws-prototyping-sdk/cdk-graph.Graph.IFindEdgeOptions findAncestor public findAncestor ( predicate : INodePredicate , max? : number ) : Node Find nearest ancestor of this node matching given predicate. predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.INodePredicate Predicate to match ancestor. max Optional Type: number findChild public findChild ( id : string ) : Node Find child with given id . Similar to find but does not throw error if no child found. id Required Type: string findLink public findLink ( predicate : IEdgePredicate , reverse? : boolean , follow? : boolean , direct? : boolean ) : Edge Find link of this node based on predicate. By default this will follow link chains to evaluate the predicate against and return the matching direct link of this node. predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.IEdgePredicate Edge predicate function to match edge. reverse Optional Type: boolean Indicates if links are search in reverse order. follow Optional Type: boolean Indicates if link chain is followed. direct Optional Type: boolean Indicates that only direct links should be searched. findLinks public findLinks ( predicate : IEdgePredicate , reverse? : boolean , follow? : boolean , direct? : boolean ) : Edge [] Find all links of this node based on predicate. By default this will follow link chains to evaluate the predicate against and return the matching direct links of this node. predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.IEdgePredicate Edge predicate function to match edge. reverse Optional Type: boolean Indicates if links are search in reverse order. follow Optional Type: boolean Indicates if link chain is followed. direct Optional Type: boolean Indicates that only direct links should be searched. getCfnProp public getCfnProp ( key : string ) : string | number | boolean | PlainObject | string | number | boolean | PlainObject [] Get specific CloudFormation property. key Required Type: string getChild public getChild ( id : string ) : Node Get child node with given id . id Required Type: string getLinkChains public getLinkChains ( reverse? : boolean ) : object [] Resolve all link chains. {@link EdgeChain} reverse Optional Type: boolean getNearestAncestor public getNearestAncestor ( node : Node ) : Node Gets the nearest common ancestor shared between this node and another node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node isAncestor public isAncestor ( ancestor : Node ) : boolean Indicates if a specific node is an ancestor of this node . ancestor Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node isChild public isChild ( node : Node ) : boolean Indicates if specific node is a child of this node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateCollapse public mutateCollapse () : void Collapses all sub-nodes of this node into this node . mutateCollapseTo public mutateCollapseTo ( ancestor : Node ) : Node Collapses this node into an ancestor . ancestor Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateCollapseToParent public mutateCollapseToParent () : Node Collapses this node into it's parent node . mutateHoist public mutateHoist ( newParent : Node ) : void Hoist this node to an ancestor by removing it from its current parent node and in turn moving it to the ancestor. newParent Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateMove public mutateMove ( newParent : Node ) : void Move this node into a new parent node. newParent Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node The parent to move this node to. mutateRemoveChild public mutateRemoveChild ( node : Node ) : boolean Remove a child node from this node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateRemoveLink public mutateRemoveLink ( link : Edge ) : boolean Remove a link from this node . link Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge mutateRemoveReverseLink public mutateRemoveReverseLink ( link : Edge ) : boolean Remove a link to this node . link Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge mutateUncluster public mutateUncluster () : void Hoist all children to parent and collapse node to parent. toString public toString () : string Get string representation of this node. Properties Name Type Description attributes aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Get readonly record of all attributes. flags FlagEnum [] Get readonly list of all flags. isDestroyed boolean Indicates if the entity has been destroyed (eg: removed from store). isMutated boolean Indicates if the entity has had destructive mutations applied. metadata constructs.MetadataEntry[] Get readonly list of all metadata entries. store aws-prototyping-sdk/cdk-graph.Graph.Store Reference to the store. tags aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Get readonly record of all tags. uuid string Universally unique identifier. allowDestructiveMutations boolean Indicates if this node allows destructive mutations. children aws-prototyping-sdk/cdk-graph.Graph.Node [] Get all direct child nodes. dependedOnBy aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that depend on this node . dependencies aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that this node depends on . dependencyLinks aws-prototyping-sdk/cdk-graph.Graph.Dependency [] Gets list of { @link Dependency} links (edges) where this node is the source . depth number Indicates the depth of the node relative to root (0). id string Node id, which is only unique within parent scope. isAsset boolean Indicates if this node is considered a { @link FlagEnum.ASSET}. isCfnFqn boolean Indicates if node ConstructInfoFqn denotes a aws-cdk-lib.*.Cfn* construct. isCluster boolean Indicates if this node is considered a { @link FlagEnum.CLUSTER}. isCustomResource boolean Indicates if node is a Custom Resource . isExtraneous boolean Indicates if this node is considered a { @link FlagEnum.EXTRANEOUS} node or determined to be extraneous: - Clusters that contain no children. isGraphContainer boolean Indicates if this node is considered a { @link FlagEnum.GRAPH_CONTAINER}. isLeaf boolean Indicates if this node is a leaf node, which means it does not have children. isTopLevel boolean Indicates if node is direct child of the graph root node. links aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all links (edges) in which this node is the source . nodeType NodeTypeEnum Type of node. path string Path of the node. referencedBy aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that reference this node . referenceLinks aws-prototyping-sdk/cdk-graph.Graph.Reference [] Gets list of { @link Reference} links (edges) where this node is the source . references aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that this node references . reverseDependencyLinks aws-prototyping-sdk/cdk-graph.Graph.Dependency [] Gets list of { @link Dependency} links (edges) where this node is the target . reverseLinks aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all links (edges) in which this node is the target . reverseReferenceLinks aws-prototyping-sdk/cdk-graph.Graph.Reference [] Gets list of { @link Reference} links (edges) where this node is the target . scopes aws-prototyping-sdk/cdk-graph.Graph.Node [] Gets descending ordered list of ancestors from the root. siblings aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of siblings of this node. cfnProps aws-prototyping-sdk/cdk-graph.SerializedGraph.PlainObject Gets CloudFormation properties for this node. cfnType string Get the CloudFormation resource type for this node. constructInfo ConstructInfo Synthesized construct information defining jii resolution data. constructInfoFqn string Synthesized construct information defining jii resolution data. logicalId string Logical id of the node, which is only unique within containing stack. parent aws-prototyping-sdk/cdk-graph.Graph.Node Parent node. rootStack aws-prototyping-sdk/cdk-graph.Graph.StackNode Get root stack. stack aws-prototyping-sdk/cdk-graph.Graph.StackNode Stack the node is contained in. attributes Required public readonly attributes : Attributes ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Get readonly record of all attributes. flags Required public readonly flags : FlagEnum []; Type: FlagEnum [] Get readonly list of all flags. isDestroyed Required public readonly isDestroyed : boolean ; Type: boolean Indicates if the entity has been destroyed (eg: removed from store). isMutated Required public readonly isMutated : boolean ; Type: boolean Indicates if the entity has had destructive mutations applied. metadata Required public readonly metadata : MetadataEntry []; Type: constructs.MetadataEntry[] Get readonly list of all metadata entries. store Required public readonly store : Store ; Type: aws-prototyping-sdk/cdk-graph.Graph.Store Reference to the store. tags Required public readonly tags : Tags ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Get readonly record of all tags. uuid Required public readonly uuid : string ; Type: string Universally unique identifier. allowDestructiveMutations Required public readonly allowDestructiveMutations : boolean ; Type: boolean Indicates if this node allows destructive mutations. {@link Store.allowDestructiveMutations} children Required public readonly children : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get all direct child nodes. dependedOnBy Required public readonly dependedOnBy : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that depend on this node . {@link Node.reverseDependencyLinks} dependencies Required public readonly dependencies : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that this node depends on . {@link Node.dependencyLinks} dependencyLinks Required public readonly dependencyLinks : Dependency []; Type: aws-prototyping-sdk/cdk-graph.Graph.Dependency [] Gets list of { @link Dependency} links (edges) where this node is the source . depth Required public readonly depth : number ; Type: number Indicates the depth of the node relative to root (0). id Required public readonly id : string ; Type: string Node id, which is only unique within parent scope. isAsset Required public readonly isAsset : boolean ; Type: boolean Indicates if this node is considered a { @link FlagEnum.ASSET}. isCfnFqn Required public readonly isCfnFqn : boolean ; Type: boolean Indicates if node ConstructInfoFqn denotes a aws-cdk-lib.*.Cfn* construct. {@link FlagEnum.CFN_FQN} isCluster Required public readonly isCluster : boolean ; Type: boolean Indicates if this node is considered a { @link FlagEnum.CLUSTER}. isCustomResource Required public readonly isCustomResource : boolean ; Type: boolean Indicates if node is a Custom Resource . isExtraneous Required public readonly isExtraneous : boolean ; Type: boolean Indicates if this node is considered a { @link FlagEnum.EXTRANEOUS} node or determined to be extraneous: - Clusters that contain no children. isGraphContainer Required public readonly isGraphContainer : boolean ; Type: boolean Indicates if this node is considered a { @link FlagEnum.GRAPH_CONTAINER}. isLeaf Required public readonly isLeaf : boolean ; Type: boolean Indicates if this node is a leaf node, which means it does not have children. isTopLevel Required public readonly isTopLevel : boolean ; Type: boolean Indicates if node is direct child of the graph root node. links Required public readonly links : Edge []; Type: aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all links (edges) in which this node is the source . nodeType Required public readonly nodeType : NodeTypeEnum ; Type: NodeTypeEnum Type of node. path Required public readonly path : string ; Type: string Path of the node. referencedBy Required public readonly referencedBy : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that reference this node . {@link Node.reverseReferenceLinks} referenceLinks Required public readonly referenceLinks : Reference []; Type: aws-prototyping-sdk/cdk-graph.Graph.Reference [] Gets list of { @link Reference} links (edges) where this node is the source . references Required public readonly references : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that this node references . {@link Node.referenceLinks} reverseDependencyLinks Required public readonly reverseDependencyLinks : Dependency []; Type: aws-prototyping-sdk/cdk-graph.Graph.Dependency [] Gets list of { @link Dependency} links (edges) where this node is the target . reverseLinks Required public readonly reverseLinks : Edge []; Type: aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all links (edges) in which this node is the target . reverseReferenceLinks Required public readonly reverseReferenceLinks : Reference []; Type: aws-prototyping-sdk/cdk-graph.Graph.Reference [] Gets list of { @link Reference} links (edges) where this node is the target . scopes Required public readonly scopes : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Gets descending ordered list of ancestors from the root. siblings Required public readonly siblings : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of siblings of this node. cfnProps Optional public readonly cfnProps : PlainObject ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.PlainObject Gets CloudFormation properties for this node. cfnType Optional public readonly cfnType : string ; Type: string Get the CloudFormation resource type for this node. constructInfo Optional public readonly constructInfo : ConstructInfo ; Type: ConstructInfo Synthesized construct information defining jii resolution data. constructInfoFqn Optional public readonly constructInfoFqn : string ; Type: string Synthesized construct information defining jii resolution data. logicalId Optional public readonly logicalId : string ; Type: string Logical id of the node, which is only unique within containing stack. parent Optional public readonly parent : Node ; Type: aws-prototyping-sdk/cdk-graph.Graph.Node Parent node. Only the root node should not have parent. rootStack Optional public readonly rootStack : StackNode ; Type: aws-prototyping-sdk/cdk-graph.Graph.StackNode Get root stack. stack Optional public readonly stack : StackNode ; Type: aws-prototyping-sdk/cdk-graph.Graph.StackNode Stack the node is contained in. OutputNode OutputNode defines a cdk CfnOutput resources. Initializers import { Graph } from '@aws-prototyping-sdk/cdk-graph' new Graph . OutputNode ( props : IOutputNodeProps ) Name Type Description props aws-prototyping-sdk/cdk-graph.Graph.IOutputNodeProps No description. props Required Type: aws-prototyping-sdk/cdk-graph.Graph.IOutputNodeProps Methods Name Description addAttribute Add attribute. addFlag Add flag. addMetadata Add metadata entry. addTag Add tag. applyData Applies data (attributes, metadata, tags, flag) to entity. findMetadata Retrieves all metadata entries of a given type. getAttribute Get attribute by key. getTag Get tag by key. hasAttribute Indicates if entity has a given attribute defined, and optionally with a specific value. hasFlag Indicates if entity has a given flag. hasMetadata Indicates if entity has matching metadata entry. hasTag Indicates if entity has tag, optionally verifying tag value. mutateDestroy Destroys this node by removing all references and removing this node from the store. setAttribute Set attribute. setTag Set tag. addChild Add child node. addLink Add link to another node. addReverseLink Add link from another node. doesDependOn Indicates if this node depends on another node . doesReference Indicates if this node references another node . find Recursively find the nearest sub-node matching predicate. findAll Return this construct and all of its sub-nodes in the given order. findAllLinks Return all direct links of this node and that of all sub-nodes. findAncestor Find nearest ancestor of this node matching given predicate. findChild Find child with given id . findLink Find link of this node based on predicate. findLinks Find all links of this node based on predicate. getCfnProp Get specific CloudFormation property. getChild Get child node with given id . getLinkChains Resolve all link chains. getNearestAncestor Gets the nearest common ancestor shared between this node and another node . isAncestor Indicates if a specific node is an ancestor of this node . isChild Indicates if specific node is a child of this node . mutateCollapse Collapses all sub-nodes of this node into this node . mutateCollapseTo Collapses this node into an ancestor . mutateCollapseToParent Collapses this node into it's parent node . mutateHoist Hoist this node to an ancestor by removing it from its current parent node and in turn moving it to the ancestor. mutateMove Move this node into a new parent node. mutateRemoveChild Remove a child node from this node . mutateRemoveLink Remove a link from this node . mutateRemoveReverseLink Remove a link to this node . mutateUncluster Hoist all children to parent and collapse node to parent. toString Get string representation of this node. addAttribute public addAttribute ( key : string , value : any ) : void Add attribute. key Required Type: string value Required Type: any addFlag public addFlag ( flag : FlagEnum ) : void Add flag. flag Required Type: FlagEnum addMetadata public addMetadata ( metadataType : string , data : any ) : void Add metadata entry. metadataType Required Type: string data Required Type: any addTag public addTag ( key : string , value : string ) : void Add tag. key Required Type: string value Required Type: string applyData public applyData ( data : IBaseEntityDataProps , overwrite? : boolean , applyFlags? : boolean ) : void Applies data (attributes, metadata, tags, flag) to entity. Generally used only for mutations such as collapse and consume to retain data. data Required Type: aws-prototyping-sdk/cdk-graph.Graph.IBaseEntityDataProps The data to apply. overwrite Optional Type: boolean applyFlags Optional Type: boolean Indicates if data is overwritten - Indicates if flags should be applied. findMetadata public findMetadata ( metadataType : string ) : MetadataEntry [] Retrieves all metadata entries of a given type. metadataType Required Type: string getAttribute public getAttribute ( key : string ) : any Get attribute by key. key Required Type: string getTag public getTag ( key : string ) : string Get tag by key. key Required Type: string hasAttribute public hasAttribute ( key : string , value? : any ) : boolean Indicates if entity has a given attribute defined, and optionally with a specific value. key Required Type: string value Optional Type: any hasFlag public hasFlag ( flag : FlagEnum ) : boolean Indicates if entity has a given flag. flag Required Type: FlagEnum hasMetadata public hasMetadata ( metadataType : string , data : any ) : boolean Indicates if entity has matching metadata entry. metadataType Required Type: string data Required Type: any hasTag public hasTag ( key : string , value? : string ) : boolean Indicates if entity has tag, optionally verifying tag value. key Required Type: string value Optional Type: string mutateDestroy public mutateDestroy ( strict? : boolean ) : void Destroys this node by removing all references and removing this node from the store. strict Optional Type: boolean setAttribute public setAttribute ( key : string , value : any ) : void Set attribute. This will overwrite existing attribute. key Required Type: string value Required Type: any setTag public setTag ( key : string , value : string ) : void Set tag. Will overwrite existing tag. key Required Type: string value Required Type: string addChild public addChild ( node : Node ) : void Add child node. node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node addLink public addLink ( edge : Edge ) : void Add link to another node. edge Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge addReverseLink public addReverseLink ( edge : Edge ) : void Add link from another node. edge Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge doesDependOn public doesDependOn ( node : Node ) : boolean Indicates if this node depends on another node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node doesReference public doesReference ( node : Node ) : boolean Indicates if this node references another node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node find public find ( predicate : INodePredicate ) : Node Recursively find the nearest sub-node matching predicate. predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.INodePredicate findAll public findAll ( options? : IFindNodeOptions ) : Node [] Return this construct and all of its sub-nodes in the given order. Optionally filter nodes based on predicate. options Optional Type: aws-prototyping-sdk/cdk-graph.Graph.IFindNodeOptions findAllLinks public findAllLinks ( options? : IFindEdgeOptions ) : Edge [] Return all direct links of this node and that of all sub-nodes. Optionally filter links based on predicate. options Optional Type: aws-prototyping-sdk/cdk-graph.Graph.IFindEdgeOptions findAncestor public findAncestor ( predicate : INodePredicate , max? : number ) : Node Find nearest ancestor of this node matching given predicate. predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.INodePredicate Predicate to match ancestor. max Optional Type: number findChild public findChild ( id : string ) : Node Find child with given id . Similar to find but does not throw error if no child found. id Required Type: string findLink public findLink ( predicate : IEdgePredicate , reverse? : boolean , follow? : boolean , direct? : boolean ) : Edge Find link of this node based on predicate. By default this will follow link chains to evaluate the predicate against and return the matching direct link of this node. predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.IEdgePredicate Edge predicate function to match edge. reverse Optional Type: boolean Indicates if links are search in reverse order. follow Optional Type: boolean Indicates if link chain is followed. direct Optional Type: boolean Indicates that only direct links should be searched. findLinks public findLinks ( predicate : IEdgePredicate , reverse? : boolean , follow? : boolean , direct? : boolean ) : Edge [] Find all links of this node based on predicate. By default this will follow link chains to evaluate the predicate against and return the matching direct links of this node. predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.IEdgePredicate Edge predicate function to match edge. reverse Optional Type: boolean Indicates if links are search in reverse order. follow Optional Type: boolean Indicates if link chain is followed. direct Optional Type: boolean Indicates that only direct links should be searched. getCfnProp public getCfnProp ( key : string ) : string | number | boolean | PlainObject | string | number | boolean | PlainObject [] Get specific CloudFormation property. key Required Type: string getChild public getChild ( id : string ) : Node Get child node with given id . id Required Type: string getLinkChains public getLinkChains ( reverse? : boolean ) : object [] Resolve all link chains. {@link EdgeChain} reverse Optional Type: boolean getNearestAncestor public getNearestAncestor ( node : Node ) : Node Gets the nearest common ancestor shared between this node and another node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node isAncestor public isAncestor ( ancestor : Node ) : boolean Indicates if a specific node is an ancestor of this node . ancestor Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node isChild public isChild ( node : Node ) : boolean Indicates if specific node is a child of this node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateCollapse public mutateCollapse () : void Collapses all sub-nodes of this node into this node . mutateCollapseTo public mutateCollapseTo ( ancestor : Node ) : Node Collapses this node into an ancestor . ancestor Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateCollapseToParent public mutateCollapseToParent () : Node Collapses this node into it's parent node . mutateHoist public mutateHoist ( newParent : Node ) : void Hoist this node to an ancestor by removing it from its current parent node and in turn moving it to the ancestor. newParent Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateMove public mutateMove ( newParent : Node ) : void Move this node into a new parent node. newParent Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node The parent to move this node to. mutateRemoveChild public mutateRemoveChild ( node : Node ) : boolean Remove a child node from this node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateRemoveLink public mutateRemoveLink ( link : Edge ) : boolean Remove a link from this node . link Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge mutateRemoveReverseLink public mutateRemoveReverseLink ( link : Edge ) : boolean Remove a link to this node . link Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge mutateUncluster public mutateUncluster () : void Hoist all children to parent and collapse node to parent. toString public toString () : string Get string representation of this node. Static Functions Name Description isOutputNode Indicates if node is an { @link OutputNode}. isOutputNode import { Graph } from '@aws-prototyping-sdk/cdk-graph' Graph . OutputNode . isOutputNode ( node : Node ) Indicates if node is an { @link OutputNode}. node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node Properties Name Type Description attributes aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Get readonly record of all attributes. flags FlagEnum [] Get readonly list of all flags. isDestroyed boolean Indicates if the entity has been destroyed (eg: removed from store). isMutated boolean Indicates if the entity has had destructive mutations applied. metadata constructs.MetadataEntry[] Get readonly list of all metadata entries. store aws-prototyping-sdk/cdk-graph.Graph.Store Reference to the store. tags aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Get readonly record of all tags. uuid string Universally unique identifier. allowDestructiveMutations boolean Indicates if this node allows destructive mutations. children aws-prototyping-sdk/cdk-graph.Graph.Node [] Get all direct child nodes. dependedOnBy aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that depend on this node . dependencies aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that this node depends on . dependencyLinks aws-prototyping-sdk/cdk-graph.Graph.Dependency [] Gets list of { @link Dependency} links (edges) where this node is the source . depth number Indicates the depth of the node relative to root (0). id string Node id, which is only unique within parent scope. isAsset boolean Indicates if this node is considered a { @link FlagEnum.ASSET}. isCfnFqn boolean Indicates if node ConstructInfoFqn denotes a aws-cdk-lib.*.Cfn* construct. isCluster boolean Indicates if this node is considered a { @link FlagEnum.CLUSTER}. isCustomResource boolean Indicates if node is a Custom Resource . isExtraneous boolean Indicates if this node is considered a { @link FlagEnum.EXTRANEOUS} node or determined to be extraneous: - Clusters that contain no children. isGraphContainer boolean Indicates if this node is considered a { @link FlagEnum.GRAPH_CONTAINER}. isLeaf boolean Indicates if this node is a leaf node, which means it does not have children. isTopLevel boolean Indicates if node is direct child of the graph root node. links aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all links (edges) in which this node is the source . nodeType NodeTypeEnum Type of node. path string Path of the node. referencedBy aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that reference this node . referenceLinks aws-prototyping-sdk/cdk-graph.Graph.Reference [] Gets list of { @link Reference} links (edges) where this node is the source . references aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that this node references . reverseDependencyLinks aws-prototyping-sdk/cdk-graph.Graph.Dependency [] Gets list of { @link Dependency} links (edges) where this node is the target . reverseLinks aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all links (edges) in which this node is the target . reverseReferenceLinks aws-prototyping-sdk/cdk-graph.Graph.Reference [] Gets list of { @link Reference} links (edges) where this node is the target . scopes aws-prototyping-sdk/cdk-graph.Graph.Node [] Gets descending ordered list of ancestors from the root. siblings aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of siblings of this node. cfnProps aws-prototyping-sdk/cdk-graph.SerializedGraph.PlainObject Gets CloudFormation properties for this node. cfnType string Get the CloudFormation resource type for this node. constructInfo ConstructInfo Synthesized construct information defining jii resolution data. constructInfoFqn string Synthesized construct information defining jii resolution data. logicalId string Logical id of the node, which is only unique within containing stack. parent aws-prototyping-sdk/cdk-graph.Graph.Node Parent node. rootStack aws-prototyping-sdk/cdk-graph.Graph.StackNode Get root stack. stack aws-prototyping-sdk/cdk-graph.Graph.StackNode Stack the node is contained in. isExport boolean Indicates if { @link OutputNode} is exported . value any Get the value * attribute. exportName string Get the export name attribute. attributes Required public readonly attributes : Attributes ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Get readonly record of all attributes. flags Required public readonly flags : FlagEnum []; Type: FlagEnum [] Get readonly list of all flags. isDestroyed Required public readonly isDestroyed : boolean ; Type: boolean Indicates if the entity has been destroyed (eg: removed from store). isMutated Required public readonly isMutated : boolean ; Type: boolean Indicates if the entity has had destructive mutations applied. metadata Required public readonly metadata : MetadataEntry []; Type: constructs.MetadataEntry[] Get readonly list of all metadata entries. store Required public readonly store : Store ; Type: aws-prototyping-sdk/cdk-graph.Graph.Store Reference to the store. tags Required public readonly tags : Tags ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Get readonly record of all tags. uuid Required public readonly uuid : string ; Type: string Universally unique identifier. allowDestructiveMutations Required public readonly allowDestructiveMutations : boolean ; Type: boolean Indicates if this node allows destructive mutations. {@link Store.allowDestructiveMutations} children Required public readonly children : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get all direct child nodes. dependedOnBy Required public readonly dependedOnBy : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that depend on this node . {@link Node.reverseDependencyLinks} dependencies Required public readonly dependencies : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that this node depends on . {@link Node.dependencyLinks} dependencyLinks Required public readonly dependencyLinks : Dependency []; Type: aws-prototyping-sdk/cdk-graph.Graph.Dependency [] Gets list of { @link Dependency} links (edges) where this node is the source . depth Required public readonly depth : number ; Type: number Indicates the depth of the node relative to root (0). id Required public readonly id : string ; Type: string Node id, which is only unique within parent scope. isAsset Required public readonly isAsset : boolean ; Type: boolean Indicates if this node is considered a { @link FlagEnum.ASSET}. isCfnFqn Required public readonly isCfnFqn : boolean ; Type: boolean Indicates if node ConstructInfoFqn denotes a aws-cdk-lib.*.Cfn* construct. {@link FlagEnum.CFN_FQN} isCluster Required public readonly isCluster : boolean ; Type: boolean Indicates if this node is considered a { @link FlagEnum.CLUSTER}. isCustomResource Required public readonly isCustomResource : boolean ; Type: boolean Indicates if node is a Custom Resource . isExtraneous Required public readonly isExtraneous : boolean ; Type: boolean Indicates if this node is considered a { @link FlagEnum.EXTRANEOUS} node or determined to be extraneous: - Clusters that contain no children. isGraphContainer Required public readonly isGraphContainer : boolean ; Type: boolean Indicates if this node is considered a { @link FlagEnum.GRAPH_CONTAINER}. isLeaf Required public readonly isLeaf : boolean ; Type: boolean Indicates if this node is a leaf node, which means it does not have children. isTopLevel Required public readonly isTopLevel : boolean ; Type: boolean Indicates if node is direct child of the graph root node. links Required public readonly links : Edge []; Type: aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all links (edges) in which this node is the source . nodeType Required public readonly nodeType : NodeTypeEnum ; Type: NodeTypeEnum Type of node. path Required public readonly path : string ; Type: string Path of the node. referencedBy Required public readonly referencedBy : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that reference this node . {@link Node.reverseReferenceLinks} referenceLinks Required public readonly referenceLinks : Reference []; Type: aws-prototyping-sdk/cdk-graph.Graph.Reference [] Gets list of { @link Reference} links (edges) where this node is the source . references Required public readonly references : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that this node references . {@link Node.referenceLinks} reverseDependencyLinks Required public readonly reverseDependencyLinks : Dependency []; Type: aws-prototyping-sdk/cdk-graph.Graph.Dependency [] Gets list of { @link Dependency} links (edges) where this node is the target . reverseLinks Required public readonly reverseLinks : Edge []; Type: aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all links (edges) in which this node is the target . reverseReferenceLinks Required public readonly reverseReferenceLinks : Reference []; Type: aws-prototyping-sdk/cdk-graph.Graph.Reference [] Gets list of { @link Reference} links (edges) where this node is the target . scopes Required public readonly scopes : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Gets descending ordered list of ancestors from the root. siblings Required public readonly siblings : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of siblings of this node. cfnProps Optional public readonly cfnProps : PlainObject ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.PlainObject Gets CloudFormation properties for this node. cfnType Optional public readonly cfnType : string ; Type: string Get the CloudFormation resource type for this node. constructInfo Optional public readonly constructInfo : ConstructInfo ; Type: ConstructInfo Synthesized construct information defining jii resolution data. constructInfoFqn Optional public readonly constructInfoFqn : string ; Type: string Synthesized construct information defining jii resolution data. logicalId Optional public readonly logicalId : string ; Type: string Logical id of the node, which is only unique within containing stack. parent Optional public readonly parent : Node ; Type: aws-prototyping-sdk/cdk-graph.Graph.Node Parent node. Only the root node should not have parent. rootStack Optional public readonly rootStack : StackNode ; Type: aws-prototyping-sdk/cdk-graph.Graph.StackNode Get root stack. stack Optional public readonly stack : StackNode ; Type: aws-prototyping-sdk/cdk-graph.Graph.StackNode Stack the node is contained in. isExport Required public readonly isExport : boolean ; Type: boolean Indicates if { @link OutputNode} is exported . value Required public readonly value : any ; Type: any Get the value * attribute. exportName Optional public readonly exportName : string ; Type: string Get the export name attribute. Constants Name Type Description ATTR_EXPORT_NAME string Attribute key where output export name is stored. ATTR_VALUE string Attribute key where output value is stored. ATTR_EXPORT_NAME Required public readonly ATTR_EXPORT_NAME : string ; Type: string Attribute key where output export name is stored. ATTR_VALUE Required public readonly ATTR_VALUE : string ; Type: string Attribute key where output value is stored. ParameterNode ParameterNode defines a CfnParameter node. Initializers import { Graph } from '@aws-prototyping-sdk/cdk-graph' new Graph . ParameterNode ( props : IParameterNodeProps ) Name Type Description props aws-prototyping-sdk/cdk-graph.Graph.IParameterNodeProps No description. props Required Type: aws-prototyping-sdk/cdk-graph.Graph.IParameterNodeProps Methods Name Description addAttribute Add attribute. addFlag Add flag. addMetadata Add metadata entry. addTag Add tag. applyData Applies data (attributes, metadata, tags, flag) to entity. findMetadata Retrieves all metadata entries of a given type. getAttribute Get attribute by key. getTag Get tag by key. hasAttribute Indicates if entity has a given attribute defined, and optionally with a specific value. hasFlag Indicates if entity has a given flag. hasMetadata Indicates if entity has matching metadata entry. hasTag Indicates if entity has tag, optionally verifying tag value. mutateDestroy Destroys this node by removing all references and removing this node from the store. setAttribute Set attribute. setTag Set tag. addChild Add child node. addLink Add link to another node. addReverseLink Add link from another node. doesDependOn Indicates if this node depends on another node . doesReference Indicates if this node references another node . find Recursively find the nearest sub-node matching predicate. findAll Return this construct and all of its sub-nodes in the given order. findAllLinks Return all direct links of this node and that of all sub-nodes. findAncestor Find nearest ancestor of this node matching given predicate. findChild Find child with given id . findLink Find link of this node based on predicate. findLinks Find all links of this node based on predicate. getCfnProp Get specific CloudFormation property. getChild Get child node with given id . getLinkChains Resolve all link chains. getNearestAncestor Gets the nearest common ancestor shared between this node and another node . isAncestor Indicates if a specific node is an ancestor of this node . isChild Indicates if specific node is a child of this node . mutateCollapse Collapses all sub-nodes of this node into this node . mutateCollapseTo Collapses this node into an ancestor . mutateCollapseToParent Collapses this node into it's parent node . mutateHoist Hoist this node to an ancestor by removing it from its current parent node and in turn moving it to the ancestor. mutateMove Move this node into a new parent node. mutateRemoveChild Remove a child node from this node . mutateRemoveLink Remove a link from this node . mutateRemoveReverseLink Remove a link to this node . mutateUncluster Hoist all children to parent and collapse node to parent. toString Get string representation of this node. addAttribute public addAttribute ( key : string , value : any ) : void Add attribute. key Required Type: string value Required Type: any addFlag public addFlag ( flag : FlagEnum ) : void Add flag. flag Required Type: FlagEnum addMetadata public addMetadata ( metadataType : string , data : any ) : void Add metadata entry. metadataType Required Type: string data Required Type: any addTag public addTag ( key : string , value : string ) : void Add tag. key Required Type: string value Required Type: string applyData public applyData ( data : IBaseEntityDataProps , overwrite? : boolean , applyFlags? : boolean ) : void Applies data (attributes, metadata, tags, flag) to entity. Generally used only for mutations such as collapse and consume to retain data. data Required Type: aws-prototyping-sdk/cdk-graph.Graph.IBaseEntityDataProps The data to apply. overwrite Optional Type: boolean applyFlags Optional Type: boolean Indicates if data is overwritten - Indicates if flags should be applied. findMetadata public findMetadata ( metadataType : string ) : MetadataEntry [] Retrieves all metadata entries of a given type. metadataType Required Type: string getAttribute public getAttribute ( key : string ) : any Get attribute by key. key Required Type: string getTag public getTag ( key : string ) : string Get tag by key. key Required Type: string hasAttribute public hasAttribute ( key : string , value? : any ) : boolean Indicates if entity has a given attribute defined, and optionally with a specific value. key Required Type: string value Optional Type: any hasFlag public hasFlag ( flag : FlagEnum ) : boolean Indicates if entity has a given flag. flag Required Type: FlagEnum hasMetadata public hasMetadata ( metadataType : string , data : any ) : boolean Indicates if entity has matching metadata entry. metadataType Required Type: string data Required Type: any hasTag public hasTag ( key : string , value? : string ) : boolean Indicates if entity has tag, optionally verifying tag value. key Required Type: string value Optional Type: string mutateDestroy public mutateDestroy ( strict? : boolean ) : void Destroys this node by removing all references and removing this node from the store. strict Optional Type: boolean setAttribute public setAttribute ( key : string , value : any ) : void Set attribute. This will overwrite existing attribute. key Required Type: string value Required Type: any setTag public setTag ( key : string , value : string ) : void Set tag. Will overwrite existing tag. key Required Type: string value Required Type: string addChild public addChild ( node : Node ) : void Add child node. node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node addLink public addLink ( edge : Edge ) : void Add link to another node. edge Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge addReverseLink public addReverseLink ( edge : Edge ) : void Add link from another node. edge Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge doesDependOn public doesDependOn ( node : Node ) : boolean Indicates if this node depends on another node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node doesReference public doesReference ( node : Node ) : boolean Indicates if this node references another node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node find public find ( predicate : INodePredicate ) : Node Recursively find the nearest sub-node matching predicate. predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.INodePredicate findAll public findAll ( options? : IFindNodeOptions ) : Node [] Return this construct and all of its sub-nodes in the given order. Optionally filter nodes based on predicate. options Optional Type: aws-prototyping-sdk/cdk-graph.Graph.IFindNodeOptions findAllLinks public findAllLinks ( options? : IFindEdgeOptions ) : Edge [] Return all direct links of this node and that of all sub-nodes. Optionally filter links based on predicate. options Optional Type: aws-prototyping-sdk/cdk-graph.Graph.IFindEdgeOptions findAncestor public findAncestor ( predicate : INodePredicate , max? : number ) : Node Find nearest ancestor of this node matching given predicate. predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.INodePredicate Predicate to match ancestor. max Optional Type: number findChild public findChild ( id : string ) : Node Find child with given id . Similar to find but does not throw error if no child found. id Required Type: string findLink public findLink ( predicate : IEdgePredicate , reverse? : boolean , follow? : boolean , direct? : boolean ) : Edge Find link of this node based on predicate. By default this will follow link chains to evaluate the predicate against and return the matching direct link of this node. predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.IEdgePredicate Edge predicate function to match edge. reverse Optional Type: boolean Indicates if links are search in reverse order. follow Optional Type: boolean Indicates if link chain is followed. direct Optional Type: boolean Indicates that only direct links should be searched. findLinks public findLinks ( predicate : IEdgePredicate , reverse? : boolean , follow? : boolean , direct? : boolean ) : Edge [] Find all links of this node based on predicate. By default this will follow link chains to evaluate the predicate against and return the matching direct links of this node. predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.IEdgePredicate Edge predicate function to match edge. reverse Optional Type: boolean Indicates if links are search in reverse order. follow Optional Type: boolean Indicates if link chain is followed. direct Optional Type: boolean Indicates that only direct links should be searched. getCfnProp public getCfnProp ( key : string ) : string | number | boolean | PlainObject | string | number | boolean | PlainObject [] Get specific CloudFormation property. key Required Type: string getChild public getChild ( id : string ) : Node Get child node with given id . id Required Type: string getLinkChains public getLinkChains ( reverse? : boolean ) : object [] Resolve all link chains. {@link EdgeChain} reverse Optional Type: boolean getNearestAncestor public getNearestAncestor ( node : Node ) : Node Gets the nearest common ancestor shared between this node and another node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node isAncestor public isAncestor ( ancestor : Node ) : boolean Indicates if a specific node is an ancestor of this node . ancestor Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node isChild public isChild ( node : Node ) : boolean Indicates if specific node is a child of this node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateCollapse public mutateCollapse () : void Collapses all sub-nodes of this node into this node . mutateCollapseTo public mutateCollapseTo ( ancestor : Node ) : Node Collapses this node into an ancestor . ancestor Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateCollapseToParent public mutateCollapseToParent () : Node Collapses this node into it's parent node . mutateHoist public mutateHoist ( newParent : Node ) : void Hoist this node to an ancestor by removing it from its current parent node and in turn moving it to the ancestor. newParent Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateMove public mutateMove ( newParent : Node ) : void Move this node into a new parent node. newParent Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node The parent to move this node to. mutateRemoveChild public mutateRemoveChild ( node : Node ) : boolean Remove a child node from this node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateRemoveLink public mutateRemoveLink ( link : Edge ) : boolean Remove a link from this node . link Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge mutateRemoveReverseLink public mutateRemoveReverseLink ( link : Edge ) : boolean Remove a link to this node . link Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge mutateUncluster public mutateUncluster () : void Hoist all children to parent and collapse node to parent. toString public toString () : string Get string representation of this node. Static Functions Name Description isParameterNode Indicates if node is a { @link ParameterNode}. isParameterNode import { Graph } from '@aws-prototyping-sdk/cdk-graph' Graph . ParameterNode . isParameterNode ( node : Node ) Indicates if node is a { @link ParameterNode}. node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node Properties Name Type Description attributes aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Get readonly record of all attributes. flags FlagEnum [] Get readonly list of all flags. isDestroyed boolean Indicates if the entity has been destroyed (eg: removed from store). isMutated boolean Indicates if the entity has had destructive mutations applied. metadata constructs.MetadataEntry[] Get readonly list of all metadata entries. store aws-prototyping-sdk/cdk-graph.Graph.Store Reference to the store. tags aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Get readonly record of all tags. uuid string Universally unique identifier. allowDestructiveMutations boolean Indicates if this node allows destructive mutations. children aws-prototyping-sdk/cdk-graph.Graph.Node [] Get all direct child nodes. dependedOnBy aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that depend on this node . dependencies aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that this node depends on . dependencyLinks aws-prototyping-sdk/cdk-graph.Graph.Dependency [] Gets list of { @link Dependency} links (edges) where this node is the source . depth number Indicates the depth of the node relative to root (0). id string Node id, which is only unique within parent scope. isAsset boolean Indicates if this node is considered a { @link FlagEnum.ASSET}. isCfnFqn boolean Indicates if node ConstructInfoFqn denotes a aws-cdk-lib.*.Cfn* construct. isCluster boolean Indicates if this node is considered a { @link FlagEnum.CLUSTER}. isCustomResource boolean Indicates if node is a Custom Resource . isExtraneous boolean Indicates if this node is considered a { @link FlagEnum.EXTRANEOUS} node or determined to be extraneous: - Clusters that contain no children. isGraphContainer boolean Indicates if this node is considered a { @link FlagEnum.GRAPH_CONTAINER}. isLeaf boolean Indicates if this node is a leaf node, which means it does not have children. isTopLevel boolean Indicates if node is direct child of the graph root node. links aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all links (edges) in which this node is the source . nodeType NodeTypeEnum Type of node. path string Path of the node. referencedBy aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that reference this node . referenceLinks aws-prototyping-sdk/cdk-graph.Graph.Reference [] Gets list of { @link Reference} links (edges) where this node is the source . references aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that this node references . reverseDependencyLinks aws-prototyping-sdk/cdk-graph.Graph.Dependency [] Gets list of { @link Dependency} links (edges) where this node is the target . reverseLinks aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all links (edges) in which this node is the target . reverseReferenceLinks aws-prototyping-sdk/cdk-graph.Graph.Reference [] Gets list of { @link Reference} links (edges) where this node is the target . scopes aws-prototyping-sdk/cdk-graph.Graph.Node [] Gets descending ordered list of ancestors from the root. siblings aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of siblings of this node. cfnProps aws-prototyping-sdk/cdk-graph.SerializedGraph.PlainObject Gets CloudFormation properties for this node. cfnType string Get the CloudFormation resource type for this node. constructInfo ConstructInfo Synthesized construct information defining jii resolution data. constructInfoFqn string Synthesized construct information defining jii resolution data. logicalId string Logical id of the node, which is only unique within containing stack. parent aws-prototyping-sdk/cdk-graph.Graph.Node Parent node. rootStack aws-prototyping-sdk/cdk-graph.Graph.StackNode Get root stack. stack aws-prototyping-sdk/cdk-graph.Graph.StackNode Stack the node is contained in. isStackReference boolean Indicates if parameter is a reference to a stack. parameterType any Get the parameter type attribute. value any Get the value attribute. attributes Required public readonly attributes : Attributes ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Get readonly record of all attributes. flags Required public readonly flags : FlagEnum []; Type: FlagEnum [] Get readonly list of all flags. isDestroyed Required public readonly isDestroyed : boolean ; Type: boolean Indicates if the entity has been destroyed (eg: removed from store). isMutated Required public readonly isMutated : boolean ; Type: boolean Indicates if the entity has had destructive mutations applied. metadata Required public readonly metadata : MetadataEntry []; Type: constructs.MetadataEntry[] Get readonly list of all metadata entries. store Required public readonly store : Store ; Type: aws-prototyping-sdk/cdk-graph.Graph.Store Reference to the store. tags Required public readonly tags : Tags ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Get readonly record of all tags. uuid Required public readonly uuid : string ; Type: string Universally unique identifier. allowDestructiveMutations Required public readonly allowDestructiveMutations : boolean ; Type: boolean Indicates if this node allows destructive mutations. {@link Store.allowDestructiveMutations} children Required public readonly children : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get all direct child nodes. dependedOnBy Required public readonly dependedOnBy : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that depend on this node . {@link Node.reverseDependencyLinks} dependencies Required public readonly dependencies : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that this node depends on . {@link Node.dependencyLinks} dependencyLinks Required public readonly dependencyLinks : Dependency []; Type: aws-prototyping-sdk/cdk-graph.Graph.Dependency [] Gets list of { @link Dependency} links (edges) where this node is the source . depth Required public readonly depth : number ; Type: number Indicates the depth of the node relative to root (0). id Required public readonly id : string ; Type: string Node id, which is only unique within parent scope. isAsset Required public readonly isAsset : boolean ; Type: boolean Indicates if this node is considered a { @link FlagEnum.ASSET}. isCfnFqn Required public readonly isCfnFqn : boolean ; Type: boolean Indicates if node ConstructInfoFqn denotes a aws-cdk-lib.*.Cfn* construct. {@link FlagEnum.CFN_FQN} isCluster Required public readonly isCluster : boolean ; Type: boolean Indicates if this node is considered a { @link FlagEnum.CLUSTER}. isCustomResource Required public readonly isCustomResource : boolean ; Type: boolean Indicates if node is a Custom Resource . isExtraneous Required public readonly isExtraneous : boolean ; Type: boolean Indicates if this node is considered a { @link FlagEnum.EXTRANEOUS} node or determined to be extraneous: - Clusters that contain no children. isGraphContainer Required public readonly isGraphContainer : boolean ; Type: boolean Indicates if this node is considered a { @link FlagEnum.GRAPH_CONTAINER}. isLeaf Required public readonly isLeaf : boolean ; Type: boolean Indicates if this node is a leaf node, which means it does not have children. isTopLevel Required public readonly isTopLevel : boolean ; Type: boolean Indicates if node is direct child of the graph root node. links Required public readonly links : Edge []; Type: aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all links (edges) in which this node is the source . nodeType Required public readonly nodeType : NodeTypeEnum ; Type: NodeTypeEnum Type of node. path Required public readonly path : string ; Type: string Path of the node. referencedBy Required public readonly referencedBy : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that reference this node . {@link Node.reverseReferenceLinks} referenceLinks Required public readonly referenceLinks : Reference []; Type: aws-prototyping-sdk/cdk-graph.Graph.Reference [] Gets list of { @link Reference} links (edges) where this node is the source . references Required public readonly references : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that this node references . {@link Node.referenceLinks} reverseDependencyLinks Required public readonly reverseDependencyLinks : Dependency []; Type: aws-prototyping-sdk/cdk-graph.Graph.Dependency [] Gets list of { @link Dependency} links (edges) where this node is the target . reverseLinks Required public readonly reverseLinks : Edge []; Type: aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all links (edges) in which this node is the target . reverseReferenceLinks Required public readonly reverseReferenceLinks : Reference []; Type: aws-prototyping-sdk/cdk-graph.Graph.Reference [] Gets list of { @link Reference} links (edges) where this node is the target . scopes Required public readonly scopes : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Gets descending ordered list of ancestors from the root. siblings Required public readonly siblings : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of siblings of this node. cfnProps Optional public readonly cfnProps : PlainObject ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.PlainObject Gets CloudFormation properties for this node. cfnType Optional public readonly cfnType : string ; Type: string Get the CloudFormation resource type for this node. constructInfo Optional public readonly constructInfo : ConstructInfo ; Type: ConstructInfo Synthesized construct information defining jii resolution data. constructInfoFqn Optional public readonly constructInfoFqn : string ; Type: string Synthesized construct information defining jii resolution data. logicalId Optional public readonly logicalId : string ; Type: string Logical id of the node, which is only unique within containing stack. parent Optional public readonly parent : Node ; Type: aws-prototyping-sdk/cdk-graph.Graph.Node Parent node. Only the root node should not have parent. rootStack Optional public readonly rootStack : StackNode ; Type: aws-prototyping-sdk/cdk-graph.Graph.StackNode Get root stack. stack Optional public readonly stack : StackNode ; Type: aws-prototyping-sdk/cdk-graph.Graph.StackNode Stack the node is contained in. isStackReference Required public readonly isStackReference : boolean ; Type: boolean Indicates if parameter is a reference to a stack. parameterType Required public readonly parameterType : any ; Type: any Get the parameter type attribute. value Required public readonly value : any ; Type: any Get the value attribute. Constants Name Type Description ATTR_TYPE string Attribute key where parameter type is stored. ATTR_VALUE string Attribute key where parameter value is store. ATTR_TYPE Required public readonly ATTR_TYPE : string ; Type: string Attribute key where parameter type is stored. ATTR_VALUE Required public readonly ATTR_VALUE : string ; Type: string Attribute key where parameter value is store. Reference Reference edge class defines a directed relationship between nodes. Initializers import { Graph } from '@aws-prototyping-sdk/cdk-graph' new Graph . Reference ( props : IReferenceProps ) Name Type Description props aws-prototyping-sdk/cdk-graph.Graph.IReferenceProps No description. props Required Type: aws-prototyping-sdk/cdk-graph.Graph.IReferenceProps Methods Name Description addAttribute Add attribute. addFlag Add flag. addMetadata Add metadata entry. addTag Add tag. applyData Applies data (attributes, metadata, tags, flag) to entity. findMetadata Retrieves all metadata entries of a given type. getAttribute Get attribute by key. getTag Get tag by key. hasAttribute Indicates if entity has a given attribute defined, and optionally with a specific value. hasFlag Indicates if entity has a given flag. hasMetadata Indicates if entity has matching metadata entry. hasTag Indicates if entity has tag, optionally verifying tag value. mutateDestroy Destroy the edge. setAttribute Set attribute. setTag Set tag. isEquivalent Indicates if this edge is equivalent to another edge. mutateConsume Merge an equivalent edge's data into this edge and destroy the other edge. mutateDirection Change the edge direction . mutateSource Change the edge source . mutateTarget Change the edge target . toString Get string representation of this edge. resolveChain Resolve reference chain. resolveTargets Resolve targets by following potential edge chain. addAttribute public addAttribute ( key : string , value : any ) : void Add attribute. key Required Type: string value Required Type: any addFlag public addFlag ( flag : FlagEnum ) : void Add flag. flag Required Type: FlagEnum addMetadata public addMetadata ( metadataType : string , data : any ) : void Add metadata entry. metadataType Required Type: string data Required Type: any addTag public addTag ( key : string , value : string ) : void Add tag. key Required Type: string value Required Type: string applyData public applyData ( data : IBaseEntityDataProps , overwrite? : boolean , applyFlags? : boolean ) : void Applies data (attributes, metadata, tags, flag) to entity. Generally used only for mutations such as collapse and consume to retain data. data Required Type: aws-prototyping-sdk/cdk-graph.Graph.IBaseEntityDataProps The data to apply. overwrite Optional Type: boolean applyFlags Optional Type: boolean Indicates if data is overwritten - Indicates if flags should be applied. findMetadata public findMetadata ( metadataType : string ) : MetadataEntry [] Retrieves all metadata entries of a given type. metadataType Required Type: string getAttribute public getAttribute ( key : string ) : any Get attribute by key. key Required Type: string getTag public getTag ( key : string ) : string Get tag by key. key Required Type: string hasAttribute public hasAttribute ( key : string , value? : any ) : boolean Indicates if entity has a given attribute defined, and optionally with a specific value. key Required Type: string value Optional Type: any hasFlag public hasFlag ( flag : FlagEnum ) : boolean Indicates if entity has a given flag. flag Required Type: FlagEnum hasMetadata public hasMetadata ( metadataType : string , data : any ) : boolean Indicates if entity has matching metadata entry. metadataType Required Type: string data Required Type: any hasTag public hasTag ( key : string , value? : string ) : boolean Indicates if entity has tag, optionally verifying tag value. key Required Type: string value Optional Type: string mutateDestroy public mutateDestroy ( _strict? : boolean ) : void Destroy the edge. Remove all references and remove from store. _strict Optional Type: boolean setAttribute public setAttribute ( key : string , value : any ) : void Set attribute. This will overwrite existing attribute. key Required Type: string value Required Type: any setTag public setTag ( key : string , value : string ) : void Set tag. Will overwrite existing tag. key Required Type: string value Required Type: string isEquivalent public isEquivalent ( edge : Edge ) : boolean Indicates if this edge is equivalent to another edge. Edges are considered equivalent if they share same type, source, and target. edge Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge mutateConsume public mutateConsume ( edge : Edge ) : void Merge an equivalent edge's data into this edge and destroy the other edge. Used during filtering operations to consolidate equivalent edges. edge Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge The edge to consume. mutateDirection public mutateDirection ( direction : EdgeDirectionEnum ) : void Change the edge direction . direction Required Type: EdgeDirectionEnum mutateSource public mutateSource ( node : Node ) : void Change the edge source . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateTarget public mutateTarget ( node : Node ) : void Change the edge target . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node toString public toString () : string Get string representation of this edge. resolveChain public resolveChain () : object Resolve reference chain. resolveTargets public resolveTargets () : Node [] Resolve targets by following potential edge chain. {@link EdgeChain} Static Functions Name Description findAllInChain Find all matching edges based on predicate within an EdgeChain. findInChain Find first edge matching predicate within an EdgeChain. isRef Indicates if edge is a Ref based { @link Reference} edge. isReference Indicates if edge is a { @link Reference}. findAllInChain import { Graph } from '@aws-prototyping-sdk/cdk-graph' Graph . Reference . findAllInChain ( chain : object , predicate : IEdgePredicate ) Find all matching edges based on predicate within an EdgeChain. chain Required Type: object predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.IEdgePredicate findInChain import { Graph } from '@aws-prototyping-sdk/cdk-graph' Graph . Reference . findInChain ( chain : object , predicate : IEdgePredicate ) Find first edge matching predicate within an EdgeChain. chain Required Type: object predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.IEdgePredicate isRef import { Graph } from '@aws-prototyping-sdk/cdk-graph' Graph . Reference . isRef ( edge : Edge ) Indicates if edge is a Ref based { @link Reference} edge. edge Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge isReference import { Graph } from '@aws-prototyping-sdk/cdk-graph' Graph . Reference . isReference ( edge : Edge ) Indicates if edge is a { @link Reference}. edge Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge Properties Name Type Description attributes aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Get readonly record of all attributes. flags FlagEnum [] Get readonly list of all flags. isDestroyed boolean Indicates if the entity has been destroyed (eg: removed from store). isMutated boolean Indicates if the entity has had destructive mutations applied. metadata constructs.MetadataEntry[] Get readonly list of all metadata entries. store aws-prototyping-sdk/cdk-graph.Graph.Store Reference to the store. tags aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Get readonly record of all tags. uuid string Universally unique identifier. allowDestructiveMutations boolean Indicates if edge allows destructive mutations. direction EdgeDirectionEnum Indicates the direction in which the edge is directed. edgeType EdgeTypeEnum Type of edge. isClosed boolean Indicates if the Edge's source and target are the same, or were the same when it was created (prior to mutations). isCrossStack boolean Indicates if source and target nodes reside in different root stacks. isExtraneous boolean Indicates if edge is extraneous which is determined by explicitly having EXTRANEOUS flag added and/or being a closed loop (source===target). source aws-prototyping-sdk/cdk-graph.Graph.Node Edge source is the node that defines the edge (tail). target aws-prototyping-sdk/cdk-graph.Graph.Node Edge target is the node being referenced by the source (head). referenceType ReferenceTypeEnum Get type of reference. attributes Required public readonly attributes : Attributes ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Get readonly record of all attributes. flags Required public readonly flags : FlagEnum []; Type: FlagEnum [] Get readonly list of all flags. isDestroyed Required public readonly isDestroyed : boolean ; Type: boolean Indicates if the entity has been destroyed (eg: removed from store). isMutated Required public readonly isMutated : boolean ; Type: boolean Indicates if the entity has had destructive mutations applied. metadata Required public readonly metadata : MetadataEntry []; Type: constructs.MetadataEntry[] Get readonly list of all metadata entries. store Required public readonly store : Store ; Type: aws-prototyping-sdk/cdk-graph.Graph.Store Reference to the store. tags Required public readonly tags : Tags ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Get readonly record of all tags. uuid Required public readonly uuid : string ; Type: string Universally unique identifier. allowDestructiveMutations Required public readonly allowDestructiveMutations : boolean ; Type: boolean Indicates if edge allows destructive mutations. direction Required public readonly direction : EdgeDirectionEnum ; Type: EdgeDirectionEnum Indicates the direction in which the edge is directed. edgeType Required public readonly edgeType : EdgeTypeEnum ; Type: EdgeTypeEnum Type of edge. isClosed Required public readonly isClosed : boolean ; Type: boolean Indicates if the Edge's source and target are the same, or were the same when it was created (prior to mutations). To check whether it was originally closed, use hasFlag(FlagEnum.CLOSED_EDGE) instead. isCrossStack Required public readonly isCrossStack : boolean ; Type: boolean Indicates if source and target nodes reside in different root stacks. isExtraneous Required public readonly isExtraneous : boolean ; Type: boolean Indicates if edge is extraneous which is determined by explicitly having EXTRANEOUS flag added and/or being a closed loop (source===target). source Required public readonly source : Node ; Type: aws-prototyping-sdk/cdk-graph.Graph.Node Edge source is the node that defines the edge (tail). target Required public readonly target : Node ; Type: aws-prototyping-sdk/cdk-graph.Graph.Node Edge target is the node being referenced by the source (head). referenceType Required public readonly referenceType : ReferenceTypeEnum ; Type: ReferenceTypeEnum Get type of reference. Constants Name Type Description ATT_TYPE string Attribute defining the type of reference. PREFIX string Edge prefix to denote Ref type reference edge. ATT_TYPE Required public readonly ATT_TYPE : string ; Type: string Attribute defining the type of reference. PREFIX Required public readonly PREFIX : string ; Type: string Edge prefix to denote Ref type reference edge. ResourceNode ResourceNode class defines a L2 cdk resource construct. Initializers import { Graph } from '@aws-prototyping-sdk/cdk-graph' new Graph . ResourceNode ( props : IResourceNodeProps ) Name Type Description props aws-prototyping-sdk/cdk-graph.Graph.IResourceNodeProps No description. props Required Type: aws-prototyping-sdk/cdk-graph.Graph.IResourceNodeProps Methods Name Description addAttribute Add attribute. addFlag Add flag. addMetadata Add metadata entry. addTag Add tag. applyData Applies data (attributes, metadata, tags, flag) to entity. findMetadata Retrieves all metadata entries of a given type. getAttribute Get attribute by key. getTag Get tag by key. hasAttribute Indicates if entity has a given attribute defined, and optionally with a specific value. hasFlag Indicates if entity has a given flag. hasMetadata Indicates if entity has matching metadata entry. hasTag Indicates if entity has tag, optionally verifying tag value. mutateDestroy Destroys this node by removing all references and removing this node from the store. setAttribute Set attribute. setTag Set tag. addChild Add child node. addLink Add link to another node. addReverseLink Add link from another node. doesDependOn Indicates if this node depends on another node . doesReference Indicates if this node references another node . find Recursively find the nearest sub-node matching predicate. findAll Return this construct and all of its sub-nodes in the given order. findAllLinks Return all direct links of this node and that of all sub-nodes. findAncestor Find nearest ancestor of this node matching given predicate. findChild Find child with given id . findLink Find link of this node based on predicate. findLinks Find all links of this node based on predicate. getCfnProp Get specific CloudFormation property. getChild Get child node with given id . getLinkChains Resolve all link chains. getNearestAncestor Gets the nearest common ancestor shared between this node and another node . isAncestor Indicates if a specific node is an ancestor of this node . isChild Indicates if specific node is a child of this node . mutateCollapse Collapses all sub-nodes of this node into this node . mutateCollapseTo Collapses this node into an ancestor . mutateCollapseToParent Collapses this node into it's parent node . mutateHoist Hoist this node to an ancestor by removing it from its current parent node and in turn moving it to the ancestor. mutateMove Move this node into a new parent node. mutateRemoveChild Remove a child node from this node . mutateRemoveLink Remove a link from this node . mutateRemoveReverseLink Remove a link to this node . mutateUncluster Hoist all children to parent and collapse node to parent. toString Get string representation of this node. mutateCfnResource Modifies the L1 resource wrapped by this L2 resource. addAttribute public addAttribute ( key : string , value : any ) : void Add attribute. key Required Type: string value Required Type: any addFlag public addFlag ( flag : FlagEnum ) : void Add flag. flag Required Type: FlagEnum addMetadata public addMetadata ( metadataType : string , data : any ) : void Add metadata entry. metadataType Required Type: string data Required Type: any addTag public addTag ( key : string , value : string ) : void Add tag. key Required Type: string value Required Type: string applyData public applyData ( data : IBaseEntityDataProps , overwrite? : boolean , applyFlags? : boolean ) : void Applies data (attributes, metadata, tags, flag) to entity. Generally used only for mutations such as collapse and consume to retain data. data Required Type: aws-prototyping-sdk/cdk-graph.Graph.IBaseEntityDataProps The data to apply. overwrite Optional Type: boolean applyFlags Optional Type: boolean Indicates if data is overwritten - Indicates if flags should be applied. findMetadata public findMetadata ( metadataType : string ) : MetadataEntry [] Retrieves all metadata entries of a given type. metadataType Required Type: string getAttribute public getAttribute ( key : string ) : any Get attribute by key. key Required Type: string getTag public getTag ( key : string ) : string Get tag by key. key Required Type: string hasAttribute public hasAttribute ( key : string , value? : any ) : boolean Indicates if entity has a given attribute defined, and optionally with a specific value. key Required Type: string value Optional Type: any hasFlag public hasFlag ( flag : FlagEnum ) : boolean Indicates if entity has a given flag. flag Required Type: FlagEnum hasMetadata public hasMetadata ( metadataType : string , data : any ) : boolean Indicates if entity has matching metadata entry. metadataType Required Type: string data Required Type: any hasTag public hasTag ( key : string , value? : string ) : boolean Indicates if entity has tag, optionally verifying tag value. key Required Type: string value Optional Type: string mutateDestroy public mutateDestroy ( strict? : boolean ) : void Destroys this node by removing all references and removing this node from the store. strict Optional Type: boolean Indicates that this node must not have references. setAttribute public setAttribute ( key : string , value : any ) : void Set attribute. This will overwrite existing attribute. key Required Type: string value Required Type: any setTag public setTag ( key : string , value : string ) : void Set tag. Will overwrite existing tag. key Required Type: string value Required Type: string addChild public addChild ( node : Node ) : void Add child node. node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node addLink public addLink ( edge : Edge ) : void Add link to another node. edge Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge addReverseLink public addReverseLink ( edge : Edge ) : void Add link from another node. edge Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge doesDependOn public doesDependOn ( node : Node ) : boolean Indicates if this node depends on another node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node doesReference public doesReference ( node : Node ) : boolean Indicates if this node references another node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node find public find ( predicate : INodePredicate ) : Node Recursively find the nearest sub-node matching predicate. predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.INodePredicate findAll public findAll ( options? : IFindNodeOptions ) : Node [] Return this construct and all of its sub-nodes in the given order. Optionally filter nodes based on predicate. options Optional Type: aws-prototyping-sdk/cdk-graph.Graph.IFindNodeOptions findAllLinks public findAllLinks ( options? : IFindEdgeOptions ) : Edge [] Return all direct links of this node and that of all sub-nodes. Optionally filter links based on predicate. options Optional Type: aws-prototyping-sdk/cdk-graph.Graph.IFindEdgeOptions findAncestor public findAncestor ( predicate : INodePredicate , max? : number ) : Node Find nearest ancestor of this node matching given predicate. predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.INodePredicate Predicate to match ancestor. max Optional Type: number findChild public findChild ( id : string ) : Node Find child with given id . Similar to find but does not throw error if no child found. id Required Type: string findLink public findLink ( predicate : IEdgePredicate , reverse? : boolean , follow? : boolean , direct? : boolean ) : Edge Find link of this node based on predicate. By default this will follow link chains to evaluate the predicate against and return the matching direct link of this node. predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.IEdgePredicate Edge predicate function to match edge. reverse Optional Type: boolean Indicates if links are search in reverse order. follow Optional Type: boolean Indicates if link chain is followed. direct Optional Type: boolean Indicates that only direct links should be searched. findLinks public findLinks ( predicate : IEdgePredicate , reverse? : boolean , follow? : boolean , direct? : boolean ) : Edge [] Find all links of this node based on predicate. By default this will follow link chains to evaluate the predicate against and return the matching direct links of this node. predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.IEdgePredicate Edge predicate function to match edge. reverse Optional Type: boolean Indicates if links are search in reverse order. follow Optional Type: boolean Indicates if link chain is followed. direct Optional Type: boolean Indicates that only direct links should be searched. getCfnProp public getCfnProp ( key : string ) : string | number | boolean | PlainObject | string | number | boolean | PlainObject [] Get specific CloudFormation property. key Required Type: string getChild public getChild ( id : string ) : Node Get child node with given id . id Required Type: string getLinkChains public getLinkChains ( reverse? : boolean ) : object [] Resolve all link chains. {@link EdgeChain} reverse Optional Type: boolean getNearestAncestor public getNearestAncestor ( node : Node ) : Node Gets the nearest common ancestor shared between this node and another node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node isAncestor public isAncestor ( ancestor : Node ) : boolean Indicates if a specific node is an ancestor of this node . ancestor Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node isChild public isChild ( node : Node ) : boolean Indicates if specific node is a child of this node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateCollapse public mutateCollapse () : void Collapses all sub-nodes of this node into this node . mutateCollapseTo public mutateCollapseTo ( ancestor : Node ) : Node Collapses this node into an ancestor . ancestor Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateCollapseToParent public mutateCollapseToParent () : Node Collapses this node into it's parent node . mutateHoist public mutateHoist ( newParent : Node ) : void Hoist this node to an ancestor by removing it from its current parent node and in turn moving it to the ancestor. newParent Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateMove public mutateMove ( newParent : Node ) : void Move this node into a new parent node. newParent Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node The parent to move this node to. mutateRemoveChild public mutateRemoveChild ( node : Node ) : boolean Remove a child node from this node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateRemoveLink public mutateRemoveLink ( link : Edge ) : boolean Remove a link from this node . link Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge mutateRemoveReverseLink public mutateRemoveReverseLink ( link : Edge ) : boolean Remove a link to this node . link Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge mutateUncluster public mutateUncluster () : void Hoist all children to parent and collapse node to parent. toString public toString () : string Get string representation of this node. mutateCfnResource public mutateCfnResource ( cfnResource? : CfnResourceNode ) : void Modifies the L1 resource wrapped by this L2 resource. cfnResource Optional Type: aws-prototyping-sdk/cdk-graph.Graph.CfnResourceNode Static Functions Name Description isResourceNode Indicates if node is a { @link ResourceNode}. isResourceNode import { Graph } from '@aws-prototyping-sdk/cdk-graph' Graph . ResourceNode . isResourceNode ( node : Node ) Indicates if node is a { @link ResourceNode}. node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node Properties Name Type Description attributes aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Get readonly record of all attributes. flags FlagEnum [] Get readonly list of all flags. isDestroyed boolean Indicates if the entity has been destroyed (eg: removed from store). isMutated boolean Indicates if the entity has had destructive mutations applied. metadata constructs.MetadataEntry[] Get readonly list of all metadata entries. store aws-prototyping-sdk/cdk-graph.Graph.Store Reference to the store. tags aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Get readonly record of all tags. uuid string Universally unique identifier. allowDestructiveMutations boolean Indicates if this node allows destructive mutations. children aws-prototyping-sdk/cdk-graph.Graph.Node [] Get all direct child nodes. dependedOnBy aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that depend on this node . dependencies aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that this node depends on . dependencyLinks aws-prototyping-sdk/cdk-graph.Graph.Dependency [] Gets list of { @link Dependency} links (edges) where this node is the source . depth number Indicates the depth of the node relative to root (0). id string Node id, which is only unique within parent scope. isAsset boolean Indicates if this node is considered a { @link FlagEnum.ASSET}. isCfnFqn boolean Indicates if node ConstructInfoFqn denotes a aws-cdk-lib.*.Cfn* construct. isCluster boolean Indicates if this node is considered a { @link FlagEnum.CLUSTER}. isCustomResource boolean Indicates if node is a Custom Resource . isExtraneous boolean Indicates if this node is considered a { @link FlagEnum.EXTRANEOUS} node or determined to be extraneous: - Clusters that contain no children. isGraphContainer boolean Indicates if this node is considered a { @link FlagEnum.GRAPH_CONTAINER}. isLeaf boolean Indicates if this node is a leaf node, which means it does not have children. isTopLevel boolean Indicates if node is direct child of the graph root node. links aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all links (edges) in which this node is the source . nodeType NodeTypeEnum Type of node. path string Path of the node. referencedBy aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that reference this node . referenceLinks aws-prototyping-sdk/cdk-graph.Graph.Reference [] Gets list of { @link Reference} links (edges) where this node is the source . references aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that this node references . reverseDependencyLinks aws-prototyping-sdk/cdk-graph.Graph.Dependency [] Gets list of { @link Dependency} links (edges) where this node is the target . reverseLinks aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all links (edges) in which this node is the target . reverseReferenceLinks aws-prototyping-sdk/cdk-graph.Graph.Reference [] Gets list of { @link Reference} links (edges) where this node is the target . scopes aws-prototyping-sdk/cdk-graph.Graph.Node [] Gets descending ordered list of ancestors from the root. siblings aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of siblings of this node. cfnProps aws-prototyping-sdk/cdk-graph.SerializedGraph.PlainObject Get the cfn properties from the L1 resource that this L2 resource wraps. cfnType string Get the CloudFormation resource type for this L2 resource or for the L1 resource is wraps. constructInfo ConstructInfo Synthesized construct information defining jii resolution data. constructInfoFqn string Synthesized construct information defining jii resolution data. logicalId string Logical id of the node, which is only unique within containing stack. parent aws-prototyping-sdk/cdk-graph.Graph.Node Parent node. rootStack aws-prototyping-sdk/cdk-graph.Graph.StackNode Get root stack. stack aws-prototyping-sdk/cdk-graph.Graph.StackNode Stack the node is contained in. isCdkOwned boolean Indicates if this resource is owned by cdk (defined in cdk library). isWrapper boolean Indicates if Resource wraps a single CfnResource. cfnResource aws-prototyping-sdk/cdk-graph.Graph.CfnResourceNode Get the default/primary CfnResource that this Resource wraps. attributes Required public readonly attributes : Attributes ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Get readonly record of all attributes. flags Required public readonly flags : FlagEnum []; Type: FlagEnum [] Get readonly list of all flags. isDestroyed Required public readonly isDestroyed : boolean ; Type: boolean Indicates if the entity has been destroyed (eg: removed from store). isMutated Required public readonly isMutated : boolean ; Type: boolean Indicates if the entity has had destructive mutations applied. metadata Required public readonly metadata : MetadataEntry []; Type: constructs.MetadataEntry[] Get readonly list of all metadata entries. store Required public readonly store : Store ; Type: aws-prototyping-sdk/cdk-graph.Graph.Store Reference to the store. tags Required public readonly tags : Tags ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Get readonly record of all tags. uuid Required public readonly uuid : string ; Type: string Universally unique identifier. allowDestructiveMutations Required public readonly allowDestructiveMutations : boolean ; Type: boolean Indicates if this node allows destructive mutations. {@link Store.allowDestructiveMutations} children Required public readonly children : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get all direct child nodes. dependedOnBy Required public readonly dependedOnBy : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that depend on this node . {@link Node.reverseDependencyLinks} dependencies Required public readonly dependencies : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that this node depends on . {@link Node.dependencyLinks} dependencyLinks Required public readonly dependencyLinks : Dependency []; Type: aws-prototyping-sdk/cdk-graph.Graph.Dependency [] Gets list of { @link Dependency} links (edges) where this node is the source . depth Required public readonly depth : number ; Type: number Indicates the depth of the node relative to root (0). id Required public readonly id : string ; Type: string Node id, which is only unique within parent scope. isAsset Required public readonly isAsset : boolean ; Type: boolean Indicates if this node is considered a { @link FlagEnum.ASSET}. isCfnFqn Required public readonly isCfnFqn : boolean ; Type: boolean Indicates if node ConstructInfoFqn denotes a aws-cdk-lib.*.Cfn* construct. {@link FlagEnum.CFN_FQN} isCluster Required public readonly isCluster : boolean ; Type: boolean Indicates if this node is considered a { @link FlagEnum.CLUSTER}. isCustomResource Required public readonly isCustomResource : boolean ; Type: boolean Indicates if node is a Custom Resource . isExtraneous Required public readonly isExtraneous : boolean ; Type: boolean Indicates if this node is considered a { @link FlagEnum.EXTRANEOUS} node or determined to be extraneous: - Clusters that contain no children. isGraphContainer Required public readonly isGraphContainer : boolean ; Type: boolean Indicates if this node is considered a { @link FlagEnum.GRAPH_CONTAINER}. isLeaf Required public readonly isLeaf : boolean ; Type: boolean Indicates if this node is a leaf node, which means it does not have children. isTopLevel Required public readonly isTopLevel : boolean ; Type: boolean Indicates if node is direct child of the graph root node. links Required public readonly links : Edge []; Type: aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all links (edges) in which this node is the source . nodeType Required public readonly nodeType : NodeTypeEnum ; Type: NodeTypeEnum Type of node. path Required public readonly path : string ; Type: string Path of the node. referencedBy Required public readonly referencedBy : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that reference this node . {@link Node.reverseReferenceLinks} referenceLinks Required public readonly referenceLinks : Reference []; Type: aws-prototyping-sdk/cdk-graph.Graph.Reference [] Gets list of { @link Reference} links (edges) where this node is the source . references Required public readonly references : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that this node references . {@link Node.referenceLinks} reverseDependencyLinks Required public readonly reverseDependencyLinks : Dependency []; Type: aws-prototyping-sdk/cdk-graph.Graph.Dependency [] Gets list of { @link Dependency} links (edges) where this node is the target . reverseLinks Required public readonly reverseLinks : Edge []; Type: aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all links (edges) in which this node is the target . reverseReferenceLinks Required public readonly reverseReferenceLinks : Reference []; Type: aws-prototyping-sdk/cdk-graph.Graph.Reference [] Gets list of { @link Reference} links (edges) where this node is the target . scopes Required public readonly scopes : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Gets descending ordered list of ancestors from the root. siblings Required public readonly siblings : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of siblings of this node. cfnProps Optional public readonly cfnProps : PlainObject ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.PlainObject Get the cfn properties from the L1 resource that this L2 resource wraps. cfnType Optional public readonly cfnType : string ; Type: string Get the CloudFormation resource type for this L2 resource or for the L1 resource is wraps. constructInfo Optional public readonly constructInfo : ConstructInfo ; Type: ConstructInfo Synthesized construct information defining jii resolution data. constructInfoFqn Optional public readonly constructInfoFqn : string ; Type: string Synthesized construct information defining jii resolution data. logicalId Optional public readonly logicalId : string ; Type: string Logical id of the node, which is only unique within containing stack. parent Optional public readonly parent : Node ; Type: aws-prototyping-sdk/cdk-graph.Graph.Node Parent node. Only the root node should not have parent. rootStack Optional public readonly rootStack : StackNode ; Type: aws-prototyping-sdk/cdk-graph.Graph.StackNode Get root stack. stack Optional public readonly stack : StackNode ; Type: aws-prototyping-sdk/cdk-graph.Graph.StackNode Stack the node is contained in. isCdkOwned Required public readonly isCdkOwned : boolean ; Type: boolean Indicates if this resource is owned by cdk (defined in cdk library). isWrapper Required public readonly isWrapper : boolean ; Type: boolean Indicates if Resource wraps a single CfnResource. cfnResource Optional public readonly cfnResource : CfnResourceNode ; Type: aws-prototyping-sdk/cdk-graph.Graph.CfnResourceNode Get the default/primary CfnResource that this Resource wraps. Constants Name Type Description ATT_WRAPPED_CFN_PROPS string Attribute key for cfn properties. ATT_WRAPPED_CFN_TYPE string Attribute key for cfn resource type. ATT_WRAPPED_CFN_PROPS Required public readonly ATT_WRAPPED_CFN_PROPS : string ; Type: string Attribute key for cfn properties. ATT_WRAPPED_CFN_TYPE Required public readonly ATT_WRAPPED_CFN_TYPE : string ; Type: string Attribute key for cfn resource type. RootNode RootNode represents the root of the store tree. Initializers import { Graph } from '@aws-prototyping-sdk/cdk-graph' new Graph . RootNode ( store : Store ) Name Type Description store aws-prototyping-sdk/cdk-graph.Graph.Store No description. store Required Type: aws-prototyping-sdk/cdk-graph.Graph.Store Methods Name Description addAttribute Add attribute. addFlag Add flag. addMetadata Add metadata entry. addTag Add tag. applyData Applies data (attributes, metadata, tags, flag) to entity. findMetadata Retrieves all metadata entries of a given type. getAttribute Get attribute by key. getTag Get tag by key. hasAttribute Indicates if entity has a given attribute defined, and optionally with a specific value. hasFlag Indicates if entity has a given flag. hasMetadata Indicates if entity has matching metadata entry. hasTag Indicates if entity has tag, optionally verifying tag value. mutateDestroy > { @link RootNode} does not support this mutation. setAttribute Set attribute. setTag Set tag. addChild Add child node. addLink Add link to another node. addReverseLink Add link from another node. doesDependOn Indicates if this node depends on another node . doesReference Indicates if this node references another node . find Recursively find the nearest sub-node matching predicate. findAll Return this construct and all of its sub-nodes in the given order. findAllLinks Return all direct links of this node and that of all sub-nodes. findAncestor Find nearest ancestor of this node matching given predicate. findChild Find child with given id . findLink Find link of this node based on predicate. findLinks Find all links of this node based on predicate. getCfnProp Get specific CloudFormation property. getChild Get child node with given id . getLinkChains Resolve all link chains. getNearestAncestor Gets the nearest common ancestor shared between this node and another node . isAncestor Indicates if a specific node is an ancestor of this node . isChild Indicates if specific node is a child of this node . mutateCollapse > { @link RootNode} does not support this mutation. mutateCollapseTo > { @link RootNode} does not support this mutation. mutateCollapseToParent > { @link RootNode} does not support this mutation. mutateHoist > { @link RootNode} does not support this mutation. mutateMove Move this node into a new parent node. mutateRemoveChild Remove a child node from this node . mutateRemoveLink Remove a link from this node . mutateRemoveReverseLink Remove a link to this node . mutateUncluster Hoist all children to parent and collapse node to parent. toString Get string representation of this node. addAttribute public addAttribute ( key : string , value : any ) : void Add attribute. key Required Type: string value Required Type: any addFlag public addFlag ( flag : FlagEnum ) : void Add flag. flag Required Type: FlagEnum addMetadata public addMetadata ( metadataType : string , data : any ) : void Add metadata entry. metadataType Required Type: string data Required Type: any addTag public addTag ( key : string , value : string ) : void Add tag. key Required Type: string value Required Type: string applyData public applyData ( data : IBaseEntityDataProps , overwrite? : boolean , applyFlags? : boolean ) : void Applies data (attributes, metadata, tags, flag) to entity. Generally used only for mutations such as collapse and consume to retain data. data Required Type: aws-prototyping-sdk/cdk-graph.Graph.IBaseEntityDataProps The data to apply. overwrite Optional Type: boolean applyFlags Optional Type: boolean Indicates if data is overwritten - Indicates if flags should be applied. findMetadata public findMetadata ( metadataType : string ) : MetadataEntry [] Retrieves all metadata entries of a given type. metadataType Required Type: string getAttribute public getAttribute ( key : string ) : any Get attribute by key. key Required Type: string getTag public getTag ( key : string ) : string Get tag by key. key Required Type: string hasAttribute public hasAttribute ( key : string , value? : any ) : boolean Indicates if entity has a given attribute defined, and optionally with a specific value. key Required Type: string value Optional Type: any hasFlag public hasFlag ( flag : FlagEnum ) : boolean Indicates if entity has a given flag. flag Required Type: FlagEnum hasMetadata public hasMetadata ( metadataType : string , data : any ) : boolean Indicates if entity has matching metadata entry. metadataType Required Type: string data Required Type: any hasTag public hasTag ( key : string , value? : string ) : boolean Indicates if entity has tag, optionally verifying tag value. key Required Type: string value Optional Type: string mutateDestroy public mutateDestroy ( _strict? : boolean ) : void { @link RootNode} does not support this mutation. _strict Optional Type: boolean setAttribute public setAttribute ( key : string , value : any ) : void Set attribute. This will overwrite existing attribute. key Required Type: string value Required Type: any setTag public setTag ( key : string , value : string ) : void Set tag. Will overwrite existing tag. key Required Type: string value Required Type: string addChild public addChild ( node : Node ) : void Add child node. node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node addLink public addLink ( edge : Edge ) : void Add link to another node. edge Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge addReverseLink public addReverseLink ( edge : Edge ) : void Add link from another node. edge Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge doesDependOn public doesDependOn ( node : Node ) : boolean Indicates if this node depends on another node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node doesReference public doesReference ( node : Node ) : boolean Indicates if this node references another node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node find public find ( predicate : INodePredicate ) : Node Recursively find the nearest sub-node matching predicate. predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.INodePredicate findAll public findAll ( options? : IFindNodeOptions ) : Node [] Return this construct and all of its sub-nodes in the given order. Optionally filter nodes based on predicate. options Optional Type: aws-prototyping-sdk/cdk-graph.Graph.IFindNodeOptions findAllLinks public findAllLinks ( options? : IFindEdgeOptions ) : Edge [] Return all direct links of this node and that of all sub-nodes. Optionally filter links based on predicate. options Optional Type: aws-prototyping-sdk/cdk-graph.Graph.IFindEdgeOptions findAncestor public findAncestor ( predicate : INodePredicate , max? : number ) : Node Find nearest ancestor of this node matching given predicate. predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.INodePredicate Predicate to match ancestor. max Optional Type: number findChild public findChild ( id : string ) : Node Find child with given id . Similar to find but does not throw error if no child found. id Required Type: string findLink public findLink ( predicate : IEdgePredicate , reverse? : boolean , follow? : boolean , direct? : boolean ) : Edge Find link of this node based on predicate. By default this will follow link chains to evaluate the predicate against and return the matching direct link of this node. predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.IEdgePredicate Edge predicate function to match edge. reverse Optional Type: boolean Indicates if links are search in reverse order. follow Optional Type: boolean Indicates if link chain is followed. direct Optional Type: boolean Indicates that only direct links should be searched. findLinks public findLinks ( predicate : IEdgePredicate , reverse? : boolean , follow? : boolean , direct? : boolean ) : Edge [] Find all links of this node based on predicate. By default this will follow link chains to evaluate the predicate against and return the matching direct links of this node. predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.IEdgePredicate Edge predicate function to match edge. reverse Optional Type: boolean Indicates if links are search in reverse order. follow Optional Type: boolean Indicates if link chain is followed. direct Optional Type: boolean Indicates that only direct links should be searched. getCfnProp public getCfnProp ( key : string ) : string | number | boolean | PlainObject | string | number | boolean | PlainObject [] Get specific CloudFormation property. key Required Type: string getChild public getChild ( id : string ) : Node Get child node with given id . id Required Type: string getLinkChains public getLinkChains ( reverse? : boolean ) : object [] Resolve all link chains. {@link EdgeChain} reverse Optional Type: boolean getNearestAncestor public getNearestAncestor ( node : Node ) : Node Gets the nearest common ancestor shared between this node and another node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node isAncestor public isAncestor ( ancestor : Node ) : boolean Indicates if a specific node is an ancestor of this node . ancestor Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node isChild public isChild ( node : Node ) : boolean Indicates if specific node is a child of this node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateCollapse public mutateCollapse () : void { @link RootNode} does not support this mutation. mutateCollapseTo public mutateCollapseTo ( _ancestor : Node ) : Node { @link RootNode} does not support this mutation. _ancestor Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateCollapseToParent public mutateCollapseToParent () : Node { @link RootNode} does not support this mutation. mutateHoist public mutateHoist ( _newParent : Node ) : void { @link RootNode} does not support this mutation. _newParent Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateMove public mutateMove ( newParent : Node ) : void Move this node into a new parent node. newParent Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node The parent to move this node to. mutateRemoveChild public mutateRemoveChild ( node : Node ) : boolean Remove a child node from this node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateRemoveLink public mutateRemoveLink ( link : Edge ) : boolean Remove a link from this node . link Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge mutateRemoveReverseLink public mutateRemoveReverseLink ( link : Edge ) : boolean Remove a link to this node . link Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge mutateUncluster public mutateUncluster () : void Hoist all children to parent and collapse node to parent. toString public toString () : string Get string representation of this node. Static Functions Name Description isRootNode Indicates if node is a { @link RootNode}. isRootNode import { Graph } from '@aws-prototyping-sdk/cdk-graph' Graph . RootNode . isRootNode ( node : Node ) Indicates if node is a { @link RootNode}. node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node Properties Name Type Description attributes aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Get readonly record of all attributes. flags FlagEnum [] Get readonly list of all flags. isDestroyed boolean Indicates if the entity has been destroyed (eg: removed from store). isMutated boolean Indicates if the entity has had destructive mutations applied. metadata constructs.MetadataEntry[] Get readonly list of all metadata entries. store aws-prototyping-sdk/cdk-graph.Graph.Store Reference to the store. tags aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Get readonly record of all tags. uuid string Universally unique identifier. allowDestructiveMutations boolean Indicates if this node allows destructive mutations. children aws-prototyping-sdk/cdk-graph.Graph.Node [] Get all direct child nodes. dependedOnBy aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that depend on this node . dependencies aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that this node depends on . dependencyLinks aws-prototyping-sdk/cdk-graph.Graph.Dependency [] Gets list of { @link Dependency} links (edges) where this node is the source . depth number Indicates the depth of the node relative to root (0). id string Node id, which is only unique within parent scope. isAsset boolean Indicates if this node is considered a { @link FlagEnum.ASSET}. isCfnFqn boolean Indicates if node ConstructInfoFqn denotes a aws-cdk-lib.*.Cfn* construct. isCluster boolean Indicates if this node is considered a { @link FlagEnum.CLUSTER}. isCustomResource boolean Indicates if node is a Custom Resource . isExtraneous boolean Indicates if this node is considered a { @link FlagEnum.EXTRANEOUS} node or determined to be extraneous: - Clusters that contain no children. isGraphContainer boolean Indicates if this node is considered a { @link FlagEnum.GRAPH_CONTAINER}. isLeaf boolean Indicates if this node is a leaf node, which means it does not have children. isTopLevel boolean Indicates if node is direct child of the graph root node. links aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all links (edges) in which this node is the source . nodeType NodeTypeEnum Type of node. path string Path of the node. referencedBy aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that reference this node . referenceLinks aws-prototyping-sdk/cdk-graph.Graph.Reference [] Gets list of { @link Reference} links (edges) where this node is the source . references aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that this node references . reverseDependencyLinks aws-prototyping-sdk/cdk-graph.Graph.Dependency [] Gets list of { @link Dependency} links (edges) where this node is the target . reverseLinks aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all links (edges) in which this node is the target . reverseReferenceLinks aws-prototyping-sdk/cdk-graph.Graph.Reference [] Gets list of { @link Reference} links (edges) where this node is the target . scopes aws-prototyping-sdk/cdk-graph.Graph.Node [] Gets descending ordered list of ancestors from the root. siblings aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of siblings of this node. cfnProps aws-prototyping-sdk/cdk-graph.SerializedGraph.PlainObject Gets CloudFormation properties for this node. cfnType string Get the CloudFormation resource type for this node. constructInfo ConstructInfo Synthesized construct information defining jii resolution data. constructInfoFqn string Synthesized construct information defining jii resolution data. logicalId string Logical id of the node, which is only unique within containing stack. parent aws-prototyping-sdk/cdk-graph.Graph.Node Parent node. rootStack aws-prototyping-sdk/cdk-graph.Graph.StackNode Get root stack. stack aws-prototyping-sdk/cdk-graph.Graph.StackNode Stack the node is contained in. attributes Required public readonly attributes : Attributes ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Get readonly record of all attributes. flags Required public readonly flags : FlagEnum []; Type: FlagEnum [] Get readonly list of all flags. isDestroyed Required public readonly isDestroyed : boolean ; Type: boolean Indicates if the entity has been destroyed (eg: removed from store). isMutated Required public readonly isMutated : boolean ; Type: boolean Indicates if the entity has had destructive mutations applied. metadata Required public readonly metadata : MetadataEntry []; Type: constructs.MetadataEntry[] Get readonly list of all metadata entries. store Required public readonly store : Store ; Type: aws-prototyping-sdk/cdk-graph.Graph.Store Reference to the store. tags Required public readonly tags : Tags ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Get readonly record of all tags. uuid Required public readonly uuid : string ; Type: string Universally unique identifier. allowDestructiveMutations Required public readonly allowDestructiveMutations : boolean ; Type: boolean Indicates if this node allows destructive mutations. {@link Store.allowDestructiveMutations} children Required public readonly children : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get all direct child nodes. dependedOnBy Required public readonly dependedOnBy : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that depend on this node . {@link Node.reverseDependencyLinks} dependencies Required public readonly dependencies : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that this node depends on . {@link Node.dependencyLinks} dependencyLinks Required public readonly dependencyLinks : Dependency []; Type: aws-prototyping-sdk/cdk-graph.Graph.Dependency [] Gets list of { @link Dependency} links (edges) where this node is the source . depth Required public readonly depth : number ; Type: number Indicates the depth of the node relative to root (0). id Required public readonly id : string ; Type: string Node id, which is only unique within parent scope. isAsset Required public readonly isAsset : boolean ; Type: boolean Indicates if this node is considered a { @link FlagEnum.ASSET}. isCfnFqn Required public readonly isCfnFqn : boolean ; Type: boolean Indicates if node ConstructInfoFqn denotes a aws-cdk-lib.*.Cfn* construct. {@link FlagEnum.CFN_FQN} isCluster Required public readonly isCluster : boolean ; Type: boolean Indicates if this node is considered a { @link FlagEnum.CLUSTER}. isCustomResource Required public readonly isCustomResource : boolean ; Type: boolean Indicates if node is a Custom Resource . isExtraneous Required public readonly isExtraneous : boolean ; Type: boolean Indicates if this node is considered a { @link FlagEnum.EXTRANEOUS} node or determined to be extraneous: - Clusters that contain no children. isGraphContainer Required public readonly isGraphContainer : boolean ; Type: boolean Indicates if this node is considered a { @link FlagEnum.GRAPH_CONTAINER}. isLeaf Required public readonly isLeaf : boolean ; Type: boolean Indicates if this node is a leaf node, which means it does not have children. isTopLevel Required public readonly isTopLevel : boolean ; Type: boolean Indicates if node is direct child of the graph root node. links Required public readonly links : Edge []; Type: aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all links (edges) in which this node is the source . nodeType Required public readonly nodeType : NodeTypeEnum ; Type: NodeTypeEnum Type of node. path Required public readonly path : string ; Type: string Path of the node. referencedBy Required public readonly referencedBy : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that reference this node . {@link Node.reverseReferenceLinks} referenceLinks Required public readonly referenceLinks : Reference []; Type: aws-prototyping-sdk/cdk-graph.Graph.Reference [] Gets list of { @link Reference} links (edges) where this node is the source . references Required public readonly references : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that this node references . {@link Node.referenceLinks} reverseDependencyLinks Required public readonly reverseDependencyLinks : Dependency []; Type: aws-prototyping-sdk/cdk-graph.Graph.Dependency [] Gets list of { @link Dependency} links (edges) where this node is the target . reverseLinks Required public readonly reverseLinks : Edge []; Type: aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all links (edges) in which this node is the target . reverseReferenceLinks Required public readonly reverseReferenceLinks : Reference []; Type: aws-prototyping-sdk/cdk-graph.Graph.Reference [] Gets list of { @link Reference} links (edges) where this node is the target . scopes Required public readonly scopes : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Gets descending ordered list of ancestors from the root. siblings Required public readonly siblings : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of siblings of this node. cfnProps Optional public readonly cfnProps : PlainObject ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.PlainObject Gets CloudFormation properties for this node. cfnType Optional public readonly cfnType : string ; Type: string Get the CloudFormation resource type for this node. constructInfo Optional public readonly constructInfo : ConstructInfo ; Type: ConstructInfo Synthesized construct information defining jii resolution data. constructInfoFqn Optional public readonly constructInfoFqn : string ; Type: string Synthesized construct information defining jii resolution data. logicalId Optional public readonly logicalId : string ; Type: string Logical id of the node, which is only unique within containing stack. parent Optional public readonly parent : Node ; Type: aws-prototyping-sdk/cdk-graph.Graph.Node Parent node. Only the root node should not have parent. rootStack Optional public readonly rootStack : StackNode ; Type: aws-prototyping-sdk/cdk-graph.Graph.StackNode Get root stack. stack Optional public readonly stack : StackNode ; Type: aws-prototyping-sdk/cdk-graph.Graph.StackNode Stack the node is contained in. Constants Name Type Description PATH string Fixed path of root. UUID string Fixed UUID of root. PATH Required public readonly PATH : string ; Type: string Fixed path of root. UUID Required public readonly UUID : string ; Type: string Fixed UUID of root. StackNode StackNode defines a cdk Stack. Initializers import { Graph } from '@aws-prototyping-sdk/cdk-graph' new Graph . StackNode ( props : IStackNodeProps ) Name Type Description props aws-prototyping-sdk/cdk-graph.Graph.IStackNodeProps No description. props Required Type: aws-prototyping-sdk/cdk-graph.Graph.IStackNodeProps Methods Name Description addAttribute Add attribute. addFlag Add flag. addMetadata Add metadata entry. addTag Add tag. applyData Applies data (attributes, metadata, tags, flag) to entity. findMetadata Retrieves all metadata entries of a given type. getAttribute Get attribute by key. getTag Get tag by key. hasAttribute Indicates if entity has a given attribute defined, and optionally with a specific value. hasFlag Indicates if entity has a given flag. hasMetadata Indicates if entity has matching metadata entry. hasTag Indicates if entity has tag, optionally verifying tag value. mutateDestroy Destroys this node by removing all references and removing this node from the store. setAttribute Set attribute. setTag Set tag. addChild Add child node. addLink Add link to another node. addReverseLink Add link from another node. doesDependOn Indicates if this node depends on another node . doesReference Indicates if this node references another node . find Recursively find the nearest sub-node matching predicate. findAll Return this construct and all of its sub-nodes in the given order. findAllLinks Return all direct links of this node and that of all sub-nodes. findAncestor Find nearest ancestor of this node matching given predicate. findChild Find child with given id . findLink Find link of this node based on predicate. findLinks Find all links of this node based on predicate. getCfnProp Get specific CloudFormation property. getChild Get child node with given id . getLinkChains Resolve all link chains. getNearestAncestor Gets the nearest common ancestor shared between this node and another node . isAncestor Indicates if a specific node is an ancestor of this node . isChild Indicates if specific node is a child of this node . mutateCollapse Collapses all sub-nodes of this node into this node . mutateCollapseTo Collapses this node into an ancestor . mutateCollapseToParent Collapses this node into it's parent node . mutateHoist Hoist this node to an ancestor by removing it from its current parent node and in turn moving it to the ancestor. mutateMove Move this node into a new parent node. mutateRemoveChild Remove a child node from this node . mutateRemoveLink Remove a link from this node . mutateRemoveReverseLink Remove a link to this node . mutateUncluster Hoist all children to parent and collapse node to parent. toString Get string representation of this node. addOutput Associate { @link OutputNode} with this stack. addParameter Associate { @link ParameterNode} with this stack. findOutput Find { @link OutputNode} with logicalId defined by this stack. findParameter Find { @link ParameterNode} with parameterId defined by this stack. mutateRemoveOutput Disassociate { @link OutputNode} from this stack. mutateRemoveParameter Disassociate { @link ParameterNode} from this stack. addAttribute public addAttribute ( key : string , value : any ) : void Add attribute. key Required Type: string value Required Type: any addFlag public addFlag ( flag : FlagEnum ) : void Add flag. flag Required Type: FlagEnum addMetadata public addMetadata ( metadataType : string , data : any ) : void Add metadata entry. metadataType Required Type: string data Required Type: any addTag public addTag ( key : string , value : string ) : void Add tag. key Required Type: string value Required Type: string applyData public applyData ( data : IBaseEntityDataProps , overwrite? : boolean , applyFlags? : boolean ) : void Applies data (attributes, metadata, tags, flag) to entity. Generally used only for mutations such as collapse and consume to retain data. data Required Type: aws-prototyping-sdk/cdk-graph.Graph.IBaseEntityDataProps The data to apply. overwrite Optional Type: boolean applyFlags Optional Type: boolean Indicates if data is overwritten - Indicates if flags should be applied. findMetadata public findMetadata ( metadataType : string ) : MetadataEntry [] Retrieves all metadata entries of a given type. metadataType Required Type: string getAttribute public getAttribute ( key : string ) : any Get attribute by key. key Required Type: string getTag public getTag ( key : string ) : string Get tag by key. key Required Type: string hasAttribute public hasAttribute ( key : string , value? : any ) : boolean Indicates if entity has a given attribute defined, and optionally with a specific value. key Required Type: string value Optional Type: any hasFlag public hasFlag ( flag : FlagEnum ) : boolean Indicates if entity has a given flag. flag Required Type: FlagEnum hasMetadata public hasMetadata ( metadataType : string , data : any ) : boolean Indicates if entity has matching metadata entry. metadataType Required Type: string data Required Type: any hasTag public hasTag ( key : string , value? : string ) : boolean Indicates if entity has tag, optionally verifying tag value. key Required Type: string value Optional Type: string mutateDestroy public mutateDestroy ( strict? : boolean ) : void Destroys this node by removing all references and removing this node from the store. strict Optional Type: boolean setAttribute public setAttribute ( key : string , value : any ) : void Set attribute. This will overwrite existing attribute. key Required Type: string value Required Type: any setTag public setTag ( key : string , value : string ) : void Set tag. Will overwrite existing tag. key Required Type: string value Required Type: string addChild public addChild ( node : Node ) : void Add child node. node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node addLink public addLink ( edge : Edge ) : void Add link to another node. edge Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge addReverseLink public addReverseLink ( edge : Edge ) : void Add link from another node. edge Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge doesDependOn public doesDependOn ( node : Node ) : boolean Indicates if this node depends on another node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node doesReference public doesReference ( node : Node ) : boolean Indicates if this node references another node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node find public find ( predicate : INodePredicate ) : Node Recursively find the nearest sub-node matching predicate. predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.INodePredicate findAll public findAll ( options? : IFindNodeOptions ) : Node [] Return this construct and all of its sub-nodes in the given order. Optionally filter nodes based on predicate. options Optional Type: aws-prototyping-sdk/cdk-graph.Graph.IFindNodeOptions findAllLinks public findAllLinks ( options? : IFindEdgeOptions ) : Edge [] Return all direct links of this node and that of all sub-nodes. Optionally filter links based on predicate. options Optional Type: aws-prototyping-sdk/cdk-graph.Graph.IFindEdgeOptions findAncestor public findAncestor ( predicate : INodePredicate , max? : number ) : Node Find nearest ancestor of this node matching given predicate. predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.INodePredicate Predicate to match ancestor. max Optional Type: number findChild public findChild ( id : string ) : Node Find child with given id . Similar to find but does not throw error if no child found. id Required Type: string findLink public findLink ( predicate : IEdgePredicate , reverse? : boolean , follow? : boolean , direct? : boolean ) : Edge Find link of this node based on predicate. By default this will follow link chains to evaluate the predicate against and return the matching direct link of this node. predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.IEdgePredicate Edge predicate function to match edge. reverse Optional Type: boolean Indicates if links are search in reverse order. follow Optional Type: boolean Indicates if link chain is followed. direct Optional Type: boolean Indicates that only direct links should be searched. findLinks public findLinks ( predicate : IEdgePredicate , reverse? : boolean , follow? : boolean , direct? : boolean ) : Edge [] Find all links of this node based on predicate. By default this will follow link chains to evaluate the predicate against and return the matching direct links of this node. predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.IEdgePredicate Edge predicate function to match edge. reverse Optional Type: boolean Indicates if links are search in reverse order. follow Optional Type: boolean Indicates if link chain is followed. direct Optional Type: boolean Indicates that only direct links should be searched. getCfnProp public getCfnProp ( key : string ) : string | number | boolean | PlainObject | string | number | boolean | PlainObject [] Get specific CloudFormation property. key Required Type: string getChild public getChild ( id : string ) : Node Get child node with given id . id Required Type: string getLinkChains public getLinkChains ( reverse? : boolean ) : object [] Resolve all link chains. {@link EdgeChain} reverse Optional Type: boolean getNearestAncestor public getNearestAncestor ( node : Node ) : Node Gets the nearest common ancestor shared between this node and another node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node isAncestor public isAncestor ( ancestor : Node ) : boolean Indicates if a specific node is an ancestor of this node . ancestor Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node isChild public isChild ( node : Node ) : boolean Indicates if specific node is a child of this node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateCollapse public mutateCollapse () : void Collapses all sub-nodes of this node into this node . mutateCollapseTo public mutateCollapseTo ( ancestor : Node ) : Node Collapses this node into an ancestor . ancestor Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateCollapseToParent public mutateCollapseToParent () : Node Collapses this node into it's parent node . mutateHoist public mutateHoist ( newParent : Node ) : void Hoist this node to an ancestor by removing it from its current parent node and in turn moving it to the ancestor. newParent Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateMove public mutateMove ( newParent : Node ) : void Move this node into a new parent node. newParent Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node The parent to move this node to. mutateRemoveChild public mutateRemoveChild ( node : Node ) : boolean Remove a child node from this node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateRemoveLink public mutateRemoveLink ( link : Edge ) : boolean Remove a link from this node . link Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge mutateRemoveReverseLink public mutateRemoveReverseLink ( link : Edge ) : boolean Remove a link to this node . link Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge mutateUncluster public mutateUncluster () : void Hoist all children to parent and collapse node to parent. toString public toString () : string Get string representation of this node. addOutput public addOutput ( node : OutputNode ) : void Associate { @link OutputNode} with this stack. node Required Type: aws-prototyping-sdk/cdk-graph.Graph.OutputNode addParameter public addParameter ( node : ParameterNode ) : void Associate { @link ParameterNode} with this stack. node Required Type: aws-prototyping-sdk/cdk-graph.Graph.ParameterNode findOutput public findOutput ( logicalId : string ) : OutputNode Find { @link OutputNode} with logicalId defined by this stack. logicalId Required Type: string findParameter public findParameter ( parameterId : string ) : ParameterNode Find { @link ParameterNode} with parameterId defined by this stack. parameterId Required Type: string mutateRemoveOutput public mutateRemoveOutput ( node : OutputNode ) : boolean Disassociate { @link OutputNode} from this stack. node Required Type: aws-prototyping-sdk/cdk-graph.Graph.OutputNode mutateRemoveParameter public mutateRemoveParameter ( node : ParameterNode ) : boolean Disassociate { @link ParameterNode} from this stack. node Required Type: aws-prototyping-sdk/cdk-graph.Graph.ParameterNode Static Functions Name Description isStackNode Indicates if node is a { @link StackNode}. of Gets the { @link StackNode} containing a given resource. isStackNode import { Graph } from '@aws-prototyping-sdk/cdk-graph' Graph . StackNode . isStackNode ( node : Node ) Indicates if node is a { @link StackNode}. node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node of import { Graph } from '@aws-prototyping-sdk/cdk-graph' Graph . StackNode . of ( node : Node ) Gets the { @link StackNode} containing a given resource. node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node Properties Name Type Description attributes aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Get readonly record of all attributes. flags FlagEnum [] Get readonly list of all flags. isDestroyed boolean Indicates if the entity has been destroyed (eg: removed from store). isMutated boolean Indicates if the entity has had destructive mutations applied. metadata constructs.MetadataEntry[] Get readonly list of all metadata entries. store aws-prototyping-sdk/cdk-graph.Graph.Store Reference to the store. tags aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Get readonly record of all tags. uuid string Universally unique identifier. allowDestructiveMutations boolean Indicates if this node allows destructive mutations. children aws-prototyping-sdk/cdk-graph.Graph.Node [] Get all direct child nodes. dependedOnBy aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that depend on this node . dependencies aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that this node depends on . dependencyLinks aws-prototyping-sdk/cdk-graph.Graph.Dependency [] Gets list of { @link Dependency} links (edges) where this node is the source . depth number Indicates the depth of the node relative to root (0). id string Node id, which is only unique within parent scope. isAsset boolean Indicates if this node is considered a { @link FlagEnum.ASSET}. isCfnFqn boolean Indicates if node ConstructInfoFqn denotes a aws-cdk-lib.*.Cfn* construct. isCluster boolean Indicates if this node is considered a { @link FlagEnum.CLUSTER}. isCustomResource boolean Indicates if node is a Custom Resource . isExtraneous boolean Indicates if this node is considered a { @link FlagEnum.EXTRANEOUS} node or determined to be extraneous: - Clusters that contain no children. isGraphContainer boolean Indicates if this node is considered a { @link FlagEnum.GRAPH_CONTAINER}. isLeaf boolean Indicates if this node is a leaf node, which means it does not have children. isTopLevel boolean Indicates if node is direct child of the graph root node. links aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all links (edges) in which this node is the source . nodeType NodeTypeEnum Type of node. path string Path of the node. referencedBy aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that reference this node . referenceLinks aws-prototyping-sdk/cdk-graph.Graph.Reference [] Gets list of { @link Reference} links (edges) where this node is the source . references aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that this node references . reverseDependencyLinks aws-prototyping-sdk/cdk-graph.Graph.Dependency [] Gets list of { @link Dependency} links (edges) where this node is the target . reverseLinks aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all links (edges) in which this node is the target . reverseReferenceLinks aws-prototyping-sdk/cdk-graph.Graph.Reference [] Gets list of { @link Reference} links (edges) where this node is the target . scopes aws-prototyping-sdk/cdk-graph.Graph.Node [] Gets descending ordered list of ancestors from the root. siblings aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of siblings of this node. cfnProps aws-prototyping-sdk/cdk-graph.SerializedGraph.PlainObject Gets CloudFormation properties for this node. cfnType string Get the CloudFormation resource type for this node. constructInfo ConstructInfo Synthesized construct information defining jii resolution data. constructInfoFqn string Synthesized construct information defining jii resolution data. logicalId string Logical id of the node, which is only unique within containing stack. parent aws-prototyping-sdk/cdk-graph.Graph.Node Parent node. rootStack aws-prototyping-sdk/cdk-graph.Graph.StackNode Get root stack. stack aws-prototyping-sdk/cdk-graph.Graph.StackNode Stack the node is contained in. exports aws-prototyping-sdk/cdk-graph.Graph.OutputNode [] Get all exported { @link OutputNode}s defined by this stack. outputs aws-prototyping-sdk/cdk-graph.Graph.OutputNode [] Get all { @link OutputNode}s defined by this stack. parameters aws-prototyping-sdk/cdk-graph.Graph.ParameterNode [] Get all { @link ParameterNode}s defined by this stack. stage aws-prototyping-sdk/cdk-graph.Graph.StageNode Get { @link StageNode} containing this stack. attributes Required public readonly attributes : Attributes ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Get readonly record of all attributes. flags Required public readonly flags : FlagEnum []; Type: FlagEnum [] Get readonly list of all flags. isDestroyed Required public readonly isDestroyed : boolean ; Type: boolean Indicates if the entity has been destroyed (eg: removed from store). isMutated Required public readonly isMutated : boolean ; Type: boolean Indicates if the entity has had destructive mutations applied. metadata Required public readonly metadata : MetadataEntry []; Type: constructs.MetadataEntry[] Get readonly list of all metadata entries. store Required public readonly store : Store ; Type: aws-prototyping-sdk/cdk-graph.Graph.Store Reference to the store. tags Required public readonly tags : Tags ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Get readonly record of all tags. uuid Required public readonly uuid : string ; Type: string Universally unique identifier. allowDestructiveMutations Required public readonly allowDestructiveMutations : boolean ; Type: boolean Indicates if this node allows destructive mutations. {@link Store.allowDestructiveMutations} children Required public readonly children : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get all direct child nodes. dependedOnBy Required public readonly dependedOnBy : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that depend on this node . {@link Node.reverseDependencyLinks} dependencies Required public readonly dependencies : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that this node depends on . {@link Node.dependencyLinks} dependencyLinks Required public readonly dependencyLinks : Dependency []; Type: aws-prototyping-sdk/cdk-graph.Graph.Dependency [] Gets list of { @link Dependency} links (edges) where this node is the source . depth Required public readonly depth : number ; Type: number Indicates the depth of the node relative to root (0). id Required public readonly id : string ; Type: string Node id, which is only unique within parent scope. isAsset Required public readonly isAsset : boolean ; Type: boolean Indicates if this node is considered a { @link FlagEnum.ASSET}. isCfnFqn Required public readonly isCfnFqn : boolean ; Type: boolean Indicates if node ConstructInfoFqn denotes a aws-cdk-lib.*.Cfn* construct. {@link FlagEnum.CFN_FQN} isCluster Required public readonly isCluster : boolean ; Type: boolean Indicates if this node is considered a { @link FlagEnum.CLUSTER}. isCustomResource Required public readonly isCustomResource : boolean ; Type: boolean Indicates if node is a Custom Resource . isExtraneous Required public readonly isExtraneous : boolean ; Type: boolean Indicates if this node is considered a { @link FlagEnum.EXTRANEOUS} node or determined to be extraneous: - Clusters that contain no children. isGraphContainer Required public readonly isGraphContainer : boolean ; Type: boolean Indicates if this node is considered a { @link FlagEnum.GRAPH_CONTAINER}. isLeaf Required public readonly isLeaf : boolean ; Type: boolean Indicates if this node is a leaf node, which means it does not have children. isTopLevel Required public readonly isTopLevel : boolean ; Type: boolean Indicates if node is direct child of the graph root node. links Required public readonly links : Edge []; Type: aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all links (edges) in which this node is the source . nodeType Required public readonly nodeType : NodeTypeEnum ; Type: NodeTypeEnum Type of node. path Required public readonly path : string ; Type: string Path of the node. referencedBy Required public readonly referencedBy : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that reference this node . {@link Node.reverseReferenceLinks} referenceLinks Required public readonly referenceLinks : Reference []; Type: aws-prototyping-sdk/cdk-graph.Graph.Reference [] Gets list of { @link Reference} links (edges) where this node is the source . references Required public readonly references : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that this node references . {@link Node.referenceLinks} reverseDependencyLinks Required public readonly reverseDependencyLinks : Dependency []; Type: aws-prototyping-sdk/cdk-graph.Graph.Dependency [] Gets list of { @link Dependency} links (edges) where this node is the target . reverseLinks Required public readonly reverseLinks : Edge []; Type: aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all links (edges) in which this node is the target . reverseReferenceLinks Required public readonly reverseReferenceLinks : Reference []; Type: aws-prototyping-sdk/cdk-graph.Graph.Reference [] Gets list of { @link Reference} links (edges) where this node is the target . scopes Required public readonly scopes : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Gets descending ordered list of ancestors from the root. siblings Required public readonly siblings : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of siblings of this node. cfnProps Optional public readonly cfnProps : PlainObject ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.PlainObject Gets CloudFormation properties for this node. cfnType Optional public readonly cfnType : string ; Type: string Get the CloudFormation resource type for this node. constructInfo Optional public readonly constructInfo : ConstructInfo ; Type: ConstructInfo Synthesized construct information defining jii resolution data. constructInfoFqn Optional public readonly constructInfoFqn : string ; Type: string Synthesized construct information defining jii resolution data. logicalId Optional public readonly logicalId : string ; Type: string Logical id of the node, which is only unique within containing stack. parent Optional public readonly parent : Node ; Type: aws-prototyping-sdk/cdk-graph.Graph.Node Parent node. Only the root node should not have parent. rootStack Optional public readonly rootStack : StackNode ; Type: aws-prototyping-sdk/cdk-graph.Graph.StackNode Get root stack. stack Optional public readonly stack : StackNode ; Type: aws-prototyping-sdk/cdk-graph.Graph.StackNode Stack the node is contained in. exports Required public readonly exports : OutputNode []; Type: aws-prototyping-sdk/cdk-graph.Graph.OutputNode [] Get all exported { @link OutputNode}s defined by this stack. outputs Required public readonly outputs : OutputNode []; Type: aws-prototyping-sdk/cdk-graph.Graph.OutputNode [] Get all { @link OutputNode}s defined by this stack. parameters Required public readonly parameters : ParameterNode []; Type: aws-prototyping-sdk/cdk-graph.Graph.ParameterNode [] Get all { @link ParameterNode}s defined by this stack. stage Optional public readonly stage : StageNode ; Type: aws-prototyping-sdk/cdk-graph.Graph.StageNode Get { @link StageNode} containing this stack. StageNode StageNode defines a cdk Stage. Initializers import { Graph } from '@aws-prototyping-sdk/cdk-graph' new Graph . StageNode ( props : ITypedNodeProps ) Name Type Description props aws-prototyping-sdk/cdk-graph.Graph.ITypedNodeProps No description. props Required Type: aws-prototyping-sdk/cdk-graph.Graph.ITypedNodeProps Methods Name Description addAttribute Add attribute. addFlag Add flag. addMetadata Add metadata entry. addTag Add tag. applyData Applies data (attributes, metadata, tags, flag) to entity. findMetadata Retrieves all metadata entries of a given type. getAttribute Get attribute by key. getTag Get tag by key. hasAttribute Indicates if entity has a given attribute defined, and optionally with a specific value. hasFlag Indicates if entity has a given flag. hasMetadata Indicates if entity has matching metadata entry. hasTag Indicates if entity has tag, optionally verifying tag value. mutateDestroy Destroys this node by removing all references and removing this node from the store. setAttribute Set attribute. setTag Set tag. addChild Add child node. addLink Add link to another node. addReverseLink Add link from another node. doesDependOn Indicates if this node depends on another node . doesReference Indicates if this node references another node . find Recursively find the nearest sub-node matching predicate. findAll Return this construct and all of its sub-nodes in the given order. findAllLinks Return all direct links of this node and that of all sub-nodes. findAncestor Find nearest ancestor of this node matching given predicate. findChild Find child with given id . findLink Find link of this node based on predicate. findLinks Find all links of this node based on predicate. getCfnProp Get specific CloudFormation property. getChild Get child node with given id . getLinkChains Resolve all link chains. getNearestAncestor Gets the nearest common ancestor shared between this node and another node . isAncestor Indicates if a specific node is an ancestor of this node . isChild Indicates if specific node is a child of this node . mutateCollapse Collapses all sub-nodes of this node into this node . mutateCollapseTo Collapses this node into an ancestor . mutateCollapseToParent Collapses this node into it's parent node . mutateHoist Hoist this node to an ancestor by removing it from its current parent node and in turn moving it to the ancestor. mutateMove Move this node into a new parent node. mutateRemoveChild Remove a child node from this node . mutateRemoveLink Remove a link from this node . mutateRemoveReverseLink Remove a link to this node . mutateUncluster Hoist all children to parent and collapse node to parent. toString Get string representation of this node. addStack Associate a { @link StackNode} with this stage. mutateRemoveStack Disassociate { @link StackNode} from this stage. addAttribute public addAttribute ( key : string , value : any ) : void Add attribute. key Required Type: string value Required Type: any addFlag public addFlag ( flag : FlagEnum ) : void Add flag. flag Required Type: FlagEnum addMetadata public addMetadata ( metadataType : string , data : any ) : void Add metadata entry. metadataType Required Type: string data Required Type: any addTag public addTag ( key : string , value : string ) : void Add tag. key Required Type: string value Required Type: string applyData public applyData ( data : IBaseEntityDataProps , overwrite? : boolean , applyFlags? : boolean ) : void Applies data (attributes, metadata, tags, flag) to entity. Generally used only for mutations such as collapse and consume to retain data. data Required Type: aws-prototyping-sdk/cdk-graph.Graph.IBaseEntityDataProps The data to apply. overwrite Optional Type: boolean applyFlags Optional Type: boolean Indicates if data is overwritten - Indicates if flags should be applied. findMetadata public findMetadata ( metadataType : string ) : MetadataEntry [] Retrieves all metadata entries of a given type. metadataType Required Type: string getAttribute public getAttribute ( key : string ) : any Get attribute by key. key Required Type: string getTag public getTag ( key : string ) : string Get tag by key. key Required Type: string hasAttribute public hasAttribute ( key : string , value? : any ) : boolean Indicates if entity has a given attribute defined, and optionally with a specific value. key Required Type: string value Optional Type: any hasFlag public hasFlag ( flag : FlagEnum ) : boolean Indicates if entity has a given flag. flag Required Type: FlagEnum hasMetadata public hasMetadata ( metadataType : string , data : any ) : boolean Indicates if entity has matching metadata entry. metadataType Required Type: string data Required Type: any hasTag public hasTag ( key : string , value? : string ) : boolean Indicates if entity has tag, optionally verifying tag value. key Required Type: string value Optional Type: string mutateDestroy public mutateDestroy ( strict? : boolean ) : void Destroys this node by removing all references and removing this node from the store. strict Optional Type: boolean Indicates that this node must not have references. setAttribute public setAttribute ( key : string , value : any ) : void Set attribute. This will overwrite existing attribute. key Required Type: string value Required Type: any setTag public setTag ( key : string , value : string ) : void Set tag. Will overwrite existing tag. key Required Type: string value Required Type: string addChild public addChild ( node : Node ) : void Add child node. node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node addLink public addLink ( edge : Edge ) : void Add link to another node. edge Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge addReverseLink public addReverseLink ( edge : Edge ) : void Add link from another node. edge Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge doesDependOn public doesDependOn ( node : Node ) : boolean Indicates if this node depends on another node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node doesReference public doesReference ( node : Node ) : boolean Indicates if this node references another node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node find public find ( predicate : INodePredicate ) : Node Recursively find the nearest sub-node matching predicate. predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.INodePredicate findAll public findAll ( options? : IFindNodeOptions ) : Node [] Return this construct and all of its sub-nodes in the given order. Optionally filter nodes based on predicate. options Optional Type: aws-prototyping-sdk/cdk-graph.Graph.IFindNodeOptions findAllLinks public findAllLinks ( options? : IFindEdgeOptions ) : Edge [] Return all direct links of this node and that of all sub-nodes. Optionally filter links based on predicate. options Optional Type: aws-prototyping-sdk/cdk-graph.Graph.IFindEdgeOptions findAncestor public findAncestor ( predicate : INodePredicate , max? : number ) : Node Find nearest ancestor of this node matching given predicate. predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.INodePredicate Predicate to match ancestor. max Optional Type: number findChild public findChild ( id : string ) : Node Find child with given id . Similar to find but does not throw error if no child found. id Required Type: string findLink public findLink ( predicate : IEdgePredicate , reverse? : boolean , follow? : boolean , direct? : boolean ) : Edge Find link of this node based on predicate. By default this will follow link chains to evaluate the predicate against and return the matching direct link of this node. predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.IEdgePredicate Edge predicate function to match edge. reverse Optional Type: boolean Indicates if links are search in reverse order. follow Optional Type: boolean Indicates if link chain is followed. direct Optional Type: boolean Indicates that only direct links should be searched. findLinks public findLinks ( predicate : IEdgePredicate , reverse? : boolean , follow? : boolean , direct? : boolean ) : Edge [] Find all links of this node based on predicate. By default this will follow link chains to evaluate the predicate against and return the matching direct links of this node. predicate Required Type: aws-prototyping-sdk/cdk-graph.Graph.IEdgePredicate Edge predicate function to match edge. reverse Optional Type: boolean Indicates if links are search in reverse order. follow Optional Type: boolean Indicates if link chain is followed. direct Optional Type: boolean Indicates that only direct links should be searched. getCfnProp public getCfnProp ( key : string ) : string | number | boolean | PlainObject | string | number | boolean | PlainObject [] Get specific CloudFormation property. key Required Type: string getChild public getChild ( id : string ) : Node Get child node with given id . id Required Type: string getLinkChains public getLinkChains ( reverse? : boolean ) : object [] Resolve all link chains. {@link EdgeChain} reverse Optional Type: boolean getNearestAncestor public getNearestAncestor ( node : Node ) : Node Gets the nearest common ancestor shared between this node and another node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node isAncestor public isAncestor ( ancestor : Node ) : boolean Indicates if a specific node is an ancestor of this node . ancestor Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node isChild public isChild ( node : Node ) : boolean Indicates if specific node is a child of this node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateCollapse public mutateCollapse () : void Collapses all sub-nodes of this node into this node . mutateCollapseTo public mutateCollapseTo ( ancestor : Node ) : Node Collapses this node into an ancestor . ancestor Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateCollapseToParent public mutateCollapseToParent () : Node Collapses this node into it's parent node . mutateHoist public mutateHoist ( newParent : Node ) : void Hoist this node to an ancestor by removing it from its current parent node and in turn moving it to the ancestor. newParent Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateMove public mutateMove ( newParent : Node ) : void Move this node into a new parent node. newParent Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node The parent to move this node to. mutateRemoveChild public mutateRemoveChild ( node : Node ) : boolean Remove a child node from this node . node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node mutateRemoveLink public mutateRemoveLink ( link : Edge ) : boolean Remove a link from this node . link Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge mutateRemoveReverseLink public mutateRemoveReverseLink ( link : Edge ) : boolean Remove a link to this node . link Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge mutateUncluster public mutateUncluster () : void Hoist all children to parent and collapse node to parent. toString public toString () : string Get string representation of this node. addStack public addStack ( stack : StackNode ) : void Associate a { @link StackNode} with this stage. stack Required Type: aws-prototyping-sdk/cdk-graph.Graph.StackNode mutateRemoveStack public mutateRemoveStack ( stack : StackNode ) : boolean Disassociate { @link StackNode} from this stage. stack Required Type: aws-prototyping-sdk/cdk-graph.Graph.StackNode Static Functions Name Description isStageNode Indicates if node is a { @link StageNode}. of Gets the { @link StageNode} containing a given resource. isStageNode import { Graph } from '@aws-prototyping-sdk/cdk-graph' Graph . StageNode . isStageNode ( node : Node ) Indicates if node is a { @link StageNode}. node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node of import { Graph } from '@aws-prototyping-sdk/cdk-graph' Graph . StageNode . of ( node : Node ) Gets the { @link StageNode} containing a given resource. node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node Properties Name Type Description attributes aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Get readonly record of all attributes. flags FlagEnum [] Get readonly list of all flags. isDestroyed boolean Indicates if the entity has been destroyed (eg: removed from store). isMutated boolean Indicates if the entity has had destructive mutations applied. metadata constructs.MetadataEntry[] Get readonly list of all metadata entries. store aws-prototyping-sdk/cdk-graph.Graph.Store Reference to the store. tags aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Get readonly record of all tags. uuid string Universally unique identifier. allowDestructiveMutations boolean Indicates if this node allows destructive mutations. children aws-prototyping-sdk/cdk-graph.Graph.Node [] Get all direct child nodes. dependedOnBy aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that depend on this node . dependencies aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that this node depends on . dependencyLinks aws-prototyping-sdk/cdk-graph.Graph.Dependency [] Gets list of { @link Dependency} links (edges) where this node is the source . depth number Indicates the depth of the node relative to root (0). id string Node id, which is only unique within parent scope. isAsset boolean Indicates if this node is considered a { @link FlagEnum.ASSET}. isCfnFqn boolean Indicates if node ConstructInfoFqn denotes a aws-cdk-lib.*.Cfn* construct. isCluster boolean Indicates if this node is considered a { @link FlagEnum.CLUSTER}. isCustomResource boolean Indicates if node is a Custom Resource . isExtraneous boolean Indicates if this node is considered a { @link FlagEnum.EXTRANEOUS} node or determined to be extraneous: - Clusters that contain no children. isGraphContainer boolean Indicates if this node is considered a { @link FlagEnum.GRAPH_CONTAINER}. isLeaf boolean Indicates if this node is a leaf node, which means it does not have children. isTopLevel boolean Indicates if node is direct child of the graph root node. links aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all links (edges) in which this node is the source . nodeType NodeTypeEnum Type of node. path string Path of the node. referencedBy aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that reference this node . referenceLinks aws-prototyping-sdk/cdk-graph.Graph.Reference [] Gets list of { @link Reference} links (edges) where this node is the source . references aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that this node references . reverseDependencyLinks aws-prototyping-sdk/cdk-graph.Graph.Dependency [] Gets list of { @link Dependency} links (edges) where this node is the target . reverseLinks aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all links (edges) in which this node is the target . reverseReferenceLinks aws-prototyping-sdk/cdk-graph.Graph.Reference [] Gets list of { @link Reference} links (edges) where this node is the target . scopes aws-prototyping-sdk/cdk-graph.Graph.Node [] Gets descending ordered list of ancestors from the root. siblings aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of siblings of this node. cfnProps aws-prototyping-sdk/cdk-graph.SerializedGraph.PlainObject Gets CloudFormation properties for this node. cfnType string Get the CloudFormation resource type for this node. constructInfo ConstructInfo Synthesized construct information defining jii resolution data. constructInfoFqn string Synthesized construct information defining jii resolution data. logicalId string Logical id of the node, which is only unique within containing stack. parent aws-prototyping-sdk/cdk-graph.Graph.Node Parent node. rootStack aws-prototyping-sdk/cdk-graph.Graph.StackNode Get root stack. stack aws-prototyping-sdk/cdk-graph.Graph.StackNode Stack the node is contained in. stacks aws-prototyping-sdk/cdk-graph.Graph.StackNode [] Gets all stacks contained by this stage. attributes Required public readonly attributes : Attributes ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Get readonly record of all attributes. flags Required public readonly flags : FlagEnum []; Type: FlagEnum [] Get readonly list of all flags. isDestroyed Required public readonly isDestroyed : boolean ; Type: boolean Indicates if the entity has been destroyed (eg: removed from store). isMutated Required public readonly isMutated : boolean ; Type: boolean Indicates if the entity has had destructive mutations applied. metadata Required public readonly metadata : MetadataEntry []; Type: constructs.MetadataEntry[] Get readonly list of all metadata entries. store Required public readonly store : Store ; Type: aws-prototyping-sdk/cdk-graph.Graph.Store Reference to the store. tags Required public readonly tags : Tags ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Get readonly record of all tags. uuid Required public readonly uuid : string ; Type: string Universally unique identifier. allowDestructiveMutations Required public readonly allowDestructiveMutations : boolean ; Type: boolean Indicates if this node allows destructive mutations. {@link Store.allowDestructiveMutations} children Required public readonly children : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get all direct child nodes. dependedOnBy Required public readonly dependedOnBy : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that depend on this node . {@link Node.reverseDependencyLinks} dependencies Required public readonly dependencies : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that this node depends on . {@link Node.dependencyLinks} dependencyLinks Required public readonly dependencyLinks : Dependency []; Type: aws-prototyping-sdk/cdk-graph.Graph.Dependency [] Gets list of { @link Dependency} links (edges) where this node is the source . depth Required public readonly depth : number ; Type: number Indicates the depth of the node relative to root (0). id Required public readonly id : string ; Type: string Node id, which is only unique within parent scope. isAsset Required public readonly isAsset : boolean ; Type: boolean Indicates if this node is considered a { @link FlagEnum.ASSET}. isCfnFqn Required public readonly isCfnFqn : boolean ; Type: boolean Indicates if node ConstructInfoFqn denotes a aws-cdk-lib.*.Cfn* construct. {@link FlagEnum.CFN_FQN} isCluster Required public readonly isCluster : boolean ; Type: boolean Indicates if this node is considered a { @link FlagEnum.CLUSTER}. isCustomResource Required public readonly isCustomResource : boolean ; Type: boolean Indicates if node is a Custom Resource . isExtraneous Required public readonly isExtraneous : boolean ; Type: boolean Indicates if this node is considered a { @link FlagEnum.EXTRANEOUS} node or determined to be extraneous: - Clusters that contain no children. isGraphContainer Required public readonly isGraphContainer : boolean ; Type: boolean Indicates if this node is considered a { @link FlagEnum.GRAPH_CONTAINER}. isLeaf Required public readonly isLeaf : boolean ; Type: boolean Indicates if this node is a leaf node, which means it does not have children. isTopLevel Required public readonly isTopLevel : boolean ; Type: boolean Indicates if node is direct child of the graph root node. links Required public readonly links : Edge []; Type: aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all links (edges) in which this node is the source . nodeType Required public readonly nodeType : NodeTypeEnum ; Type: NodeTypeEnum Type of node. path Required public readonly path : string ; Type: string Path of the node. referencedBy Required public readonly referencedBy : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that reference this node . {@link Node.reverseReferenceLinks} referenceLinks Required public readonly referenceLinks : Reference []; Type: aws-prototyping-sdk/cdk-graph.Graph.Reference [] Gets list of { @link Reference} links (edges) where this node is the source . references Required public readonly references : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of Nodes that this node references . {@link Node.referenceLinks} reverseDependencyLinks Required public readonly reverseDependencyLinks : Dependency []; Type: aws-prototyping-sdk/cdk-graph.Graph.Dependency [] Gets list of { @link Dependency} links (edges) where this node is the target . reverseLinks Required public readonly reverseLinks : Edge []; Type: aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all links (edges) in which this node is the target . reverseReferenceLinks Required public readonly reverseReferenceLinks : Reference []; Type: aws-prototyping-sdk/cdk-graph.Graph.Reference [] Gets list of { @link Reference} links (edges) where this node is the target . scopes Required public readonly scopes : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Gets descending ordered list of ancestors from the root. siblings Required public readonly siblings : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Get list of siblings of this node. cfnProps Optional public readonly cfnProps : PlainObject ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.PlainObject Gets CloudFormation properties for this node. cfnType Optional public readonly cfnType : string ; Type: string Get the CloudFormation resource type for this node. constructInfo Optional public readonly constructInfo : ConstructInfo ; Type: ConstructInfo Synthesized construct information defining jii resolution data. constructInfoFqn Optional public readonly constructInfoFqn : string ; Type: string Synthesized construct information defining jii resolution data. logicalId Optional public readonly logicalId : string ; Type: string Logical id of the node, which is only unique within containing stack. parent Optional public readonly parent : Node ; Type: aws-prototyping-sdk/cdk-graph.Graph.Node Parent node. Only the root node should not have parent. rootStack Optional public readonly rootStack : StackNode ; Type: aws-prototyping-sdk/cdk-graph.Graph.StackNode Get root stack. stack Optional public readonly stack : StackNode ; Type: aws-prototyping-sdk/cdk-graph.Graph.StackNode Stack the node is contained in. stacks Required public readonly stacks : StackNode []; Type: aws-prototyping-sdk/cdk-graph.Graph.StackNode [] Gets all stacks contained by this stage. Store Implements: aws-prototyping-sdk/cdk-graph.SerializedGraph.ISerializableGraphStore Store class provides the in-memory database-like interface for managing all entities in the graph. Initializers import { Graph } from '@aws-prototyping-sdk/cdk-graph' new Graph . Store ( allowDestructiveMutations? : boolean ) Name Type Description allowDestructiveMutations boolean No description. allowDestructiveMutations Optional Type: boolean Methods Name Description addEdge Add edge to the store. addNode Add node to the store. addStack Add stack node to the store. addStage Add stage to the store. clone Clone the store to allow destructive mutations. computeLogicalUniversalId Compute universal logicalId based on parent stack and construct logicalId ( <stack>:<logicalId> ). findNodeByImportArn Attempts to lookup the { @link Node} associated with a given import arn token . findNodeByLogicalId Find node within given stack with given logicalId . findNodeByLogicalUniversalId Find node by universal logicalId ( <stack>:<logicalId> ). getEdge Get stored edge by UUID. getNode Get stored node by UUID. getStack Get stored stack node by UUID. getStage Get stored stage node by UUID. mutateRemoveEdge Remove edge from the store. mutateRemoveNode Remove node from the store. recordImportArn Records arn tokens from imported resources (eg: s3.Bucket.fromBucketArn() ) that are used for resolving references. recordLogicalId Record a universal logicalId to node mapping in the store. serialize Serialize the store. verifyDestructiveMutationAllowed Verifies that the store allows destructive mutations. addEdge public addEdge ( edge : Edge ) : void Add edge to the store. edge Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge addNode public addNode ( node : Node ) : void Add node to the store. node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node addStack public addStack ( stack : StackNode ) : void Add stack node to the store. stack Required Type: aws-prototyping-sdk/cdk-graph.Graph.StackNode addStage public addStage ( stage : StageNode ) : void Add stage to the store. stage Required Type: aws-prototyping-sdk/cdk-graph.Graph.StageNode clone public clone ( allowDestructiveMutations? : boolean ) : Store Clone the store to allow destructive mutations. allowDestructiveMutations Optional Type: boolean Indicates if destructive mutations are allowed; defaults to true computeLogicalUniversalId public computeLogicalUniversalId ( stack : StackNode , logicalId : string ) : string Compute universal logicalId based on parent stack and construct logicalId ( <stack>:<logicalId> ). Construct logicalIds are only unique within their containing stack, so to use logicalId* lookups universally (like resolving references) we need a universal key. stack Required Type: aws-prototyping-sdk/cdk-graph.Graph.StackNode logicalId Required Type: string findNodeByImportArn public findNodeByImportArn ( value : any ) : Node Attempts to lookup the { @link Node} associated with a given import arn token . value Required Type: any Import arn value, which is either object to tokenize or already tokenized string. findNodeByLogicalId public findNodeByLogicalId ( stack : StackNode , logicalId : string ) : Node Find node within given stack with given logicalId . stack Required Type: aws-prototyping-sdk/cdk-graph.Graph.StackNode logicalId Required Type: string findNodeByLogicalUniversalId public findNodeByLogicalUniversalId ( uid : string ) : Node Find node by universal logicalId ( <stack>:<logicalId> ). uid Required Type: string getEdge public getEdge ( uuid : string ) : Edge Get stored edge by UUID. uuid Required Type: string getNode public getNode ( uuid : string ) : Node Get stored node by UUID. uuid Required Type: string getStack public getStack ( uuid : string ) : StackNode Get stored stack node by UUID. uuid Required Type: string getStage public getStage ( uuid : string ) : StageNode Get stored stage node by UUID. uuid Required Type: string mutateRemoveEdge public mutateRemoveEdge ( edge : Edge ) : boolean Remove edge from the store. edge Required Type: aws-prototyping-sdk/cdk-graph.Graph.Edge mutateRemoveNode public mutateRemoveNode ( node : Node ) : boolean Remove node from the store. node Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node recordImportArn public recordImportArn ( arnToken : string , resource : Node ) : void Records arn tokens from imported resources (eg: s3.Bucket.fromBucketArn() ) that are used for resolving references. arnToken Required Type: string resource Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node recordLogicalId public recordLogicalId ( stack : StackNode , logicalId : string , resource : Node ) : void Record a universal logicalId to node mapping in the store. stack Required Type: aws-prototyping-sdk/cdk-graph.Graph.StackNode logicalId Required Type: string resource Required Type: aws-prototyping-sdk/cdk-graph.Graph.Node serialize public serialize () : GraphStore Serialize the store. verifyDestructiveMutationAllowed public verifyDestructiveMutationAllowed () : void Verifies that the store allows destructive mutations. Static Functions Name Description fromSerializedStore Builds store from serialized store data. fromSerializedStore import { Graph } from '@aws-prototyping-sdk/cdk-graph' Graph . Store . fromSerializedStore ( serializedStore : GraphStore ) Builds store from serialized store data. serializedStore Required Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.GraphStore Properties Name Type Description allowDestructiveMutations boolean Indicates if the store allows destructive mutations. counts aws-prototyping-sdk/cdk-graph.Graph.IStoreCounts Get record of all store counters. edges aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all stored edges . nodes aws-prototyping-sdk/cdk-graph.Graph.Node [] Gets all stored nodes . root aws-prototyping-sdk/cdk-graph.Graph.RootNode Root node in the store. rootStacks aws-prototyping-sdk/cdk-graph.Graph.StackNode [] Gets all stored root stack nodes. stacks aws-prototyping-sdk/cdk-graph.Graph.StackNode [] Gets all stored stack nodes. stages aws-prototyping-sdk/cdk-graph.Graph.StageNode [] Gets all stored stage nodes. version string Current SemVer version of the store. allowDestructiveMutations Required public readonly allowDestructiveMutations : boolean ; Type: boolean Indicates if the store allows destructive mutations. Destructive mutations are only allowed on clones of the store to prevent plugins and filters from mutating the store for downstream plugins. All mutate* methods are only allowed on stores that allow destructive mutations. This behavior may change in the future if the need arises for plugins to pass mutated stores to downstream plugins. But it will be done cautiously with ensuring the intent of downstream plugin is to receive the mutated store. counts Required public readonly counts : IStoreCounts ; Type: aws-prototyping-sdk/cdk-graph.Graph.IStoreCounts Get record of all store counters. edges Required public readonly edges : Edge []; Type: aws-prototyping-sdk/cdk-graph.Graph.Edge [] Gets all stored edges . nodes Required public readonly nodes : Node []; Type: aws-prototyping-sdk/cdk-graph.Graph.Node [] Gets all stored nodes . root Required public readonly root : RootNode ; Type: aws-prototyping-sdk/cdk-graph.Graph.RootNode Root node in the store. The root node is not the computed root, but the graph root which is auto-generated and can not be mutated. rootStacks Required public readonly rootStacks : StackNode []; Type: aws-prototyping-sdk/cdk-graph.Graph.StackNode [] Gets all stored root stack nodes. stacks Required public readonly stacks : StackNode []; Type: aws-prototyping-sdk/cdk-graph.Graph.StackNode [] Gets all stored stack nodes. stages Required public readonly stages : StageNode []; Type: aws-prototyping-sdk/cdk-graph.Graph.StageNode [] Gets all stored stage nodes. version Required public readonly version : string ; Type: string Current SemVer version of the store. Protocols IAppNodeProps Extends: aws-prototyping-sdk/cdk-graph.Graph.IBaseEntityDataProps Implemented By: aws-prototyping-sdk/cdk-graph.Graph.IAppNodeProps { @link AppNode} props. Properties Name Type Description attributes aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Attributes. flags FlagEnum [] Flags. metadata constructs.MetadataEntry[] Metadata entries. tags aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Tags. store aws-prototyping-sdk/cdk-graph.Graph.Store Store. cfnType string Type of CloudFormation resource. constructInfo ConstructInfo Synthesized construct information defining jii resolution data. logicalId string Logical id of the node, which is only unique within containing stack. parent aws-prototyping-sdk/cdk-graph.Graph.Node Parent node. attributes Optional public readonly attributes : Attributes ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Attributes. flags Optional public readonly flags : FlagEnum []; Type: FlagEnum [] Flags. metadata Optional public readonly metadata : MetadataEntry []; Type: constructs.MetadataEntry[] Metadata entries. tags Optional public readonly tags : Tags ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Tags. store Required public readonly store : Store ; Type: aws-prototyping-sdk/cdk-graph.Graph.Store Store. cfnType Optional public readonly cfnType : string ; Type: string Type of CloudFormation resource. constructInfo Optional public readonly constructInfo : ConstructInfo ; Type: ConstructInfo Synthesized construct information defining jii resolution data. logicalId Optional public readonly logicalId : string ; Type: string Logical id of the node, which is only unique within containing stack. parent Optional public readonly parent : Node ; Type: aws-prototyping-sdk/cdk-graph.Graph.Node Parent node. IAttributeReferenceProps Extends: aws-prototyping-sdk/cdk-graph.Graph.ITypedEdgeProps Implemented By: aws-prototyping-sdk/cdk-graph.Graph.IAttributeReferenceProps Attribute type reference props. Properties Name Type Description attributes aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Attributes. flags FlagEnum [] Flags. metadata constructs.MetadataEntry[] Metadata entries. tags aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Tags. store aws-prototyping-sdk/cdk-graph.Graph.Store Store. uuid string UUID. source aws-prototyping-sdk/cdk-graph.Graph.Node Edge source is the node that defines the edge (tail). target aws-prototyping-sdk/cdk-graph.Graph.Node Edge target is the node being referenced by the source (head). value string | number | boolean | aws-prototyping-sdk/cdk-graph.SerializedGraph.PlainObject | string | number | boolean | aws-prototyping-sdk/cdk-graph.SerializedGraph.PlainObject [] Resolved attribute value. attributes Optional public readonly attributes : Attributes ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Attributes. flags Optional public readonly flags : FlagEnum []; Type: FlagEnum [] Flags. metadata Optional public readonly metadata : MetadataEntry []; Type: constructs.MetadataEntry[] Metadata entries. tags Optional public readonly tags : Tags ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Tags. store Required public readonly store : Store ; Type: aws-prototyping-sdk/cdk-graph.Graph.Store Store. uuid Required public readonly uuid : string ; Type: string UUID. source Required public readonly source : Node ; Type: aws-prototyping-sdk/cdk-graph.Graph.Node Edge source is the node that defines the edge (tail). target Required public readonly target : Node ; Type: aws-prototyping-sdk/cdk-graph.Graph.Node Edge target is the node being referenced by the source (head). value Required public readonly value : string | number | boolean | PlainObject | string | number | boolean | PlainObject []; Type: string | number | boolean | aws-prototyping-sdk/cdk-graph.SerializedGraph.PlainObject | string | number | boolean | aws-prototyping-sdk/cdk-graph.SerializedGraph.PlainObject [] Resolved attribute value. IBaseEntityDataProps Implemented By: aws-prototyping-sdk/cdk-graph.Graph.IAppNodeProps , aws-prototyping-sdk/cdk-graph.Graph.IAttributeReferenceProps , aws-prototyping-sdk/cdk-graph.Graph.IBaseEntityDataProps , aws-prototyping-sdk/cdk-graph.Graph.IBaseEntityProps , aws-prototyping-sdk/cdk-graph.Graph.ICfnResourceNodeProps , aws-prototyping-sdk/cdk-graph.Graph.IEdgeProps , aws-prototyping-sdk/cdk-graph.Graph.INestedStackNodeProps , aws-prototyping-sdk/cdk-graph.Graph.INodeProps , aws-prototyping-sdk/cdk-graph.Graph.IOutputNodeProps , aws-prototyping-sdk/cdk-graph.Graph.IParameterNodeProps , aws-prototyping-sdk/cdk-graph.Graph.IReferenceProps , aws-prototyping-sdk/cdk-graph.Graph.IResourceNodeProps , aws-prototyping-sdk/cdk-graph.Graph.IStackNodeProps , aws-prototyping-sdk/cdk-graph.Graph.ITypedEdgeProps , aws-prototyping-sdk/cdk-graph.Graph.ITypedNodeProps Base interface for all store entities data props. Properties Name Type Description attributes aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Attributes. flags FlagEnum [] Flags. metadata constructs.MetadataEntry[] Metadata entries. tags aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Tags. attributes Optional public readonly attributes : Attributes ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Attributes. flags Optional public readonly flags : FlagEnum []; Type: FlagEnum [] Flags. metadata Optional public readonly metadata : MetadataEntry []; Type: constructs.MetadataEntry[] Metadata entries. tags Optional public readonly tags : Tags ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Tags. IBaseEntityProps Extends: aws-prototyping-sdk/cdk-graph.Graph.IBaseEntityDataProps Implemented By: aws-prototyping-sdk/cdk-graph.Graph.IAttributeReferenceProps , aws-prototyping-sdk/cdk-graph.Graph.IBaseEntityProps , aws-prototyping-sdk/cdk-graph.Graph.ICfnResourceNodeProps , aws-prototyping-sdk/cdk-graph.Graph.IEdgeProps , aws-prototyping-sdk/cdk-graph.Graph.INestedStackNodeProps , aws-prototyping-sdk/cdk-graph.Graph.INodeProps , aws-prototyping-sdk/cdk-graph.Graph.IOutputNodeProps , aws-prototyping-sdk/cdk-graph.Graph.IParameterNodeProps , aws-prototyping-sdk/cdk-graph.Graph.IReferenceProps , aws-prototyping-sdk/cdk-graph.Graph.IResourceNodeProps , aws-prototyping-sdk/cdk-graph.Graph.IStackNodeProps , aws-prototyping-sdk/cdk-graph.Graph.ITypedEdgeProps , aws-prototyping-sdk/cdk-graph.Graph.ITypedNodeProps Base interface for all store entities props. Properties Name Type Description attributes aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Attributes. flags FlagEnum [] Flags. metadata constructs.MetadataEntry[] Metadata entries. tags aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Tags. store aws-prototyping-sdk/cdk-graph.Graph.Store Store. uuid string UUID. attributes Optional public readonly attributes : Attributes ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Attributes. flags Optional public readonly flags : FlagEnum []; Type: FlagEnum [] Flags. metadata Optional public readonly metadata : MetadataEntry []; Type: constructs.MetadataEntry[] Metadata entries. tags Optional public readonly tags : Tags ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Tags. store Required public readonly store : Store ; Type: aws-prototyping-sdk/cdk-graph.Graph.Store Store. uuid Required public readonly uuid : string ; Type: string UUID. ICdkGraphPlugin Implemented By: aws-prototyping-sdk/cdk-graph-plugin-diagram.CdkGraphDiagramPlugin , ICdkGraphPlugin CdkGraph Plugin interface. Properties Name Type Description id string Unique identifier for this plugin. version string Plugin version. dependencies string[] List of plugins this plugin depends on, including optional semver version (eg: [\"foo\", \"bar@1.2\"]). bind IGraphPluginBindCallback Binds the plugin to the CdkGraph instance. inspect IGraphVisitorCallback Node visitor callback for construct tree traversal. report IGraphReportCallback Generate asynchronous reports based on the graph. synthesize IGraphSynthesizeCallback Called during CDK synthesize to generate synchronous artifacts based on the in-memory graph passed to the plugin. id Required public readonly id : string ; Type: string Unique identifier for this plugin. version Required public readonly version : string ; Type: string Plugin version. dependencies Optional public readonly dependencies : string []; Type: string[] List of plugins this plugin depends on, including optional semver version (eg: [\"foo\", \"bar@1.2\"]). bind Required public readonly bind : IGraphPluginBindCallback ; Type: IGraphPluginBindCallback Binds the plugin to the CdkGraph instance. Enables plugins to receive base configs. inspect Optional public readonly inspect : IGraphVisitorCallback ; Type: IGraphVisitorCallback Node visitor callback for construct tree traversal. This follows IAspect.visit pattern, but the order of visitor traversal in managed by the CdkGraph. report Optional public readonly report : IGraphReportCallback ; Type: IGraphReportCallback Generate asynchronous reports based on the graph. This is not automatically called when synthesizing CDK. Developer must explicitly add await graphInstance.report() to the CDK bin or invoke this outside of the CDK synth. In either case, the plugin receives the in-memory graph interface when invoked, as the CdkGraph will deserialize the graph prior to invoking the plugin report. synthesize Optional public readonly synthesize : IGraphSynthesizeCallback ; Type: IGraphSynthesizeCallback Called during CDK synthesize to generate synchronous artifacts based on the in-memory graph passed to the plugin. This is called in fifo order of plugins. ICdkGraphProps Implemented By: ICdkGraphProps { @link CdkGraph} props. Properties Name Type Description plugins ICdkGraphPlugin [] List of plugins to extends the graph. plugins Optional public readonly plugins : ICdkGraphPlugin []; Type: ICdkGraphPlugin [] List of plugins to extends the graph. Plugins are invoked at each phases in fifo order. ICfnResourceNodeProps Extends: aws-prototyping-sdk/cdk-graph.Graph.ITypedNodeProps Implemented By: aws-prototyping-sdk/cdk-graph.Graph.ICfnResourceNodeProps CfnResourceNode props. Properties Name Type Description attributes aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Attributes. flags FlagEnum [] Flags. metadata constructs.MetadataEntry[] Metadata entries. tags aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Tags. store aws-prototyping-sdk/cdk-graph.Graph.Store Store. uuid string UUID. id string Node id, which is unique within parent scope. path string Path of the node. cfnType string Type of CloudFormation resource. constructInfo ConstructInfo Synthesized construct information defining jii resolution data. logicalId string Logical id of the node, which is only unique within containing stack. parent aws-prototyping-sdk/cdk-graph.Graph.Node Parent node. stack aws-prototyping-sdk/cdk-graph.Graph.StackNode Stack the node is contained. importArnToken string No description. nodeType NodeTypeEnum No description. attributes Optional public readonly attributes : Attributes ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Attributes. flags Optional public readonly flags : FlagEnum []; Type: FlagEnum [] Flags. metadata Optional public readonly metadata : MetadataEntry []; Type: constructs.MetadataEntry[] Metadata entries. tags Optional public readonly tags : Tags ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Tags. store Required public readonly store : Store ; Type: aws-prototyping-sdk/cdk-graph.Graph.Store Store. uuid Required public readonly uuid : string ; Type: string UUID. id Required public readonly id : string ; Type: string Node id, which is unique within parent scope. path Required public readonly path : string ; Type: string Path of the node. cfnType Optional public readonly cfnType : string ; Type: string Type of CloudFormation resource. constructInfo Optional public readonly constructInfo : ConstructInfo ; Type: ConstructInfo Synthesized construct information defining jii resolution data. logicalId Optional public readonly logicalId : string ; Type: string Logical id of the node, which is only unique within containing stack. parent Optional public readonly parent : Node ; Type: aws-prototyping-sdk/cdk-graph.Graph.Node Parent node. stack Optional public readonly stack : StackNode ; Type: aws-prototyping-sdk/cdk-graph.Graph.StackNode Stack the node is contained. importArnToken Optional public readonly importArnToken : string ; Type: string nodeType Optional public readonly nodeType : NodeTypeEnum ; Type: NodeTypeEnum ICounterRecord Implemented By: ICounterRecord ICounterRecord is record of keyed counts from { @link Counters}. The record is a mapping of key => count values. IEdgePredicate Implemented By: aws-prototyping-sdk/cdk-graph.Graph.IEdgePredicate Predicate to match edge. IEdgeProps Extends: aws-prototyping-sdk/cdk-graph.Graph.ITypedEdgeProps Implemented By: aws-prototyping-sdk/cdk-graph.Graph.IEdgeProps Edge props interface. Properties Name Type Description attributes aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Attributes. flags FlagEnum [] Flags. metadata constructs.MetadataEntry[] Metadata entries. tags aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Tags. store aws-prototyping-sdk/cdk-graph.Graph.Store Store. uuid string UUID. source aws-prototyping-sdk/cdk-graph.Graph.Node Edge source is the node that defines the edge (tail). target aws-prototyping-sdk/cdk-graph.Graph.Node Edge target is the node being referenced by the source (head). direction EdgeDirectionEnum Indicates the direction in which the edge is directed. edgeType EdgeTypeEnum Type of edge. attributes Optional public readonly attributes : Attributes ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Attributes. flags Optional public readonly flags : FlagEnum []; Type: FlagEnum [] Flags. metadata Optional public readonly metadata : MetadataEntry []; Type: constructs.MetadataEntry[] Metadata entries. tags Optional public readonly tags : Tags ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Tags. store Required public readonly store : Store ; Type: aws-prototyping-sdk/cdk-graph.Graph.Store Store. uuid Required public readonly uuid : string ; Type: string UUID. source Required public readonly source : Node ; Type: aws-prototyping-sdk/cdk-graph.Graph.Node Edge source is the node that defines the edge (tail). target Required public readonly target : Node ; Type: aws-prototyping-sdk/cdk-graph.Graph.Node Edge target is the node being referenced by the source (head). direction Required public readonly direction : EdgeDirectionEnum ; Type: EdgeDirectionEnum Indicates the direction in which the edge is directed. edgeType Required public readonly edgeType : EdgeTypeEnum ; Type: EdgeTypeEnum Type of edge. IFilterFocusCallback Implemented By: IFilterFocusCallback Determines focus node of filter plan. IFindEdgeOptions Implemented By: aws-prototyping-sdk/cdk-graph.Graph.IFindEdgeOptions Options for edge based search operations. Properties Name Type Description order constructs.ConstructOrder The order of traversal during search path. predicate aws-prototyping-sdk/cdk-graph.Graph.IEdgePredicate The predicate to match edges(s). reverse boolean Indicates reverse order. order Optional public readonly order : ConstructOrder ; Type: constructs.ConstructOrder The order of traversal during search path. predicate Optional public readonly predicate : IEdgePredicate ; Type: aws-prototyping-sdk/cdk-graph.Graph.IEdgePredicate The predicate to match edges(s). reverse Optional public readonly reverse : boolean ; Type: boolean Indicates reverse order. IFindNodeOptions Implemented By: aws-prototyping-sdk/cdk-graph.Graph.IFindNodeOptions Options for node based search operations. Properties Name Type Description order constructs.ConstructOrder The order of traversal during search path. predicate aws-prototyping-sdk/cdk-graph.Graph.INodePredicate The predicate to match node(s). order Optional public readonly order : ConstructOrder ; Type: constructs.ConstructOrder The order of traversal during search path. predicate Optional public readonly predicate : INodePredicate ; Type: aws-prototyping-sdk/cdk-graph.Graph.INodePredicate The predicate to match node(s). IGraphFilter Implemented By: IGraphFilter Graph filter. Properties Name Type Description allNodes boolean Indicates that all nodes will be filtered, rather than just Resource and CfnResource nodes. edge aws-prototyping-sdk/cdk-graph.Graph.IEdgePredicate Predicate to match edges. inverse boolean Indicates that matches will be filtered, as opposed to non-matches. node aws-prototyping-sdk/cdk-graph.Graph.INodePredicate Predicate to match nodes. strategy FilterStrategy Filter strategy to apply to matching nodes. allNodes Optional public readonly allNodes : boolean ; Type: boolean Indicates that all nodes will be filtered, rather than just Resource and CfnResource nodes. By enabling this, all Stages, Stacks, and structural construct boundaries will be filtered as well. In general, most users intent is to operate against resources and desire to preserve structural groupings, which is common in most Cfn/Cdk based filtering where inputs are \"include\" lists. Defaults to value of containing { @link IGraphFilterPlan.allNodes} edge Optional public readonly edge : IEdgePredicate ; Type: aws-prototyping-sdk/cdk-graph.Graph.IEdgePredicate Predicate to match edges. Edges are evaluated after nodes are filtered. inverse Optional public readonly inverse : boolean ; Type: boolean Default: false - Preserve matches, and filter out non-matches. Indicates that matches will be filtered, as opposed to non-matches. The default follows common Javascript Array.filter precedence of preserving matches during filtering, while pruning non-matches. node Optional public readonly node : INodePredicate ; Type: aws-prototyping-sdk/cdk-graph.Graph.INodePredicate Predicate to match nodes. strategy Optional public readonly strategy : FilterStrategy ; Type: FilterStrategy Default: {FilterStrategy.PRUNE} Filter strategy to apply to matching nodes. Edges do not have a strategy, they are always pruned. IGraphFilterPlan Implemented By: IGraphFilterPlan Graph filter plan. Properties Name Type Description allNodes boolean Indicates that all nodes will be filtered, rather than just Resource and CfnResource nodes. filters IGraphFilter | IGraphStoreFilter [] Ordered list of { @link IGraphFilter} and { @link IGraphStoreFilter} filters to apply to the store. focus aws-prototyping-sdk/cdk-graph.Graph.Node | IFilterFocusCallback | IGraphFilterPlanFocusConfig Config to focus the graph on specific node. order constructs.ConstructOrder The order to visit nodes and edges during filtering. preset FilterPreset Optional preset filter to apply before other filters. allNodes Optional public readonly allNodes : boolean ; Type: boolean Default: false By default only Resource and CfnResource nodes are filtered. Indicates that all nodes will be filtered, rather than just Resource and CfnResource nodes. By enabling this, all Stages, Stacks, and structural construct boundaries will be filtered as well. In general, most users intent is to operate against resources and desire to preserve structural groupings, which is common in most Cfn/Cdk based filtering where inputs are \"include\" lists. filters Optional public readonly filters : IGraphFilter | IGraphStoreFilter []; Type: IGraphFilter | IGraphStoreFilter [] Ordered list of { @link IGraphFilter} and { @link IGraphStoreFilter} filters to apply to the store. Filters are applied after the preset filtering is applied if present. - Filters are applied sequentially against all nodes, as opposed to IAspect.visitor pattern which are sequentially applied per node. focus Optional public readonly focus : Node | IFilterFocusCallback | IGraphFilterPlanFocusConfig ; Type: aws-prototyping-sdk/cdk-graph.Graph.Node | IFilterFocusCallback | IGraphFilterPlanFocusConfig Config to focus the graph on specific node. order Optional public readonly order : ConstructOrder ; Type: constructs.ConstructOrder Default: {ConstructOrder.PREORDER} The order to visit nodes and edges during filtering. preset Optional public readonly preset : FilterPreset ; Type: FilterPreset Optional preset filter to apply before other filters. IGraphFilterPlanFocusConfig Implemented By: IGraphFilterPlanFocusConfig Properties Name Type Description node aws-prototyping-sdk/cdk-graph.Graph.Node | IFilterFocusCallback The node or resolver to determine the node to focus on. noHoist boolean Indicates if ancestral containers are preserved (eg: Stages, Stack). node Required public readonly node : Node | IFilterFocusCallback ; Type: aws-prototyping-sdk/cdk-graph.Graph.Node | IFilterFocusCallback The node or resolver to determine the node to focus on. noHoist Optional public readonly noHoist : boolean ; Type: boolean Default: true Indicates if ancestral containers are preserved (eg: Stages, Stack). If false , the \"focused node\" will be hoisted to the graph root and all ancestors will be pruned. If true , the \"focused\" will be left in-place, while all siblings and non-scope ancestors will be pruned. IGraphPluginBindCallback Implemented By: IGraphPluginBindCallback Callback signature for graph Plugin.bind operation. IGraphReportCallback Implemented By: IGraphReportCallback Callback signature for graph Plugin.report operation. IGraphStoreFilter Implemented By: IGraphStoreFilter Store filter callback interface used to perform filtering operations directly against the store, as opposed to using { @link IGraphFilter} definitions. IGraphSynthesizeCallback Implemented By: IGraphSynthesizeCallback Callback signature for graph Plugin.synthesize operation. IGraphVisitorCallback Implemented By: IGraphVisitorCallback Callback signature for graph Plugin.inspect operation. INestedStackNodeProps Extends: aws-prototyping-sdk/cdk-graph.Graph.IStackNodeProps Implemented By: aws-prototyping-sdk/cdk-graph.Graph.INestedStackNodeProps { @link NestedStackNode} props. Properties Name Type Description attributes aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Attributes. flags FlagEnum [] Flags. metadata constructs.MetadataEntry[] Metadata entries. tags aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Tags. store aws-prototyping-sdk/cdk-graph.Graph.Store Store. uuid string UUID. id string Node id, which is unique within parent scope. path string Path of the node. cfnType string Type of CloudFormation resource. constructInfo ConstructInfo Synthesized construct information defining jii resolution data. logicalId string Logical id of the node, which is only unique within containing stack. parent aws-prototyping-sdk/cdk-graph.Graph.Node Parent node. stack aws-prototyping-sdk/cdk-graph.Graph.StackNode Stack the node is contained. nodeType NodeTypeEnum Type of node. parentStack aws-prototyping-sdk/cdk-graph.Graph.StackNode Parent stack. attributes Optional public readonly attributes : Attributes ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Attributes. flags Optional public readonly flags : FlagEnum []; Type: FlagEnum [] Flags. metadata Optional public readonly metadata : MetadataEntry []; Type: constructs.MetadataEntry[] Metadata entries. tags Optional public readonly tags : Tags ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Tags. store Required public readonly store : Store ; Type: aws-prototyping-sdk/cdk-graph.Graph.Store Store. uuid Required public readonly uuid : string ; Type: string UUID. id Required public readonly id : string ; Type: string Node id, which is unique within parent scope. path Required public readonly path : string ; Type: string Path of the node. cfnType Optional public readonly cfnType : string ; Type: string Type of CloudFormation resource. constructInfo Optional public readonly constructInfo : ConstructInfo ; Type: ConstructInfo Synthesized construct information defining jii resolution data. logicalId Optional public readonly logicalId : string ; Type: string Logical id of the node, which is only unique within containing stack. parent Optional public readonly parent : Node ; Type: aws-prototyping-sdk/cdk-graph.Graph.Node Parent node. stack Optional public readonly stack : StackNode ; Type: aws-prototyping-sdk/cdk-graph.Graph.StackNode Stack the node is contained. nodeType Optional public readonly nodeType : NodeTypeEnum ; Type: NodeTypeEnum Type of node. parentStack Required public readonly parentStack : StackNode ; Type: aws-prototyping-sdk/cdk-graph.Graph.StackNode Parent stack. INodePredicate Implemented By: aws-prototyping-sdk/cdk-graph.Graph.INodePredicate Predicate to match node. INodeProps Extends: aws-prototyping-sdk/cdk-graph.Graph.ITypedNodeProps Implemented By: aws-prototyping-sdk/cdk-graph.Graph.INodeProps Node props. Properties Name Type Description attributes aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Attributes. flags FlagEnum [] Flags. metadata constructs.MetadataEntry[] Metadata entries. tags aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Tags. store aws-prototyping-sdk/cdk-graph.Graph.Store Store. uuid string UUID. id string Node id, which is unique within parent scope. path string Path of the node. cfnType string Type of CloudFormation resource. constructInfo ConstructInfo Synthesized construct information defining jii resolution data. logicalId string Logical id of the node, which is only unique within containing stack. parent aws-prototyping-sdk/cdk-graph.Graph.Node Parent node. stack aws-prototyping-sdk/cdk-graph.Graph.StackNode Stack the node is contained. nodeType NodeTypeEnum Type of node. attributes Optional public readonly attributes : Attributes ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Attributes. flags Optional public readonly flags : FlagEnum []; Type: FlagEnum [] Flags. metadata Optional public readonly metadata : MetadataEntry []; Type: constructs.MetadataEntry[] Metadata entries. tags Optional public readonly tags : Tags ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Tags. store Required public readonly store : Store ; Type: aws-prototyping-sdk/cdk-graph.Graph.Store Store. uuid Required public readonly uuid : string ; Type: string UUID. id Required public readonly id : string ; Type: string Node id, which is unique within parent scope. path Required public readonly path : string ; Type: string Path of the node. cfnType Optional public readonly cfnType : string ; Type: string Type of CloudFormation resource. constructInfo Optional public readonly constructInfo : ConstructInfo ; Type: ConstructInfo Synthesized construct information defining jii resolution data. logicalId Optional public readonly logicalId : string ; Type: string Logical id of the node, which is only unique within containing stack. parent Optional public readonly parent : Node ; Type: aws-prototyping-sdk/cdk-graph.Graph.Node Parent node. stack Optional public readonly stack : StackNode ; Type: aws-prototyping-sdk/cdk-graph.Graph.StackNode Stack the node is contained. nodeType Required public readonly nodeType : NodeTypeEnum ; Type: NodeTypeEnum Type of node. IOutputNodeProps Extends: aws-prototyping-sdk/cdk-graph.Graph.ITypedNodeProps Implemented By: aws-prototyping-sdk/cdk-graph.Graph.IOutputNodeProps OutputNode props. Properties Name Type Description attributes aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Attributes. flags FlagEnum [] Flags. metadata constructs.MetadataEntry[] Metadata entries. tags aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Tags. store aws-prototyping-sdk/cdk-graph.Graph.Store Store. uuid string UUID. id string Node id, which is unique within parent scope. path string Path of the node. cfnType string Type of CloudFormation resource. constructInfo ConstructInfo Synthesized construct information defining jii resolution data. logicalId string Logical id of the node, which is only unique within containing stack. parent aws-prototyping-sdk/cdk-graph.Graph.Node Parent node. stack aws-prototyping-sdk/cdk-graph.Graph.StackNode Stack the node is contained. value any Resolved output value. description string Description. exportName string Export name. attributes Optional public readonly attributes : Attributes ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Attributes. flags Optional public readonly flags : FlagEnum []; Type: FlagEnum [] Flags. metadata Optional public readonly metadata : MetadataEntry []; Type: constructs.MetadataEntry[] Metadata entries. tags Optional public readonly tags : Tags ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Tags. store Required public readonly store : Store ; Type: aws-prototyping-sdk/cdk-graph.Graph.Store Store. uuid Required public readonly uuid : string ; Type: string UUID. id Required public readonly id : string ; Type: string Node id, which is unique within parent scope. path Required public readonly path : string ; Type: string Path of the node. cfnType Optional public readonly cfnType : string ; Type: string Type of CloudFormation resource. constructInfo Optional public readonly constructInfo : ConstructInfo ; Type: ConstructInfo Synthesized construct information defining jii resolution data. logicalId Optional public readonly logicalId : string ; Type: string Logical id of the node, which is only unique within containing stack. parent Optional public readonly parent : Node ; Type: aws-prototyping-sdk/cdk-graph.Graph.Node Parent node. stack Optional public readonly stack : StackNode ; Type: aws-prototyping-sdk/cdk-graph.Graph.StackNode Stack the node is contained. value Required public readonly value : any ; Type: any Resolved output value. description Optional public readonly description : string ; Type: string Description. exportName Optional public readonly exportName : string ; Type: string Export name. IParameterNodeProps Extends: aws-prototyping-sdk/cdk-graph.Graph.ITypedNodeProps Implemented By: aws-prototyping-sdk/cdk-graph.Graph.IParameterNodeProps { @link ParameterNode} props. Properties Name Type Description attributes aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Attributes. flags FlagEnum [] Flags. metadata constructs.MetadataEntry[] Metadata entries. tags aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Tags. store aws-prototyping-sdk/cdk-graph.Graph.Store Store. uuid string UUID. id string Node id, which is unique within parent scope. path string Path of the node. cfnType string Type of CloudFormation resource. constructInfo ConstructInfo Synthesized construct information defining jii resolution data. logicalId string Logical id of the node, which is only unique within containing stack. parent aws-prototyping-sdk/cdk-graph.Graph.Node Parent node. stack aws-prototyping-sdk/cdk-graph.Graph.StackNode Stack the node is contained. parameterType string Parameter type. value any Resolved value. description string Description. attributes Optional public readonly attributes : Attributes ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Attributes. flags Optional public readonly flags : FlagEnum []; Type: FlagEnum [] Flags. metadata Optional public readonly metadata : MetadataEntry []; Type: constructs.MetadataEntry[] Metadata entries. tags Optional public readonly tags : Tags ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Tags. store Required public readonly store : Store ; Type: aws-prototyping-sdk/cdk-graph.Graph.Store Store. uuid Required public readonly uuid : string ; Type: string UUID. id Required public readonly id : string ; Type: string Node id, which is unique within parent scope. path Required public readonly path : string ; Type: string Path of the node. cfnType Optional public readonly cfnType : string ; Type: string Type of CloudFormation resource. constructInfo Optional public readonly constructInfo : ConstructInfo ; Type: ConstructInfo Synthesized construct information defining jii resolution data. logicalId Optional public readonly logicalId : string ; Type: string Logical id of the node, which is only unique within containing stack. parent Optional public readonly parent : Node ; Type: aws-prototyping-sdk/cdk-graph.Graph.Node Parent node. stack Optional public readonly stack : StackNode ; Type: aws-prototyping-sdk/cdk-graph.Graph.StackNode Stack the node is contained. parameterType Required public readonly parameterType : string ; Type: string Parameter type. value Required public readonly value : any ; Type: any Resolved value. description Optional public readonly description : string ; Type: string Description. IReferenceProps Extends: aws-prototyping-sdk/cdk-graph.Graph.ITypedEdgeProps Implemented By: aws-prototyping-sdk/cdk-graph.Graph.IReferenceProps Reference edge props. Properties Name Type Description attributes aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Attributes. flags FlagEnum [] Flags. metadata constructs.MetadataEntry[] Metadata entries. tags aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Tags. store aws-prototyping-sdk/cdk-graph.Graph.Store Store. uuid string UUID. source aws-prototyping-sdk/cdk-graph.Graph.Node Edge source is the node that defines the edge (tail). target aws-prototyping-sdk/cdk-graph.Graph.Node Edge target is the node being referenced by the source (head). referenceType ReferenceTypeEnum Type of reference. attributes Optional public readonly attributes : Attributes ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Attributes. flags Optional public readonly flags : FlagEnum []; Type: FlagEnum [] Flags. metadata Optional public readonly metadata : MetadataEntry []; Type: constructs.MetadataEntry[] Metadata entries. tags Optional public readonly tags : Tags ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Tags. store Required public readonly store : Store ; Type: aws-prototyping-sdk/cdk-graph.Graph.Store Store. uuid Required public readonly uuid : string ; Type: string UUID. source Required public readonly source : Node ; Type: aws-prototyping-sdk/cdk-graph.Graph.Node Edge source is the node that defines the edge (tail). target Required public readonly target : Node ; Type: aws-prototyping-sdk/cdk-graph.Graph.Node Edge target is the node being referenced by the source (head). referenceType Optional public readonly referenceType : ReferenceTypeEnum ; Type: ReferenceTypeEnum Type of reference. IResourceNodeProps Extends: aws-prototyping-sdk/cdk-graph.Graph.ITypedNodeProps Implemented By: aws-prototyping-sdk/cdk-graph.Graph.IResourceNodeProps ResourceNode props. Properties Name Type Description attributes aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Attributes. flags FlagEnum [] Flags. metadata constructs.MetadataEntry[] Metadata entries. tags aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Tags. store aws-prototyping-sdk/cdk-graph.Graph.Store Store. uuid string UUID. id string Node id, which is unique within parent scope. path string Path of the node. cfnType string Type of CloudFormation resource. constructInfo ConstructInfo Synthesized construct information defining jii resolution data. logicalId string Logical id of the node, which is only unique within containing stack. parent aws-prototyping-sdk/cdk-graph.Graph.Node Parent node. stack aws-prototyping-sdk/cdk-graph.Graph.StackNode Stack the node is contained. cdkOwned boolean Indicates if this resource is owned by cdk (defined in cdk library). nodeType NodeTypeEnum Type of node. attributes Optional public readonly attributes : Attributes ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Attributes. flags Optional public readonly flags : FlagEnum []; Type: FlagEnum [] Flags. metadata Optional public readonly metadata : MetadataEntry []; Type: constructs.MetadataEntry[] Metadata entries. tags Optional public readonly tags : Tags ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Tags. store Required public readonly store : Store ; Type: aws-prototyping-sdk/cdk-graph.Graph.Store Store. uuid Required public readonly uuid : string ; Type: string UUID. id Required public readonly id : string ; Type: string Node id, which is unique within parent scope. path Required public readonly path : string ; Type: string Path of the node. cfnType Optional public readonly cfnType : string ; Type: string Type of CloudFormation resource. constructInfo Optional public readonly constructInfo : ConstructInfo ; Type: ConstructInfo Synthesized construct information defining jii resolution data. logicalId Optional public readonly logicalId : string ; Type: string Logical id of the node, which is only unique within containing stack. parent Optional public readonly parent : Node ; Type: aws-prototyping-sdk/cdk-graph.Graph.Node Parent node. stack Optional public readonly stack : StackNode ; Type: aws-prototyping-sdk/cdk-graph.Graph.StackNode Stack the node is contained. cdkOwned Required public readonly cdkOwned : boolean ; Type: boolean Indicates if this resource is owned by cdk (defined in cdk library). nodeType Optional public readonly nodeType : NodeTypeEnum ; Type: NodeTypeEnum Type of node. ISerializableEdge Implemented By: aws-prototyping-sdk/cdk-graph.Graph.AttributeReference , aws-prototyping-sdk/cdk-graph.Graph.Dependency , aws-prototyping-sdk/cdk-graph.Graph.Edge , aws-prototyping-sdk/cdk-graph.Graph.ImportReference , aws-prototyping-sdk/cdk-graph.Graph.Reference , aws-prototyping-sdk/cdk-graph.SerializedGraph.ISerializableEdge Interface for serializable graph edge entity. ISerializableEntity Implemented By: aws-prototyping-sdk/cdk-graph.Graph.AppNode , aws-prototyping-sdk/cdk-graph.Graph.AttributeReference , aws-prototyping-sdk/cdk-graph.Graph.BaseEntity , aws-prototyping-sdk/cdk-graph.Graph.CfnResourceNode , aws-prototyping-sdk/cdk-graph.Graph.Dependency , aws-prototyping-sdk/cdk-graph.Graph.Edge , aws-prototyping-sdk/cdk-graph.Graph.ImportReference , aws-prototyping-sdk/cdk-graph.Graph.NestedStackNode , aws-prototyping-sdk/cdk-graph.Graph.Node , aws-prototyping-sdk/cdk-graph.Graph.OutputNode , aws-prototyping-sdk/cdk-graph.Graph.ParameterNode , aws-prototyping-sdk/cdk-graph.Graph.Reference , aws-prototyping-sdk/cdk-graph.Graph.ResourceNode , aws-prototyping-sdk/cdk-graph.Graph.RootNode , aws-prototyping-sdk/cdk-graph.Graph.StackNode , aws-prototyping-sdk/cdk-graph.Graph.StageNode , aws-prototyping-sdk/cdk-graph.SerializedGraph.ISerializableEntity Interface for serializable graph entities. ISerializableGraphStore Implemented By: aws-prototyping-sdk/cdk-graph.Graph.Store , aws-prototyping-sdk/cdk-graph.SerializedGraph.ISerializableGraphStore Interface for serializable graph store. Methods Name Description serialize No description. serialize public serialize () : GraphStore ISerializableNode Implemented By: aws-prototyping-sdk/cdk-graph.Graph.AppNode , aws-prototyping-sdk/cdk-graph.Graph.CfnResourceNode , aws-prototyping-sdk/cdk-graph.Graph.NestedStackNode , aws-prototyping-sdk/cdk-graph.Graph.Node , aws-prototyping-sdk/cdk-graph.Graph.OutputNode , aws-prototyping-sdk/cdk-graph.Graph.ParameterNode , aws-prototyping-sdk/cdk-graph.Graph.ResourceNode , aws-prototyping-sdk/cdk-graph.Graph.RootNode , aws-prototyping-sdk/cdk-graph.Graph.StackNode , aws-prototyping-sdk/cdk-graph.Graph.StageNode , aws-prototyping-sdk/cdk-graph.SerializedGraph.ISerializableNode Interface for serializable graph node entity. IStackNodeProps Extends: aws-prototyping-sdk/cdk-graph.Graph.ITypedNodeProps Implemented By: aws-prototyping-sdk/cdk-graph.Graph.INestedStackNodeProps , aws-prototyping-sdk/cdk-graph.Graph.IStackNodeProps { @link StackNode} props. Properties Name Type Description attributes aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Attributes. flags FlagEnum [] Flags. metadata constructs.MetadataEntry[] Metadata entries. tags aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Tags. store aws-prototyping-sdk/cdk-graph.Graph.Store Store. uuid string UUID. id string Node id, which is unique within parent scope. path string Path of the node. cfnType string Type of CloudFormation resource. constructInfo ConstructInfo Synthesized construct information defining jii resolution data. logicalId string Logical id of the node, which is only unique within containing stack. parent aws-prototyping-sdk/cdk-graph.Graph.Node Parent node. stack aws-prototyping-sdk/cdk-graph.Graph.StackNode Stack the node is contained. nodeType NodeTypeEnum Type of node. attributes Optional public readonly attributes : Attributes ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Attributes. flags Optional public readonly flags : FlagEnum []; Type: FlagEnum [] Flags. metadata Optional public readonly metadata : MetadataEntry []; Type: constructs.MetadataEntry[] Metadata entries. tags Optional public readonly tags : Tags ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Tags. store Required public readonly store : Store ; Type: aws-prototyping-sdk/cdk-graph.Graph.Store Store. uuid Required public readonly uuid : string ; Type: string UUID. id Required public readonly id : string ; Type: string Node id, which is unique within parent scope. path Required public readonly path : string ; Type: string Path of the node. cfnType Optional public readonly cfnType : string ; Type: string Type of CloudFormation resource. constructInfo Optional public readonly constructInfo : ConstructInfo ; Type: ConstructInfo Synthesized construct information defining jii resolution data. logicalId Optional public readonly logicalId : string ; Type: string Logical id of the node, which is only unique within containing stack. parent Optional public readonly parent : Node ; Type: aws-prototyping-sdk/cdk-graph.Graph.Node Parent node. stack Optional public readonly stack : StackNode ; Type: aws-prototyping-sdk/cdk-graph.Graph.StackNode Stack the node is contained. nodeType Optional public readonly nodeType : NodeTypeEnum ; Type: NodeTypeEnum Type of node. IStoreCounts Implemented By: aws-prototyping-sdk/cdk-graph.Graph.IStoreCounts Interface for store counts. Properties Name Type Description cfnResources ICounterRecord Returns { @link ICounterRecord} containing total number of each cfnResourceType . edges number Counts total number of edges in the store. edgeTypes ICounterRecord Returns { @link ICounterRecord} containing total number of each edge type ({ @link EdgeTypeEnum}). nodes number Counts total number of nodes in the store. nodeTypes ICounterRecord Returns { @link ICounterRecord} containing total number of each node type ({ @link NodeTypeEnum}). stacks number Counts total number of stacks in the store. stages number Counts total number of stages in the store. cfnResources Required public readonly cfnResources : ICounterRecord ; Type: ICounterRecord Returns { @link ICounterRecord} containing total number of each cfnResourceType . edges Required public readonly edges : number ; Type: number Counts total number of edges in the store. edgeTypes Required public readonly edgeTypes : ICounterRecord ; Type: ICounterRecord Returns { @link ICounterRecord} containing total number of each edge type ({ @link EdgeTypeEnum}). nodes Required public readonly nodes : number ; Type: number Counts total number of nodes in the store. nodeTypes Required public readonly nodeTypes : ICounterRecord ; Type: ICounterRecord Returns { @link ICounterRecord} containing total number of each node type ({ @link NodeTypeEnum}). stacks Required public readonly stacks : number ; Type: number Counts total number of stacks in the store. stages Required public readonly stages : number ; Type: number Counts total number of stages in the store. ITypedEdgeProps Extends: aws-prototyping-sdk/cdk-graph.Graph.IBaseEntityProps Implemented By: aws-prototyping-sdk/cdk-graph.Graph.IAttributeReferenceProps , aws-prototyping-sdk/cdk-graph.Graph.IEdgeProps , aws-prototyping-sdk/cdk-graph.Graph.IReferenceProps , aws-prototyping-sdk/cdk-graph.Graph.ITypedEdgeProps Base edge props agnostic to edge type. Used for extending per edge class with type specifics. Properties Name Type Description attributes aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Attributes. flags FlagEnum [] Flags. metadata constructs.MetadataEntry[] Metadata entries. tags aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Tags. store aws-prototyping-sdk/cdk-graph.Graph.Store Store. uuid string UUID. source aws-prototyping-sdk/cdk-graph.Graph.Node Edge source is the node that defines the edge (tail). target aws-prototyping-sdk/cdk-graph.Graph.Node Edge target is the node being referenced by the source (head). attributes Optional public readonly attributes : Attributes ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Attributes. flags Optional public readonly flags : FlagEnum []; Type: FlagEnum [] Flags. metadata Optional public readonly metadata : MetadataEntry []; Type: constructs.MetadataEntry[] Metadata entries. tags Optional public readonly tags : Tags ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Tags. store Required public readonly store : Store ; Type: aws-prototyping-sdk/cdk-graph.Graph.Store Store. uuid Required public readonly uuid : string ; Type: string UUID. source Required public readonly source : Node ; Type: aws-prototyping-sdk/cdk-graph.Graph.Node Edge source is the node that defines the edge (tail). target Required public readonly target : Node ; Type: aws-prototyping-sdk/cdk-graph.Graph.Node Edge target is the node being referenced by the source (head). ITypedNodeProps Extends: aws-prototyping-sdk/cdk-graph.Graph.IBaseEntityProps Implemented By: aws-prototyping-sdk/cdk-graph.Graph.ICfnResourceNodeProps , aws-prototyping-sdk/cdk-graph.Graph.INestedStackNodeProps , aws-prototyping-sdk/cdk-graph.Graph.INodeProps , aws-prototyping-sdk/cdk-graph.Graph.IOutputNodeProps , aws-prototyping-sdk/cdk-graph.Graph.IParameterNodeProps , aws-prototyping-sdk/cdk-graph.Graph.IResourceNodeProps , aws-prototyping-sdk/cdk-graph.Graph.IStackNodeProps , aws-prototyping-sdk/cdk-graph.Graph.ITypedNodeProps Base node props agnostic to node type. Used for extending per node class with type specifics. Properties Name Type Description attributes aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Attributes. flags FlagEnum [] Flags. metadata constructs.MetadataEntry[] Metadata entries. tags aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Tags. store aws-prototyping-sdk/cdk-graph.Graph.Store Store. uuid string UUID. id string Node id, which is unique within parent scope. path string Path of the node. cfnType string Type of CloudFormation resource. constructInfo ConstructInfo Synthesized construct information defining jii resolution data. logicalId string Logical id of the node, which is only unique within containing stack. parent aws-prototyping-sdk/cdk-graph.Graph.Node Parent node. stack aws-prototyping-sdk/cdk-graph.Graph.StackNode Stack the node is contained. attributes Optional public readonly attributes : Attributes ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Attributes Attributes. flags Optional public readonly flags : FlagEnum []; Type: FlagEnum [] Flags. metadata Optional public readonly metadata : MetadataEntry []; Type: constructs.MetadataEntry[] Metadata entries. tags Optional public readonly tags : Tags ; Type: aws-prototyping-sdk/cdk-graph.SerializedGraph.Tags Tags. store Required public readonly store : Store ; Type: aws-prototyping-sdk/cdk-graph.Graph.Store Store. uuid Required public readonly uuid : string ; Type: string UUID. id Required public readonly id : string ; Type: string Node id, which is unique within parent scope. path Required public readonly path : string ; Type: string Path of the node. cfnType Optional public readonly cfnType : string ; Type: string Type of CloudFormation resource. constructInfo Optional public readonly constructInfo : ConstructInfo ; Type: ConstructInfo Synthesized construct information defining jii resolution data. logicalId Optional public readonly logicalId : string ; Type: string Logical id of the node, which is only unique within containing stack. parent Optional public readonly parent : Node ; Type: aws-prototyping-sdk/cdk-graph.Graph.Node Parent node. stack Optional public readonly stack : StackNode ; Type: aws-prototyping-sdk/cdk-graph.Graph.StackNode Stack the node is contained. Enums CdkConstructIds Common cdk construct ids. Members Name Description DEFAULT No description. RESOURCE No description. EXPORTS No description. DEFAULT RESOURCE EXPORTS CdkGraphArtifacts CdkGraph core artifacts. Members Name Description GRAPH_METADATA No description. GRAPH No description. GRAPH_METADATA GRAPH CfnAttributesEnum Common cfn attribute keys. Members Name Description TYPE No description. PROPS No description. TYPE PROPS ConstructInfoFqnEnum Commonly used cdk construct info fqn (jsii fully-qualified ids). Members Name Description APP No description. PDKAPP_MONO No description. PDKAPP No description. STAGE No description. STACK No description. NESTED_STACK No description. CFN_STACK No description. CFN_OUTPUT No description. CFN_PARAMETER No description. CUSTOM_RESOURCE No description. AWS_CUSTOM_RESOURCE No description. CUSTOM_RESOURCE_PROVIDER No description. CUSTOM_RESOURCE_PROVIDER_2 No description. LAMBDA No description. CFN_LAMBDA No description. LAMBDA_LAYER_VERSION No description. CFN_LAMBDA_LAYER_VERSION No description. LAMBDA_ALIAS No description. CFN_LAMBDA_ALIAS No description. LAMBDA_BASE No description. LAMBDA_SINGLETON No description. LAMBDA_LAYER_AWSCLI No description. CFN_LAMBDA_PERMISSIONS No description. ASSET_STAGING No description. S3_ASSET No description. ECR_TARBALL_ASSET No description. EC2_INSTANCE No description. CFN_EC2_INSTANCE No description. SECURITY_GROUP No description. CFN_SECURITY_GROUP No description. VPC No description. CFN_VPC No description. PRIVATE_SUBNET No description. CFN_PRIVATE_SUBNET No description. PUBLIC_SUBNET No description. CFN_PUBLIC_SUBNET No description. IAM_ROLE No description. APP PDKAPP_MONO PDKAPP STAGE STACK NESTED_STACK CFN_STACK CFN_OUTPUT CFN_PARAMETER CUSTOM_RESOURCE AWS_CUSTOM_RESOURCE CUSTOM_RESOURCE_PROVIDER CUSTOM_RESOURCE_PROVIDER_2 LAMBDA CFN_LAMBDA LAMBDA_LAYER_VERSION CFN_LAMBDA_LAYER_VERSION LAMBDA_ALIAS CFN_LAMBDA_ALIAS LAMBDA_BASE LAMBDA_SINGLETON LAMBDA_LAYER_AWSCLI CFN_LAMBDA_PERMISSIONS ASSET_STAGING S3_ASSET ECR_TARBALL_ASSET EC2_INSTANCE CFN_EC2_INSTANCE SECURITY_GROUP CFN_SECURITY_GROUP VPC CFN_VPC PRIVATE_SUBNET CFN_PRIVATE_SUBNET PUBLIC_SUBNET CFN_PUBLIC_SUBNET IAM_ROLE EdgeDirectionEnum EdgeDirection specifies in which direction the edge is directed or if it is undirected. Members Name Description NONE Indicates that edge is undirected ; FORWARD Indicates the edge is directed from the source to the target . BACK Indicates the edge is directed from the target to the source . BOTH Indicates the edge is bi-directional . NONE Indicates that edge is undirected ; meaning there is no directional relationship between the source and target . FORWARD Indicates the edge is directed from the source to the target . BACK Indicates the edge is directed from the target to the source . BOTH Indicates the edge is bi-directional . EdgeTypeEnum Edge types handles by the graph. Members Name Description CUSTOM Custom edge. REFERENCE Reference edge (Ref, Fn::GetAtt, Fn::ImportValue). DEPENDENCY CloudFormation dependency edge. CUSTOM Custom edge. REFERENCE Reference edge (Ref, Fn::GetAtt, Fn::ImportValue). DEPENDENCY CloudFormation dependency edge. FilterPreset Filter presets. Members Name Description COMPACT Collapses extraneous nodes to parent and cdk created nodes on themselves, and prunes extraneous edges. NON_EXTRANEOUS Collapses extraneous nodes to parent and prunes extraneous edges. NONE No filtering is performed which will output verbose graph. COMPACT Collapses extraneous nodes to parent and cdk created nodes on themselves, and prunes extraneous edges. This most closely represents the developers code for the current application and reduces the noise one expects. NON_EXTRANEOUS Collapses extraneous nodes to parent and prunes extraneous edges. NONE No filtering is performed which will output verbose graph. FilterStrategy Filter strategy to apply to filter matches. Members Name Description PRUNE Remove filtered entity and all its edges. COLLAPSE Collapse all child entities of filtered entity into filtered entity; COLLAPSE_TO_PARENT Collapse all filtered entities into their parent entity; PRUNE Remove filtered entity and all its edges. COLLAPSE Collapse all child entities of filtered entity into filtered entity; and hoist all edges. COLLAPSE_TO_PARENT Collapse all filtered entities into their parent entity; and hoist its edges to parent. FlagEnum Graph flags. Members Name Description CLUSTER Indicates that node is a cluster (container) and treated like an emphasized subgraph. GRAPH_CONTAINER Indicates that node is non-resource container (Root, App) and used for structural purpose in the graph only. EXTRANEOUS Indicates that the entity is extraneous and considered collapsible to parent without impact of intent. ASSET Indicates node is considered a CDK Asset (Lambda Code, Docker Image, etc). CDK_OWNED Indicates that node was created by CDK. CFN_FQN Indicates node ConstructInfoFqn denotes a aws-cdk-lib.*.Cfn* construct. CLOSED_EDGE Indicates that edge is closed; MUTATED Indicates that entity was mutated; IMPORT Indicates that resource is imported into CDK (eg: lambda.Function.fromFunctionName() , s3.Bucket.fromBucketArn() ). CUSTOM_RESOURCE Indicates if node is a CustomResource. AWS_CUSTOM_RESOURCE Indicates if node is an AwsCustomResource, which is a custom resource that simply calls the AWS SDK API via singleton provider. AWS_API_CALL_LAMBDA Indicates if lambda function resource is a singleton AWS API call lambda for AwsCustomResources. CLUSTER Indicates that node is a cluster (container) and treated like an emphasized subgraph. GRAPH_CONTAINER Indicates that node is non-resource container (Root, App) and used for structural purpose in the graph only. EXTRANEOUS Indicates that the entity is extraneous and considered collapsible to parent without impact of intent. ASSET Indicates node is considered a CDK Asset (Lambda Code, Docker Image, etc). CDK_OWNED Indicates that node was created by CDK. https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.Resource.html#static-iswbrownedwbrresourceconstruct CFN_FQN Indicates node ConstructInfoFqn denotes a aws-cdk-lib.*.Cfn* construct. CLOSED_EDGE Indicates that edge is closed; meaning source === target . This flag only gets applied on creation of edge, not during mutations to maintain initial intent. MUTATED Indicates that entity was mutated; meaning a mutation was performed to change originally computed graph value. IMPORT Indicates that resource is imported into CDK (eg: lambda.Function.fromFunctionName() , s3.Bucket.fromBucketArn() ). CUSTOM_RESOURCE Indicates if node is a CustomResource. https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.custom_resources-readme.html AWS_CUSTOM_RESOURCE Indicates if node is an AwsCustomResource, which is a custom resource that simply calls the AWS SDK API via singleton provider. https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.custom_resources.AwsCustomResource.html AWS_API_CALL_LAMBDA Indicates if lambda function resource is a singleton AWS API call lambda for AwsCustomResources. https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.custom_resources.AwsCustomResource.html MetadataTypeEnum Common cdk metadata types. Members Name Description LOGICAL_ID No description. LOGICAL_ID NodeTypeEnum Node types handled by the graph. Members Name Description DEFAULT Default node type - used for all nodes that don't have explicit type defined. CFN_RESOURCE L1 cfn resource node. RESOURCE L2 cdk resource node. CUSTOM_RESOURCE Cdk customer resource node. ROOT Graph root node. APP Cdk App node. STAGE Cdk Stage node. STACK Cdk Stack node. NESTED_STACK Cdk NestedStack node. OUTPUT CfnOutput node. PARAMETER CfnParameter node. ASSET Cdk asset node. DEFAULT Default node type - used for all nodes that don't have explicit type defined. CFN_RESOURCE L1 cfn resource node. RESOURCE L2 cdk resource node. CUSTOM_RESOURCE Cdk customer resource node. ROOT Graph root node. APP Cdk App node. STAGE Cdk Stage node. STACK Cdk Stack node. NESTED_STACK Cdk NestedStack node. OUTPUT CfnOutput node. PARAMETER CfnParameter node. ASSET Cdk asset node. ReferenceTypeEnum Reference edge types. Members Name Description REF CloudFormation Ref reference. ATTRIBUTE CloudFormation Fn::GetAtt reference. IMPORT CloudFormation Fn::ImportValue reference. IMPORT_ARN CloudFormation Fn::Join reference of imported resourced (eg: s3.Bucket.fromBucketArn() ). REF CloudFormation Ref reference. ATTRIBUTE CloudFormation Fn::GetAtt reference. IMPORT CloudFormation Fn::ImportValue reference. IMPORT_ARN CloudFormation Fn::Join reference of imported resourced (eg: s3.Bucket.fromBucketArn() ).","title":"Index"},{"location":"typescript/cdk-graph/index.html#cdk-graph-aws-prototyping-sdkcdk-graph","text":"More comprehensive documentation to come as this package stabilizes This package is the core framework for supporting additional cdk based automation and tooling, such as diagraming, cost modeling, security and compliance, in a holistic and comprehensive way. This package provides the following functionality: Synthesizes a serialized graph (nodes and edges) from CDK source code. Provides runtime interface for interacting with the graph (in-memory database-like graph store). Provides plugin framework for additional tooling to utilize and extend the graph. The goal of this framework is to enable bespoke tooling to be built without having to first traverse the CDK Tree and Metadata to build a graph. Projects like cdk-dia generate a bespoke in-memory graph that is then utilized to generate diagrams; while the diagram generation is the core value it must first have a graph to act upon and currently is required to generate this undifferentiated graph to provide its diagrams. By standardizing on the graph interface necessary to build complex tooling, we can more rapidly build new tooling that focuses on its core value.","title":"CDK Graph (@aws-prototyping-sdk/cdk-graph)"},{"location":"typescript/cdk-graph/index.html#available-plugins","text":"Name Description Screenshot Links Diagram Generate cloud infrastructure diagrams from cdk graph","title":"Available Plugins"},{"location":"typescript/cdk-graph/index.html#quick-start","text":"","title":"Quick Start"},{"location":"typescript/cdk-graph/index.html#config","text":"Configuration is supported through the .cdkgraphrc.js and depending on the plugin, through passing config to the plugin instance. Config precedence follows 1) defaults, 2) cdkgraphrc, 3) instance. // .cdkgraphrc.js module . exports = { // Defaults to \"<cdk.out>/cdkgraph\" outdir : \"reports/graph\" , // plugin configuration example : { verbose : true , reportType : \"csv\" , }, }; #!/usr/bin/env node import * as cdk from \"aws-cdk-lib\" ; import { MyStack } from \"../lib/my-stack\" ; import { CdkGraph } from \"@aws-prototyping-sdk/cdk-graph\" ; import { ExamplePlugin } from \"@aws-prototyping-sdk/cdk-graph-plugin-example\" ; // does not exist, just example const app = new cdk . App (); new MyStack ( app , \"MyStack\" ); // Add CdkGraph after other construct added to app new CdkGraph ( app , { plugins : [ new ExamplePlugin ({ // Will override .cdkgraphrc.js value verbose : false , }), ], });","title":"Config"},{"location":"typescript/cdk-graph/index.html#plugin-interface","text":"/** CdkGraph **Plugin** interface */ export interface ICdkGraphPlugin { /** Unique identifier for this plugin */ readonly id : string ; /** Plugin version */ readonly version : Version ; /** List of plugins this plugin depends on, including optional semver version (eg: [\"foo\", \"bar@1.2\"]) */ readonly dependencies? : string []; /** * Binds the plugin to the CdkGraph instance. Enables plugins to receive base configs. */ bind : IGraphPluginBindCallback ; /** * Node visitor callback for construct tree traversal. This follows IAspect.visit pattern, but the order * of visitor traversal in managed by the CdkGraph. */ inspect? : IGraphVisitorCallback ; /** * Called during CDK synthesize to generate synchronous artifacts based on the in-memory graph passed * to the plugin. This is called in fifo order of plugins. */ synthesize? : IGraphSynthesizeCallback ; /** * Generate asynchronous reports based on the graph. This is not automatically called when synthesizing CDK. * Developer must explicitly add `await graphInstance.report()` to the CDK bin or invoke this outside * of the CDK synth. In either case, the plugin receives the in-memory graph interface when invoked, as the * CdkGraph will deserialize the graph prior to invoking the plugin report. */ report? : IGraphReportCallback ; } Plugin operations are automatically invoked by CdkGraph in the order they are defined in the plugins property. The invocation flow of plugins follows: 1) bind , 2) inspect , 3) synthesize , 4) async report .","title":"Plugin Interface"},{"location":"typescript/cdk-graph/index.html#asynchronous-plugins","text":"Some plugins may requiring performing asynchronous requests, or may make expensive operations that are best left outside of the synthesis process. CdkGraph support asynchronous operations through the async report() method of plugins. However, since CDK does not support asynchronous operations during synthesis, this must be wired up a bit differently. #!/usr/bin/env node import * as cdk from \"aws-cdk-lib\" ; import { MyStack } from \"../lib/my-stack\" ; import { CdkGraph } from \"@aws-prototyping-sdk/cdk-graph\" ; import { ExampleAsyncPlugin } from \"@aws-prototyping-sdk/cdk-graph-plugin-async-example\" ; // does not exist, just example ( async () => { const app = new cdk . App (); new MyStack ( app , \"MyStack\" ); // Add CdkGraph after other construct added to app const graph = new CdkGraph ( app , { plugins : [ new ExampleAsyncPlugin ()], }); // invokes all plugin `report()` operations asynchronously (in order they are defined in `plugins` property) await graph . report (); })();","title":"Asynchronous Plugins"},{"location":"typescript/cdk-graph/index.html#example-plugin-implementation","text":"Very basic example of implementing a plugin. Once the first actual plugins have been published this will be updated to reference those as examples. import { CdkGraph , CdkGraphContext , ICdkGraphPlugin , } from \"@aws-prototyping-sdk/cdk-graph\" ; export class CdkGraphExamplePlugin implements ICdkGraphPlugin { static readonly ARTIFACT_NS = \"EXAMPLE\" ; static readonly ID = \"example\" ; static readonly VERSION = \"0.0.0\" ; get id () : string { return CdkGraphDiagramPlugin . ID ; } get version () : string { return CdkGraphDiagramPlugin . VERSION ; } readonly dependencies? : string [] = []; /** @internal */ private _graph? : CdkGraph ; bind ( graph : CdkGraph ) : void { this . _graph = graph ; } synthesize ( context : CdkGraphContext ) : void { const pluginConfig = this . config as Required < IPluginConfig > ; // Get counts of all resources const cfnResourceCounts = context . store . counts . cfnResources ; // Write plugin artifact context . writeArtifact ( this , \"EXAMPLE\" , \"example.json\" , JSON . stringify ( cfnResourceCounts , null , 2 ) ); } async report ( context : CdkGraphContext ) : void { // perform async operation here utilizing graph store const cfnResourceCounts = context . store . counts . cfnResources ; const fetchedData = await fetch ( \"https://example.com/data\" , { method : \"POST\" , body : JSON.stringify ( cfnResourceCounts ), }); // Write plugin artifact for fetched data context . writeArtifact ( this , \"EXAMPLE:FETCHED\" , \"example-fetched.json\" , JSON . stringify ( fetchedData , null , 2 ) ); } }","title":"Example Plugin Implementation"},{"location":"typescript/cdk-graph/index.html#path-to-stability","text":"The below is a rough checklist of task necessary to elevate this from experimental to stable. [ ] Dynamic versioning and Semver enforcement (store, plugins, etc) [ ] Support running async report() method outside of CDK synthesis process [ ] Find alternative synthesis solution that doesn't utilize CDK internals [ ] Support custom Nodes and Edges [ ] Improve logging, bookkeeping, and debugging [ ] Implement store upgrade solution [ ] Battle test the implementation against several plugins [ ] Battle test the implementation in all target languages (currently tested in Typescript, but vended in all PDK supported languages) [ ] Receive community feedback to validate approach","title":"Path to Stability"},{"location":"typescript/cdk-graph/index.html#api-reference","text":"","title":"API Reference "},{"location":"typescript/cdk-graph/index.html#constructs","text":"","title":"Constructs "},{"location":"typescript/cdk-graph/index.html#cdkgraph","text":"CdkGraph construct is the cdk-graph framework controller that is responsible for computing the graph, storing serialized graph, and instrumenting plugins per the plugin contract.","title":"CdkGraph "},{"location":"typescript/cdk-graph/index.html#structs","text":"","title":"Structs "},{"location":"typescript/cdk-graph/index.html#attributes","text":"Serializable attributes mapping.","title":"Attributes "},{"location":"typescript/cdk-graph/index.html#cdkgraphartifact","text":"CdkGraph artifact definition.","title":"CdkGraphArtifact "},{"location":"typescript/cdk-graph/index.html#cdkgraphconfig","text":"CdkGraph configuration definition.","title":"CdkGraphConfig "},{"location":"typescript/cdk-graph/index.html#constructinfo","text":"Source information on a construct (class fqn and version). https://github.com/aws/aws-cdk/blob/cea1039e3664fdfa89c6f00cdaeb1a0185a12678/packages/%40aws-cdk/core/lib/private/runtime-info.ts#L22","title":"ConstructInfo "},{"location":"typescript/cdk-graph/index.html#edge","text":"Serializable graph edge entity.","title":"Edge "},{"location":"typescript/cdk-graph/index.html#entity","text":"Serializable graph entity.","title":"Entity "},{"location":"typescript/cdk-graph/index.html#graphstore","text":"Serializable graph store.","title":"GraphStore "},{"location":"typescript/cdk-graph/index.html#inferrednodeprops","text":"Inferred node props.","title":"InferredNodeProps "},{"location":"typescript/cdk-graph/index.html#node","text":"Serializable graph node entity.","title":"Node "},{"location":"typescript/cdk-graph/index.html#plainobject","text":"Serializable plain object value (JSII supported).","title":"PlainObject "},{"location":"typescript/cdk-graph/index.html#tags","text":"Serializable dictionary of tags (key value pairs).","title":"Tags "},{"location":"typescript/cdk-graph/index.html#unresolvedreference","text":"Unresolved reference struct. During graph computation references are unresolved and stored in this struct.","title":"UnresolvedReference "},{"location":"typescript/cdk-graph/index.html#classes","text":"","title":"Classes "},{"location":"typescript/cdk-graph/index.html#appnode","text":"AppNode defines a cdk App.","title":"AppNode "},{"location":"typescript/cdk-graph/index.html#attributereference","text":"Attribute type reference edge.","title":"AttributeReference "},{"location":"typescript/cdk-graph/index.html#baseentity","text":"Implements: aws-prototyping-sdk/cdk-graph.SerializedGraph.ISerializableEntity Base class for all store entities (Node and Edges).","title":"BaseEntity "},{"location":"typescript/cdk-graph/index.html#cdkgraphcontext","text":"CdkGraph context.","title":"CdkGraphContext "},{"location":"typescript/cdk-graph/index.html#cfnresourcenode","text":"CfnResourceNode defines an L1 cdk resource.","title":"CfnResourceNode "},{"location":"typescript/cdk-graph/index.html#dependency","text":"Dependency edge class defines CloudFormation dependency between resources.","title":"Dependency "},{"location":"typescript/cdk-graph/index.html#edge_1","text":"Implements: aws-prototyping-sdk/cdk-graph.SerializedGraph.ISerializableEdge Edge class defines a link (relationship) between nodes, as in standard graph theory .","title":"Edge "},{"location":"typescript/cdk-graph/index.html#importreference","text":"Import reference defines Fn::ImportValue type reference edge.","title":"ImportReference "},{"location":"typescript/cdk-graph/index.html#nestedstacknode","text":"NestedStackNode defines a cdk NestedStack.","title":"NestedStackNode "},{"location":"typescript/cdk-graph/index.html#node_1","text":"Implements: aws-prototyping-sdk/cdk-graph.SerializedGraph.ISerializableNode Node class is the base definition of node entities in the graph, as in standard graph theory .","title":"Node "},{"location":"typescript/cdk-graph/index.html#outputnode","text":"OutputNode defines a cdk CfnOutput resources.","title":"OutputNode "},{"location":"typescript/cdk-graph/index.html#parameternode","text":"ParameterNode defines a CfnParameter node.","title":"ParameterNode "},{"location":"typescript/cdk-graph/index.html#reference","text":"Reference edge class defines a directed relationship between nodes.","title":"Reference "},{"location":"typescript/cdk-graph/index.html#resourcenode","text":"ResourceNode class defines a L2 cdk resource construct.","title":"ResourceNode "},{"location":"typescript/cdk-graph/index.html#rootnode","text":"RootNode represents the root of the store tree.","title":"RootNode "},{"location":"typescript/cdk-graph/index.html#stacknode","text":"StackNode defines a cdk Stack.","title":"StackNode "},{"location":"typescript/cdk-graph/index.html#stagenode","text":"StageNode defines a cdk Stage.","title":"StageNode "},{"location":"typescript/cdk-graph/index.html#store","text":"Implements: aws-prototyping-sdk/cdk-graph.SerializedGraph.ISerializableGraphStore Store class provides the in-memory database-like interface for managing all entities in the graph.","title":"Store "},{"location":"typescript/cdk-graph/index.html#protocols","text":"","title":"Protocols "},{"location":"typescript/cdk-graph/index.html#iappnodeprops","text":"Extends: aws-prototyping-sdk/cdk-graph.Graph.IBaseEntityDataProps Implemented By: aws-prototyping-sdk/cdk-graph.Graph.IAppNodeProps { @link AppNode} props.","title":"IAppNodeProps "},{"location":"typescript/cdk-graph/index.html#iattributereferenceprops","text":"Extends: aws-prototyping-sdk/cdk-graph.Graph.ITypedEdgeProps Implemented By: aws-prototyping-sdk/cdk-graph.Graph.IAttributeReferenceProps Attribute type reference props.","title":"IAttributeReferenceProps "},{"location":"typescript/cdk-graph/index.html#ibaseentitydataprops","text":"Implemented By: aws-prototyping-sdk/cdk-graph.Graph.IAppNodeProps , aws-prototyping-sdk/cdk-graph.Graph.IAttributeReferenceProps , aws-prototyping-sdk/cdk-graph.Graph.IBaseEntityDataProps , aws-prototyping-sdk/cdk-graph.Graph.IBaseEntityProps , aws-prototyping-sdk/cdk-graph.Graph.ICfnResourceNodeProps , aws-prototyping-sdk/cdk-graph.Graph.IEdgeProps , aws-prototyping-sdk/cdk-graph.Graph.INestedStackNodeProps , aws-prototyping-sdk/cdk-graph.Graph.INodeProps , aws-prototyping-sdk/cdk-graph.Graph.IOutputNodeProps , aws-prototyping-sdk/cdk-graph.Graph.IParameterNodeProps , aws-prototyping-sdk/cdk-graph.Graph.IReferenceProps , aws-prototyping-sdk/cdk-graph.Graph.IResourceNodeProps , aws-prototyping-sdk/cdk-graph.Graph.IStackNodeProps , aws-prototyping-sdk/cdk-graph.Graph.ITypedEdgeProps , aws-prototyping-sdk/cdk-graph.Graph.ITypedNodeProps Base interface for all store entities data props.","title":"IBaseEntityDataProps "},{"location":"typescript/cdk-graph/index.html#ibaseentityprops","text":"Extends: aws-prototyping-sdk/cdk-graph.Graph.IBaseEntityDataProps Implemented By: aws-prototyping-sdk/cdk-graph.Graph.IAttributeReferenceProps , aws-prototyping-sdk/cdk-graph.Graph.IBaseEntityProps , aws-prototyping-sdk/cdk-graph.Graph.ICfnResourceNodeProps , aws-prototyping-sdk/cdk-graph.Graph.IEdgeProps , aws-prototyping-sdk/cdk-graph.Graph.INestedStackNodeProps , aws-prototyping-sdk/cdk-graph.Graph.INodeProps , aws-prototyping-sdk/cdk-graph.Graph.IOutputNodeProps , aws-prototyping-sdk/cdk-graph.Graph.IParameterNodeProps , aws-prototyping-sdk/cdk-graph.Graph.IReferenceProps , aws-prototyping-sdk/cdk-graph.Graph.IResourceNodeProps , aws-prototyping-sdk/cdk-graph.Graph.IStackNodeProps , aws-prototyping-sdk/cdk-graph.Graph.ITypedEdgeProps , aws-prototyping-sdk/cdk-graph.Graph.ITypedNodeProps Base interface for all store entities props.","title":"IBaseEntityProps "},{"location":"typescript/cdk-graph/index.html#icdkgraphplugin","text":"Implemented By: aws-prototyping-sdk/cdk-graph-plugin-diagram.CdkGraphDiagramPlugin , ICdkGraphPlugin CdkGraph Plugin interface.","title":"ICdkGraphPlugin "},{"location":"typescript/cdk-graph/index.html#icdkgraphprops","text":"Implemented By: ICdkGraphProps { @link CdkGraph} props.","title":"ICdkGraphProps "},{"location":"typescript/cdk-graph/index.html#icfnresourcenodeprops","text":"Extends: aws-prototyping-sdk/cdk-graph.Graph.ITypedNodeProps Implemented By: aws-prototyping-sdk/cdk-graph.Graph.ICfnResourceNodeProps CfnResourceNode props.","title":"ICfnResourceNodeProps "},{"location":"typescript/cdk-graph/index.html#icounterrecord","text":"Implemented By: ICounterRecord ICounterRecord is record of keyed counts from { @link Counters}. The record is a mapping of key => count values.","title":"ICounterRecord "},{"location":"typescript/cdk-graph/index.html#iedgepredicate","text":"Implemented By: aws-prototyping-sdk/cdk-graph.Graph.IEdgePredicate Predicate to match edge.","title":"IEdgePredicate "},{"location":"typescript/cdk-graph/index.html#iedgeprops","text":"Extends: aws-prototyping-sdk/cdk-graph.Graph.ITypedEdgeProps Implemented By: aws-prototyping-sdk/cdk-graph.Graph.IEdgeProps Edge props interface.","title":"IEdgeProps "},{"location":"typescript/cdk-graph/index.html#ifilterfocuscallback","text":"Implemented By: IFilterFocusCallback Determines focus node of filter plan.","title":"IFilterFocusCallback "},{"location":"typescript/cdk-graph/index.html#ifindedgeoptions","text":"Implemented By: aws-prototyping-sdk/cdk-graph.Graph.IFindEdgeOptions Options for edge based search operations.","title":"IFindEdgeOptions "},{"location":"typescript/cdk-graph/index.html#ifindnodeoptions","text":"Implemented By: aws-prototyping-sdk/cdk-graph.Graph.IFindNodeOptions Options for node based search operations.","title":"IFindNodeOptions "},{"location":"typescript/cdk-graph/index.html#igraphfilter","text":"Implemented By: IGraphFilter Graph filter.","title":"IGraphFilter "},{"location":"typescript/cdk-graph/index.html#igraphfilterplan","text":"Implemented By: IGraphFilterPlan Graph filter plan.","title":"IGraphFilterPlan "},{"location":"typescript/cdk-graph/index.html#igraphfilterplanfocusconfig","text":"Implemented By: IGraphFilterPlanFocusConfig","title":"IGraphFilterPlanFocusConfig "},{"location":"typescript/cdk-graph/index.html#igraphpluginbindcallback","text":"Implemented By: IGraphPluginBindCallback Callback signature for graph Plugin.bind operation.","title":"IGraphPluginBindCallback "},{"location":"typescript/cdk-graph/index.html#igraphreportcallback","text":"Implemented By: IGraphReportCallback Callback signature for graph Plugin.report operation.","title":"IGraphReportCallback "},{"location":"typescript/cdk-graph/index.html#igraphstorefilter","text":"Implemented By: IGraphStoreFilter Store filter callback interface used to perform filtering operations directly against the store, as opposed to using { @link IGraphFilter} definitions.","title":"IGraphStoreFilter "},{"location":"typescript/cdk-graph/index.html#igraphsynthesizecallback","text":"Implemented By: IGraphSynthesizeCallback Callback signature for graph Plugin.synthesize operation.","title":"IGraphSynthesizeCallback "},{"location":"typescript/cdk-graph/index.html#igraphvisitorcallback","text":"Implemented By: IGraphVisitorCallback Callback signature for graph Plugin.inspect operation.","title":"IGraphVisitorCallback "},{"location":"typescript/cdk-graph/index.html#inestedstacknodeprops","text":"Extends: aws-prototyping-sdk/cdk-graph.Graph.IStackNodeProps Implemented By: aws-prototyping-sdk/cdk-graph.Graph.INestedStackNodeProps { @link NestedStackNode} props.","title":"INestedStackNodeProps "},{"location":"typescript/cdk-graph/index.html#inodepredicate","text":"Implemented By: aws-prototyping-sdk/cdk-graph.Graph.INodePredicate Predicate to match node.","title":"INodePredicate "},{"location":"typescript/cdk-graph/index.html#inodeprops","text":"Extends: aws-prototyping-sdk/cdk-graph.Graph.ITypedNodeProps Implemented By: aws-prototyping-sdk/cdk-graph.Graph.INodeProps Node props.","title":"INodeProps "},{"location":"typescript/cdk-graph/index.html#ioutputnodeprops","text":"Extends: aws-prototyping-sdk/cdk-graph.Graph.ITypedNodeProps Implemented By: aws-prototyping-sdk/cdk-graph.Graph.IOutputNodeProps OutputNode props.","title":"IOutputNodeProps "},{"location":"typescript/cdk-graph/index.html#iparameternodeprops","text":"Extends: aws-prototyping-sdk/cdk-graph.Graph.ITypedNodeProps Implemented By: aws-prototyping-sdk/cdk-graph.Graph.IParameterNodeProps { @link ParameterNode} props.","title":"IParameterNodeProps "},{"location":"typescript/cdk-graph/index.html#ireferenceprops","text":"Extends: aws-prototyping-sdk/cdk-graph.Graph.ITypedEdgeProps Implemented By: aws-prototyping-sdk/cdk-graph.Graph.IReferenceProps Reference edge props.","title":"IReferenceProps "},{"location":"typescript/cdk-graph/index.html#iresourcenodeprops","text":"Extends: aws-prototyping-sdk/cdk-graph.Graph.ITypedNodeProps Implemented By: aws-prototyping-sdk/cdk-graph.Graph.IResourceNodeProps ResourceNode props.","title":"IResourceNodeProps "},{"location":"typescript/cdk-graph/index.html#iserializableedge","text":"Implemented By: aws-prototyping-sdk/cdk-graph.Graph.AttributeReference , aws-prototyping-sdk/cdk-graph.Graph.Dependency , aws-prototyping-sdk/cdk-graph.Graph.Edge , aws-prototyping-sdk/cdk-graph.Graph.ImportReference , aws-prototyping-sdk/cdk-graph.Graph.Reference , aws-prototyping-sdk/cdk-graph.SerializedGraph.ISerializableEdge Interface for serializable graph edge entity.","title":"ISerializableEdge "},{"location":"typescript/cdk-graph/index.html#iserializableentity","text":"Implemented By: aws-prototyping-sdk/cdk-graph.Graph.AppNode , aws-prototyping-sdk/cdk-graph.Graph.AttributeReference , aws-prototyping-sdk/cdk-graph.Graph.BaseEntity , aws-prototyping-sdk/cdk-graph.Graph.CfnResourceNode , aws-prototyping-sdk/cdk-graph.Graph.Dependency , aws-prototyping-sdk/cdk-graph.Graph.Edge , aws-prototyping-sdk/cdk-graph.Graph.ImportReference , aws-prototyping-sdk/cdk-graph.Graph.NestedStackNode , aws-prototyping-sdk/cdk-graph.Graph.Node , aws-prototyping-sdk/cdk-graph.Graph.OutputNode , aws-prototyping-sdk/cdk-graph.Graph.ParameterNode , aws-prototyping-sdk/cdk-graph.Graph.Reference , aws-prototyping-sdk/cdk-graph.Graph.ResourceNode , aws-prototyping-sdk/cdk-graph.Graph.RootNode , aws-prototyping-sdk/cdk-graph.Graph.StackNode , aws-prototyping-sdk/cdk-graph.Graph.StageNode , aws-prototyping-sdk/cdk-graph.SerializedGraph.ISerializableEntity Interface for serializable graph entities.","title":"ISerializableEntity "},{"location":"typescript/cdk-graph/index.html#iserializablegraphstore","text":"Implemented By: aws-prototyping-sdk/cdk-graph.Graph.Store , aws-prototyping-sdk/cdk-graph.SerializedGraph.ISerializableGraphStore Interface for serializable graph store.","title":"ISerializableGraphStore "},{"location":"typescript/cdk-graph/index.html#iserializablenode","text":"Implemented By: aws-prototyping-sdk/cdk-graph.Graph.AppNode , aws-prototyping-sdk/cdk-graph.Graph.CfnResourceNode , aws-prototyping-sdk/cdk-graph.Graph.NestedStackNode , aws-prototyping-sdk/cdk-graph.Graph.Node , aws-prototyping-sdk/cdk-graph.Graph.OutputNode , aws-prototyping-sdk/cdk-graph.Graph.ParameterNode , aws-prototyping-sdk/cdk-graph.Graph.ResourceNode , aws-prototyping-sdk/cdk-graph.Graph.RootNode , aws-prototyping-sdk/cdk-graph.Graph.StackNode , aws-prototyping-sdk/cdk-graph.Graph.StageNode , aws-prototyping-sdk/cdk-graph.SerializedGraph.ISerializableNode Interface for serializable graph node entity.","title":"ISerializableNode "},{"location":"typescript/cdk-graph/index.html#istacknodeprops","text":"Extends: aws-prototyping-sdk/cdk-graph.Graph.ITypedNodeProps Implemented By: aws-prototyping-sdk/cdk-graph.Graph.INestedStackNodeProps , aws-prototyping-sdk/cdk-graph.Graph.IStackNodeProps { @link StackNode} props.","title":"IStackNodeProps "},{"location":"typescript/cdk-graph/index.html#istorecounts","text":"Implemented By: aws-prototyping-sdk/cdk-graph.Graph.IStoreCounts Interface for store counts.","title":"IStoreCounts "},{"location":"typescript/cdk-graph/index.html#itypededgeprops","text":"Extends: aws-prototyping-sdk/cdk-graph.Graph.IBaseEntityProps Implemented By: aws-prototyping-sdk/cdk-graph.Graph.IAttributeReferenceProps , aws-prototyping-sdk/cdk-graph.Graph.IEdgeProps , aws-prototyping-sdk/cdk-graph.Graph.IReferenceProps , aws-prototyping-sdk/cdk-graph.Graph.ITypedEdgeProps Base edge props agnostic to edge type. Used for extending per edge class with type specifics.","title":"ITypedEdgeProps "},{"location":"typescript/cdk-graph/index.html#itypednodeprops","text":"Extends: aws-prototyping-sdk/cdk-graph.Graph.IBaseEntityProps Implemented By: aws-prototyping-sdk/cdk-graph.Graph.ICfnResourceNodeProps , aws-prototyping-sdk/cdk-graph.Graph.INestedStackNodeProps , aws-prototyping-sdk/cdk-graph.Graph.INodeProps , aws-prototyping-sdk/cdk-graph.Graph.IOutputNodeProps , aws-prototyping-sdk/cdk-graph.Graph.IParameterNodeProps , aws-prototyping-sdk/cdk-graph.Graph.IResourceNodeProps , aws-prototyping-sdk/cdk-graph.Graph.IStackNodeProps , aws-prototyping-sdk/cdk-graph.Graph.ITypedNodeProps Base node props agnostic to node type. Used for extending per node class with type specifics.","title":"ITypedNodeProps "},{"location":"typescript/cdk-graph/index.html#enums","text":"","title":"Enums "},{"location":"typescript/cdk-graph/index.html#cdkconstructids","text":"Common cdk construct ids.","title":"CdkConstructIds "},{"location":"typescript/cdk-graph/index.html#cdkgraphartifacts","text":"CdkGraph core artifacts.","title":"CdkGraphArtifacts "},{"location":"typescript/cdk-graph/index.html#cfnattributesenum","text":"Common cfn attribute keys.","title":"CfnAttributesEnum "},{"location":"typescript/cdk-graph/index.html#constructinfofqnenum","text":"Commonly used cdk construct info fqn (jsii fully-qualified ids).","title":"ConstructInfoFqnEnum "},{"location":"typescript/cdk-graph/index.html#edgedirectionenum","text":"EdgeDirection specifies in which direction the edge is directed or if it is undirected.","title":"EdgeDirectionEnum "},{"location":"typescript/cdk-graph/index.html#edgetypeenum","text":"Edge types handles by the graph.","title":"EdgeTypeEnum "},{"location":"typescript/cdk-graph/index.html#filterpreset","text":"Filter presets.","title":"FilterPreset "},{"location":"typescript/cdk-graph/index.html#filterstrategy","text":"Filter strategy to apply to filter matches.","title":"FilterStrategy "},{"location":"typescript/cdk-graph/index.html#flagenum","text":"Graph flags.","title":"FlagEnum "},{"location":"typescript/cdk-graph/index.html#metadatatypeenum","text":"Common cdk metadata types.","title":"MetadataTypeEnum "},{"location":"typescript/cdk-graph/index.html#nodetypeenum","text":"Node types handled by the graph.","title":"NodeTypeEnum "},{"location":"typescript/cdk-graph/index.html#referencetypeenum","text":"Reference edge types.","title":"ReferenceTypeEnum "},{"location":"typescript/cdk-graph-plugin-diagram/index.html","text":"Experimental Warning This is packaged in a separate module while the API is being stabilized. This package is subject to non-backward compatible changes or removal in any future version. Breaking changes will be announced in the release notes. Whilst you may use this package, you may need to update your source code when upgrading to a newer version. Once we stabilize the module, it will be included into the stable aws-prototyping-sdk library. Experimental Usage To use this package, add a dependency on: @aws-prototyping-sdk/cdk-graph-plugin-diagram Diagram Plugin - Cdk Graph @aws-prototyping-sdk/cdk-graph-plugin-diagram \\ This plugin generates diagrams utilizing the cdk-graph framework. More comprehensive documentation to come as this package stabilizes. Disclaimer: This is the first cdk graph plugin, it is highly experimental , and subject to major refactors as we gain feedback from the community. BREAKING CHANGES (pre-release) - <= v0.14.8 : Only the last stage of a multi stage app will be rendered by default, which is commonly the production stage. Use the theme.rendering.stage config option to override this for each graph or in defaults. Quick Start // bin/app.ts // Must wrap cdk app with async IIFE function to enable async cdk-graph report ( async () => { const app = new App (); // ... add stacks, etc const graph = new CdkGraph ( app , { plugins : [ new CdkGraphDiagramPlugin ()], }); app . synth (); // async cdk-graph reporting hook await graph . report (); })() // => cdk.out/diagram.dot // => cdk.out/diagram.svg // => cdk.out/diagram.png This plugin currently only supports async report() generation following the above example. Make sure to wrap the cdk app with async IIFE . Supported Formats Format Status Extends Provider DOT - Graphviz SVG DOT Graphviz PNG SVG Graphviz Diagram Providers Provider Status Formats Graphviz DOT , SVG , PNG Drawio TBD: very early stage design and development Configuration See IPluginConfig interface for details, and look in unit tests for additional examples. By default the diagram plugin will generate a single \"compact\" preset diagram. It is capable of creating multiple diagrams each with different configurations, as well as defining the defaults to use. Defaults Option Changing the defaults option will modify default options for all diagrams, including the default diagram. See IDiagramConfigBase interface for plugin.defaults options. new CdkGraphDiagramPlugin ({ defaults : { theme : \"dark\" , filterPlan : { preset : FilterPreset.NONE , } } }); // => results in a single diagram that is \"verbose\" and \"dark\", since no resources are filtered Diagrams Option By modifying the diagrams option of the plugin you have full control over the rendering of diagrams, and can render multiple diagrams. See IDiagramConfig interface for diagram config options. new CdkGraphDiagramPlugin ({ diagrams : [ { name : \"diagram-1\" , title : \"Diagram 1 (dark + compact)\" , theme : \"dark\" , // the default `filterPlan: { preset: FilterPreset.COMPACT }` will still apply }, { name : \"diagram-2\" , title : \"Diagram 2 (dark + verbose)\" , theme : \"dark\" , filterPlan : { preset : FilterPreset.NONE , }, }, { name : \"diagram-3\" , title : \"Diagram 3 (no defaults)\" , ignoreDefaults : true , // default options will not be applied (theme, filterPlan, etc) }, ], }); Example Diagram Configs (expand below) The below examples define individual diagram configs in the diagrams options of the plugin as described above. new CdkGraphDiagramPlugin ({ diagrams : [ // ... insert diagram config(s) here - see below for examples ], }); Presets Preset: compact [ ](docs/examples/compact.png) { name : \"compact\" , title : \"Compact Diagram\" , filterPlan : { preset : FilterPreset.COMPACT , }, }, Preset: verbose [ ](docs/examples/verbose.png) { name : \"verbose\" , title : \"Verbose Diagram\" , format : DiagramFormat.PNG , ignoreDefaults : true , }, Focus Focus: hoist [ ](docs/examples/focus.png) { name : \"focus\" , title : \"Focus Lambda Diagram (non-extraneous)\" , filterPlan : { focus : ( store ) => store . getNode ( getConstructUUID ( app . stack . lambda )), preset : FilterPreset.NON_EXTRANEOUS , }, ignoreDefaults : true , }, Focus: no hoist [ ](docs/examples/focus-nohoist.png) { name : \"focus-nohoist\" , title : \"Focus WebServer Diagram (noHoist, verbose)\" , filterPlan : { focus : { node : ( store ) => store . getNode ( getConstructUUID ( app . stack . webServer )), noHoist : true , }, }, ignoreDefaults : true , }, Filters Filter: Include specific cfn resource types [ ](docs/examples/filter-cfntype-include.png) { name : \"includeCfnType\" , title : \"Include CfnType Diagram (filter)\" , filterPlan : { filters : [ Filters . includeCfnType ([ aws_arch . CfnSpec . ServiceResourceDictionary . EC2 . Instance , /AWS::Lambda::Function.*/ , \"AWS::IAM::Role\" , ]), Filters . compact (), ], }, }, Filter: Exclude specific cfn resource types [ ](docs/examples/filter-cfntype-exclude.png) { name : \"excludeCfnType\" , title : \"Exclude CfnType Diagram (filter)\" , filterPlan : { filters : [ Filters . excludeCfnType ([ /AWS::EC2::VPC.*/ , aws_arch . CfnSpec . ServiceResourceDictionary . IAM . Role , ]), Filters . compact (), ], }, }, Filter: Include specific graph node types [ ](docs/examples/filter-nodetype-include.png) { name : \"includeNodeType\" , title : \"Include NodeType Diagram (filter)\" , filterPlan : { filters : [ Filters . includeNodeType ([ NodeTypeEnum . STACK , NodeTypeEnum . RESOURCE , ]), Filters . compact (), ], }, }, Filter: Include specific graph node types [ ](docs/examples/filter-nodetype-include.png) { name : \"includeNodeType\" , title : \"Include NodeType Diagram (filter)\" , filterPlan : { filters : [ Filters . includeNodeType ([ NodeTypeEnum . STACK , NodeTypeEnum . RESOURCE , ]), Filters . compact (), ], }, }, Filter: Exclude specific graph node types [ ](docs/examples/filter-nodetype-exclude.png) { name : \"excludeNodeType\" , title : \"Exclude NodeType Diagram (filter)\" , filterPlan : { filters : [ Filters . excludeNodeType ([ NodeTypeEnum . NESTED_STACK , NodeTypeEnum . CFN_RESOURCE , NodeTypeEnum . OUTPUT , NodeTypeEnum . PARAMETER , ]), Filters . compact (), ], }, }, Themes Theme: Dark [ ](docs/examples/dark.png) { name : \"Dark\" , title : \"Dark Theme Diagram\" , theme : theme , }, Theme: Dark - render service icons [ ](docs/examples/dark-services.png) { name : \"dark-services\" , title : \"Dark Theme Custom Diagram\" , theme : { theme : theme , rendering : { resourceIconMin : GraphThemeRenderingIconTarget.SERVICE , resourceIconMax : GraphThemeRenderingIconTarget.CATEGORY , cfnResourceIconMin : GraphThemeRenderingIconTarget.DATA , cfnResourceIconMax : GraphThemeRenderingIconTarget.RESOURCE , }, }, }, Theme: Dark - verbose [ ](docs/examples/dark-verbose.png) { name : \"dark-verbose\" , title : \"Dark Theme Verbose Diagram\" , ignoreDefaults : true , theme : theme , }, Next Steps [ ] Battle test in the wild and get community feedback [ ] Improve image coverage and non-image node rendering [ ] Add drawio support [ ] Add common filter patterns and helpers [ ] Enable generating diagrams outside of synthesis process (maybe CLI) [ ] Implement interactive diagram, with potential for dynamic filtering and config generation [ ] Support using interactive diagram as config generator for other plugins (or as separate plugin that depends on this) Inspired by cdk-dia and cfn-dia with \u2764\ufe0f API Reference Structs DiagramOptions Options for diagrams. Initializer import { DiagramOptions } from '@aws-prototyping-sdk/cdk-graph-plugin-diagram' const diagramOptions : DiagramOptions = { ... } Properties Name Type Description title string No description. preset aws-prototyping-sdk/cdk-graph.FilterPreset No description. theme string | IGraphThemeConfigAlt No description. title Required public readonly title : string ; Type: string preset Optional public readonly preset : FilterPreset ; Type: aws-prototyping-sdk/cdk-graph.FilterPreset theme Optional public readonly theme : string | IGraphThemeConfigAlt ; Type: string | IGraphThemeConfigAlt Classes CdkGraphDiagramPlugin Implements: aws-prototyping-sdk/cdk-graph.ICdkGraphPlugin CdkGraphDiagramPlugin is a { @link ICdkGraphPlugin CdkGraph Plugin} implementation for generating diagram artifacts from the { @link CdkGraph} framework. Initializers import { CdkGraphDiagramPlugin } from '@aws-prototyping-sdk/cdk-graph-plugin-diagram' new CdkGraphDiagramPlugin ( config? : IPluginConfig ) Name Type Description config IPluginConfig No description. config Optional Type: IPluginConfig Methods Name Description getDiagramArtifact Get diagram artifact for a given name and format. getDiagramArtifact public getDiagramArtifact ( name : string , format : DiagramFormat ) : CdkGraphArtifact Get diagram artifact for a given name and format. name Required Type: string format Required Type: DiagramFormat Static Functions Name Description artifactFilename Get standardized artifact file name for diagram artifacts. artifactId Get standardized artifact id for diagram artifacts. artifactFilename import { CdkGraphDiagramPlugin } from '@aws-prototyping-sdk/cdk-graph-plugin-diagram' CdkGraphDiagramPlugin . artifactFilename ( name : string , format : DiagramFormat ) Get standardized artifact file name for diagram artifacts. name Required Type: string format Required Type: DiagramFormat artifactId import { CdkGraphDiagramPlugin } from '@aws-prototyping-sdk/cdk-graph-plugin-diagram' CdkGraphDiagramPlugin . artifactId ( name : string , format : DiagramFormat ) Get standardized artifact id for diagram artifacts. name Required Type: string format Required Type: DiagramFormat Properties Name Type Description config IPluginConfig Get diagram plugin config. id string Unique identifier for this plugin. version string Plugin version. defaultDotArtifact aws-prototyping-sdk/cdk-graph.CdkGraphArtifact Get default dot artifact. defaultPngArtifact aws-prototyping-sdk/cdk-graph.CdkGraphArtifact Get default PNG artifact. dependencies string[] List of plugins this plugin depends on, including optional semver version (eg: [\"foo\", \"bar@1.2\"]). bind aws-prototyping-sdk/cdk-graph.IGraphPluginBindCallback Binds the plugin to the CdkGraph instance. report aws-prototyping-sdk/cdk-graph.IGraphReportCallback Generate asynchronous reports based on the graph. config Required public readonly config : IPluginConfig ; Type: IPluginConfig Get diagram plugin config. id Required public readonly id : string ; Type: string Unique identifier for this plugin. version Required public readonly version : string ; Type: string Plugin version. defaultDotArtifact Optional public readonly defaultDotArtifact : CdkGraphArtifact ; Type: aws-prototyping-sdk/cdk-graph.CdkGraphArtifact Get default dot artifact. defaultPngArtifact Optional public readonly defaultPngArtifact : CdkGraphArtifact ; Type: aws-prototyping-sdk/cdk-graph.CdkGraphArtifact Get default PNG artifact. dependencies Optional public readonly dependencies : string []; Type: string[] List of plugins this plugin depends on, including optional semver version (eg: [\"foo\", \"bar@1.2\"]). bind Required public readonly bind : IGraphPluginBindCallback ; Type: aws-prototyping-sdk/cdk-graph.IGraphPluginBindCallback Binds the plugin to the CdkGraph instance. Enables plugins to receive base configs. report Optional public readonly report : IGraphReportCallback ; Type: aws-prototyping-sdk/cdk-graph.IGraphReportCallback Generate asynchronous reports based on the graph. This is not automatically called when synthesizing CDK. Developer must explicitly add await graphInstance.report() to the CDK bin or invoke this outside of the CDK synth. In either case, the plugin receives the in-memory graph interface when invoked, as the CdkGraph will deserialize the graph prior to invoking the plugin report. Constants Name Type Description ARTIFACT_NS string Namespace for artifacts of the diagram plugin. ID string Fixed id of the diagram plugin. VERSION string Current semantic version of the diagram plugin. ARTIFACT_NS Required public readonly ARTIFACT_NS : string ; Type: string Namespace for artifacts of the diagram plugin. ID Required public readonly ID : string ; Type: string Fixed id of the diagram plugin. VERSION Required public readonly VERSION : string ; Type: string Current semantic version of the diagram plugin. Protocols IDiagramConfig Extends: IDiagramConfigBase Implemented By: IDiagramConfig Diagram configuration definition. Properties Name Type Description filterPlan aws-prototyping-sdk/cdk-graph.IGraphFilterPlan Graph { @link IGraphFilterPlan Filter Plan} used to generate a unique diagram. format DiagramFormat | DiagramFormat [] The output format(s) to generated. theme string | IGraphThemeConfigAlt Config for graph theme. name string Name of the diagram. title string The title of the diagram. ignoreDefaults boolean Indicates if default diagram config is applied as defaults to this config. filterPlan Optional public readonly filterPlan : IGraphFilterPlan ; Type: aws-prototyping-sdk/cdk-graph.IGraphFilterPlan Graph { @link IGraphFilterPlan Filter Plan} used to generate a unique diagram. format Optional public readonly format : DiagramFormat | DiagramFormat []; Type: DiagramFormat | DiagramFormat [] Default: DiagramFormat.PNG - which will through extension also generate DiagramFormat.SVG and DiagramFormat.DOT The output format(s) to generated. theme Optional public readonly theme : string | IGraphThemeConfigAlt ; Type: string | IGraphThemeConfigAlt Config for graph theme. name Required public readonly name : string ; Type: string Name of the diagram. Used as the basename of the generated file(s) which gets the extension appended. title Required public readonly title : string ; Type: string The title of the diagram. ignoreDefaults Optional public readonly ignoreDefaults : boolean ; Type: boolean Default: false Indicates if default diagram config is applied as defaults to this config. IDiagramConfigBase Implemented By: IDiagramConfig , IDiagramConfigBase Base config to specific a unique diagram to be generated. Properties Name Type Description filterPlan aws-prototyping-sdk/cdk-graph.IGraphFilterPlan Graph { @link IGraphFilterPlan Filter Plan} used to generate a unique diagram. format DiagramFormat | DiagramFormat [] The output format(s) to generated. theme string | IGraphThemeConfigAlt Config for graph theme. filterPlan Optional public readonly filterPlan : IGraphFilterPlan ; Type: aws-prototyping-sdk/cdk-graph.IGraphFilterPlan Graph { @link IGraphFilterPlan Filter Plan} used to generate a unique diagram. format Optional public readonly format : DiagramFormat | DiagramFormat []; Type: DiagramFormat | DiagramFormat [] Default: DiagramFormat.PNG - which will through extension also generate DiagramFormat.SVG and DiagramFormat.DOT The output format(s) to generated. theme Optional public readonly theme : string | IGraphThemeConfigAlt ; Type: string | IGraphThemeConfigAlt Config for graph theme. IGraphThemeConfigAlt Implemented By: IGraphThemeConfigAlt GraphThemeConfigAlt is simplified definition of theme to apply. Properties Name Type Description rendering IGraphThemeRendering No description. theme string No description. rendering Optional public readonly rendering : IGraphThemeRendering ; Type: IGraphThemeRendering theme Optional public readonly theme : string ; Type: string IGraphThemeRendering Extends: IGraphThemeRenderingIconProps , IGraphThemeRenderingOptions Implemented By: IGraphThemeRendering Properties for defining the rendering options for the graph theme. Properties Name Type Description cfnResourceIconMax GraphThemeRenderingIconTarget Highest Graph.CfnResourceNode icon to render. cfnResourceIconMin GraphThemeRenderingIconTarget Lowest Graph.CfnResourceNode icon to render. resourceIconMax GraphThemeRenderingIconTarget Highest Graph.ResourceNode icon to render. resourceIconMin GraphThemeRenderingIconTarget Lowest Graph.ResourceNode icon to render. layout string Layout direction of the graph. stack string Specify regex pattern to match root stacks to render. stage string Specify which stage to render when multiple stages are available. unconstrainedCrossClusterEdges boolean Prevent cross-cluster edges from ranking nodes in layout. cfnResourceIconMax Optional public readonly cfnResourceIconMax : GraphThemeRenderingIconTarget ; Type: GraphThemeRenderingIconTarget Highest Graph.CfnResourceNode icon to render. cfnResourceIconMin Optional public readonly cfnResourceIconMin : GraphThemeRenderingIconTarget ; Type: GraphThemeRenderingIconTarget Lowest Graph.CfnResourceNode icon to render. resourceIconMax Optional public readonly resourceIconMax : GraphThemeRenderingIconTarget ; Type: GraphThemeRenderingIconTarget Highest Graph.ResourceNode icon to render. resourceIconMin Optional public readonly resourceIconMin : GraphThemeRenderingIconTarget ; Type: GraphThemeRenderingIconTarget Lowest Graph.ResourceNode icon to render. layout Optional public readonly layout : string ; Type: string Default: horizontal Layout direction of the graph. stack Optional public readonly stack : string ; Type: string Default: undefined Will render all stacks Specify regex pattern to match root stacks to render. stage Optional public readonly stage : string ; Type: string Default: last Specify which stage to render when multiple stages are available. Can be a preset value of \"first\", \"last\", and \"all\", or regex string of the stage(s) to render. unconstrainedCrossClusterEdges Optional public readonly unconstrainedCrossClusterEdges : boolean ; Type: boolean Default: false Prevent cross-cluster edges from ranking nodes in layout. https://graphviz.org/docs/attrs/constraint/ IGraphThemeRenderingIconProps Implemented By: IGraphThemeRendering , IGraphThemeRenderingIconProps Icon specific properties for configuring graph rendering of resource icons. Properties Name Type Description cfnResourceIconMax GraphThemeRenderingIconTarget Highest Graph.CfnResourceNode icon to render. cfnResourceIconMin GraphThemeRenderingIconTarget Lowest Graph.CfnResourceNode icon to render. resourceIconMax GraphThemeRenderingIconTarget Highest Graph.ResourceNode icon to render. resourceIconMin GraphThemeRenderingIconTarget Lowest Graph.ResourceNode icon to render. cfnResourceIconMax Optional public readonly cfnResourceIconMax : GraphThemeRenderingIconTarget ; Type: GraphThemeRenderingIconTarget Highest Graph.CfnResourceNode icon to render. cfnResourceIconMin Optional public readonly cfnResourceIconMin : GraphThemeRenderingIconTarget ; Type: GraphThemeRenderingIconTarget Lowest Graph.CfnResourceNode icon to render. resourceIconMax Optional public readonly resourceIconMax : GraphThemeRenderingIconTarget ; Type: GraphThemeRenderingIconTarget Highest Graph.ResourceNode icon to render. resourceIconMin Optional public readonly resourceIconMin : GraphThemeRenderingIconTarget ; Type: GraphThemeRenderingIconTarget Lowest Graph.ResourceNode icon to render. IGraphThemeRenderingOptions Implemented By: IGraphThemeRendering , IGraphThemeRenderingOptions Additional graph rendering options. Properties Name Type Description layout string Layout direction of the graph. stack string Specify regex pattern to match root stacks to render. stage string Specify which stage to render when multiple stages are available. unconstrainedCrossClusterEdges boolean Prevent cross-cluster edges from ranking nodes in layout. layout Optional public readonly layout : string ; Type: string Default: horizontal Layout direction of the graph. stack Optional public readonly stack : string ; Type: string Default: undefined Will render all stacks Specify regex pattern to match root stacks to render. stage Optional public readonly stage : string ; Type: string Default: last Specify which stage to render when multiple stages are available. Can be a preset value of \"first\", \"last\", and \"all\", or regex string of the stage(s) to render. unconstrainedCrossClusterEdges Optional public readonly unconstrainedCrossClusterEdges : boolean ; Type: boolean Default: false Prevent cross-cluster edges from ranking nodes in layout. https://graphviz.org/docs/attrs/constraint/ IPluginConfig Implemented By: IPluginConfig Plugin configuration for diagram plugin. Properties Name Type Description defaults IDiagramConfigBase Default configuration to apply to all diagrams. diagrams IDiagramConfig [] List of diagram configurations to generate diagrams. defaults Optional public readonly defaults : IDiagramConfigBase ; Type: IDiagramConfigBase Default configuration to apply to all diagrams. diagrams Optional public readonly diagrams : IDiagramConfig []; Type: IDiagramConfig [] List of diagram configurations to generate diagrams. Enums DiagramFormat Supported diagram formats that can be generated. Extended formats are automatically generated, for example if you generate \"png\" which extends \"svg\" which extends \"dot\", the resulting generated files will be all aforementioned. Members Name Description DOT Graphviz DOT Language . SVG SVG generated using dot-wasm from { @link DiagramFormat.DOT} file. PNG PNG generated using sharp from { @link DiagramFormat.SVG} file. DOT Graphviz DOT Language . SVG SVG generated using dot-wasm from { @link DiagramFormat.DOT} file. PNG PNG generated using sharp from { @link DiagramFormat.SVG} file. GraphThemeRenderingIconTarget Icon rendering target options for GraphTheme. Members Name Description DATA Data icon (eg: EC2 instance type icon, T2). RESOURCE Resource icon. GENERAL General icon. SERVICE Service icon. CATEGORY Category icon. DATA Data icon (eg: EC2 instance type icon, T2). Resolution precedence: data => resource => general => service => category RESOURCE Resource icon. Resolution precedence: resource => general => service => category GENERAL General icon. Resolution precedence: resource => general => service => category SERVICE Service icon. Resolution precedence: service => category CATEGORY Category icon. Resolution precedence: category","title":"Index"},{"location":"typescript/cdk-graph-plugin-diagram/index.html#diagram-plugin-cdk-graph","text":"@aws-prototyping-sdk/cdk-graph-plugin-diagram \\ This plugin generates diagrams utilizing the cdk-graph framework. More comprehensive documentation to come as this package stabilizes. Disclaimer: This is the first cdk graph plugin, it is highly experimental , and subject to major refactors as we gain feedback from the community. BREAKING CHANGES (pre-release) - <= v0.14.8 : Only the last stage of a multi stage app will be rendered by default, which is commonly the production stage. Use the theme.rendering.stage config option to override this for each graph or in defaults.","title":"Diagram Plugin - Cdk Graph"},{"location":"typescript/cdk-graph-plugin-diagram/index.html#quick-start","text":"// bin/app.ts // Must wrap cdk app with async IIFE function to enable async cdk-graph report ( async () => { const app = new App (); // ... add stacks, etc const graph = new CdkGraph ( app , { plugins : [ new CdkGraphDiagramPlugin ()], }); app . synth (); // async cdk-graph reporting hook await graph . report (); })() // => cdk.out/diagram.dot // => cdk.out/diagram.svg // => cdk.out/diagram.png This plugin currently only supports async report() generation following the above example. Make sure to wrap the cdk app with async IIFE .","title":"Quick Start"},{"location":"typescript/cdk-graph-plugin-diagram/index.html#supported-formats","text":"Format Status Extends Provider DOT - Graphviz SVG DOT Graphviz PNG SVG Graphviz","title":"Supported Formats"},{"location":"typescript/cdk-graph-plugin-diagram/index.html#diagram-providers","text":"Provider Status Formats Graphviz DOT , SVG , PNG Drawio TBD: very early stage design and development","title":"Diagram Providers"},{"location":"typescript/cdk-graph-plugin-diagram/index.html#configuration","text":"See IPluginConfig interface for details, and look in unit tests for additional examples. By default the diagram plugin will generate a single \"compact\" preset diagram. It is capable of creating multiple diagrams each with different configurations, as well as defining the defaults to use. Defaults Option Changing the defaults option will modify default options for all diagrams, including the default diagram. See IDiagramConfigBase interface for plugin.defaults options. new CdkGraphDiagramPlugin ({ defaults : { theme : \"dark\" , filterPlan : { preset : FilterPreset.NONE , } } }); // => results in a single diagram that is \"verbose\" and \"dark\", since no resources are filtered Diagrams Option By modifying the diagrams option of the plugin you have full control over the rendering of diagrams, and can render multiple diagrams. See IDiagramConfig interface for diagram config options. new CdkGraphDiagramPlugin ({ diagrams : [ { name : \"diagram-1\" , title : \"Diagram 1 (dark + compact)\" , theme : \"dark\" , // the default `filterPlan: { preset: FilterPreset.COMPACT }` will still apply }, { name : \"diagram-2\" , title : \"Diagram 2 (dark + verbose)\" , theme : \"dark\" , filterPlan : { preset : FilterPreset.NONE , }, }, { name : \"diagram-3\" , title : \"Diagram 3 (no defaults)\" , ignoreDefaults : true , // default options will not be applied (theme, filterPlan, etc) }, ], });","title":"Configuration"},{"location":"typescript/cdk-graph-plugin-diagram/index.html#next-steps","text":"[ ] Battle test in the wild and get community feedback [ ] Improve image coverage and non-image node rendering [ ] Add drawio support [ ] Add common filter patterns and helpers [ ] Enable generating diagrams outside of synthesis process (maybe CLI) [ ] Implement interactive diagram, with potential for dynamic filtering and config generation [ ] Support using interactive diagram as config generator for other plugins (or as separate plugin that depends on this) Inspired by cdk-dia and cfn-dia with \u2764\ufe0f","title":"Next Steps"},{"location":"typescript/cdk-graph-plugin-diagram/index.html#api-reference","text":"","title":"API Reference "},{"location":"typescript/cdk-graph-plugin-diagram/index.html#structs","text":"","title":"Structs "},{"location":"typescript/cdk-graph-plugin-diagram/index.html#diagramoptions","text":"Options for diagrams.","title":"DiagramOptions "},{"location":"typescript/cdk-graph-plugin-diagram/index.html#classes","text":"","title":"Classes "},{"location":"typescript/cdk-graph-plugin-diagram/index.html#cdkgraphdiagramplugin","text":"Implements: aws-prototyping-sdk/cdk-graph.ICdkGraphPlugin CdkGraphDiagramPlugin is a { @link ICdkGraphPlugin CdkGraph Plugin} implementation for generating diagram artifacts from the { @link CdkGraph} framework.","title":"CdkGraphDiagramPlugin "},{"location":"typescript/cdk-graph-plugin-diagram/index.html#protocols","text":"","title":"Protocols "},{"location":"typescript/cdk-graph-plugin-diagram/index.html#idiagramconfig","text":"Extends: IDiagramConfigBase Implemented By: IDiagramConfig Diagram configuration definition.","title":"IDiagramConfig "},{"location":"typescript/cdk-graph-plugin-diagram/index.html#idiagramconfigbase","text":"Implemented By: IDiagramConfig , IDiagramConfigBase Base config to specific a unique diagram to be generated.","title":"IDiagramConfigBase "},{"location":"typescript/cdk-graph-plugin-diagram/index.html#igraphthemeconfigalt","text":"Implemented By: IGraphThemeConfigAlt GraphThemeConfigAlt is simplified definition of theme to apply.","title":"IGraphThemeConfigAlt "},{"location":"typescript/cdk-graph-plugin-diagram/index.html#igraphthemerendering","text":"Extends: IGraphThemeRenderingIconProps , IGraphThemeRenderingOptions Implemented By: IGraphThemeRendering Properties for defining the rendering options for the graph theme.","title":"IGraphThemeRendering "},{"location":"typescript/cdk-graph-plugin-diagram/index.html#igraphthemerenderingiconprops","text":"Implemented By: IGraphThemeRendering , IGraphThemeRenderingIconProps Icon specific properties for configuring graph rendering of resource icons.","title":"IGraphThemeRenderingIconProps "},{"location":"typescript/cdk-graph-plugin-diagram/index.html#igraphthemerenderingoptions","text":"Implemented By: IGraphThemeRendering , IGraphThemeRenderingOptions Additional graph rendering options.","title":"IGraphThemeRenderingOptions "},{"location":"typescript/cdk-graph-plugin-diagram/index.html#ipluginconfig","text":"Implemented By: IPluginConfig Plugin configuration for diagram plugin.","title":"IPluginConfig "},{"location":"typescript/cdk-graph-plugin-diagram/index.html#enums","text":"","title":"Enums "},{"location":"typescript/cdk-graph-plugin-diagram/index.html#diagramformat","text":"Supported diagram formats that can be generated. Extended formats are automatically generated, for example if you generate \"png\" which extends \"svg\" which extends \"dot\", the resulting generated files will be all aforementioned.","title":"DiagramFormat "},{"location":"typescript/cdk-graph-plugin-diagram/index.html#graphthemerenderingicontarget","text":"Icon rendering target options for GraphTheme.","title":"GraphThemeRenderingIconTarget "},{"location":"typescript/cloudscape-react-ts-website/index.html","text":"Experimental Warning This is packaged in a separate module while the API is being stabilized. This package is subject to non-backward compatible changes or removal in any future version. Breaking changes will be announced in the release notes. Whilst you may use this package, you may need to update your source code when upgrading to a newer version. Once we stabilize the module, it will be included into the stable aws-prototyping-sdk library. Experimental Usage To use this package, add a dependency on: @aws-prototyping-sdk/cloudscape-react-ts-website Getting started To create a new Cloudscape React Typescript Project, there are a couple of options: Via Projen CLI npx projen new --from @aws-prototyping-sdk/cloudscape-react-ts-website cloudscape-react-ts-website [--application-name <your-app>] Programmatically new CloudscapeReactTsWebsiteProject ({ defaultReleaseBranch : \"mainline\" , name : \"<name-of-package>\" , applicationName : \"<name-of-app>\" , }); Running your synthesized Application To run your synthesized application locally, run npx projen dev . Developer Notes To enable Cognito auth, ensure you have a runtime-config.json file in the root of your deployed project which at least contains the following: { \"region\" : \"<aws-region>\" , \"identityPoolId\" : \"<identity-pool-id>\" , \"userPoolId\" : \"<user-pool-id>\" , \"userPoolWebClientId\" : \"<user-pool-web-client-id>\" } The easiest way to get this set up is to use the static-website + identity packages to deploy your website. An example of how to do this is as follows: const userIdentity = new UserIdentity ( this , 'UserIdentity' ); new StaticWebsite ( this , 'StaticWebsite' , { websiteContentPath : '<relative>/<path>/<to>/<built>/<website>' , runtimeOptions : { jsonPayload : { region : Stack.of ( this ). region , identityPoolId : userIdentity.identityPool.identityPoolId , userPoolId : userIdentity.userPool?.userPoolId , userPoolWebClientId : userIdentity.userPoolClient?.userPoolClientId , } }, }); For local development, you will need to copy the generated runtime-config.json file into your /public directory. An example on how to do this is as follows: curl https://dxxxxxxxxxx.cloudfront.net/runtime-config.json > public/runtime-config.json API Reference Structs CloudscapeReactTsWebsiteProjectOptions Configuration options for the CloudscapeReactTsWebsiteProject. Initializer import { CloudscapeReactTsWebsiteProjectOptions } from '@aws-prototyping-sdk/cloudscape-react-ts-website' const cloudscapeReactTsWebsiteProjectOptions : CloudscapeReactTsWebsiteProjectOptions = { ... } Properties Name Type Description name string This is the name of your project. commitGenerated boolean Whether to commit the managed files by default. gitOptions projen.GitOptions Configuration options for git. logging projen.LoggerOptions Configure logging options such as verbosity. outdir string The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projenCommand string The shell command to use in order to run the projen CLI. projenrcJson boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions projen.ProjenrcOptions Options for .projenrc.json. renovatebot boolean Use renovatebot to handle dependency upgrades. renovatebotOptions projen.RenovatebotOptions Options for renovatebot. autoApproveOptions projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge boolean Enable automatic merging on GitHub. autoMergeOptions projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber boolean Add a clobber task which resets the repo to origin. devContainer boolean Add a VSCode development environment (used for GitHub Codespaces). github boolean Enable GitHub integration. githubOptions projen.github.GitHubOptions Options for GitHub integration. gitpod boolean Add a Gitpod development environment. mergify boolean Whether mergify should be enabled on this repository or not. mergifyOptions projen.github.MergifyOptions Options for mergify. projectType projen.ProjectType Which type of project this is (library/app). projenCredentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret string The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale boolean Auto-close of stale issues and pull request. staleOptions projen.github.StaleOptions Auto-close stale issues and pull requests. vscode boolean Enable VSCode integration. allowLibraryDependencies boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail string Author's e-mail. authorName string Author's name. authorOrganization boolean Is the author an organization. authorUrl string Author's URL / Website. autoDetectBin boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin {[ key: string ]: string} Binary programs vended with your module. bugsEmail string The email address to which issues should be reported. bugsUrl string The url to your project's issue tracker. bundledDeps string[] List of dependencies to bundle into this module. codeArtifactOptions projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps string[] Runtime dependencies of this module. description string The description is just a string that helps people understand the purpose of the package. devDeps string[] Build dependencies for this module. entrypoint string Module entrypoint ( main in package.json ). homepage string Package's Homepage / Website. keywords string[] Keywords to include in package.json . license string License's SPDX identifier. licensed boolean Indicates if a license should be added. maxNodeVersion string Minimum node.js version to require via engines (inclusive). minNodeVersion string Minimum Node.js version to require via package.json engines (inclusive). npmAccess projen.javascript.NpmAccess Access level of the npm package. npmRegistry string The host name of the npm registry to publish to. npmRegistryUrl string The base URL of the npm package registry. npmTokenSecret string GitHub secret which contains the NPM token to use when publishing packages. packageManager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName string The \"name\" in package.json. peerDependencyOptions projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps string[] Peer dependencies for this module. pnpmVersion string The version of PNPM to use if using PNPM as a package manager. repository string The repository is the location where the actual code for your package lives. repositoryDirectory string If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions projen.javascript.ScopedPackagesOptions[] Options for privately hosted scoped packages. scripts {[ key: string ]: string} npm scripts to include. stability string Package's Stability. jsiiReleaseVersion string Version requirement of publib which is used to publish modules to npm. majorVersion number Major version to release from the default branch. minMajorVersion number Minimal Major version to release. npmDistTag string The npmDistTag to use when publishing from the default branch. postBuildSteps projen.github.workflows.JobStep[] Steps to execute after build as part of the release workflow. prerelease string Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches {[ key: string ]: projen.release.BranchOptions} Defines additional release branches. releaseEveryCommit boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel string The label to apply to issues indicating publish failures. releaseSchedule string CRON schedule to trigger new releases. releaseTagPrefix string Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName string The name of the default release workflow. releaseWorkflowSetupSteps projen.github.workflows.JobStep[] A set of workflow steps to execute in order to setup the workflow container. versionrcOptions {[ key: string ]: any} Custom configuration used when creating changelog with standard-version package. workflowContainerImage string Container image to use for GitHub workflows. workflowRunsOn string[] Github Runner selection labels. defaultReleaseBranch string The name of the main release branch. artifactsDirectory string A directory which will contain build artifacts. autoApproveUpgrades boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers projen.github.workflows.Triggers Build workflow triggers. bundlerOptions projen.javascript.BundlerOptions Options for Bundler . codeCov boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret string Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner string License copyright owner. copyrightPeriod string The copyright years to put in the LICENSE file. dependabot boolean Use dependabot to handle dependency upgrades. dependabotOptions projen.github.DependabotOptions Options for dependabot. depsUpgrade boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore string[] Additional entries to .gitignore. jest boolean Setup jest unit tests. jestOptions projen.javascript.JestOptions Jest options. mutableBuild boolean Automatically update files modified during builds to pull-request branches. npmignore string[] Additional entries to .npmignore. npmignoreEnabled boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier boolean Setup prettier. prettierOptions projen.javascript.PrettierOptions Prettier options. projenDevDependency boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions projen.javascript.ProjenrcOptions Options for .projenrc.js. projenVersion string Version of projen to install. pullRequestTemplate boolean Include a GitHub pull request template. pullRequestTemplateContents string[] The contents of the pull request template. release boolean Add release management to this project. releaseToNpm boolean Automatically release to npm when new versions are introduced. releaseWorkflow boolean DEPRECATED: renamed to release . workflowBootstrapSteps projen.github.workflows.JobStep[] Workflow steps to use in order to bootstrap this repo. workflowGitIdentity projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion string The node version to use in GitHub workflows. disableTsconfig boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen boolean Docgen by Typedoc. docsDirectory string Docs directory. entrypointTypes string The .d.ts file that includes the type declarations for this module. eslint boolean Setup eslint. eslintOptions projen.javascript.EslintOptions Eslint options. libdir string Typescript artifacts output directory. projenrcTs boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir string Typescript sources directory. testdir string Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile string The name of the development tsconfig.json file. typescriptVersion string TypeScript version to use. rewire {[ key: string ]: any} Rewire webpack configuration. applicationName string Name of the application name. publicDir string Public directory. name Required public readonly name : string ; Type: string Default: $BASEDIR This is the name of your project. commitGenerated Optional public readonly commitGenerated : boolean ; Type: boolean Default: true Whether to commit the managed files by default. gitOptions Optional public readonly gitOptions : GitOptions ; Type: projen.GitOptions Configuration options for git. logging Optional public readonly logging : LoggerOptions ; Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public readonly outdir : string ; Type: string Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public readonly parent : Project ; Type: projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public readonly projenCommand : string ; Type: string Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public readonly projenrcJson : boolean ; Type: boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public readonly projenrcJsonOptions : ProjenrcOptions ; Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional public readonly renovatebot : boolean ; Type: boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional public readonly renovatebotOptions : RenovatebotOptions ; Type: projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional public readonly autoApproveOptions : AutoApproveOptions ; Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional public readonly autoMerge : boolean ; Type: boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional public readonly autoMergeOptions : AutoMergeOptions ; Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional public readonly clobber : boolean ; Type: boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public readonly devContainer : boolean ; Type: boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public readonly github : boolean ; Type: boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public readonly githubOptions : GitHubOptions ; Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public readonly gitpod : boolean ; Type: boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public readonly mergify : boolean ; Type: boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public readonly mergifyOptions : MergifyOptions ; Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public readonly projectType : ProjectType ; Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional public readonly projenCredentials : GithubCredentials ; Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials public readonly projenTokenSecret : string ; Type: string Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public readonly readme : SampleReadmeProps ; Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional public readonly stale : boolean ; Type: boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public readonly staleOptions : StaleOptions ; Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public readonly vscode : boolean ; Type: boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allowLibraryDependencies Optional public readonly allowLibraryDependencies : boolean ; Type: boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. authorEmail Optional public readonly authorEmail : string ; Type: string Author's e-mail. authorName Optional public readonly authorName : string ; Type: string Author's name. authorOrganization Optional public readonly authorOrganization : boolean ; Type: boolean Is the author an organization. authorUrl Optional public readonly authorUrl : string ; Type: string Author's URL / Website. autoDetectBin Optional public readonly autoDetectBin : boolean ; Type: boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional public readonly bin : {[ key : string ] : string }; Type: {[ key: string ]: string} Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugsEmail Optional public readonly bugsEmail : string ; Type: string The email address to which issues should be reported. bugsUrl Optional public readonly bugsUrl : string ; Type: string The url to your project's issue tracker. bundledDeps Optional public readonly bundledDeps : string []; Type: string[] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. codeArtifactOptions Optional public readonly codeArtifactOptions : CodeArtifactOptions ; Type: projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional public readonly deps : string []; Type: string[] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'express' , 'lodash' , 'foo@^2' ] description Optional public readonly description : string ; Type: string The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description devDeps Optional public readonly devDeps : string []; Type: string[] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'typescript' , '@types/express' ] entrypoint Optional public readonly entrypoint : string ; Type: string Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional public readonly homepage : string ; Type: string Package's Homepage / Website. keywords Optional public readonly keywords : string []; Type: string[] Keywords to include in package.json . license Optional public readonly license : string ; Type: string Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional public readonly licensed : boolean ; Type: boolean Default: true Indicates if a license should be added. maxNodeVersion Optional public readonly maxNodeVersion : string ; Type: string Default: no max Minimum node.js version to require via engines (inclusive). minNodeVersion Optional public readonly minNodeVersion : string ; Type: string Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npmAccess Optional public readonly npmAccess : NpmAccess ; Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npmRegistry ~~ Optional Deprecated: use npmRegistryUrl instead public readonly npmRegistry : string ; Type: string The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npmRegistryUrl Optional public readonly npmRegistryUrl : string ; Type: string Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npmTokenSecret Optional public readonly npmTokenSecret : string ; Type: string Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. packageManager Optional public readonly packageManager : NodePackageManager ; Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. packageName Optional public readonly packageName : string ; Type: string Default: defaults to project name The \"name\" in package.json. peerDependencyOptions Optional public readonly peerDependencyOptions : PeerDependencyOptions ; Type: projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps Optional public readonly peerDeps : string []; Type: string[] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. pnpmVersion Optional public readonly pnpmVersion : string ; Type: string Default: \"7\" The version of PNPM to use if using PNPM as a package manager. repository Optional public readonly repository : string ; Type: string The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repositoryDirectory Optional public readonly repositoryDirectory : string ; Type: string If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions Optional public readonly scopedPackagesOptions : ScopedPackagesOptions []; Type: projen.javascript.ScopedPackagesOptions[] Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional public readonly scripts : {[ key : string ] : string }; Type: {[ key: string ]: string} Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional public readonly stability : string ; Type: string Package's Stability. jsiiReleaseVersion Optional public readonly jsiiReleaseVersion : string ; Type: string Default: \"latest\" Version requirement of publib which is used to publish modules to npm. majorVersion Optional public readonly majorVersion : number ; Type: number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. minMajorVersion Optional public readonly minMajorVersion : number ; Type: number Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npmDistTag Optional public readonly npmDistTag : string ; Type: string Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. postBuildSteps Optional public readonly postBuildSteps : JobStep []; Type: projen.github.workflows.JobStep[] Default: [] Steps to execute after build as part of the release workflow. prerelease Optional public readonly prerelease : string ; Type: string Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun Optional public readonly publishDryRun : boolean ; Type: boolean Default: false Instead of actually publishing to package managers, just print the publishing command. publishTasks Optional public readonly publishTasks : boolean ; Type: boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. releaseBranches Optional public readonly releaseBranches : {[ key : string ] : BranchOptions }; Type: {[ key: string ]: projen.release.BranchOptions} Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ releaseEveryCommit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead public readonly releaseEveryCommit : boolean ; Type: boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue Optional public readonly releaseFailureIssue : boolean ; Type: boolean Default: false Create a github issue on every failed publishing task. releaseFailureIssueLabel Optional public readonly releaseFailureIssueLabel : string ; Type: string Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ releaseSchedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead public readonly releaseSchedule : string ; Type: string Default: no scheduled releases CRON schedule to trigger new releases. releaseTagPrefix Optional public readonly releaseTagPrefix : string ; Type: string Default: \"v\" Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. releaseTrigger Optional public readonly releaseTrigger : ReleaseTrigger ; Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. releaseWorkflowName Optional public readonly releaseWorkflowName : string ; Type: string Default: \"Release\" The name of the default release workflow. releaseWorkflowSetupSteps Optional public readonly releaseWorkflowSetupSteps : JobStep []; Type: projen.github.workflows.JobStep[] A set of workflow steps to execute in order to setup the workflow container. versionrcOptions Optional public readonly versionrcOptions : {[ key : string ] : any }; Type: {[ key: string ]: any} Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflowContainerImage Optional public readonly workflowContainerImage : string ; Type: string Default: default image Container image to use for GitHub workflows. workflowRunsOn Optional public readonly workflowRunsOn : string []; Type: string[] Default: [\"ubuntu-latest\"] Github Runner selection labels. defaultReleaseBranch Required public readonly defaultReleaseBranch : string ; Type: string Default: \"main\" The name of the main release branch. artifactsDirectory Optional public readonly artifactsDirectory : string ; Type: string Default: \"dist\" A directory which will contain build artifacts. autoApproveUpgrades Optional public readonly autoApproveUpgrades : boolean ; Type: boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. buildWorkflow Optional public readonly buildWorkflow : boolean ; Type: boolean Default: true if not a subproject Define a GitHub workflow for building PRs. buildWorkflowTriggers Optional public readonly buildWorkflowTriggers : Triggers ; Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundlerOptions Optional public readonly bundlerOptions : BundlerOptions ; Type: projen.javascript.BundlerOptions Options for Bundler . codeCov Optional public readonly codeCov : boolean ; Type: boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret Optional public readonly codeCovTokenSecret : string ; Type: string Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner Optional public readonly copyrightOwner : string ; Type: string Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyrightPeriod Optional public readonly copyrightPeriod : string ; Type: string Default: current year The copyright years to put in the LICENSE file. dependabot Optional public readonly dependabot : boolean ; Type: boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabotOptions Optional public readonly dependabotOptions : DependabotOptions ; Type: projen.github.DependabotOptions Default: default options Options for dependabot. depsUpgrade Optional public readonly depsUpgrade : boolean ; Type: boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . depsUpgradeOptions Optional public readonly depsUpgradeOptions : UpgradeDependenciesOptions ; Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional public readonly gitignore : string []; Type: string[] Additional entries to .gitignore. jest Optional public readonly jest : boolean ; Type: boolean Default: true Setup jest unit tests. jestOptions Optional public readonly jestOptions : JestOptions ; Type: projen.javascript.JestOptions Default: default options Jest options. mutableBuild Optional public readonly mutableBuild : boolean ; Type: boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore public readonly npmignore : string []; Type: string[] Additional entries to .npmignore. npmignoreEnabled Optional public readonly npmignoreEnabled : boolean ; Type: boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional public readonly package : boolean ; Type: boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional public readonly prettier : boolean ; Type: boolean Default: false Setup prettier. prettierOptions Optional public readonly prettierOptions : PrettierOptions ; Type: projen.javascript.PrettierOptions Default: default options Prettier options. projenDevDependency Optional public readonly projenDevDependency : boolean ; Type: boolean Default: true Indicates of \"projen\" should be installed as a devDependency. projenrcJs Optional public readonly projenrcJs : boolean ; Type: boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions Optional public readonly projenrcJsOptions : ProjenrcOptions ; Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projenVersion Optional public readonly projenVersion : string ; Type: string Default: Defaults to the latest version. Version of projen to install. pullRequestTemplate Optional public readonly pullRequestTemplate : boolean ; Type: boolean Default: true Include a GitHub pull request template. pullRequestTemplateContents Optional public readonly pullRequestTemplateContents : string []; Type: string[] Default: default content The contents of the pull request template. release Optional public readonly release : boolean ; Type: boolean Default: true (false for subprojects) Add release management to this project. releaseToNpm Optional public readonly releaseToNpm : boolean ; Type: boolean Default: false Automatically release to npm when new versions are introduced. ~~ releaseWorkflow ~~ Optional Deprecated: see release . public readonly releaseWorkflow : boolean ; Type: boolean Default: true if not a subproject DEPRECATED: renamed to release . workflowBootstrapSteps Optional public readonly workflowBootstrapSteps : JobStep []; Type: projen.github.workflows.JobStep[] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflowGitIdentity Optional public readonly workflowGitIdentity : GitIdentity ; Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflowNodeVersion Optional public readonly workflowNodeVersion : string ; Type: string Default: same as minNodeVersion The node version to use in GitHub workflows. disableTsconfig Optional public readonly disableTsconfig : boolean ; Type: boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional public readonly docgen : boolean ; Type: boolean Default: false Docgen by Typedoc. docsDirectory Optional public readonly docsDirectory : string ; Type: string Default: \"docs\" Docs directory. entrypointTypes Optional public readonly entrypointTypes : string ; Type: string Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional public readonly eslint : boolean ; Type: boolean Default: true Setup eslint. eslintOptions Optional public readonly eslintOptions : EslintOptions ; Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional public readonly libdir : string ; Type: string Default: \"lib\" Typescript artifacts output directory. projenrcTs Optional public readonly projenrcTs : boolean ; Type: boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions Optional public readonly projenrcTsOptions : ProjenrcOptions ; Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode Optional public readonly sampleCode : boolean ; Type: boolean Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional public readonly srcdir : string ; Type: string Default: \"src\" Typescript sources directory. testdir Optional public readonly testdir : string ; Type: string Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional public readonly tsconfig : TypescriptConfigOptions ; Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfigDev Optional public readonly tsconfigDev : TypescriptConfigOptions ; Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile Optional public readonly tsconfigDevFile : string ; Type: string Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescriptVersion Optional public readonly typescriptVersion : string ; Type: string Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). rewire Optional public readonly rewire : {[ key : string ] : any }; Type: {[ key: string ]: any} Default: No rewired config. Rewire webpack configuration. Use this property to override webpack configuration properties provided by create-react-app, without needing to eject. This property will create a config-overrides.js file in your root directory, which will contain the desired rewiring code. To override the configuration, you can provide simple key value pairs. Keys take the form of js code directives that traverse to the desired property. Values should be JSON serializable objects. For example, the following config: rewire : { \"module.unknownContextCritical\" : false } Will translate to the following config-overrides.js file: module . exports = function override ( config , env ) { config . module . unknownContextCritical = false ; } timarney/react-app-rewired applicationName Optional public readonly applicationName : string ; Type: string Default: \"Sample App\" Name of the application name. publicDir Optional public readonly publicDir : string ; Type: string Default: \"public\" Public directory. Classes CloudscapeReactTsWebsiteProject Synthesizes a Cloudscape React Typescript Website Project. Initializers import { CloudscapeReactTsWebsiteProject } from '@aws-prototyping-sdk/cloudscape-react-ts-website' new CloudscapeReactTsWebsiteProject ( options : CloudscapeReactTsWebsiteProjectOptions ) Name Type Description options CloudscapeReactTsWebsiteProjectOptions No description. options Required Type: CloudscapeReactTsWebsiteProjectOptions Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. tryRemoveFile Finds a file at the specified relative path within this project and removes it. addBins No description. addBundledDeps Defines bundled dependencies. addCompileCommand DEPRECATED. addDeps Defines normal dependencies. addDevDeps Defines development/test dependencies. addFields Directly set fields in package.json . addKeywords Adds keywords to package.json (deduplicated). addPeerDeps Defines peer dependencies. addTestCommand DEPRECATED. hasScript Indicates if a script by the name name is defined. removeScript Removes the npm script (always successful). renderWorkflowSetup Returns the set of workflow steps which should be executed to bootstrap a workflow. setScript Replaces the contents of an npm package.json script. addExcludeFromCleanup public addExcludeFromCleanup ( globs : string ) : void Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: string The glob patterns to match. addGitIgnore public addGitIgnore ( pattern : string ) : void Adds a .gitignore pattern. pattern Required Type: string The glob pattern to ignore. addPackageIgnore public addPackageIgnore ( pattern : string ) : void Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . pattern Required Type: string addTask public addTask ( name : string , props? : TaskOptions ) : Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: string The task name to add. props Optional Type: projen.TaskOptions Task properties. ~~ addTip ~~ public addTip ( message : string ) : void Prints a \"tip\" message during synthesis. message Required Type: string The message. annotateGenerated public annotateGenerated ( glob : string ) : void Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: string the glob pattern to match (could be a file path). postSynthesize public postSynthesize () : void Called after all components are synthesized. Order is not guaranteed. preSynthesize public preSynthesize () : void Called before all components are synthesized. removeTask public removeTask ( name : string ) : Task Removes a task from a project. name Required Type: string The name of the task to remove. runTaskCommand public runTaskCommand ( task : Task ) : string Returns the shell command to execute in order to run a task. This will typically be npx projen TASK . task Required Type: projen.Task The task for which the command is required. synth public synth () : void Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" tryFindFile public tryFindFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public tryFindJsonFile ( filePath : string ) : JsonFile Finds a json file by name. filePath Required Type: string The file path. tryFindObjectFile public tryFindObjectFile ( filePath : string ) : ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: string The file path. tryRemoveFile public tryRemoveFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and removes it. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. addBins public addBins ( bins : {[ key : string ] : string }) : void bins Required Type: {[ key: string ]: string} addBundledDeps public addBundledDeps ( deps : string ) : void Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json . deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addCompileCommand ~~ public addCompileCommand ( commands : string ) : void DEPRECATED. commands Required Type: string addDeps public addDeps ( deps : string ) : void Defines normal dependencies. deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addDevDeps public addDevDeps ( deps : string ) : void Defines development/test dependencies. deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addFields public addFields ( fields : {[ key : string ] : any }) : void Directly set fields in package.json . fields Required Type: {[ key: string ]: any} The fields to set. addKeywords public addKeywords ( keywords : string ) : void Adds keywords to package.json (deduplicated). keywords Required Type: string The keywords to add. addPeerDeps public addPeerDeps ( deps : string ) : void Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers. deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addTestCommand ~~ public addTestCommand ( commands : string ) : void DEPRECATED. commands Required Type: string hasScript public hasScript ( name : string ) : boolean Indicates if a script by the name name is defined. name Required Type: string The name of the script. removeScript public removeScript ( name : string ) : void Removes the npm script (always successful). name Required Type: string The name of the script. renderWorkflowSetup public renderWorkflowSetup ( options? : RenderWorkflowSetupOptions ) : JobStep [] Returns the set of workflow steps which should be executed to bootstrap a workflow. options Optional Type: projen.javascript.RenderWorkflowSetupOptions Options. setScript public setScript ( name : string , command : string ) : void Replaces the contents of an npm package.json script. name Required Type: string The script name. command Required Type: string The command to execute. Properties Name Type Description buildTask projen.Task No description. commitGenerated boolean Whether to commit the managed files by default. compileTask projen.Task No description. components projen.Component[] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected boolean Whether or not the project is being ejected. files projen.FileBase[] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name string Project name. outdir string Absolute output directory of this project. packageTask projen.Task No description. postCompileTask projen.Task No description. preCompileTask projen.Task No description. projectBuild projen.ProjectBuild Manages the build process of the project. projenCommand string The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. testTask projen.Task No description. defaultTask projen.Task This is the \"default\" task, the one that executes \"projen\". initProject projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. projectType projen.ProjectType No description. autoApprove projen.github.AutoApprove Auto approve set up for this project. devContainer projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. allowLibraryDependencies boolean No description. artifactsDirectory string The build output directory. artifactsJavascriptDirectory string The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler projen.javascript.Bundler No description. entrypoint string No description. manifest any No description. package projen.javascript.NodePackage API for managing the node package. packageManager projen.javascript.NodePackageManager The package manager to use. runScriptCommand string The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. buildWorkflow projen.build.BuildWorkflow The PR build GitHub workflow. buildWorkflowJobId string The job ID of the build workflow. jest projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion string Maximum node version required by this package. minNodeVersion string Minimum node.js version required by this package. npmignore projen.IgnoreFile The .npmignore file. prettier projen.javascript.Prettier No description. publisher projen.release.Publisher Package publisher. release projen.release.Release Release management. upgradeWorkflow projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory string No description. libdir string The directory in which compiled .js files reside. srcdir string The directory in which source files reside. testdir string The directory in which tests reside. tsconfigDev projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask projen.Task The \"watch\" task. docgen boolean No description. eslint projen.javascript.Eslint No description. tsconfig projen.javascript.TypescriptConfig No description. tsconfigEslint projen.javascript.TypescriptConfig No description. applicationName string No description. publicDir string No description. buildTask Required public readonly buildTask : Task ; Type: projen.Task commitGenerated Required public readonly commitGenerated : boolean ; Type: boolean Whether to commit the managed files by default. compileTask Required public readonly compileTask : Task ; Type: projen.Task components Required public readonly components : Component []; Type: projen.Component[] Returns all the components within this project. deps Required public readonly deps : Dependencies ; Type: projen.Dependencies Project dependencies. ejected Required public readonly ejected : boolean ; Type: boolean Whether or not the project is being ejected. files Required public readonly files : FileBase []; Type: projen.FileBase[] All files in this project. gitattributes Required public readonly gitattributes : GitAttributesFile ; Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public readonly gitignore : IgnoreFile ; Type: projen.IgnoreFile .gitignore. logger Required public readonly logger : Logger ; Type: projen.Logger Logging utilities. name Required public readonly name : string ; Type: string Project name. outdir Required public readonly outdir : string ; Type: string Absolute output directory of this project. packageTask Required public readonly packageTask : Task ; Type: projen.Task postCompileTask Required public readonly postCompileTask : Task ; Type: projen.Task preCompileTask Required public readonly preCompileTask : Task ; Type: projen.Task projectBuild Required public readonly projectBuild : ProjectBuild ; Type: projen.ProjectBuild Manages the build process of the project. projenCommand Required public readonly projenCommand : string ; Type: string The command to use in order to run the projen CLI. root Required public readonly root : Project ; Type: projen.Project The root project. tasks Required public readonly tasks : Tasks ; Type: projen.Tasks Project tasks. testTask Required public readonly testTask : Task ; Type: projen.Task defaultTask Optional public readonly defaultTask : Task ; Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public readonly initProject : InitProject ; Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public readonly parent : Project ; Type: projen.Project A parent project. If undefined, this is the root project. projectType Required public readonly projectType : ProjectType ; Type: projen.ProjectType autoApprove Optional public readonly autoApprove : AutoApprove ; Type: projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public readonly devContainer : DevContainer ; Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public readonly github : GitHub ; Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public readonly gitpod : Gitpod ; Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public readonly vscode : VsCode ; Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. ~~ allowLibraryDependencies ~~ Required Deprecated: use package.allowLibraryDependencies public readonly allowLibraryDependencies : boolean ; Type: boolean artifactsDirectory Required public readonly artifactsDirectory : string ; Type: string The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg . artifactsJavascriptDirectory Required public readonly artifactsJavascriptDirectory : string ; Type: string The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler Required public readonly bundler : Bundler ; Type: projen.javascript.Bundler ~~ entrypoint ~~ Required Deprecated: use package.entrypoint public readonly entrypoint : string ; Type: string ~~ manifest ~~ Required Deprecated: use package.addField(x, y) public readonly manifest : any ; Type: any package Required public readonly package : NodePackage ; Type: projen.javascript.NodePackage API for managing the node package. ~~ packageManager ~~ Required Deprecated: use package.packageManager public readonly packageManager : NodePackageManager ; Type: projen.javascript.NodePackageManager The package manager to use. runScriptCommand Required public readonly runScriptCommand : string ; Type: string The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge Optional public readonly autoMerge : AutoMerge ; Type: projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. buildWorkflow Optional public readonly buildWorkflow : BuildWorkflow ; Type: projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled. buildWorkflowJobId Optional public readonly buildWorkflowJobId : string ; Type: string The job ID of the build workflow. jest Optional public readonly jest : Jest ; Type: projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion Optional public readonly maxNodeVersion : string ; Type: string Maximum node version required by this package. minNodeVersion Optional public readonly minNodeVersion : string ; Type: string Minimum node.js version required by this package. npmignore Optional public readonly npmignore : IgnoreFile ; Type: projen.IgnoreFile The .npmignore file. prettier Optional public readonly prettier : Prettier ; Type: projen.javascript.Prettier ~~ publisher ~~ Optional Deprecated: use release.publisher . public readonly publisher : Publisher ; Type: projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow. release Optional public readonly release : Release ; Type: projen.release.Release Release management. upgradeWorkflow Optional public readonly upgradeWorkflow : UpgradeDependencies ; Type: projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory Required public readonly docsDirectory : string ; Type: string libdir Required public readonly libdir : string ; Type: string The directory in which compiled .js files reside. srcdir Required public readonly srcdir : string ; Type: string The directory in which source files reside. testdir Required public readonly testdir : string ; Type: string The directory in which tests reside. tsconfigDev Required public readonly tsconfigDev : TypescriptConfig ; Type: projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask Required public readonly watchTask : Task ; Type: projen.Task The \"watch\" task. docgen Optional public readonly docgen : boolean ; Type: boolean eslint Optional public readonly eslint : Eslint ; Type: projen.javascript.Eslint tsconfig Optional public readonly tsconfig : TypescriptConfig ; Type: projen.javascript.TypescriptConfig tsconfigEslint Optional public readonly tsconfigEslint : TypescriptConfig ; Type: projen.javascript.TypescriptConfig applicationName Required public readonly applicationName : string ; Type: string publicDir Required public readonly publicDir : string ; Type: string Constants Name Type Description DEFAULT_TASK string The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public readonly DEFAULT_TASK : string ; Type: string The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files.","title":"Index"},{"location":"typescript/cloudscape-react-ts-website/index.html#getting-started","text":"To create a new Cloudscape React Typescript Project, there are a couple of options:","title":"Getting started"},{"location":"typescript/cloudscape-react-ts-website/index.html#via-projen-cli","text":"npx projen new --from @aws-prototyping-sdk/cloudscape-react-ts-website cloudscape-react-ts-website [--application-name <your-app>]","title":"Via Projen CLI"},{"location":"typescript/cloudscape-react-ts-website/index.html#programmatically","text":"new CloudscapeReactTsWebsiteProject ({ defaultReleaseBranch : \"mainline\" , name : \"<name-of-package>\" , applicationName : \"<name-of-app>\" , });","title":"Programmatically"},{"location":"typescript/cloudscape-react-ts-website/index.html#running-your-synthesized-application","text":"To run your synthesized application locally, run npx projen dev .","title":"Running your synthesized Application"},{"location":"typescript/cloudscape-react-ts-website/index.html#developer-notes","text":"To enable Cognito auth, ensure you have a runtime-config.json file in the root of your deployed project which at least contains the following: { \"region\" : \"<aws-region>\" , \"identityPoolId\" : \"<identity-pool-id>\" , \"userPoolId\" : \"<user-pool-id>\" , \"userPoolWebClientId\" : \"<user-pool-web-client-id>\" } The easiest way to get this set up is to use the static-website + identity packages to deploy your website. An example of how to do this is as follows: const userIdentity = new UserIdentity ( this , 'UserIdentity' ); new StaticWebsite ( this , 'StaticWebsite' , { websiteContentPath : '<relative>/<path>/<to>/<built>/<website>' , runtimeOptions : { jsonPayload : { region : Stack.of ( this ). region , identityPoolId : userIdentity.identityPool.identityPoolId , userPoolId : userIdentity.userPool?.userPoolId , userPoolWebClientId : userIdentity.userPoolClient?.userPoolClientId , } }, }); For local development, you will need to copy the generated runtime-config.json file into your /public directory. An example on how to do this is as follows: curl https://dxxxxxxxxxx.cloudfront.net/runtime-config.json > public/runtime-config.json","title":"Developer Notes"},{"location":"typescript/cloudscape-react-ts-website/index.html#api-reference","text":"","title":"API Reference "},{"location":"typescript/cloudscape-react-ts-website/index.html#structs","text":"","title":"Structs "},{"location":"typescript/cloudscape-react-ts-website/index.html#cloudscapereacttswebsiteprojectoptions","text":"Configuration options for the CloudscapeReactTsWebsiteProject.","title":"CloudscapeReactTsWebsiteProjectOptions "},{"location":"typescript/cloudscape-react-ts-website/index.html#classes","text":"","title":"Classes "},{"location":"typescript/cloudscape-react-ts-website/index.html#cloudscapereacttswebsiteproject","text":"Synthesizes a Cloudscape React Typescript Website Project.","title":"CloudscapeReactTsWebsiteProject "},{"location":"typescript/identity/index.html","text":"Experimental Warning This is packaged in a separate module while the API is being stabilized. This package is subject to non-backward compatible changes or removal in any future version. Breaking changes will be announced in the release notes. Whilst you may use this package, you may need to update your source code when upgrading to a newer version. Once we stabilize the module, it will be included into the stable aws-prototyping-sdk library. Experimental Usage To use this package, add a dependency on: @aws-prototyping-sdk/identity This module by default deploys a configurable Identity Provider with a default Cognito User Pool. These resources can be used by your website to restrict access to only authenticated users if needed. All settings are configurable and the creation of these AuthN resources can be disabled if needed or configured to use custom AuthN providers i.e. Facebook, Google, etc. Below is a conceptual view of the default architecture this module creates: Cognito User Pool --------------------> Identity Pool |_ User Pool Client |_ Unauthenticated IAM Role |_ Authenticated IAM Role API Reference Constructs UserIdentity Creates an Identity Pool with sane defaults configured. Initializers import { UserIdentity } from '@aws-prototyping-sdk/identity' new UserIdentity ( scope : Construct , id : string , props? : UserIdentityProps ) Name Type Description scope constructs.Construct No description. id string No description. props UserIdentityProps No description. scope Required Type: constructs.Construct id Required Type: string props Optional Type: UserIdentityProps Methods Name Description toString Returns a string representation of this construct. toString public toString () : string Returns a string representation of this construct. Static Functions Name Description isConstruct Checks if x is a construct. isConstruct import { UserIdentity } from '@aws-prototyping-sdk/identity' UserIdentity . isConstruct ( x : any ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: any Any object. Properties Name Type Description node constructs.Node The tree node. identityPool aws-cdk/aws-cognito-identitypool-alpha.IdentityPool No description. userPool aws-cdk-lib.aws_cognito.UserPool No description. userPoolClient aws-cdk-lib.aws_cognito.UserPoolClient No description. node Required public readonly node : Node ; Type: constructs.Node The tree node. identityPool Required public readonly identityPool : IdentityPool ; Type: aws-cdk/aws-cognito-identitypool-alpha.IdentityPool userPool Required public readonly userPool : UserPool ; Type: aws-cdk-lib.aws_cognito.UserPool userPoolClient Optional public readonly userPoolClient : UserPoolClient ; Type: aws-cdk-lib.aws_cognito.UserPoolClient Structs UserIdentityProps Properties which configures the Identity Pool. Initializer import { UserIdentityProps } from '@aws-prototyping-sdk/identity' const userIdentityProps : UserIdentityProps = { ... } Properties Name Type Description identityPoolOptions aws-cdk/aws-cognito-identitypool-alpha.IdentityPoolProps Configuration for the Identity Pool. userPool aws-cdk-lib.aws_cognito.UserPool User provided Cognito UserPool. identityPoolOptions Optional public readonly identityPoolOptions : IdentityPoolProps ; Type: aws-cdk/aws-cognito-identitypool-alpha.IdentityPoolProps Configuration for the Identity Pool. userPool Optional public readonly userPool : UserPool ; Type: aws-cdk-lib.aws_cognito.UserPool Default: a userpool will be created. User provided Cognito UserPool.","title":"Index"},{"location":"typescript/identity/index.html#api-reference","text":"","title":"API Reference "},{"location":"typescript/identity/index.html#constructs","text":"","title":"Constructs "},{"location":"typescript/identity/index.html#useridentity","text":"Creates an Identity Pool with sane defaults configured.","title":"UserIdentity "},{"location":"typescript/identity/index.html#structs","text":"","title":"Structs "},{"location":"typescript/identity/index.html#useridentityprops","text":"Properties which configures the Identity Pool.","title":"UserIdentityProps "},{"location":"typescript/nx-monorepo/index.html","text":"The nx-monorepo package vends a NxMonorepoProject Projen construct that adds NX monorepo support and manages your yarn/npm/pnpm workspaces on your behalf. This construct enables polyglot builds (and inter language build dependencies), build caching, dependency visualization and much, much more. The PDK itself uses the nx-monorepo project itself and is a good reference for seeing how a complex, polyglot monorepo can be set up. BREAKING CHANGES (pre-release) - v0.13.0: WorkspaceConfig.nxConfig type NxConfig => Nx.WorkspaceConfig , and overrideProjectTargets removed in favor of PDKProject.nx config to manage Nx project configurations. See PR 231 . To get started simply run the following command in an empty directory: npx projen new --from aws-prototyping-sdk nx-monorepo This will bootstrap a new Projen monorepo and contain the following in the .projenrc.ts: import { nx_monorepo } from \"aws-prototyping-sdk\" ; const project = new nx_monorepo . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , deps : [ \"aws-cdk-lib\" , \"constructs\" , \"cdk-nag\" ], devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-package\" , }); project . synth (); To add new packages to the monorepo, you can simply add them as a child to the monorepo. To demonstrate, lets add a PDK Pipeline TS Project as a child as follows: import { nx_monorepo } from \"aws-prototyping-sdk\" ; const project = new nx_monorepo . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , deps : [ \"aws-cdk-lib\" , \"constructs\" , \"cdk-nag\" ], devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-package\" , }); new PDKPipelineTsProject ({ parent : project , outdir : \"packages/cicd\" , defaultReleaseBranch : \"mainline\" , name : \"cicd\" , cdkVersion : \"2.1.0\" }); project . synth (); Once added, run npx projen from the root directory. You will now notice a new TS package has been created under the packages/cicd path. Now let's add a python project to the monorepo and add an inter-language build dependency. import { nx_monorepo } from \"aws-prototyping-sdk\" ; import { PDKPipelineTsProject } from \"aws-prototyping-sdk/pipeline\" ; import { PythonProject } from \"projen/lib/python\" ; const project = new nx_monorepo . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , deps : [ \"aws-cdk-lib\" , \"constructs\" , \"cdk-nag\" ], devDeps : [ \"aws-prototyping-sdk\" ], name : \"test\" , }); const pipelineProject = new PDKPipelineTsProject ({ parent : project , outdir : \"packages/cicd\" , defaultReleaseBranch : \"mainline\" , name : \"cicd\" , cdkVersion : \"2.1.0\" }); // Standard Projen projects also work here const pythonlib = new PythonProject ({ parent : project , outdir : \"packages/pythonlib\" , authorEmail : \"\" , authorName : \"\" , module Name : \"pythonlib\" , name : \"pythonlib\" , version : \"0.0.0\" }); // Pipeline project depends on pythonlib to build first project . addImplicitDependency ( pipelineProject , pythonlib ); project . synth (); Run npx projen from the root directory. You will now notice a new Python package has been created under packages/pythonlib. To visualize our dependency graph, run the following command from the root directory: npx nx graph . Now lets test building our project, from the root directory run npx nx run-many --target=build --nx-bail . As you can see, the pythonlib was built first followed by the cicd package. This is equivalent to running yarn build , pnpm build , or npm run build depending on your node package manager, and similarly yarn build also accepts the same Nx Run-Many options (eg: yarn build --projects=cicd ). The NxMonorepoProject also manages your yarn/pnpm workspaces for you and synthesizes these into your package.json pnpm-workspace.yml respectively. For more information on NX commands, refer to this documentation . Homogenous Dependencies As well as adding implicit dependencies, you can add dependencies between projects of the same language in order to have one project consume another project's code. Typescript Since the NxMonorepoProject manages a yarn/npm/pnpm workspace, configuring dependencies between Typescript projects is as straightforward as referencing them in deps . Note that dependencies cannot be added in the same project synthesis ( npx projen ) as when projects are created. This means a two-pass approach is recommended, first to create your new projects, and then to add the dependencies. For example: First add your new projects: new TypeScriptProject ({ parent : monorepo , outdir : \"packages/a\" , defaultReleaseBranch : \"main\" , name : \"project-a\" }); new TypeScriptProject ({ parent : monorepo , outdir : \"packages/b\" , defaultReleaseBranch : \"main\" , name : \"project-b\" , }); Synthesise, then you can set up your dependency: const a = new TypeScriptProject ({ parent : monorepo , outdir : \"packages/a\" , defaultReleaseBranch : \"main\" , name : \"project-a\" }); new TypeScriptProject ({ parent : monorepo , outdir : \"packages/b\" , defaultReleaseBranch : \"main\" , name : \"project-b\" , // B depends on A deps : [ a . package . packageName ], }); Python The recommended way to configure dependencies between python projects within your monorepo is to use a single shared virtual environment. You can then install packages you wish to depend on into that environment using pip's Editable Installs . You will also need to add an implicit dependency to tell the monorepo the correct build order for your packages. For example: const sharedEnv : VenvOptions = { envdir : '../../.env' , }; const a = new PythonProject ({ parent : monorepo , outdir : 'packages/a' , module Name : 'a' , name : 'a' , authorName : 'jack' , authorEmail : 'me@example.com' , version : '1.0.0' , venvOptions : sharedEnv , }); // Install A into the virtual env since it is consumed by B a . tasks . tryFind ( 'install' ) ! . exec ( 'pip install --editable .' ); const b = new PythonProject ({ parent : monorepo , outdir : 'packages/b' , module Name : 'b' , name : 'b' , authorName : 'jack' , authorEmail : 'me@example.com' , version : '1.0.0' , venvOptions : sharedEnv , // B depends on A deps : [ a . module Name ], }); // Add the implicit dependency so that the monorepo will build A before B monorepo . addImplicitDependency ( b , a ); Java The recommended way to configure dependencies between java projects within your monorepo is to use shared maven repositories. The default java project build will already create a distributable in the correct format for a maven repository in its dist/java folder, so you can use this as a repository. For example: const a = new JavaProject ({ parent : monorepo , outdir : 'packages/a' , groupId : 'com.mycompany' , artifactId : 'a' , name : 'a' , version : '1.0.0' , }); const b = new JavaProject ({ parent : monorepo , outdir : 'packages/b' , groupId : 'com.mycompany' , artifactId : 'b' , name : 'b' , version : '1.0.0' , // Declare the dependency on A deps : [ ` ${ a . pom . groupId } / ${ a . pom . artifactId } @ ${ a . pom . version } ` ], }); // Add the repository b . pom . addRepository ({ url : 'file://../a/dist/java' , id : 'dependency-on-a' , }); // Add the implicit dependency to control build order monorepo . addImplicitDependency ( b , a ); API Reference Structs MonorepoUpgradeDepsOptions Configuration for Monorepo Upgrade Deps task. Initializer import { nx_monorepo } from 'aws-prototyping-sdk' const monorepoUpgradeDepsOptions : nx_monorepo.MonorepoUpgradeDepsOptions = { ... } Properties Name Type Description syncpackConfig SyncpackConfig Syncpack configuration. taskName string Name of the task to create. syncpackConfig Optional public readonly syncpackConfig : SyncpackConfig ; Type: SyncpackConfig Default: SyncpackConfig.DEFAULT_CONFIG Syncpack configuration. No merging is performed and as such a complete syncpackConfig is required if supplied. taskName Optional public readonly taskName : string ; Type: string Default: upgrade-deps Name of the task to create. NxMonorepoProjectOptions Configuration options for the NxMonorepoProject. Initializer import { nx_monorepo } from 'aws-prototyping-sdk' const nxMonorepoProjectOptions : nx_monorepo.NxMonorepoProjectOptions = { ... } Properties Name Type Description name string This is the name of your project. commitGenerated boolean Whether to commit the managed files by default. gitOptions projen.GitOptions Configuration options for git. logging projen.LoggerOptions Configure logging options such as verbosity. outdir string The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projenCommand string The shell command to use in order to run the projen CLI. projenrcJson boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions projen.ProjenrcOptions Options for .projenrc.json. renovatebot boolean Use renovatebot to handle dependency upgrades. renovatebotOptions projen.RenovatebotOptions Options for renovatebot. autoApproveOptions projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge boolean Enable automatic merging on GitHub. autoMergeOptions projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber boolean Add a clobber task which resets the repo to origin. devContainer boolean Add a VSCode development environment (used for GitHub Codespaces). github boolean Enable GitHub integration. githubOptions projen.github.GitHubOptions Options for GitHub integration. gitpod boolean Add a Gitpod development environment. mergify boolean Whether mergify should be enabled on this repository or not. mergifyOptions projen.github.MergifyOptions Options for mergify. projectType projen.ProjectType Which type of project this is (library/app). projenCredentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret string The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale boolean Auto-close of stale issues and pull request. staleOptions projen.github.StaleOptions Auto-close stale issues and pull requests. vscode boolean Enable VSCode integration. allowLibraryDependencies boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail string Author's e-mail. authorName string Author's name. authorOrganization boolean Is the author an organization. authorUrl string Author's URL / Website. autoDetectBin boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin {[ key: string ]: string} Binary programs vended with your module. bugsEmail string The email address to which issues should be reported. bugsUrl string The url to your project's issue tracker. bundledDeps string[] List of dependencies to bundle into this module. codeArtifactOptions projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps string[] Runtime dependencies of this module. description string The description is just a string that helps people understand the purpose of the package. devDeps string[] Build dependencies for this module. entrypoint string Module entrypoint ( main in package.json ). homepage string Package's Homepage / Website. keywords string[] Keywords to include in package.json . license string License's SPDX identifier. licensed boolean Indicates if a license should be added. maxNodeVersion string Minimum node.js version to require via engines (inclusive). minNodeVersion string Minimum Node.js version to require via package.json engines (inclusive). npmAccess projen.javascript.NpmAccess Access level of the npm package. npmRegistry string The host name of the npm registry to publish to. npmRegistryUrl string The base URL of the npm package registry. npmTokenSecret string GitHub secret which contains the NPM token to use when publishing packages. packageManager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName string The \"name\" in package.json. peerDependencyOptions projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps string[] Peer dependencies for this module. pnpmVersion string The version of PNPM to use if using PNPM as a package manager. repository string The repository is the location where the actual code for your package lives. repositoryDirectory string If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions projen.javascript.ScopedPackagesOptions[] Options for privately hosted scoped packages. scripts {[ key: string ]: string} npm scripts to include. stability string Package's Stability. jsiiReleaseVersion string Version requirement of publib which is used to publish modules to npm. majorVersion number Major version to release from the default branch. minMajorVersion number Minimal Major version to release. npmDistTag string The npmDistTag to use when publishing from the default branch. postBuildSteps projen.github.workflows.JobStep[] Steps to execute after build as part of the release workflow. prerelease string Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches {[ key: string ]: projen.release.BranchOptions} Defines additional release branches. releaseEveryCommit boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel string The label to apply to issues indicating publish failures. releaseSchedule string CRON schedule to trigger new releases. releaseTagPrefix string Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName string The name of the default release workflow. releaseWorkflowSetupSteps projen.github.workflows.JobStep[] A set of workflow steps to execute in order to setup the workflow container. versionrcOptions {[ key: string ]: any} Custom configuration used when creating changelog with standard-version package. workflowContainerImage string Container image to use for GitHub workflows. workflowRunsOn string[] Github Runner selection labels. defaultReleaseBranch string The name of the main release branch. artifactsDirectory string A directory which will contain build artifacts. autoApproveUpgrades boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers projen.github.workflows.Triggers Build workflow triggers. bundlerOptions projen.javascript.BundlerOptions Options for Bundler . codeCov boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret string Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner string License copyright owner. copyrightPeriod string The copyright years to put in the LICENSE file. dependabot boolean Use dependabot to handle dependency upgrades. dependabotOptions projen.github.DependabotOptions Options for dependabot. depsUpgrade boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore string[] Additional entries to .gitignore. jest boolean Setup jest unit tests. jestOptions projen.javascript.JestOptions Jest options. mutableBuild boolean Automatically update files modified during builds to pull-request branches. npmignore string[] Additional entries to .npmignore. npmignoreEnabled boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier boolean Setup prettier. prettierOptions projen.javascript.PrettierOptions Prettier options. projenDevDependency boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions projen.javascript.ProjenrcOptions Options for .projenrc.js. projenVersion string Version of projen to install. pullRequestTemplate boolean Include a GitHub pull request template. pullRequestTemplateContents string[] The contents of the pull request template. release boolean Add release management to this project. releaseToNpm boolean Automatically release to npm when new versions are introduced. releaseWorkflow boolean DEPRECATED: renamed to release . workflowBootstrapSteps projen.github.workflows.JobStep[] Workflow steps to use in order to bootstrap this repo. workflowGitIdentity projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion string The node version to use in GitHub workflows. disableTsconfig boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen boolean Docgen by Typedoc. docsDirectory string Docs directory. entrypointTypes string The .d.ts file that includes the type declarations for this module. eslint boolean Setup eslint. eslintOptions projen.javascript.EslintOptions Eslint options. libdir string Typescript artifacts output directory. projenrcTs boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir string Typescript sources directory. testdir string Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile string The name of the development tsconfig.json file. typescriptVersion string TypeScript version to use. monorepoUpgradeDeps boolean Whether to include an upgrade-deps task at the root of the monorepo which will upgrade all dependencies. monorepoUpgradeDepsOptions MonorepoUpgradeDepsOptions Monorepo Upgrade Deps options. nxConfig WorkspaceConfig Configuration for NX. workspaceConfig WorkspaceConfig Configuration for workspace. name Required public readonly name : string ; Type: string Default: $BASEDIR This is the name of your project. commitGenerated Optional public readonly commitGenerated : boolean ; Type: boolean Default: true Whether to commit the managed files by default. gitOptions Optional public readonly gitOptions : GitOptions ; Type: projen.GitOptions Configuration options for git. logging Optional public readonly logging : LoggerOptions ; Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public readonly outdir : string ; Type: string Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public readonly parent : Project ; Type: projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public readonly projenCommand : string ; Type: string Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public readonly projenrcJson : boolean ; Type: boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public readonly projenrcJsonOptions : ProjenrcOptions ; Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional public readonly renovatebot : boolean ; Type: boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional public readonly renovatebotOptions : RenovatebotOptions ; Type: projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional public readonly autoApproveOptions : AutoApproveOptions ; Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional public readonly autoMerge : boolean ; Type: boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional public readonly autoMergeOptions : AutoMergeOptions ; Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional public readonly clobber : boolean ; Type: boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public readonly devContainer : boolean ; Type: boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public readonly github : boolean ; Type: boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public readonly githubOptions : GitHubOptions ; Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public readonly gitpod : boolean ; Type: boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public readonly mergify : boolean ; Type: boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public readonly mergifyOptions : MergifyOptions ; Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public readonly projectType : ProjectType ; Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional public readonly projenCredentials : GithubCredentials ; Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials public readonly projenTokenSecret : string ; Type: string Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public readonly readme : SampleReadmeProps ; Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional public readonly stale : boolean ; Type: boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public readonly staleOptions : StaleOptions ; Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public readonly vscode : boolean ; Type: boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allowLibraryDependencies Optional public readonly allowLibraryDependencies : boolean ; Type: boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. authorEmail Optional public readonly authorEmail : string ; Type: string Author's e-mail. authorName Optional public readonly authorName : string ; Type: string Author's name. authorOrganization Optional public readonly authorOrganization : boolean ; Type: boolean Is the author an organization. authorUrl Optional public readonly authorUrl : string ; Type: string Author's URL / Website. autoDetectBin Optional public readonly autoDetectBin : boolean ; Type: boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional public readonly bin : {[ key : string ] : string }; Type: {[ key: string ]: string} Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugsEmail Optional public readonly bugsEmail : string ; Type: string The email address to which issues should be reported. bugsUrl Optional public readonly bugsUrl : string ; Type: string The url to your project's issue tracker. bundledDeps Optional public readonly bundledDeps : string []; Type: string[] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. codeArtifactOptions Optional public readonly codeArtifactOptions : CodeArtifactOptions ; Type: projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional public readonly deps : string []; Type: string[] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'express' , 'lodash' , 'foo@^2' ] description Optional public readonly description : string ; Type: string The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description devDeps Optional public readonly devDeps : string []; Type: string[] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'typescript' , '@types/express' ] entrypoint Optional public readonly entrypoint : string ; Type: string Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional public readonly homepage : string ; Type: string Package's Homepage / Website. keywords Optional public readonly keywords : string []; Type: string[] Keywords to include in package.json . license Optional public readonly license : string ; Type: string Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional public readonly licensed : boolean ; Type: boolean Default: true Indicates if a license should be added. maxNodeVersion Optional public readonly maxNodeVersion : string ; Type: string Default: no max Minimum node.js version to require via engines (inclusive). minNodeVersion Optional public readonly minNodeVersion : string ; Type: string Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npmAccess Optional public readonly npmAccess : NpmAccess ; Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npmRegistry ~~ Optional Deprecated: use npmRegistryUrl instead public readonly npmRegistry : string ; Type: string The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npmRegistryUrl Optional public readonly npmRegistryUrl : string ; Type: string Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npmTokenSecret Optional public readonly npmTokenSecret : string ; Type: string Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. packageManager Optional public readonly packageManager : NodePackageManager ; Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. packageName Optional public readonly packageName : string ; Type: string Default: defaults to project name The \"name\" in package.json. peerDependencyOptions Optional public readonly peerDependencyOptions : PeerDependencyOptions ; Type: projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps Optional public readonly peerDeps : string []; Type: string[] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. pnpmVersion Optional public readonly pnpmVersion : string ; Type: string Default: \"7\" The version of PNPM to use if using PNPM as a package manager. repository Optional public readonly repository : string ; Type: string The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repositoryDirectory Optional public readonly repositoryDirectory : string ; Type: string If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions Optional public readonly scopedPackagesOptions : ScopedPackagesOptions []; Type: projen.javascript.ScopedPackagesOptions[] Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional public readonly scripts : {[ key : string ] : string }; Type: {[ key: string ]: string} Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional public readonly stability : string ; Type: string Package's Stability. jsiiReleaseVersion Optional public readonly jsiiReleaseVersion : string ; Type: string Default: \"latest\" Version requirement of publib which is used to publish modules to npm. majorVersion Optional public readonly majorVersion : number ; Type: number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. minMajorVersion Optional public readonly minMajorVersion : number ; Type: number Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npmDistTag Optional public readonly npmDistTag : string ; Type: string Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. postBuildSteps Optional public readonly postBuildSteps : JobStep []; Type: projen.github.workflows.JobStep[] Default: [] Steps to execute after build as part of the release workflow. prerelease Optional public readonly prerelease : string ; Type: string Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun Optional public readonly publishDryRun : boolean ; Type: boolean Default: false Instead of actually publishing to package managers, just print the publishing command. publishTasks Optional public readonly publishTasks : boolean ; Type: boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. releaseBranches Optional public readonly releaseBranches : {[ key : string ] : BranchOptions }; Type: {[ key: string ]: projen.release.BranchOptions} Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ releaseEveryCommit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead public readonly releaseEveryCommit : boolean ; Type: boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue Optional public readonly releaseFailureIssue : boolean ; Type: boolean Default: false Create a github issue on every failed publishing task. releaseFailureIssueLabel Optional public readonly releaseFailureIssueLabel : string ; Type: string Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ releaseSchedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead public readonly releaseSchedule : string ; Type: string Default: no scheduled releases CRON schedule to trigger new releases. releaseTagPrefix Optional public readonly releaseTagPrefix : string ; Type: string Default: \"v\" Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. releaseTrigger Optional public readonly releaseTrigger : ReleaseTrigger ; Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. releaseWorkflowName Optional public readonly releaseWorkflowName : string ; Type: string Default: \"Release\" The name of the default release workflow. releaseWorkflowSetupSteps Optional public readonly releaseWorkflowSetupSteps : JobStep []; Type: projen.github.workflows.JobStep[] A set of workflow steps to execute in order to setup the workflow container. versionrcOptions Optional public readonly versionrcOptions : {[ key : string ] : any }; Type: {[ key: string ]: any} Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflowContainerImage Optional public readonly workflowContainerImage : string ; Type: string Default: default image Container image to use for GitHub workflows. workflowRunsOn Optional public readonly workflowRunsOn : string []; Type: string[] Default: [\"ubuntu-latest\"] Github Runner selection labels. defaultReleaseBranch Required public readonly defaultReleaseBranch : string ; Type: string Default: \"main\" The name of the main release branch. artifactsDirectory Optional public readonly artifactsDirectory : string ; Type: string Default: \"dist\" A directory which will contain build artifacts. autoApproveUpgrades Optional public readonly autoApproveUpgrades : boolean ; Type: boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. buildWorkflow Optional public readonly buildWorkflow : boolean ; Type: boolean Default: true if not a subproject Define a GitHub workflow for building PRs. buildWorkflowTriggers Optional public readonly buildWorkflowTriggers : Triggers ; Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundlerOptions Optional public readonly bundlerOptions : BundlerOptions ; Type: projen.javascript.BundlerOptions Options for Bundler . codeCov Optional public readonly codeCov : boolean ; Type: boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret Optional public readonly codeCovTokenSecret : string ; Type: string Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner Optional public readonly copyrightOwner : string ; Type: string Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyrightPeriod Optional public readonly copyrightPeriod : string ; Type: string Default: current year The copyright years to put in the LICENSE file. dependabot Optional public readonly dependabot : boolean ; Type: boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabotOptions Optional public readonly dependabotOptions : DependabotOptions ; Type: projen.github.DependabotOptions Default: default options Options for dependabot. depsUpgrade Optional public readonly depsUpgrade : boolean ; Type: boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . depsUpgradeOptions Optional public readonly depsUpgradeOptions : UpgradeDependenciesOptions ; Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional public readonly gitignore : string []; Type: string[] Additional entries to .gitignore. jest Optional public readonly jest : boolean ; Type: boolean Default: true Setup jest unit tests. jestOptions Optional public readonly jestOptions : JestOptions ; Type: projen.javascript.JestOptions Default: default options Jest options. mutableBuild Optional public readonly mutableBuild : boolean ; Type: boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore public readonly npmignore : string []; Type: string[] Additional entries to .npmignore. npmignoreEnabled Optional public readonly npmignoreEnabled : boolean ; Type: boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional public readonly package : boolean ; Type: boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional public readonly prettier : boolean ; Type: boolean Default: false Setup prettier. prettierOptions Optional public readonly prettierOptions : PrettierOptions ; Type: projen.javascript.PrettierOptions Default: default options Prettier options. projenDevDependency Optional public readonly projenDevDependency : boolean ; Type: boolean Default: true Indicates of \"projen\" should be installed as a devDependency. projenrcJs Optional public readonly projenrcJs : boolean ; Type: boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions Optional public readonly projenrcJsOptions : ProjenrcOptions ; Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projenVersion Optional public readonly projenVersion : string ; Type: string Default: Defaults to the latest version. Version of projen to install. pullRequestTemplate Optional public readonly pullRequestTemplate : boolean ; Type: boolean Default: true Include a GitHub pull request template. pullRequestTemplateContents Optional public readonly pullRequestTemplateContents : string []; Type: string[] Default: default content The contents of the pull request template. release Optional public readonly release : boolean ; Type: boolean Default: true (false for subprojects) Add release management to this project. releaseToNpm Optional public readonly releaseToNpm : boolean ; Type: boolean Default: false Automatically release to npm when new versions are introduced. ~~ releaseWorkflow ~~ Optional Deprecated: see release . public readonly releaseWorkflow : boolean ; Type: boolean Default: true if not a subproject DEPRECATED: renamed to release . workflowBootstrapSteps Optional public readonly workflowBootstrapSteps : JobStep []; Type: projen.github.workflows.JobStep[] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflowGitIdentity Optional public readonly workflowGitIdentity : GitIdentity ; Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflowNodeVersion Optional public readonly workflowNodeVersion : string ; Type: string Default: same as minNodeVersion The node version to use in GitHub workflows. disableTsconfig Optional public readonly disableTsconfig : boolean ; Type: boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional public readonly docgen : boolean ; Type: boolean Default: false Docgen by Typedoc. docsDirectory Optional public readonly docsDirectory : string ; Type: string Default: \"docs\" Docs directory. entrypointTypes Optional public readonly entrypointTypes : string ; Type: string Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional public readonly eslint : boolean ; Type: boolean Default: true Setup eslint. eslintOptions Optional public readonly eslintOptions : EslintOptions ; Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional public readonly libdir : string ; Type: string Default: \"lib\" Typescript artifacts output directory. projenrcTs Optional public readonly projenrcTs : boolean ; Type: boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions Optional public readonly projenrcTsOptions : ProjenrcOptions ; Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode Optional public readonly sampleCode : boolean ; Type: boolean Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional public readonly srcdir : string ; Type: string Default: \"src\" Typescript sources directory. testdir Optional public readonly testdir : string ; Type: string Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional public readonly tsconfig : TypescriptConfigOptions ; Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfigDev Optional public readonly tsconfigDev : TypescriptConfigOptions ; Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile Optional public readonly tsconfigDevFile : string ; Type: string Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescriptVersion Optional public readonly typescriptVersion : string ; Type: string Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). monorepoUpgradeDeps Optional public readonly monorepoUpgradeDeps : boolean ; Type: boolean Default: true Whether to include an upgrade-deps task at the root of the monorepo which will upgrade all dependencies. monorepoUpgradeDepsOptions Optional public readonly monorepoUpgradeDepsOptions : MonorepoUpgradeDepsOptions ; Type: MonorepoUpgradeDepsOptions Default: undefined Monorepo Upgrade Deps options. This is only used if monorepoUpgradeDeps is true. nxConfig Optional public readonly nxConfig : WorkspaceConfig ; Type: WorkspaceConfig Configuration for NX. workspaceConfig Optional public readonly workspaceConfig : WorkspaceConfig ; Type: WorkspaceConfig Configuration for workspace. NxRunManyOptions https://nx.dev/packages/nx/documents/run-many#options Initializer import { nx_monorepo } from 'aws-prototyping-sdk' const nxRunManyOptions : nx_monorepo.NxRunManyOptions = { ... } Properties Name Type Description target string Task to run for affected projects. configuration string This is the configuration to use when performing tasks on projects. exclude string Exclude certain projects from being processed. ignoreCycles boolean Ignore cycles in the task graph. noBail boolean Do not stop command execution after the first failed task. outputStyle string Defines how Nx emits outputs tasks logs. parallel number Max number of parallel processes. projects string[] Project to run as list project names and/or patterns. runner string This is the name of the tasks runner configuration in nx.json. skipCache boolean Rerun the tasks even when the results are available in the cache. verbose boolean Prints additional information about the commands (e.g. stack traces). target Required public readonly target : string ; Type: string Task to run for affected projects. configuration Optional public readonly configuration : string ; Type: string This is the configuration to use when performing tasks on projects. exclude Optional public readonly exclude : string ; Type: string Exclude certain projects from being processed. ignoreCycles Optional public readonly ignoreCycles : boolean ; Type: boolean Ignore cycles in the task graph. noBail Optional public readonly noBail : boolean ; Type: boolean Do not stop command execution after the first failed task. outputStyle Optional public readonly outputStyle : string ; Type: string Default: \"stream\" Defines how Nx emits outputs tasks logs. parallel Optional public readonly parallel : number ; Type: number Default: 3 Max number of parallel processes. projects Optional public readonly projects : string []; Type: string[] Project to run as list project names and/or patterns. runner Optional public readonly runner : string ; Type: string This is the name of the tasks runner configuration in nx.json. skipCache Optional public readonly skipCache : boolean ; Type: boolean Rerun the tasks even when the results are available in the cache. verbose Optional public readonly verbose : boolean ; Type: boolean Prints additional information about the commands (e.g. stack traces). SemverGroup Initializer import { nx_monorepo } from 'aws-prototyping-sdk' const semverGroup : nx_monorepo.SemverGroup = { ... } Properties Name Type Description dependencies string[] the names of the dependencies (eg. packages string[] the names of packages in your monorepo which belong to this group, taken from the \"name\" field in package.json, not the package directory name. range string the semver range which dependencies in this group should use. dependencyTypes string[] optionally only apply this group to dependencies of the provided types. dependencies Required public readonly dependencies : string []; Type: string[] the names of the dependencies (eg. \"lodash\") which belong to this group packages Required public readonly packages : string []; Type: string[] the names of packages in your monorepo which belong to this group, taken from the \"name\" field in package.json, not the package directory name. range Required public readonly range : string ; Type: string the semver range which dependencies in this group should use. dependencyTypes Optional public readonly dependencyTypes : string []; Type: string[] optionally only apply this group to dependencies of the provided types. SyncpackConfig Initializer import { nx_monorepo } from 'aws-prototyping-sdk' const syncpackConfig : nx_monorepo.SyncpackConfig = { ... } Properties Name Type Description dependencyTypes string[] which dependency properties to search within. dev boolean whether to search within devDependencies. filter string a string which will be passed to new RegExp() to match against package names that should be included. indent string the character(s) to be used to indent your package.json files when writing to disk. overrides boolean whether to search within npm overrides. peer boolean whether to search within peerDependencies. pnpmOverrides boolean whether to search within pnpm overrides. prod boolean whether to search within dependencies. resolutions boolean whether to search within yarn resolutions. semverGroups SemverGroup [] No description. semverRange string defaults to \"\" to ensure that exact dependency versions are used instead of loose ranges. sortAz string[] which fields within package.json files should be sorted alphabetically. sortFirst string[] which fields within package.json files should appear at the top, and in what order. source string[] glob patterns for package.json file locations. versionGroups VersionGroup [] No description. workspace boolean whether to include the versions of the --source packages developed in your workspace/monorepo as part of the search for versions to sync. dependencyTypes Required public readonly dependencyTypes : string []; Type: string[] which dependency properties to search within. dev Required public readonly dev : boolean ; Type: boolean whether to search within devDependencies. filter Required public readonly filter : string ; Type: string a string which will be passed to new RegExp() to match against package names that should be included. indent Required public readonly indent : string ; Type: string the character(s) to be used to indent your package.json files when writing to disk. overrides Required public readonly overrides : boolean ; Type: boolean whether to search within npm overrides. peer Required public readonly peer : boolean ; Type: boolean whether to search within peerDependencies. pnpmOverrides Required public readonly pnpmOverrides : boolean ; Type: boolean whether to search within pnpm overrides. prod Required public readonly prod : boolean ; Type: boolean whether to search within dependencies. resolutions Required public readonly resolutions : boolean ; Type: boolean whether to search within yarn resolutions. semverGroups Required public readonly semverGroups : SemverGroup []; Type: SemverGroup [] semverRange Required public readonly semverRange : string ; Type: string defaults to \"\" to ensure that exact dependency versions are used instead of loose ranges. sortAz Required public readonly sortAz : string []; Type: string[] which fields within package.json files should be sorted alphabetically. sortFirst Required public readonly sortFirst : string []; Type: string[] which fields within package.json files should appear at the top, and in what order. source Required public readonly source : string []; Type: string[] glob patterns for package.json file locations. versionGroups Required public readonly versionGroups : VersionGroup []; Type: VersionGroup [] workspace Required public readonly workspace : boolean ; Type: boolean whether to include the versions of the --source packages developed in your workspace/monorepo as part of the search for versions to sync. VersionGroup Initializer import { nx_monorepo } from 'aws-prototyping-sdk' const versionGroup : nx_monorepo.VersionGroup = { ... } Properties Name Type Description dependencies string[] the names of the dependencies (eg. packages string[] the names of packages in your monorepo which belong to this group, taken from the \"name\" field in package.json, not the package directory name. dependencyTypes string[] optionally only apply this group to dependencies of the provided types. isBanned boolean optionally force all dependencies in this group to be removed. pinVersion string optionally force all dependencies in this group to have this version. dependencies Required public readonly dependencies : string []; Type: string[] the names of the dependencies (eg. \"lodash\") which belong to this group packages Required public readonly packages : string []; Type: string[] the names of packages in your monorepo which belong to this group, taken from the \"name\" field in package.json, not the package directory name. dependencyTypes Optional public readonly dependencyTypes : string []; Type: string[] optionally only apply this group to dependencies of the provided types. isBanned Optional public readonly isBanned : boolean ; Type: boolean optionally force all dependencies in this group to be removed. pinVersion Optional public readonly pinVersion : string ; Type: string optionally force all dependencies in this group to have this version. WorkspaceConfig Workspace configurations. https://classic.yarnpkg.com/lang/en/docs/workspaces/ Initializer import { nx_monorepo } from 'aws-prototyping-sdk' const workspaceConfig : nx_monorepo.WorkspaceConfig = { ... } Properties Name Type Description additionalPackages string[] List of additional package globs to include in the workspace. disableNoHoistBundled boolean Disable automatically applying noHoist logic for all sub-project \"bundledDependencies\". noHoist string[] List of package globs to exclude from hoisting in the workspace. additionalPackages Optional public readonly additionalPackages : string []; Type: string[] List of additional package globs to include in the workspace. All packages which are parented by the monorepo are automatically added to the workspace, but you can use this property to specify any additional paths to packages which may not be managed by projen. disableNoHoistBundled Optional public readonly disableNoHoistBundled : boolean ; Type: boolean Default: false Disable automatically applying noHoist logic for all sub-project \"bundledDependencies\". noHoist Optional public readonly noHoist : string []; Type: string[] List of package globs to exclude from hoisting in the workspace. https://classic.yarnpkg.com/blog/2018/02/15/nohoist/ Classes NxMonorepoProject This project type will bootstrap a NX based monorepo with support for polygot builds, build caching, dependency graph visualization and much more. Initializers import { nx_monorepo } from 'aws-prototyping-sdk' new nx_monorepo . NxMonorepoProject ( options : NxMonorepoProjectOptions ) Name Type Description options NxMonorepoProjectOptions No description. options Required Type: NxMonorepoProjectOptions Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. tryRemoveFile Finds a file at the specified relative path within this project and removes it. addBins No description. addBundledDeps Defines bundled dependencies. addCompileCommand DEPRECATED. addDeps Defines normal dependencies. addDevDeps Defines development/test dependencies. addFields Directly set fields in package.json . addKeywords Adds keywords to package.json (deduplicated). addPeerDeps Defines peer dependencies. addTestCommand DEPRECATED. hasScript Indicates if a script by the name name is defined. removeScript Removes the npm script (always successful). renderWorkflowSetup Returns the set of workflow steps which should be executed to bootstrap a workflow. setScript Replaces the contents of an npm package.json script. addImplicitDependency Create an implicit dependency between two Project's. addNxRunManyTask Add project task that executes npx nx run-many ... style command. addWorkspacePackages Add one or more additional package globs to the workspace. formatNxRunManyCommand Helper to format npx nx run-many ... style command. addExcludeFromCleanup public addExcludeFromCleanup ( globs : string ) : void Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: string The glob patterns to match. addGitIgnore public addGitIgnore ( pattern : string ) : void Adds a .gitignore pattern. pattern Required Type: string The glob pattern to ignore. addPackageIgnore public addPackageIgnore ( pattern : string ) : void Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . pattern Required Type: string addTask public addTask ( name : string , props? : TaskOptions ) : Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: string The task name to add. props Optional Type: projen.TaskOptions Task properties. ~~ addTip ~~ public addTip ( message : string ) : void Prints a \"tip\" message during synthesis. message Required Type: string The message. annotateGenerated public annotateGenerated ( glob : string ) : void Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: string the glob pattern to match (could be a file path). postSynthesize public postSynthesize () : void Called after all components are synthesized. Order is not guaranteed. preSynthesize public preSynthesize () : void Called before all components are synthesized. removeTask public removeTask ( name : string ) : Task Removes a task from a project. name Required Type: string The name of the task to remove. runTaskCommand public runTaskCommand ( task : Task ) : string Returns the shell command to execute in order to run a task. This will typically be npx projen TASK . task Required Type: projen.Task The task for which the command is required. synth public synth () : void Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" tryFindFile public tryFindFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public tryFindJsonFile ( filePath : string ) : JsonFile Finds a json file by name. filePath Required Type: string The file path. tryFindObjectFile public tryFindObjectFile ( filePath : string ) : ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: string The file path. tryRemoveFile public tryRemoveFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and removes it. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. addBins public addBins ( bins : {[ key : string ] : string }) : void bins Required Type: {[ key: string ]: string} addBundledDeps public addBundledDeps ( deps : string ) : void Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json . deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addCompileCommand ~~ public addCompileCommand ( commands : string ) : void DEPRECATED. commands Required Type: string addDeps public addDeps ( deps : string ) : void Defines normal dependencies. deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addDevDeps public addDevDeps ( deps : string ) : void Defines development/test dependencies. deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addFields public addFields ( fields : {[ key : string ] : any }) : void Directly set fields in package.json . fields Required Type: {[ key: string ]: any} The fields to set. addKeywords public addKeywords ( keywords : string ) : void Adds keywords to package.json (deduplicated). keywords Required Type: string The keywords to add. addPeerDeps public addPeerDeps ( deps : string ) : void Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers. deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addTestCommand ~~ public addTestCommand ( commands : string ) : void DEPRECATED. commands Required Type: string hasScript public hasScript ( name : string ) : boolean Indicates if a script by the name name is defined. name Required Type: string The name of the script. removeScript public removeScript ( name : string ) : void Removes the npm script (always successful). name Required Type: string The name of the script. renderWorkflowSetup public renderWorkflowSetup ( options? : RenderWorkflowSetupOptions ) : JobStep [] Returns the set of workflow steps which should be executed to bootstrap a workflow. options Optional Type: projen.javascript.RenderWorkflowSetupOptions Options. setScript public setScript ( name : string , command : string ) : void Replaces the contents of an npm package.json script. name Required Type: string The script name. command Required Type: string The command to execute. addImplicitDependency public addImplicitDependency ( dependent : Project , dependee : Project ) : void Create an implicit dependency between two Project's. This is typically used in polygot repos where a Typescript project wants a build dependency on a Python project as an example. dependent Required Type: projen.Project project you want to have the dependency. dependee Required Type: projen.Project project you wish to depend on. addNxRunManyTask public addNxRunManyTask ( name : string , options : NxRunManyOptions ) : Task Add project task that executes npx nx run-many ... style command. name Required Type: string options Required Type: NxRunManyOptions addWorkspacePackages public addWorkspacePackages ( packageGlobs : string ) : void Add one or more additional package globs to the workspace. packageGlobs Required Type: string paths to the package to include in the workspace (for example packages/my-package). formatNxRunManyCommand public formatNxRunManyCommand ( options : NxRunManyOptions ) : string Helper to format npx nx run-many ... style command. options Required Type: NxRunManyOptions Properties Name Type Description buildTask projen.Task No description. commitGenerated boolean Whether to commit the managed files by default. compileTask projen.Task No description. components projen.Component[] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected boolean Whether or not the project is being ejected. files projen.FileBase[] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name string Project name. outdir string Absolute output directory of this project. packageTask projen.Task No description. postCompileTask projen.Task No description. preCompileTask projen.Task No description. projectBuild projen.ProjectBuild Manages the build process of the project. projenCommand string The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. testTask projen.Task No description. defaultTask projen.Task This is the \"default\" task, the one that executes \"projen\". initProject projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. projectType projen.ProjectType No description. autoApprove projen.github.AutoApprove Auto approve set up for this project. devContainer projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. allowLibraryDependencies boolean No description. artifactsDirectory string The build output directory. artifactsJavascriptDirectory string The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler projen.javascript.Bundler No description. entrypoint string No description. manifest any No description. package projen.javascript.NodePackage API for managing the node package. packageManager projen.javascript.NodePackageManager The package manager to use. runScriptCommand string The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. buildWorkflow projen.build.BuildWorkflow The PR build GitHub workflow. buildWorkflowJobId string The job ID of the build workflow. jest projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion string Maximum node version required by this package. minNodeVersion string Minimum node.js version required by this package. npmignore projen.IgnoreFile The .npmignore file. prettier projen.javascript.Prettier No description. publisher projen.release.Publisher Package publisher. release projen.release.Release Release management. upgradeWorkflow projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory string No description. libdir string The directory in which compiled .js files reside. srcdir string The directory in which the .ts sources reside. testdir string The directory in which tests reside. tsconfigDev projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask projen.Task The \"watch\" task. docgen boolean No description. eslint projen.javascript.Eslint No description. tsconfig projen.javascript.TypescriptConfig No description. tsconfigEslint projen.javascript.TypescriptConfig No description. subProjects projen.Project[] No description. buildTask Required public readonly buildTask : Task ; Type: projen.Task commitGenerated Required public readonly commitGenerated : boolean ; Type: boolean Whether to commit the managed files by default. compileTask Required public readonly compileTask : Task ; Type: projen.Task components Required public readonly components : Component []; Type: projen.Component[] Returns all the components within this project. deps Required public readonly deps : Dependencies ; Type: projen.Dependencies Project dependencies. ejected Required public readonly ejected : boolean ; Type: boolean Whether or not the project is being ejected. files Required public readonly files : FileBase []; Type: projen.FileBase[] All files in this project. gitattributes Required public readonly gitattributes : GitAttributesFile ; Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public readonly gitignore : IgnoreFile ; Type: projen.IgnoreFile .gitignore. logger Required public readonly logger : Logger ; Type: projen.Logger Logging utilities. name Required public readonly name : string ; Type: string Project name. outdir Required public readonly outdir : string ; Type: string Absolute output directory of this project. packageTask Required public readonly packageTask : Task ; Type: projen.Task postCompileTask Required public readonly postCompileTask : Task ; Type: projen.Task preCompileTask Required public readonly preCompileTask : Task ; Type: projen.Task projectBuild Required public readonly projectBuild : ProjectBuild ; Type: projen.ProjectBuild Manages the build process of the project. projenCommand Required public readonly projenCommand : string ; Type: string The command to use in order to run the projen CLI. root Required public readonly root : Project ; Type: projen.Project The root project. tasks Required public readonly tasks : Tasks ; Type: projen.Tasks Project tasks. testTask Required public readonly testTask : Task ; Type: projen.Task defaultTask Optional public readonly defaultTask : Task ; Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public readonly initProject : InitProject ; Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public readonly parent : Project ; Type: projen.Project A parent project. If undefined, this is the root project. projectType Required public readonly projectType : ProjectType ; Type: projen.ProjectType autoApprove Optional public readonly autoApprove : AutoApprove ; Type: projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public readonly devContainer : DevContainer ; Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public readonly github : GitHub ; Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public readonly gitpod : Gitpod ; Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public readonly vscode : VsCode ; Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. ~~ allowLibraryDependencies ~~ Required Deprecated: use package.allowLibraryDependencies public readonly allowLibraryDependencies : boolean ; Type: boolean artifactsDirectory Required public readonly artifactsDirectory : string ; Type: string The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg . artifactsJavascriptDirectory Required public readonly artifactsJavascriptDirectory : string ; Type: string The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler Required public readonly bundler : Bundler ; Type: projen.javascript.Bundler ~~ entrypoint ~~ Required Deprecated: use package.entrypoint public readonly entrypoint : string ; Type: string ~~ manifest ~~ Required Deprecated: use package.addField(x, y) public readonly manifest : any ; Type: any package Required public readonly package : NodePackage ; Type: projen.javascript.NodePackage API for managing the node package. ~~ packageManager ~~ Required Deprecated: use package.packageManager public readonly packageManager : NodePackageManager ; Type: projen.javascript.NodePackageManager The package manager to use. runScriptCommand Required public readonly runScriptCommand : string ; Type: string The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge Optional public readonly autoMerge : AutoMerge ; Type: projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. buildWorkflow Optional public readonly buildWorkflow : BuildWorkflow ; Type: projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled. buildWorkflowJobId Optional public readonly buildWorkflowJobId : string ; Type: string The job ID of the build workflow. jest Optional public readonly jest : Jest ; Type: projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion Optional public readonly maxNodeVersion : string ; Type: string Maximum node version required by this package. minNodeVersion Optional public readonly minNodeVersion : string ; Type: string Minimum node.js version required by this package. npmignore Optional public readonly npmignore : IgnoreFile ; Type: projen.IgnoreFile The .npmignore file. prettier Optional public readonly prettier : Prettier ; Type: projen.javascript.Prettier ~~ publisher ~~ Optional Deprecated: use release.publisher . public readonly publisher : Publisher ; Type: projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow. release Optional public readonly release : Release ; Type: projen.release.Release Release management. upgradeWorkflow Optional public readonly upgradeWorkflow : UpgradeDependencies ; Type: projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory Required public readonly docsDirectory : string ; Type: string libdir Required public readonly libdir : string ; Type: string The directory in which compiled .js files reside. srcdir Required public readonly srcdir : string ; Type: string The directory in which the .ts sources reside. testdir Required public readonly testdir : string ; Type: string The directory in which tests reside. tsconfigDev Required public readonly tsconfigDev : TypescriptConfig ; Type: projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask Required public readonly watchTask : Task ; Type: projen.Task The \"watch\" task. docgen Optional public readonly docgen : boolean ; Type: boolean eslint Optional public readonly eslint : Eslint ; Type: projen.javascript.Eslint tsconfig Optional public readonly tsconfig : TypescriptConfig ; Type: projen.javascript.TypescriptConfig tsconfigEslint Optional public readonly tsconfigEslint : TypescriptConfig ; Type: projen.javascript.TypescriptConfig subProjects Required public readonly subProjects : Project []; Type: projen.Project[] Constants Name Type Description DEFAULT_TASK string The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public readonly DEFAULT_TASK : string ; Type: string The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files.","title":"Index"},{"location":"typescript/nx-monorepo/index.html#homogenous-dependencies","text":"As well as adding implicit dependencies, you can add dependencies between projects of the same language in order to have one project consume another project's code.","title":"Homogenous Dependencies"},{"location":"typescript/nx-monorepo/index.html#api-reference","text":"","title":"API Reference "},{"location":"typescript/nx-monorepo/index.html#structs","text":"","title":"Structs "},{"location":"typescript/nx-monorepo/index.html#monorepoupgradedepsoptions","text":"Configuration for Monorepo Upgrade Deps task.","title":"MonorepoUpgradeDepsOptions "},{"location":"typescript/nx-monorepo/index.html#nxmonorepoprojectoptions","text":"Configuration options for the NxMonorepoProject.","title":"NxMonorepoProjectOptions "},{"location":"typescript/nx-monorepo/index.html#nxrunmanyoptions","text":"https://nx.dev/packages/nx/documents/run-many#options","title":"NxRunManyOptions "},{"location":"typescript/nx-monorepo/index.html#semvergroup","text":"","title":"SemverGroup "},{"location":"typescript/nx-monorepo/index.html#syncpackconfig","text":"","title":"SyncpackConfig "},{"location":"typescript/nx-monorepo/index.html#versiongroup","text":"","title":"VersionGroup "},{"location":"typescript/nx-monorepo/index.html#workspaceconfig","text":"Workspace configurations. https://classic.yarnpkg.com/lang/en/docs/workspaces/","title":"WorkspaceConfig "},{"location":"typescript/nx-monorepo/index.html#classes","text":"","title":"Classes "},{"location":"typescript/nx-monorepo/index.html#nxmonorepoproject","text":"This project type will bootstrap a NX based monorepo with support for polygot builds, build caching, dependency graph visualization and much more.","title":"NxMonorepoProject "},{"location":"typescript/open-api-gateway/index.html","text":"Experimental Warning This is packaged in a separate module while the API is being stabilized. This package is subject to non-backward compatible changes or removal in any future version. Breaking changes will be announced in the release notes. Whilst you may use this package, you may need to update your source code when upgrading to a newer version. Once we stabilize the module, it will be included into the stable aws-prototyping-sdk library. Experimental Usage To use this package, add a dependency on: @aws-prototyping-sdk/open-api-gateway OpenAPI Gateway Define your APIs using Smithy or OpenAPI v3 , and leverage the power of generated clients and documentation, automatic input validation, and type safe client and server code! This package vends a projen project type which allows you to define an API using either Smithy or OpenAPI v3 , and a construct which manages deploying this API in API Gateway, given an integration (eg a lambda) for every operation. The project will generate models and clients from your api definition in your desired languages, and can be utilised both client side or server side in lambda handlers. The project type also generates a wrapper construct which adds type safety to ensure an integration is provided for every API operation. When you change your API specification, just run npx projen again to regenerate all of this! Project Use the provided projen project types to get started with your API quickly! There are options for TypeScript, Python and Java: Smithy SmithyApiGatewayTsProject SmithyApiGatewayPythonProject SmithyApiGatewayJavaProject OpenAPI OpenApiGatewayTsProject OpenApiGatewayPythonProject OpenApiGatewayJavaProject We recommend using the Smithy-based projects, given that Smithy has a less verbose and more powerful IDL (Interface Definition Language). Choose the project type based on the language you'd like to write your CDK infrastructure in . Whichever option above you choose, you can still write your server-side code in any language. It's recommended that these projects are used as part of an nx-monorepo project, as it makes setting up dependencies much easier, and you will not need to manage the build order of generated clients. Typescript OpenAPI While it is recommended to use the project within an nx-monorepo , you can still use this as a standalone project if you like (eg npx projen new --from @aws-prototyping-sdk/open-api-gateway open-api-gateway-ts ), however you will need to manage build order (ie building the generated client first, followed by the project). For usage in a monorepo: Create the project in your .projenrc: import { ClientLanguage , DocumentationFormat , OpenApiGatewayTsProject } from \"@aws-prototyping-sdk/open-api-gateway\" ; new OpenApiGatewayTsProject ({ parent : myNxMonorepo , defaultReleaseBranch : \"mainline\" , name : \"my-api\" , outdir : \"packages/api\" , clientLanguages : [ ClientLanguage . TYPESCRIPT , ClientLanguage . PYTHON , ClientLanguage . JAVA ], documentationFormats : [ DocumentationFormat . HTML2 , DocumentationFormat . PLANTUML , DocumentationFormat . MARKDOWN ], }); In the output directory ( outdir ), you'll find a few files to get you started. |_ src/ |_ spec/ |_ spec.yaml - The OpenAPI specification - edit this to define your API |_ .parsed-spec.json - A json spec generated from your spec.yaml. |_ api/ |_ api.ts - A CDK construct which defines the API Gateway resources to deploy your API. | This wraps the OpenApiGatewayRestApi construct and provides typed interfaces for integrations specific | to your API. You shouldn't need to modify this, instead just extend it as in sample-api.ts. |_ sample-api.ts - Example usage of the construct defined in api.ts. |_ sample-api.say-hello.ts - An example lambda handler for the operation defined in spec.yaml, making use of the generated lambda handler wrappers for marshalling and type safety. |_ generated/ |_ typescript/ - A generated typescript API client. |_ python/ - A generated python API client. |_ java/ - A generated java API client. |_ documentation/ |_ html2/ - Generated html documentation |_ markdown/ - Generated markdown documentation |_ plantuml/ - Generated plant uml documentation If you would prefer to not generate the sample code, you can pass sampleCode: false to OpenApiGatewayTsProject . To make changes to your api, simply update spec.yaml and run npx projen to synthesize all the typesafe client/server code! The SampleApi construct uses NodejsFunction to declare the example lambda, but you are free to change this! Smithy To create a project with Smithy as your interface definition language (IDL), you can use the SmithyApiGatewayTsProject : import { ClientLanguage , DocumentationFormat , SmithyApiGatewayTsProject } from \"@aws-prototyping-sdk/open-api-gateway\" ; new SmithyApiGatewayTsProject ({ parent : myNxMonorepo , defaultReleaseBranch : \"mainline\" , name : \"my-api\" , outdir : \"packages/api\" , serviceName : { namespace : \"com.mycompany\" , serviceName : \"MyService\" , }, clientLanguages : [ ClientLanguage . TYPESCRIPT , ClientLanguage . PYTHON , ClientLanguage . JAVA ], documentationFormats : [ DocumentationFormat . HTML2 , DocumentationFormat . PLANTUML , DocumentationFormat . MARKDOWN ], }); This will result in a directory structure similar to the following: |_ smithy/ |_ src/ |_ main/ |_ smithy - The Smithy model used to define your API. You can define as many .smithy files in here as you like. |_ build.gradle - Smithy build gradle file - use this to add dependencies/plugins used in your smithy build |_ settings.gradle - Setup for the Smithy gradle project |_ smithy-build.json - Smithy build configuration - managed via options on the projen project |_ src/ |_ spec/ |_ .parsed-spec.json - A json spec generated from your Smithy model. |_ api/ |_ api.ts - A CDK construct which defines the API Gateway resources to deploy your API. | This wraps the OpenApiGatewayRestApi construct and provides typed interfaces for integrations specific | to your API. You shouldn't need to modify this, instead just extend it as in sample-api.ts. |_ sample-api.ts - Example usage of the construct defined in api.ts. |_ sample-api.say-hello.ts - An example lambda handler for the operation defined in spec.yaml, making use of the generated lambda handler wrappers for marshalling and type safety. |_ generated/ |_ typescript/ - A generated typescript API client. |_ python/ - A generated python API client. |_ java/ - A generated java API client. |_ documentation/ |_ html2/ - Generated html documentation |_ markdown/ - Generated markdown documentation |_ plantuml/ - Generated plant uml documentation Customisation You can customise the Smithy project with several properties: new SmithyApiGatewayTsProject ({ parent : myNxMonorepo , defaultReleaseBranch : \"mainline\" , name : \"my-api\" , outdir : \"packages/api\" , clientLanguages : [], // The fully qualified service name for your API serviceName : { namespace : \"com.mycompany\" , serviceName : \"MyService\" , }, // By default, the contents of `smithy-build/output` will be ignored by source control. // Set this to false to include it, for example if you are generating clients directly from the smithy model. ignoreSmithyBuildOutput : false , // The gradle wrapper used for the smithy build is copied from the PDK itself if it does not already exist in // the 'smithy' folder. By default, this gradle wrapper will be ignored by source control. // Set this to false if you would like to check the gradle wrapper in to source control, for example if you want // to use a different version of the gradle wrapper in your project. ignoreGradleWrapper : false , // Use smithyBuildOptions to control what is added to smithy-build.json. See more details below. smithyBuildOptions : { projections : { \"ts-client\" : { \"plugins\" : { \"typescript-codegen\" : { \"package\" : \"@my-test/smithy-generated-typescript-client\" , \"packageVersion\" : \"0.0.1\" } } } } } }); smithyBuildOptions allows you to customise the Smithy build, used for generating clients from the Smithy model (eg above), or customising the OpenAPI generation. OpenAPI generation can be customised by referencing the openapi projection as follows: smithyBuildOptions : { projections : { openapi : { plugins : { openapi : { // Customise the openapi projection here... forbidGreedyLabels : true , ... } } } } } The OpenAPI specification generated by this projection is used to create the CDK infrastructure, lambda handler wrappers, etc. Options for configuring OpenAPI generation can be found in the Smithy OpenAPI documentation . Note that any additional dependencies required for projections/plugins can be added by modifying smithyBuildOptions , which in turn will add them to the smithy/build.gradle file: smithyBuildOptions : { maven : { dependencies : [ \"software.amazon.smithy:smithy-validation-model:1.27.2\" , ] } } Notice smithy-cli , smithy-model , smithy-openapi and smithy-aws-traits are always included in the build.gradle since they are required for converting your Smithy model to OpenAPI. You can customise the version of these dependencies by specifying them in smithyBuildOptions : smithyBuildOptions : { maven : { dependencies : [ \"software.amazon.smithy:smithy-cli:1.27.0\" , \"software.amazon.smithy:smithy-model:1.27.0\" , \"software.amazon.smithy:smithy-openapi:1.27.0\" , \"software.amazon.smithy:smithy-aws-traits:1.27.0\" , ] } } Python OpenAPI As well as typescript, you can choose to generate the cdk construct and sample handler in python. new OpenApiGatewayPythonProject ({ parent : myNxMonorepo , outdir : 'packages/myapi' , name : 'myapi' , module Name : 'myapi' , version : '1.0.0' , authorName : 'jack' , authorEmail : 'me@example.com' , clientLanguages : [ ClientLanguage . TYPESCRIPT , ClientLanguage . PYTHON , ClientLanguage . JAVA ], }); You will need to set up a shared virtual environment and configure dependencies via the monorepo (see README.md for the nx-monorepo package). An example of a full .projenrc.ts might be: import { nx_monorepo } from \"aws-prototyping-sdk\" ; import { ClientLanguage , OpenApiGatewayPythonProject } from \"@aws-prototyping-sdk/open-api-gateway\" ; import { AwsCdkPythonApp } from \"projen/lib/awscdk\" ; const monorepo = new nx_monorepo . NxMonorepoProject ({ defaultReleaseBranch : \"main\" , devDeps : [ \"aws-prototyping-sdk\" , \"@aws-prototyping-sdk/open-api-gateway\" ], name : \"open-api-test\" , }); const api = new OpenApiGatewayPythonProject ({ parent : monorepo , outdir : 'packages/myapi' , name : 'myapi' , module Name : 'myapi' , version : '1.0.0' , authorName : 'jack' , authorEmail : 'me@example.com' , clientLanguages : [ ClientLanguage . TYPESCRIPT ], venvOptions : { // Use a shared virtual env dir. // The generated python client will also use this virtual env dir envdir : '../../.env' , }, }); // Install into virtual env so it's available for the cdk app api . tasks . tryFind ( 'install' ) ! . exec ( 'pip install --editable .' ); const app = new AwsCdkPythonApp ({ authorName : \"jack\" , authorEmail : \"me@example.com\" , cdkVersion : \"2.1.0\" , module Name : \"myapp\" , name : \"myapp\" , version : \"1.0.0\" , parent : monorepo , outdir : \"packages/myapp\" , deps : [ api . module Name ], venvOptions : { envdir : '../../.env' , }, }); monorepo . addImplicitDependency ( app , api ); monorepo . synth (); You'll find the following directory structure in packages/myapi : |_ myapi/ |_ spec/ |_ spec.yaml - The OpenAPI specification - edit this to define your API |_ .parsed-spec.json - A json spec generated from your spec.yaml. |_ api/ |_ api.py - A CDK construct which defines the API Gateway resources to deploy your API. | This wraps the OpenApiGatewayRestApi construct and provides typed interfaces for integrations specific | to your API. You shouldn't need to modify this, instead just extend it as in sample_api.py. |_ sample_api.py - Example usage of the construct defined in api.py. |_ handlers/ |_ say_hello_handler_sample.py - An example lambda handler for the operation defined in spec.yaml, making use of the generated lambda handler wrappers for marshalling and type safety. |_ generated/ |_ typescript/ - A generated typescript API client. |_ python/ - A generated python API client. |_ java/ - A generated java API client. For simplicity, the generated code deploys a lambda layer for the generated code and its dependencies. You may choose to define an entirely separate projen PythonProject for your lambda handlers should you wish to add more dependencies than just the generated code. Smithy Similar to typescript, you can use the SmithyApiGatewayPythonProject . Java OpenAPI As well as TypeScript and Python, you can choose to generate the cdk construct and sample handler in Java. new OpenApiGatewayJavaProject ({ parent : monorepo , outdir : 'packages/myapi' , name : \"myapi\" , groupId : \"com.mycompany\" , artifactId : \"my-api\" , version : \"1.0.0\" , clientLanguages : [ ClientLanguage . PYTHON , ClientLanguage . TYPESCRIPT ], documentationFormats : [ DocumentationFormat . HTML2 , DocumentationFormat . PLANTUML , DocumentationFormat . MARKDOWN ], }); The output directory will look a little like this: |_ src/ |_ spec/ |_ spec.yaml - The OpenAPI specification - edit this to define your API |_ main/ |_ java/ |_ api/ |_ Api.java - A CDK construct which defines the API Gateway resources to deploy your API. | This wraps the OpenApiGatewayRestApi construct and provides typed interfaces for integrations specific | to your API. You shouldn't need to modify this, instead just extend it as in SampleApi.java. |_ ApiProps.java - Defines properties for the CDK construct in Api.java |_ SampleApi.java - Example usage of the construct defined in Api.java |_ SayHelloHandler.java - An example lambda handler for the operation defined in spec.yaml, making use of the generated lambda handler wrappers for marshalling and type safety. |_ resources/ |_ .parsed-spec.json - A json spec generated from your spec.yaml. This will be bundled in the project jar. |_ generated/ |_ typescript/ - A generated typescript API client |_ python/ - A generated python API client. |_ java/ - A generated java API client. |_ documentation/ |_ html2/ - Generated html documentation |_ markdown/ - Generated markdown documentation |_ plantuml/ - Generated plant uml documentation The SampleApi construct uses a lambda function which deploys the entire project jar as a simple way to get started with an api that deploys out of the box. This jar includes a lot of extra code and dependencies that you don't need in your lambda, so it's recommended that after experimenting with the construct, you separate your lambdas into another JavaProject . Please refer to the Java API Lambda Handlers section of this README for details on how to set this up. Smithy Similar to typescript and python, you can use the SmithyApiGatewayJavaProject . Smithy IDL Please refer to the Smithy documentation for how to write models in Smithy. A basic example is provided below: $version : \"2\" namespace example.hello use aws.protocols#restJson1 @title ( \"A Sample Hello World API\" ) /// A sample smithy api @restJson1 service Hello { version: \"1.0\" operations: [ SayHello ] } @readonly @http ( method: \"GET\" , uri: \"/hello\" ) operation SayHello { input: SayHelloInput output: SayHelloOutput errors: [ ApiError ] } string Name string Message @input structure SayHelloInput { @httpQuery ( \"name\" ) @required name: Name } @output structure SayHelloOutput { @required message: Message } @error ( \"client\" ) structure ApiError { @required errorMessage: Message } Supported Protocols Currently only AWS restJson1 is supported. Please ensure your service is annotated with the @restJson1 trait. Multiple Files You can split your definition into multiple files and folders, so long as they are all under the smithy/src/main/smithy directory in your API project. Authorizers Smithy supports adding API Gateway authorizers in the model itself . Given that at model definition time one usually does not know the ARN of the user pool or lambda function for an authorizer, it is recommended to add the authorizer(s) in your Api CDK construct. If using Smithy generated clients, some authorizer traits (eg sigv4) will include configuring the client for that particular method of authorization, so it can be beneficial to still define authorizers in the model. We therefore support specifying authorizers in both the model and the construct, but note that the construct will take precedence where the authorizer ID is the same. OpenAPI Specification Your spec.yaml file defines your api using OpenAPI Version 3.0.3 . An example spec might look like: openapi : 3.0.3 info : version : 1.0.0 title : Example API paths : /hello : get : operationId : sayHello parameters : - in : query name : name schema : type : string required : true responses : '200' : description : Successful response content : 'application/json' : schema : $ref : '#/components/schemas/HelloResponse' components : schemas : HelloResponse : type : object properties : message : type : string required : - message You can divide your specification into multiple files using $ref . For example, you might choose to structure your spec as follows: |_ spec/ |_ spec.yaml |_ paths/ |_ index.yaml |_ sayHello.yaml |_ schemas/ |_ index.yaml |_ helloResponse.yaml Where spec.yaml looks as follows: openapi : 3.0.3 info : version : 1.0.0 title : Example API paths : $ref : './paths/index.yaml' components : schemas : $ref : './schemas/index.yaml' paths/index.yaml : /hello : get : $ref : './sayHello.yaml' paths/sayHello.yaml : operationId : sayHello parameters : - in : query name : name schema : type : string required : true responses : '200' : description : Successful response content : 'application/json' : schema : $ref : '../schemas/helloResponse.yaml' schemas/index.yaml : HelloResponse : $ref : './helloResponse.yaml' schemas/helloResponse.yaml : type : object properties : message : type : string required : - message Construct A sample construct is generated which provides a type-safe interface for creating an API Gateway API based on your OpenAPI specification. You'll get a type error if you forget to define an integration for an operation defined in your api. import { Authorizers , Integrations } from '@aws-prototyping-sdk/open-api-gateway' ; import { NodejsFunction } from 'aws-cdk-lib/aws-lambda-nodejs' ; import { Construct } from 'constructs' ; import { Api } from './api' ; /** * An example of how to wire lambda handler functions to the API */ export class SampleApi extends Api { constructor ( scope : Construct , id : string ) { super ( scope , id , { defaultAuthorizer : Authorizers.iam (), integrations : { // Every operation defined in your API must have an integration defined! sayHello : { integration : Integrations.lambda ( new NodejsFunction ( scope , 'say-hello' )), }, }, }); } } Sharing Integrations If you would like to use the same integration for every operation, you can use the Operations.all method from your generated client to save repeating yourself, for example: import { Operations } from 'my-api-typescript-client' ; import { Authorizers , Integrations } from '@aws-prototyping-sdk/open-api-gateway' ; import { NodejsFunction } from 'aws-cdk-lib/aws-lambda-nodejs' ; import { Construct } from 'constructs' ; import { Api } from './api' ; export class SampleApi extends Api { constructor ( scope : Construct , id : string ) { super ( scope , id , { defaultAuthorizer : Authorizers.iam (), // Use the same integration for every operation. integrations : Operations.all ({ integration : Integrations.lambda ( new NodejsFunction ( scope , 'say-hello' )), }), }); } } Authorizers The Api construct allows you to define one or more authorizers for securing your API. An integration will use the defaultAuthorizer unless an authorizer is specified at the integration level. The following authorizers are supported: Authorizers.none - No auth Authorizers.iam - AWS IAM (Signature Version 4) Authorizers.cognito - Cognito user pool Authorizers.custom - A custom authorizer Cognito Authorizer To use the Cognito authorizer, one or more user pools must be provided. You can optionally specify the scopes to check if using an access token. You can use the withScopes method to use the same authorizer but verify different scopes for individual integrations, for example: export class SampleApi extends Api { constructor ( scope : Construct , id : string ) { const cognitoAuthorizer = Authorizers . cognito ({ authorizerId : 'myCognitoAuthorizer' , userPools : [ new UserPool ( scope , 'UserPool' )], }); super ( scope , id , { defaultAuthorizer : cognitoAuthorizer , integrations : { // Everyone in the user pool can call this operation: sayHello : { integration : Integrations.lambda ( new NodejsFunction ( scope , 'say-hello' )), }, // Only users with the given scopes can call this operation myRestrictedOperation : { integration : Integrations.lambda ( new NodejsFunction ( scope , 'my-restricted-operation' )), authorizer : cognitoAuthorizer.withScopes ( 'my-resource-server/my-scope' ), }, }, }); } } For more information about scopes or identity and access tokens, please see the API Gateway documentation . Custom Authorizer Custom authorizers use lambda functions to handle authorizing requests. These can either be simple token-based authorizers, or more complex request-based authorizers. See the API Gateway documentation for more details. An example token-based authorizer (default): Authorizers . custom ({ authorizerId : 'myTokenAuthorizer' , function : new NodejsFunction ( scope , 'authorizer' ), }); An example request-based handler. By default the identitySource will be method.request.header.Authorization , however you can customise this as per the API Gateway documentation . Authorizers . custom ({ authorizerId : 'myRequestAuthorizer' , type : CustomAuthorizerType . REQUEST , identitySource : 'method.request.header.MyCustomHeader, method.request.querystring.myQueryString' , function : new NodejsFunction ( scope , 'authorizer' ), }); Integrations Integrations are used by API Gateway to service requests. Lambda Integration Currently, the only built-in integration is a lambda integration. You can construct one using Integrations.lambda(yourLambdaFunction) . Custom Integrations You can implement your own integrations by inheriting the Integration class and implementing its render method. This method is responsible for returning a snippet of OpenAPI which will be added as the x-amazon-apigateway-integration for an operation. Please refer to the API Gateway Swagger Extensions documentation for more details. You can also optionally override the grant method if you need to use CDK to grant API Gateway access to invoke your integration. Generated Client Typescript The typescript-fetch OpenAPI generator is used to generate OpenAPI clients for typescript. This requires an implementation of fetch to be passed to the client. In the browser one can pass the built in fetch, or in NodeJS you can use an implementation such as node-fetch . Example usage of the client in a website: import { Configuration , DefaultApi } from \"my-api-typescript-client\" ; const client = new DefaultApi ( new Configuration ({ basePath : \"https://xxxxxxxxxx.execute-api.ap-southeast-2.amazonaws.com\" , fetchApi : window.fetch.bind ( window ), })); await client . sayHello ({ name : \"Jack\" }); Python The python OpenAPI generator is used to generate OpenAPI clients for python. Example usage: from my_api_python import ApiClient , Configuration from my_api_python.api.default_api import DefaultApi configuration = Configuration ( host = \"https://xxxxxxxxxx.execute-api.ap-southeast-2.amazonaws.com\" ) with ApiClient ( configuration ) as api_client : client = DefaultApi ( api_client ) client . say_hello ( query_params = { 'name' : \"name_example\" , }, ) You'll find details about how to use the python client in the README.md alongside your generated client. Java The java OpenAPI generator is used to generate OpenAPI clients for Java. Example usage: import com.generated.api.myapijava.client.api.DefaultApi ; import com.generated.api.myapijava.client.ApiClient ; import com.generated.api.myapijava.client.Configuration ; import com.generated.api.myapijava.client.models.HelloResponse ; ApiClient client = Configuration . getDefaultApiClient (); client . setBasePath ( \"https://xxxxxxxxxx.execute-api.ap-southeast-2.amazonaws.com\" ); DefaultApi api = new DefaultApi ( client ); HelloResponse response = api . sayHello ( \"Adrian\" ). execute () You'll find more details about how to use the Java client in the README.md alongside your generated client. Lambda Handler Wrappers Lambda handler wrappers are also importable from the generated client. These provide input/output type safety, ensuring that your API handlers return outputs that correspond to your specification. Typescript import { sayHelloHandler } from \"my-api-typescript-client\" ; export const handler = sayHelloHandler ( async ({ input }) => { return { statusCode : 200 , body : { message : `Hello ${ input . requestParameters . name } !` , }, }; }); Handler Router The lambda handler wrappers can be used in isolation as handler methods for separate lambdas. If you would like to use a single lambda function to serve all requests, you can do so with the handlerRouter . import { handlerRouter , sayHelloHandler , sayGoodbyeHandler } from \"my-api-typescript-client\" ; import { corsInterceptor } from \"./interceptors\" ; import { sayGoodbye } from \"./handlers/say-goodbye\" ; const sayHello = sayHelloHandler ( async ({ input }) => { return { statusCode : 200 , body : { message : `Hello ${ input . requestParameters . name } !` , }, }; }); export const handler = handlerRouter ({ // Interceptors declared in this list will apply to all operations interceptors : [ corsInterceptor ], // Assign handlers to each operation here handlers : { sayHello , sayGoodbye , }, }); Python from myapi_python.apis.tags.default_api_operation_config import say_hello_handler , SayHelloRequest , ApiResponse , SayHelloOperationResponses from myapi_python.model.api_error import ApiError from myapi_python.model.hello_response import HelloResponse @say_hello_handler def handler ( input : SayHelloRequest , ** kwargs ) -> SayHelloOperationResponses : return ApiResponse ( status_code = 200 , body = HelloResponse ( message = \"Hello {} !\" . format ( input . request_parameters [ \"name\" ])), headers = {} ) Handler Router The lambda handler wrappers can be used in isolation as handler methods for separate lambdas. If you would like to use a single lambda function to serve all requests, you can do so with the handler_router . from myapi_python.apis.tags.default_api_operation_config import say_hello_handler , SayHelloRequest , ApiResponse , SayHelloOperationResponses , handler_router , HandlerRouterHandlers from myapi_python.model.api_error import ApiError from myapi_python.model.hello_response import HelloResponse from other_handlers import say_goodbye from my_interceptors import cors_interceptor @say_hello_handler def say_hello ( input : SayHelloRequest , ** kwargs ) -> SayHelloOperationResponses : return ApiResponse ( status_code = 200 , body = HelloResponse ( message = \"Hello {} !\" . format ( input . request_parameters [ \"name\" ])), headers = {} ) handler = handler_router ( # Interceptors defined here will apply to all operations interceptors = [ cors_interceptor ], handlers = HandlerRouterHandlers ( say_hello = say_hello , say_goodbye = say_goodbye ) ) Java import com.generated.api.myapijava.client.api.Handlers.SayHello ; import com.generated.api.myapijava.client.api.Handlers.SayHello200Response ; import com.generated.api.myapijava.client.api.Handlers.SayHelloRequestInput ; import com.generated.api.myapijava.client.api.Handlers.SayHelloResponse ; import com.generated.api.myapijava.client.model.HelloResponse ; public class SayHelloHandler extends SayHello { @Override public SayHelloResponse handle ( SayHelloRequestInput sayHelloRequestInput ) { return SayHello200Response . of ( HelloResponse . builder () . message ( String . format ( \"Hello %s\" , sayHelloRequestInput . getInput (). getRequestParameters (). getName ())) . build ()); } } Handler Router The lambda handler wrappers can be used in isolation as handler methods for separate lambdas. If you would like to use a single lambda function to serve all requests, you can do so by extending the HandlerRouter class. import com.generated.api.myapijava.client.api.Handlers.SayGoodbye ; import com.generated.api.myapijava.client.api.Handlers.HandlerRouter ; import com.generated.api.myapijava.client.api.Handlers.Interceptors ; import com.generated.api.myapijava.client.api.Handlers.SayHello ; import java.util.Arrays ; import java.util.List ; // Interceptors defined here apply to all operations @Interceptors ({ TimingInterceptor . class }) public class ApiHandlerRouter extends HandlerRouter { // You must implement a method to return a handler for every operation @Override public SayHello sayHello () { return new SayHelloHandler (); } @Override public SayGoodbye sayGoodbye () { return new SayGoodbyeHandler (); } } Interceptors The lambda handler wrappers allow you to pass in a chain of handler functions to handle the request. This allows you to implement middleware / interceptors for handling requests. Each handler function may choose whether or not to continue the handler chain by invoking chain.next . Typescript In typescript, interceptors are passed as separate arguments to the generated handler wrapper, in the order in which they should be executed. Call request.chain.next(request) from an interceptor to delegate to the rest of the chain to handle a request. Note that the last handler in the chain (ie the actual request handler which transforms the input to the output) should not call chain.next . import { sayHelloHandler , ChainedRequestInput , OperationResponse , } from \"my-api-typescript-client\" ; // Interceptor to wrap invocations in a try/catch, returning a 500 error for any unhandled exceptions. const tryCatchInterceptor = async < RequestParameters , RequestArrayParameters , RequestBody , Response > ( request : ChainedRequestInput < RequestParameters , RequestArrayParameters , RequestBody , Response > ) : Promise < Response | OperationResponse < 500 , { errorMessage : string } >> => { try { return await request . chain . next ( request ); } catch ( e : any ) { return { statusCode : 500 , body : { errorMessage : e.message }}; } }; // tryCatchInterceptor is passed first, so it runs first and calls the second argument function (the request handler) via chain.next export const handler = sayHelloHandler ( tryCatchInterceptor , async ({ input }) => { return { statusCode : 200 , body : { message : `Hello ${ input . requestParameters . name } !` , }, }; }); Another example interceptor might be to record request time metrics. The example below includes the full generic type signature for an interceptor: import { ChainedRequestInput , } from 'my-api-typescript-client' ; const timingInterceptor = async < RequestParameters , RequestArrayParameters , RequestBody , Response > ( request : ChainedRequestInput < RequestParameters , RequestArrayParameters , RequestBody , Response > ) : Promise < Response > => { const start = Date . now (); const response = await request . chain . next ( request ); const end = Date . now (); console . log ( `Took ${ end - start } ms` ); return response ; }; Interceptors may mutate the interceptorContext to pass state to further interceptors or the final lambda handler, for example an identityInterceptor might want to extract the authenticated user from the request so that it is available in handlers. import { LambdaRequestParameters , LambdaHandlerChain , } from 'my-api-typescript-client' ; const identityInterceptor = async < RequestParameters , RequestArrayParameters , RequestBody , Response > ( request : ChainedRequestInput < RequestParameters , RequestArrayParameters , RequestBody , Response > ) : Promise < Response > => { const authenticatedUser = await getAuthenticatedUser ( request . event ); return await request . chain . next ({ ... request , interceptorContext : { ... request . interceptorContext , authenticatedUser , }, }); }; Python In Python, a list of interceptors can be passed as a keyword argument to the generated lambda handler decorator, for example: from myapi_python.apis.tags.default_api_operation_config import say_hello_handler , SayHelloRequest , ApiResponse , SayHelloOperationResponses from myapi_python.model.api_error import ApiError from myapi_python.model.hello_response import HelloResponse @say_hello_handler ( interceptors = [ timing_interceptor , try_catch_interceptor ]) def handler ( input : SayHelloRequest , ** kwargs ) -> SayHelloOperationResponses : return ApiResponse ( status_code = 200 , body = HelloResponse ( message = \"Hello {} !\" . format ( input . request_parameters [ \"name\" ])), headers = {} ) Writing an interceptor is just like writing a lambda handler. Call chain.next(input) from an interceptor to delegate to the rest of the chain to handle a request. import time from myapi_python.apis.tags.default_api_operation_config import ChainedApiRequest , ApiResponse def timing_interceptor ( input : ChainedApiRequest ) -> ApiResponse : start = int ( round ( time . time () * 1000 )) response = input . chain . next ( input ) end = int ( round ( time . time () * 1000 )) print ( \"Took {} ms\" . format ( end - start )) return response Interceptors may choose to return different responses, for example to return a 500 response for any unhandled exceptions: import time from myapi_python.model.api_error import ApiError from myapi_python.apis.tags.default_api_operation_config import ChainedApiRequest , ApiResponse def try_catch_interceptor ( input : ChainedApiRequest ) -> ApiResponse : try : return input . chain . next ( input ) except Exception as e : return ApiResponse ( status_code = 500 , body = ApiError ( errorMessage = str ( e )), headers = {} ) Interceptors are permitted to mutate the \"interceptor context\", which is a Dict[str, Any] . Each interceptor in the chain, and the final handler, can access this context: def identity_interceptor ( input : ChainedApiRequest ) -> ApiResponse : input . interceptor_context [ \"AuthenticatedUser\" ] = get_authenticated_user ( input . event ) return input . chain . next ( input ) Interceptors can also mutate the response returned by the handler chain. An example use case might be adding cross-origin resource sharing headers: def add_cors_headers_interceptor ( input : ChainedApiRequest ) -> ApiResponse : response = input . chain . next ( input ) return ApiResponse ( status_code = response . status_code , body = response . body , headers = { ** response . headers , \"Access-Control-Allow-Origin\" : \"*\" , \"Access-Control-Allow-Headers\" : \"*\" } ) Java In Java, interceptors can be added to a handler via the @Interceptors class annotation: import com.generated.api.myjavaapi.client.api.Handlers.Interceptors ; @Interceptors ({ TimingInterceptor . class , TryCatchInterceptor . class }) public class SayHelloHandler extends SayHello { @Override public SayHelloResponse handle ( SayHelloRequestInput sayHelloRequestInput ) { return SayHello200Response . of ( HelloResponse . builder () . message ( String . format ( \"Hello %s\" , sayHelloRequestInput . getInput (). getRequestParameters (). getName ())) . build ()); } } To write an interceptor, you can implement the Interceptor interface. For example, a timing interceptor: import com.generated.api.myjavaapi.client.api.Handlers.Interceptor ; import com.generated.api.myjavaapi.client.api.Handlers.ChainedRequestInput ; import com.generated.api.myjavaapi.client.api.Handlers.Response ; public class TimingInterceptor < Input > implements Interceptor < Input > { @Override public Response handle ( ChainedRequestInput < Input > input ) { long start = System . currentTimeMillis (); Response res = input . getChain (). next ( input ); long end = System . currentTimeMillis (); System . out . printf ( \"Took %d ms%n\" , end - start ); return res ; } } Interceptors may choose to return different responses, for example to return a 500 response for any unhandled exceptions: import com.generated.api.myjavaapi.client.api.Handlers.Interceptor ; import com.generated.api.myjavaapi.client.api.Handlers.ChainedRequestInput ; import com.generated.api.myjavaapi.client.api.Handlers.Response ; import com.generated.api.myjavaapi.client.api.Handlers.ApiResponse ; import com.generated.api.myjavaapi.client.model.ApiError ; public class TryCatchInterceptor < Input > implements Interceptor < Input > { @Override public Response handle ( ChainedRequestInput < Input > input ) { try { return input . getChain (). next ( input ); } catch ( Exception e ) { return ApiResponse . builder () . statusCode ( 500 ) . body ( ApiError . builder () . errorMessage ( e . getMessage ()) . build (). toJson ()) . build (); } } } Interceptors are permitted to mutate the \"interceptor context\", which is a Map<String, Object> . Each interceptor in the chain, and the final handler, can access this context: public class IdentityInterceptor < Input > implements Interceptor < Input > { @Override public Response handle ( ChainedRequestInput < Input > input ) { input . getInterceptorContext (). put ( \"AuthenticatedUser\" , this . getAuthenticatedUser ( input . getEvent ())); return input . getChain (). next ( input ); } } Interceptors can also mutate the response returned by the handler chain. An example use case might be adding cross-origin resource sharing headers: public static class AddCorsHeadersInterceptor < Input > implements Interceptor < Input > { @Override public Response handle ( ChainedRequestInput < Input > input ) { Response res = input . getChain (). next ( input ); res . getHeaders (). put ( \"Access-Control-Allow-Origin\" , \"*\" ); res . getHeaders (). put ( \"Access-Control-Allow-Headers\" , \"*\" ); return res ; } } Interceptors with Dependency Injection Interceptors referenced by the @Interceptors annotation must be constructable with no arguments. If more complex instantiation of your interceptor is required (for example if you are using dependency injection or wish to pass configuration to your interceptor), you may instead override the getInterceptors method in your handler: public class SayHelloHandler extends SayHello { @Override public List < Interceptor < SayHelloInput >> getInterceptors () { return Arrays . asList ( new MyConfiguredInterceptor <> ( 42 ), new MyOtherConfiguredInterceptor <> ( \"configuration\" )); } @Override public SayHelloResponse handle ( SayHelloRequestInput sayHelloRequestInput ) { return SayHello200Response . of ( HelloResponse . builder () . message ( String . format ( \"Hello %s!\" , sayHelloRequestInput . getInput (). getRequestParameters (). getName ())) . build ()); } } Other Details Workspaces and OpenApiGatewayTsProject OpenApiGatewayTsProject can be used as part of a monorepo using YARN/NPM/PNPM workspaces. When used in a monorepo, a dependency is established between OpenApiGatewayTsProject and the generated typescript client, which is expected to be managed by the parent monorepo (ie both OpenApiGatewayTsProject and the generated typescript client are parented by the monorepo). During initial project synthesis, the dependency between OpenApiGatewayTsProject and the generated client is established via workspace configuration local to OpenApiGatewayTsProject , since the parent monorepo will not have updated to include the new packages in time for the initial \"install\". When the package manager is PNPM, this initial workspace is configured by creating a local pnpm-workspace.yaml file, and thus if you specify your own for an instance of OpenApiGatewayTsProject , synthesis will fail. It is most likely that you will not need to define this file locally in OpenApiGatewayTsProject since the monorepo copy should be used to manage all packages within the repo, however if managing this file at the OpenApiGatewayTsProject level is required, please use the pnpmWorkspace property of OpenApiGatewayTsProject . Customising Generated Client Projects By default, the generated clients are configured automatically, including project names. You can customise the generated client code using the <language>ProjectOptions properties when constructing your projen project. Python Shared Virtual Environment For adding dependencies between python projects within a monorepo you can use a single shared virtual environment, and install your python projects into that environment with pip install --editable . in the dependee. The generated python client will automatically do this if it detects it is within a monorepo. The following example shows how to configure the generated client to use a shared virtual environment: const api = new OpenApiGatewayTsProject ({ parent : monorepo , name : 'api' , outdir : 'packages/api' , defaultReleaseBranch : 'main' , clientLanguages : [ ClientLanguage . PYTHON ], pythonClientOptions : { module Name : 'my_api_python' , name : 'my_api_python' , authorName : 'jack' , authorEmail : 'me@example.com' , version : '1.0.0' , venvOptions : { // Directory relative to the generated python client (in this case packages/api/generated/python) envdir : '../../../../.env' , }, }, }); new PythonProject ({ parent : monorepo , outdir : 'packages/my-python-lib' , module Name : 'my_python_lib' , name : 'my_python_lib' , authorName : 'jack' , authorEmail : 'me@example.com' , version : '1.0.0' , venvOptions : { // Directory relative to the python lib (in this case packages/my-python-lib) envdir : '../../.env' , }, // Generated client can be safely cast to a PythonProject deps : [( api . generatedClients [ ClientLanguage . PYTHON ] as PythonProject ). module Name ], }); Java API Lambda Handlers To build your lambda handlers in Java, it's recommended to create a separate JavaProject in your .projenrc . This needs to build a \"super jar\" with all of your dependencies packed into a single jar. You can use the maven-shade-plugin to achieve this (see the java lambda docs for details ). You'll need to add a dependency on the generated java client for the handler wrappers. For example, your .projenrc.ts might look like: const api = new OpenApiGatewayTsProject ({ parent : monorepo , name : '@my-test/api' , outdir : 'packages/api' , defaultReleaseBranch : 'main' , clientLanguages : [ ClientLanguage . JAVA ], }); const apiJavaClient = ( api . generatedClients [ ClientLanguage . JAVA ] as JavaProject ); const javaLambdaProject = new JavaProject ({ parent : monorepo , outdir : 'packages/java-lambdas' , artifactId : \"my-java-lambdas\" , groupId : \"com.mycompany\" , name : \"javalambdas\" , version : \"1.0.0\" , // Add a dependency on the java client deps : [ ` ${ apiJavaClient . pom . groupId } / ${ apiJavaClient . pom . artifactId } @ ${ apiJavaClient . pom . version } ` ], }); // Set up the dependency on the generated lambda client monorepo . addImplicitDependency ( javaLambdaProject , apiJavaClient ); javaLambdaProject . pom . addRepository ({ url : `file://../api/generated/java/dist/java` , id : 'java-api-client' , }); // Use the maven-shade-plugin as part of the maven package task javaLambdaProject . pom . addPlugin ( 'org.apache.maven.plugins/maven-shade-plugin@3.2.2' , { configuration : { createDependencyReducedPom : false , finalName : 'my-java-lambdas' , }, executions : [{ id : 'shade-task' , phase : 'package' , // <- NB \"phase\" is supported in projen ^0.61.37 goals : [ 'shade' ], }], }); // Build the \"super jar\" as part of the project's package task javaLambdaProject . packageTask . exec ( 'mvn clean install' ); You can then implement your lambda handlers in your java-lambdas project using the generated lambda handler wrappers (see above). Finally, you can create a lambda function in your CDK infrastructure which points to the resultant \"super jar\": new Api ( this , 'JavaApi' , { integrations : { sayHello : { function : new Function ( this , 'SayHelloJava' , { code : Code.fromAsset ( '../java-lambdas/target/my-java-lambdas.jar' ), handler : 'com.mycompany.SayHelloHandler' , runtime : Runtime.JAVA_11 , timeout : Duration.seconds ( 30 ), }), }, }, }); Note that to ensure the jar is built before the CDK infrastructure which consumes it, you must add a dependency, eg: monorepo . addImplicitDependency ( infra , javaLambdaProject ); AWS WAFv2 Web ACL By default, a Web ACL is deployed and attached to your API Gateway Rest API with the \" AWSManagedRulesCommonRuleSet \", which provides protection against exploitation of a wide range of vulnerabilities, including some of the high risk and commonly occurring vulnerabilities described in OWASP publications such as OWASP Top 10 . You can customise the Web ACL configuration via the webAclOptions of your Api CDK construct, eg: export class SampleApi extends Api { constructor ( scope : Construct , id : string ) { super ( scope , id , { integrations : { ... }, webAclOptions : { // Allow access only to specific CIDR ranges cidrAllowList : { cidrType : 'IPV4' , cidrRanges : [ '1.2.3.4/5' ], }, // Pick from the set here: https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-list.html managedRules : [ { vendor : 'AWS' , name : 'AWSManagedRulesSQLiRuleSet' }, ], }, }); } } You can remove the Web ACL entirely with webAclOptions: { disable: true } - you may wish to use this if you'd like to set up a Web ACL yourself with more control over the rules. Smithy IntelliJ Plugin The Smithy-based projects are compatible with the Smithy IntelliJ Plugin , which provides syntax highlighting and auto-complete for your Smithy model. To make use of it, perform the following steps: Install the \"Smithy\" plugin (under Preferences -> Plugins ) Right-click on the smithy/build.gradle file in your Smithy API project Select \"Link Gradle Project\" Tagging Operations Operations can be grouped together into logical collections via tags. This can be achieved in Smithy with the @tags trait: @tags ([ \"pets\" , \"users\" ]) operation PurchasePet { ... } Or in OpenAPI using the tags property: paths : /pets/purchase : post : operationId : purchasePet tags : - pets - users ... When multiple tags are used, the \"first\" tag is considered to be the API that the operation belongs to, so in the generated client, the above example operation would be included in the PetsApi client but not the UsersApi client. Multiple tags are still useful for documentation generation, for example DocumentationFormat.HTML_REDOC will group operations by tag in the side navigation bar. If you would like to introduce tags without breaking existing clients, we recommend first adding a tag named default to all operations. \u26a0\ufe0f Important Note : Smithy versions below 1.28.0 sort tags in alphabetical order and so the \"first\" tag will be the earliest in the alphabet. Therefore, if using tags with older versions of Smithy, we recommend prefixing your desired first tag with an underscore (for example _default ). This is rectified in 1.28.0 , where tag order from the @tags trait is preserved. Breaking Changes v0.14.0 - see aws-prototyping-sdk!280 Moved smithy model files from model directory to smithy/src/main/smithy - please move these manually as part of upgrading to 0.14.0 , and delete your model directory when done. Moved smithy gradle files from smithy-build directory to smithy - if you have added any dependencies to your smithy-build/build.gradle file you will need to copy them across into smithy/build.gradle (note dependencies in the new gradle file start with implementation rather than smithy ). Deprecated gradleWrapperPath option on SmithApiGateway projects in favour of ignoreGradleWrapper: false - the gradle wrapper in smithy directory is always used (and generated automatically if not found). If you used a custom gradle wrapper, copy it into the smithy directory, set ignoreGradleWrapper: false and check it in to your repository. API Reference Constructs OpenApiGatewayRestApi A construct for creating an api gateway rest api based on the definition in the OpenAPI spec. Initializers import { OpenApiGatewayRestApi } from '@aws-prototyping-sdk/open-api-gateway' new OpenApiGatewayRestApi ( scope : Construct , id : string , props : OpenApiGatewayRestApiProps ) Name Type Description scope constructs.Construct No description. id string No description. props OpenApiGatewayRestApiProps No description. scope Required Type: constructs.Construct id Required Type: string props Required Type: OpenApiGatewayRestApiProps Methods Name Description toString Returns a string representation of this construct. toString public toString () : string Returns a string representation of this construct. Static Functions Name Description isConstruct Checks if x is a construct. isConstruct import { OpenApiGatewayRestApi } from '@aws-prototyping-sdk/open-api-gateway' OpenApiGatewayRestApi . isConstruct ( x : any ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: any Any object. Properties Name Type Description node constructs.Node The tree node. api aws-cdk-lib.aws_apigateway.SpecRestApi No description. ipSet aws-cdk-lib.aws_wafv2.CfnIPSet No description. webAcl aws-cdk-lib.aws_wafv2.CfnWebACL No description. webAclAssociation aws-cdk-lib.aws_wafv2.CfnWebACLAssociation No description. node Required public readonly node : Node ; Type: constructs.Node The tree node. api Required public readonly api : SpecRestApi ; Type: aws-cdk-lib.aws_apigateway.SpecRestApi ipSet Optional public readonly ipSet : CfnIPSet ; Type: aws-cdk-lib.aws_wafv2.CfnIPSet webAcl Optional public readonly webAcl : CfnWebACL ; Type: aws-cdk-lib.aws_wafv2.CfnWebACL webAclAssociation Optional public readonly webAclAssociation : CfnWebACLAssociation ; Type: aws-cdk-lib.aws_wafv2.CfnWebACLAssociation Structs ApiGatewayIntegration Represents an api gateway integration. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-integration.html Initializer import { ApiGatewayIntegration } from '@aws-prototyping-sdk/open-api-gateway' const apiGatewayIntegration : ApiGatewayIntegration = { ... } Properties Name Type Description cacheKeyParameters string[] A list of request parameters whose values are to be cached. cacheNamespace string An API-specific tag group of related cached parameters. connectionId string The ID of a VpcLink for the private integration. connectionType string The integration connection type. contentHandling string Request payload encoding conversion types. credentials string For AWS IAM role-based credentials, specify the ARN of an appropriate IAM role. httpMethod string The HTTP method used in the integration request. passthroughBehavior string Specifies how a request payload of unmapped content type is passed through the integration request without modification. requestParameters {[ key: string ]: string} Specifies mappings from method request parameters to integration request parameters. requestTemplates {[ key: string ]: string} Mapping templates for a request payload of specified MIME types. responses {[ key: string ]: ApiGatewayIntegrationResponse } Defines the method's responses and specifies desired parameter mappings or payload mappings from integration responses to method responses. timeoutInMillis number Custom timeout between 50 and 29,000 milliseconds. tlsConfig ApiGatewayIntegrationTlsConfig Specifies the TLS configuration for an integration. type string The type of integration with the specified backend. uri string The endpoint URI of the backend. cacheKeyParameters Optional public readonly cacheKeyParameters : string []; Type: string[] A list of request parameters whose values are to be cached. cacheNamespace Optional public readonly cacheNamespace : string ; Type: string An API-specific tag group of related cached parameters. connectionId Optional public readonly connectionId : string ; Type: string The ID of a VpcLink for the private integration. https://docs.aws.amazon.com/apigateway/latest/api/API_VpcLink.html connectionType Optional public readonly connectionType : string ; Type: string The integration connection type. The valid value is \"VPC_LINK\" for private integration or \"INTERNET\", otherwise. contentHandling Optional public readonly contentHandling : string ; Type: string Request payload encoding conversion types. Valid values are 1) CONVERT_TO_TEXT, for converting a binary payload into a base64-encoded string or converting a text payload into a utf-8-encoded string or passing through the text payload natively without modification, and 2) CONVERT_TO_BINARY, for converting a text payload into a base64-decoded blob or passing through a binary payload natively without modification. credentials Optional public readonly credentials : string ; Type: string For AWS IAM role-based credentials, specify the ARN of an appropriate IAM role. If unspecified, credentials default to resource-based permissions that must be added manually to allow the API to access the resource. For more information, see Granting Permissions Using a Resource Policy. Note: When using IAM credentials, make sure that AWS STS Regional endpoints are enabled for the Region where this API is deployed for best performance. httpMethod Optional public readonly httpMethod : string ; Type: string The HTTP method used in the integration request. For Lambda function invocations, the value must be POST. passthroughBehavior Optional public readonly passthroughBehavior : string ; Type: string Specifies how a request payload of unmapped content type is passed through the integration request without modification. Supported values are when_no_templates, when_no_match, and never. https://docs.aws.amazon.com/apigateway/latest/api/API_Integration.html#passthroughBehavior requestParameters Optional public readonly requestParameters : {[ key : string ] : string }; Type: {[ key: string ]: string} Specifies mappings from method request parameters to integration request parameters. Supported request parameters are querystring, path, header, and body. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-integration-requestParameters.html requestTemplates Optional public readonly requestTemplates : {[ key : string ] : string }; Type: {[ key: string ]: string} Mapping templates for a request payload of specified MIME types. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-integration-requestTemplates.html responses Optional public readonly responses : {[ key : string ] : ApiGatewayIntegrationResponse }; Type: {[ key: string ]: ApiGatewayIntegrationResponse } Defines the method's responses and specifies desired parameter mappings or payload mappings from integration responses to method responses. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-integration-responses.html timeoutInMillis Optional public readonly timeoutInMillis : number ; Type: number Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds. tlsConfig Optional public readonly tlsConfig : ApiGatewayIntegrationTlsConfig ; Type: ApiGatewayIntegrationTlsConfig Specifies the TLS configuration for an integration. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-extensions-integration-tls-config.html type Optional public readonly type : string ; Type: string The type of integration with the specified backend. https://docs.aws.amazon.com/apigateway/latest/api/API_Integration.html#type uri Optional public readonly uri : string ; Type: string The endpoint URI of the backend. For integrations of the aws type, this is an ARN value. For the HTTP integration, this is the URL of the HTTP endpoint including the https or http scheme. ApiGatewayIntegrationResponse API Gateway integration response. https://docs.aws.amazon.com/apigateway/latest/api/API_Integration.html Initializer import { ApiGatewayIntegrationResponse } from '@aws-prototyping-sdk/open-api-gateway' const apiGatewayIntegrationResponse : ApiGatewayIntegrationResponse = { ... } Properties Name Type Description responseParameters {[ key: string ]: string} Specifies parameter mappings for the response. responseTemplates {[ key: string ]: string} Specifies MIME type-specific mapping templates for the response\u2019s payload. statusCode string HTTP status code for the method response. contentHandling string Response payload encoding conversion types. responseParameters Required public readonly responseParameters : {[ key : string ] : string }; Type: {[ key: string ]: string} Specifies parameter mappings for the response. responseTemplates Required public readonly responseTemplates : {[ key : string ] : string }; Type: {[ key: string ]: string} Specifies MIME type-specific mapping templates for the response\u2019s payload. statusCode Required public readonly statusCode : string ; Type: string HTTP status code for the method response. contentHandling Optional public readonly contentHandling : string ; Type: string Response payload encoding conversion types. Valid values are 1) CONVERT_TO_TEXT, for converting a binary payload into a base64-encoded string or converting a text payload into a utf-8-encoded string or passing through the text payload natively without modification, and 2) CONVERT_TO_BINARY, for converting a text payload into a base64-decoded blob or passing through a binary payload natively without modification. ApiGatewayIntegrationTlsConfig Specifies the TLS configuration for an integration. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-extensions-integration-tls-config.html Initializer import { ApiGatewayIntegrationTlsConfig } from '@aws-prototyping-sdk/open-api-gateway' const apiGatewayIntegrationTlsConfig : ApiGatewayIntegrationTlsConfig = { ... } Properties Name Type Description insecureSkipVerification boolean Specifies whether or not API Gateway skips verification that the certificate for an integration endpoint is issued by a supported certificate authority. insecureSkipVerification Optional public readonly insecureSkipVerification : boolean ; Type: boolean Specifies whether or not API Gateway skips verification that the certificate for an integration endpoint is issued by a supported certificate authority. This isn\u2019t recommended, but it enables you to use certificates that are signed by private certificate authorities, or certificates that are self-signed. If enabled, API Gateway still performs basic certificate validation, which includes checking the certificate's expiration date, hostname, and presence of a root certificate authority. Supported only for HTTP and HTTP_PROXY integrations. AuthorizerProps Properties for an authorizer. Initializer import { AuthorizerProps } from '@aws-prototyping-sdk/open-api-gateway' const authorizerProps : AuthorizerProps = { ... } Properties Name Type Description authorizationType aws-cdk-lib.aws_apigateway.AuthorizationType The type of the authorizer. authorizerId string The unique identifier for the authorizer. authorizationScopes string[] Scopes for the authorizer, if any. authorizationType Required public readonly authorizationType : AuthorizationType ; Type: aws-cdk-lib.aws_apigateway.AuthorizationType The type of the authorizer. authorizerId Required public readonly authorizerId : string ; Type: string The unique identifier for the authorizer. authorizationScopes Optional public readonly authorizationScopes : string []; Type: string[] Scopes for the authorizer, if any. CidrAllowList Representation of a CIDR range. Initializer import { CidrAllowList } from '@aws-prototyping-sdk/open-api-gateway' const cidrAllowList : CidrAllowList = { ... } Properties Name Type Description cidrRanges string[] Specify an IPv4 address by using CIDR notation. cidrType string Type of CIDR range. cidrRanges Required public readonly cidrRanges : string []; Type: string[] Specify an IPv4 address by using CIDR notation. For example: To configure AWS WAF to allow, block, or count requests that originated from the IP address 192.0.2.44, specify 192.0.2.44/32 . To configure AWS WAF to allow, block, or count requests that originated from IP addresses from 192.0.2.0 to 192.0.2.255, specify 192.0.2.0/24 . For more information about CIDR notation, see the Wikipedia entry Classless Inter-Domain Routing . Specify an IPv6 address by using CIDR notation. For example: To configure AWS WAF to allow, block, or count requests that originated from the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify 1111:0000:0000:0000:0000:0000:0000:0111/128 . To configure AWS WAF to allow, block, or count requests that originated from IP addresses 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify 1111:0000:0000:0000:0000:0000:0000:0000/64 . cidrType Required public readonly cidrType : string ; Type: string Type of CIDR range. CognitoAuthorizerProps Properties used to configure a cognito authorizer. Initializer import { CognitoAuthorizerProps } from '@aws-prototyping-sdk/open-api-gateway' const cognitoAuthorizerProps : CognitoAuthorizerProps = { ... } Properties Name Type Description authorizerId string Unique identifier for this authorizer. userPools aws-cdk-lib.aws_cognito.IUserPool[] The Cognito user pools associated with this authorizer. authorizationScopes string[] A list of authorization scopes configured on the method. authorizerId Required public readonly authorizerId : string ; Type: string Unique identifier for this authorizer. userPools Required public readonly userPools : IUserPool []; Type: aws-cdk-lib.aws_cognito.IUserPool[] The Cognito user pools associated with this authorizer. authorizationScopes Optional public readonly authorizationScopes : string []; Type: string[] Default: [] A list of authorization scopes configured on the method. When used as the default authorizer, these scopes will be applied to all methods without an authorizer at the integration level. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-method.html#cfn-apigateway-method-authorizationscopes CommonApiProjectOptions Initializer import { CommonApiProjectOptions } from '@aws-prototyping-sdk/open-api-gateway' const commonApiProjectOptions : CommonApiProjectOptions = { ... } Properties Name Type Description clientLanguages ClientLanguage [] The list of languages for which clients will be generated. apiSrcDir string The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats DocumentationFormat [] Formats to generate documentation in. forceGenerateCodeAndDocs boolean Force to generate code and docs even if there were no changes in spec. generatedCodeDir string The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsedSpecFileName string The name of the output parsed OpenAPI specification file. pythonClientOptions projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). typescriptClientOptions projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. clientLanguages Required public readonly clientLanguages : ClientLanguage []; Type: ClientLanguage [] The list of languages for which clients will be generated. A typescript client will always be generated. apiSrcDir Optional public readonly apiSrcDir : string ; Type: string The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats Optional public readonly documentationFormats : DocumentationFormat []; Type: DocumentationFormat [] Formats to generate documentation in. forceGenerateCodeAndDocs Optional public readonly forceGenerateCodeAndDocs : boolean ; Type: boolean Default: \"false\" Force to generate code and docs even if there were no changes in spec. generatedCodeDir Optional public readonly generatedCodeDir : string ; Type: string Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions Optional public readonly javaClientOptions : JavaProjectOptions ; Type: projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsedSpecFileName Optional public readonly parsedSpecFileName : string ; Type: string Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. pythonClientOptions Optional public readonly pythonClientOptions : PythonProjectOptions ; Type: projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. typescriptClientOptions Optional public readonly typescriptClientOptions : TypeScriptProjectOptions ; Type: projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. CustomAuthorizerProps Properties used to configure a custom authorizer. Initializer import { CustomAuthorizerProps } from '@aws-prototyping-sdk/open-api-gateway' const customAuthorizerProps : CustomAuthorizerProps = { ... } Properties Name Type Description authorizerId string Unique identifier for this authorizer. function aws-cdk-lib.aws_lambda.IFunction The lambda function used to authorize requests. authorizerResultTtlInSeconds number The number of seconds during which the authorizer result is cached. identitySource string The source of the identity in an incoming request. type CustomAuthorizerType The type of custom authorizer. authorizerId Required public readonly authorizerId : string ; Type: string Unique identifier for this authorizer. function Required public readonly function : IFunction ; Type: aws-cdk-lib.aws_lambda.IFunction The lambda function used to authorize requests. authorizerResultTtlInSeconds Optional public readonly authorizerResultTtlInSeconds : number ; Type: number Default: 300 The number of seconds during which the authorizer result is cached. identitySource Optional public readonly identitySource : string ; Type: string Default: \"method.request.header.Authorization\" The source of the identity in an incoming request. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-identitysource type Optional public readonly type : CustomAuthorizerType ; Type: CustomAuthorizerType Default: CustomAuthorizerType.TOKEN The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type IntegrationGrantProps Properties for granting the API access to invoke the operation. Initializer import { IntegrationGrantProps } from '@aws-prototyping-sdk/open-api-gateway' const integrationGrantProps : IntegrationGrantProps = { ... } Properties Name Type Description method string The http method of this operation. path string The path of this operation in the api. api aws-cdk-lib.aws_apigateway.SpecRestApi The api to grant permissions for. operationId string The ID of the operation for which permissions are being granted. scope constructs.Construct The scope in which permission resources can be created. method Required public readonly method : string ; Type: string The http method of this operation. path Required public readonly path : string ; Type: string The path of this operation in the api. api Required public readonly api : SpecRestApi ; Type: aws-cdk-lib.aws_apigateway.SpecRestApi The api to grant permissions for. operationId Required public readonly operationId : string ; Type: string The ID of the operation for which permissions are being granted. scope Required public readonly scope : Construct ; Type: constructs.Construct The scope in which permission resources can be created. IntegrationRenderProps Properties for rendering an integration into an API Gateway OpenAPI extension. Initializer import { IntegrationRenderProps } from '@aws-prototyping-sdk/open-api-gateway' const integrationRenderProps : IntegrationRenderProps = { ... } Properties Name Type Description method string The http method of this operation. path string The path of this operation in the api. operationId string The ID of the operation being rendered. scope constructs.Construct The scope in which the integration is being rendered. method Required public readonly method : string ; Type: string The http method of this operation. path Required public readonly path : string ; Type: string The path of this operation in the api. operationId Required public readonly operationId : string ; Type: string The ID of the operation being rendered. scope Required public readonly scope : Construct ; Type: constructs.Construct The scope in which the integration is being rendered. ManagedRule Initializer import { ManagedRule } from '@aws-prototyping-sdk/open-api-gateway' const managedRule : ManagedRule = { ... } Properties Name Type Description name string The name of the managed rule group. vendor string The name of the managed rule group vendor. name Required public readonly name : string ; Type: string The name of the managed rule group. You use this, along with the vendor name, to identify the rule group. vendor Required public readonly vendor : string ; Type: string The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group. MethodAndPath Structure to contain an API operation's method and path. Initializer import { MethodAndPath } from '@aws-prototyping-sdk/open-api-gateway' const methodAndPath : MethodAndPath = { ... } Properties Name Type Description method string The http method of this operation. path string The path of this operation in the api. method Required public readonly method : string ; Type: string The http method of this operation. path Required public readonly path : string ; Type: string The path of this operation in the api. OpenApiGatewayJavaProjectOptions Configuration for the OpenApiGatewayJavaProject. Initializer import { OpenApiGatewayJavaProjectOptions } from '@aws-prototyping-sdk/open-api-gateway' const openApiGatewayJavaProjectOptions : OpenApiGatewayJavaProjectOptions = { ... } Properties Name Type Description name string This is the name of your project. commitGenerated boolean Whether to commit the managed files by default. gitOptions projen.GitOptions Configuration options for git. logging projen.LoggerOptions Configure logging options such as verbosity. outdir string The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projenCommand string The shell command to use in order to run the projen CLI. projenrcJson boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions projen.ProjenrcOptions Options for .projenrc.json. renovatebot boolean Use renovatebot to handle dependency upgrades. renovatebotOptions projen.RenovatebotOptions Options for renovatebot. autoApproveOptions projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge boolean Enable automatic merging on GitHub. autoMergeOptions projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber boolean Add a clobber task which resets the repo to origin. devContainer boolean Add a VSCode development environment (used for GitHub Codespaces). github boolean Enable GitHub integration. githubOptions projen.github.GitHubOptions Options for GitHub integration. gitpod boolean Add a Gitpod development environment. mergify boolean Whether mergify should be enabled on this repository or not. mergifyOptions projen.github.MergifyOptions Options for mergify. projectType projen.ProjectType Which type of project this is (library/app). projenCredentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret string The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale boolean Auto-close of stale issues and pull request. staleOptions projen.github.StaleOptions Auto-close stale issues and pull requests. vscode boolean Enable VSCode integration. artifactId string The artifactId is generally the name that the project is known by. groupId string This is generally unique amongst an organization or a project. version string This is the last piece of the naming puzzle. description string Description of a project is always good. packaging string Project packaging format. url string The URL, like the name, is not required. compileOptions projen.java.MavenCompileOptions Compile options. deps string[] List of runtime dependencies for this project. distdir string Final artifact output directory. junit boolean Include junit tests. junitOptions projen.java.JunitOptions junit options. packagingOptions projen.java.MavenPackagingOptions Packaging options. projenrcJava boolean Use projenrc in java. projenrcJavaOptions projen.java.ProjenrcOptions Options related to projenrc in java. testDeps string[] List of test dependencies for this project. sample boolean Include sample code and test if the relevant directories don't exist. sampleJavaPackage string The java package to use for the code sample. clientLanguages ClientLanguage [] The list of languages for which clients will be generated. apiSrcDir string The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats DocumentationFormat [] Formats to generate documentation in. forceGenerateCodeAndDocs boolean Force to generate code and docs even if there were no changes in spec. generatedCodeDir string The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsedSpecFileName string The name of the output parsed OpenAPI specification file. pythonClientOptions projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). typescriptClientOptions projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. specFile string The path to the OpenAPI specification file, relative to the project source directory (srcdir). name Required public readonly name : string ; Type: string Default: $BASEDIR This is the name of your project. commitGenerated Optional public readonly commitGenerated : boolean ; Type: boolean Default: true Whether to commit the managed files by default. gitOptions Optional public readonly gitOptions : GitOptions ; Type: projen.GitOptions Configuration options for git. logging Optional public readonly logging : LoggerOptions ; Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public readonly outdir : string ; Type: string Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public readonly parent : Project ; Type: projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public readonly projenCommand : string ; Type: string Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public readonly projenrcJson : boolean ; Type: boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public readonly projenrcJsonOptions : ProjenrcOptions ; Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional public readonly renovatebot : boolean ; Type: boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional public readonly renovatebotOptions : RenovatebotOptions ; Type: projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional public readonly autoApproveOptions : AutoApproveOptions ; Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional public readonly autoMerge : boolean ; Type: boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional public readonly autoMergeOptions : AutoMergeOptions ; Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional public readonly clobber : boolean ; Type: boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public readonly devContainer : boolean ; Type: boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public readonly github : boolean ; Type: boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public readonly githubOptions : GitHubOptions ; Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public readonly gitpod : boolean ; Type: boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public readonly mergify : boolean ; Type: boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public readonly mergifyOptions : MergifyOptions ; Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public readonly projectType : ProjectType ; Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional public readonly projenCredentials : GithubCredentials ; Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials public readonly projenTokenSecret : string ; Type: string Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public readonly readme : SampleReadmeProps ; Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional public readonly stale : boolean ; Type: boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public readonly staleOptions : StaleOptions ; Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public readonly vscode : boolean ; Type: boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. artifactId Required public readonly artifactId : string ; Type: string Default: \"my-app\" The artifactId is generally the name that the project is known by. Although the groupId is important, people within the group will rarely mention the groupId in discussion (they are often all be the same ID, such as the MojoHaus project groupId: org.codehaus.mojo). It, along with the groupId, creates a key that separates this project from every other project in the world (at least, it should :) ). Along with the groupId, the artifactId fully defines the artifact's living quarters within the repository. In the case of the above project, my-project lives in $M2_REPO/org/codehaus/mojo/my-project. groupId Required public readonly groupId : string ; Type: string Default: \"org.acme\" This is generally unique amongst an organization or a project. For example, all core Maven artifacts do (well, should) live under the groupId org.apache.maven. Group ID's do not necessarily use the dot notation, for example, the junit project. Note that the dot-notated groupId does not have to correspond to the package structure that the project contains. It is, however, a good practice to follow. When stored within a repository, the group acts much like the Java packaging structure does in an operating system. The dots are replaced by OS specific directory separators (such as '/' in Unix) which becomes a relative directory structure from the base repository. In the example given, the org.codehaus.mojo group lives within the directory $M2_REPO/org/codehaus/mojo. version Required public readonly version : string ; Type: string Default: \"0.1.0\" This is the last piece of the naming puzzle. groupId:artifactId denotes a single project but they cannot delineate which incarnation of that project we are talking about. Do we want the junit:junit of 2018 (version 4.12), or of 2007 (version 3.8.2)? In short: code changes, those changes should be versioned, and this element keeps those versions in line. It is also used within an artifact's repository to separate versions from each other. my-project version 1.0 files live in the directory structure $M2_REPO/org/codehaus/mojo/my-project/1.0. description Optional public readonly description : string ; Type: string Default: undefined Description of a project is always good. Although this should not replace formal documentation, a quick comment to any readers of the POM is always helpful. packaging Optional public readonly packaging : string ; Type: string Default: \"jar\" Project packaging format. url Optional public readonly url : string ; Type: string Default: undefined The URL, like the name, is not required. This is a nice gesture for projects users, however, so that they know where the project lives. compileOptions Optional public readonly compileOptions : MavenCompileOptions ; Type: projen.java.MavenCompileOptions Default: defaults Compile options. deps Optional public readonly deps : string []; Type: string[] Default: [] List of runtime dependencies for this project. Dependencies use the format: <groupId>/<artifactId>@<semver> Additional dependencies can be added via project.addDependency() . distdir Optional public readonly distdir : string ; Type: string Default: \"dist/java\" Final artifact output directory. junit Optional public readonly junit : boolean ; Type: boolean Default: true Include junit tests. junitOptions Optional public readonly junitOptions : JunitOptions ; Type: projen.java.JunitOptions Default: defaults junit options. packagingOptions Optional public readonly packagingOptions : MavenPackagingOptions ; Type: projen.java.MavenPackagingOptions Default: defaults Packaging options. projenrcJava Optional public readonly projenrcJava : boolean ; Type: boolean Default: true Use projenrc in java. This will install projen as a java dependency and will add a synth task which will compile & execute main() from src/main/java/projenrc.java . projenrcJavaOptions Optional public readonly projenrcJavaOptions : ProjenrcOptions ; Type: projen.java.ProjenrcOptions Default: default options Options related to projenrc in java. testDeps Optional public readonly testDeps : string []; Type: string[] Default: [] List of test dependencies for this project. Dependencies use the format: <groupId>/<artifactId>@<semver> Additional dependencies can be added via project.addTestDependency() . sample Optional public readonly sample : boolean ; Type: boolean Default: true Include sample code and test if the relevant directories don't exist. sampleJavaPackage Optional public readonly sampleJavaPackage : string ; Type: string Default: \"org.acme\" The java package to use for the code sample. clientLanguages Required public readonly clientLanguages : ClientLanguage []; Type: ClientLanguage [] The list of languages for which clients will be generated. A typescript client will always be generated. apiSrcDir Optional public readonly apiSrcDir : string ; Type: string The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats Optional public readonly documentationFormats : DocumentationFormat []; Type: DocumentationFormat [] Formats to generate documentation in. forceGenerateCodeAndDocs Optional public readonly forceGenerateCodeAndDocs : boolean ; Type: boolean Default: \"false\" Force to generate code and docs even if there were no changes in spec. generatedCodeDir Optional public readonly generatedCodeDir : string ; Type: string Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions Optional public readonly javaClientOptions : JavaProjectOptions ; Type: projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsedSpecFileName Optional public readonly parsedSpecFileName : string ; Type: string Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. pythonClientOptions Optional public readonly pythonClientOptions : PythonProjectOptions ; Type: projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. typescriptClientOptions Optional public readonly typescriptClientOptions : TypeScriptProjectOptions ; Type: projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. specFile Optional public readonly specFile : string ; Type: string Default: \"spec/spec.yaml\" The path to the OpenAPI specification file, relative to the project source directory (srcdir). OpenApiGatewayProjectOptions Options common to all open api gateway projects. Initializer import { OpenApiGatewayProjectOptions } from '@aws-prototyping-sdk/open-api-gateway' const openApiGatewayProjectOptions : OpenApiGatewayProjectOptions = { ... } Properties Name Type Description clientLanguages ClientLanguage [] The list of languages for which clients will be generated. apiSrcDir string The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats DocumentationFormat [] Formats to generate documentation in. forceGenerateCodeAndDocs boolean Force to generate code and docs even if there were no changes in spec. generatedCodeDir string The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsedSpecFileName string The name of the output parsed OpenAPI specification file. pythonClientOptions projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). typescriptClientOptions projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. specFile string The path to the OpenAPI specification file, relative to the project source directory (srcdir). clientLanguages Required public readonly clientLanguages : ClientLanguage []; Type: ClientLanguage [] The list of languages for which clients will be generated. A typescript client will always be generated. apiSrcDir Optional public readonly apiSrcDir : string ; Type: string The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats Optional public readonly documentationFormats : DocumentationFormat []; Type: DocumentationFormat [] Formats to generate documentation in. forceGenerateCodeAndDocs Optional public readonly forceGenerateCodeAndDocs : boolean ; Type: boolean Default: \"false\" Force to generate code and docs even if there were no changes in spec. generatedCodeDir Optional public readonly generatedCodeDir : string ; Type: string Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions Optional public readonly javaClientOptions : JavaProjectOptions ; Type: projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsedSpecFileName Optional public readonly parsedSpecFileName : string ; Type: string Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. pythonClientOptions Optional public readonly pythonClientOptions : PythonProjectOptions ; Type: projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. typescriptClientOptions Optional public readonly typescriptClientOptions : TypeScriptProjectOptions ; Type: projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. specFile Optional public readonly specFile : string ; Type: string Default: \"spec/spec.yaml\" The path to the OpenAPI specification file, relative to the project source directory (srcdir). OpenApiGatewayPythonProjectOptions Configuration for the OpenApiGatewayPythonProject. Initializer import { OpenApiGatewayPythonProjectOptions } from '@aws-prototyping-sdk/open-api-gateway' const openApiGatewayPythonProjectOptions : OpenApiGatewayPythonProjectOptions = { ... } Properties Name Type Description name string This is the name of your project. commitGenerated boolean Whether to commit the managed files by default. gitOptions projen.GitOptions Configuration options for git. logging projen.LoggerOptions Configure logging options such as verbosity. outdir string The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projenCommand string The shell command to use in order to run the projen CLI. projenrcJson boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions projen.ProjenrcOptions Options for .projenrc.json. renovatebot boolean Use renovatebot to handle dependency upgrades. renovatebotOptions projen.RenovatebotOptions Options for renovatebot. autoApproveOptions projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge boolean Enable automatic merging on GitHub. autoMergeOptions projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber boolean Add a clobber task which resets the repo to origin. devContainer boolean Add a VSCode development environment (used for GitHub Codespaces). github boolean Enable GitHub integration. githubOptions projen.github.GitHubOptions Options for GitHub integration. gitpod boolean Add a Gitpod development environment. mergify boolean Whether mergify should be enabled on this repository or not. mergifyOptions projen.github.MergifyOptions Options for mergify. projectType projen.ProjectType Which type of project this is (library/app). projenCredentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret string The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale boolean Auto-close of stale issues and pull request. staleOptions projen.github.StaleOptions Auto-close stale issues and pull requests. vscode boolean Enable VSCode integration. authorEmail string Author's e-mail. authorName string Author's name. version string Version of the package. classifiers string[] A list of PyPI trove classifiers that describe the project. description string A short description of the package. homepage string A URL to the website of the project. license string License of this package as an SPDX identifier. packageName string Package name. poetryOptions projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setupConfig {[ key: string ]: any} Additional fields to pass in the setup() function if using setuptools. moduleName string Name of the python package as used in imports and filenames. deps string[] List of runtime dependencies for this project. devDeps string[] List of dev dependencies for this project. pip boolean Use pip with a requirements.txt file to track project dependencies. poetry boolean Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrcJs boolean Use projenrc in javascript. projenrcJsOptions projen.javascript.ProjenrcOptions Options related to projenrc in JavaScript. projenrcPython boolean Use projenrc in Python. projenrcPythonOptions projen.python.ProjenrcOptions Options related to projenrc in python. pytest boolean Include pytest tests. pytestOptions projen.python.PytestOptions pytest options. sample boolean Include sample code and test if the relevant directories don't exist. setuptools boolean Use setuptools with a setup.py script for packaging and publishing. venv boolean Use venv to manage a virtual environment for installing dependencies inside. venvOptions projen.python.VenvOptions Venv options. clientLanguages ClientLanguage [] The list of languages for which clients will be generated. apiSrcDir string The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats DocumentationFormat [] Formats to generate documentation in. forceGenerateCodeAndDocs boolean Force to generate code and docs even if there were no changes in spec. generatedCodeDir string The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsedSpecFileName string The name of the output parsed OpenAPI specification file. pythonClientOptions projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). typescriptClientOptions projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. specFile string The path to the OpenAPI specification file, relative to the project source directory (srcdir). name Required public readonly name : string ; Type: string Default: $BASEDIR This is the name of your project. commitGenerated Optional public readonly commitGenerated : boolean ; Type: boolean Default: true Whether to commit the managed files by default. gitOptions Optional public readonly gitOptions : GitOptions ; Type: projen.GitOptions Configuration options for git. logging Optional public readonly logging : LoggerOptions ; Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public readonly outdir : string ; Type: string Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public readonly parent : Project ; Type: projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public readonly projenCommand : string ; Type: string Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public readonly projenrcJson : boolean ; Type: boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public readonly projenrcJsonOptions : ProjenrcOptions ; Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional public readonly renovatebot : boolean ; Type: boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional public readonly renovatebotOptions : RenovatebotOptions ; Type: projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional public readonly autoApproveOptions : AutoApproveOptions ; Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional public readonly autoMerge : boolean ; Type: boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional public readonly autoMergeOptions : AutoMergeOptions ; Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional public readonly clobber : boolean ; Type: boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public readonly devContainer : boolean ; Type: boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public readonly github : boolean ; Type: boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public readonly githubOptions : GitHubOptions ; Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public readonly gitpod : boolean ; Type: boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public readonly mergify : boolean ; Type: boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public readonly mergifyOptions : MergifyOptions ; Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public readonly projectType : ProjectType ; Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional public readonly projenCredentials : GithubCredentials ; Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials public readonly projenTokenSecret : string ; Type: string Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public readonly readme : SampleReadmeProps ; Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional public readonly stale : boolean ; Type: boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public readonly staleOptions : StaleOptions ; Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public readonly vscode : boolean ; Type: boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. authorEmail Required public readonly authorEmail : string ; Type: string Default: $GIT_USER_EMAIL Author's e-mail. authorName Required public readonly authorName : string ; Type: string Default: $GIT_USER_NAME Author's name. version Required public readonly version : string ; Type: string Default: \"0.1.0\" Version of the package. classifiers Optional public readonly classifiers : string []; Type: string[] A list of PyPI trove classifiers that describe the project. https://pypi.org/classifiers/ description Optional public readonly description : string ; Type: string A short description of the package. homepage Optional public readonly homepage : string ; Type: string A URL to the website of the project. license Optional public readonly license : string ; Type: string License of this package as an SPDX identifier. packageName Optional public readonly packageName : string ; Type: string Package name. poetryOptions Optional public readonly poetryOptions : PoetryPyprojectOptionsWithoutDeps ; Type: projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setupConfig Optional public readonly setupConfig : {[ key : string ] : any }; Type: {[ key: string ]: any} Additional fields to pass in the setup() function if using setuptools. moduleName Required public readonly module Name : string ; Type: string Default: $PYTHON_MODULE_NAME Name of the python package as used in imports and filenames. Must only consist of alphanumeric characters and underscores. deps Optional public readonly deps : string []; Type: string[] Default: [] List of runtime dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDependency() . devDeps Optional public readonly devDeps : string []; Type: string[] Default: [] List of dev dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDevDependency() . pip Optional public readonly pip : boolean ; Type: boolean Default: true, unless poetry is true, then false Use pip with a requirements.txt file to track project dependencies. poetry Optional public readonly poetry : boolean ; Type: boolean Default: false Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. This feature is incompatible with pip, setuptools, or venv. If you set this option to true , then pip, setuptools, and venv must be set to false . projenrcJs Optional public readonly projenrcJs : boolean ; Type: boolean Default: false Use projenrc in javascript. This will install projen as a JavaScript dependency and add a synth task which will run .projenrc.js . projenrcJsOptions Optional public readonly projenrcJsOptions : ProjenrcOptions ; Type: projen.javascript.ProjenrcOptions Default: default options Options related to projenrc in JavaScript. projenrcPython Optional public readonly projenrcPython : boolean ; Type: boolean Default: true Use projenrc in Python. This will install projen as a Python dependency and add a synth task which will run .projenrc.py . projenrcPythonOptions Optional public readonly projenrcPythonOptions : ProjenrcOptions ; Type: projen.python.ProjenrcOptions Default: default options Options related to projenrc in python. pytest Optional public readonly pytest : boolean ; Type: boolean Default: true Include pytest tests. pytestOptions Optional public readonly pytestOptions : PytestOptions ; Type: projen.python.PytestOptions Default: defaults pytest options. sample Optional public readonly sample : boolean ; Type: boolean Default: true Include sample code and test if the relevant directories don't exist. setuptools Optional public readonly setuptools : boolean ; Type: boolean Default: true, unless poetry is true, then false Use setuptools with a setup.py script for packaging and publishing. venv Optional public readonly venv : boolean ; Type: boolean Default: true, unless poetry is true, then false Use venv to manage a virtual environment for installing dependencies inside. venvOptions Optional public readonly venvOptions : VenvOptions ; Type: projen.python.VenvOptions Default: defaults Venv options. clientLanguages Required public readonly clientLanguages : ClientLanguage []; Type: ClientLanguage [] The list of languages for which clients will be generated. A typescript client will always be generated. apiSrcDir Optional public readonly apiSrcDir : string ; Type: string The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats Optional public readonly documentationFormats : DocumentationFormat []; Type: DocumentationFormat [] Formats to generate documentation in. forceGenerateCodeAndDocs Optional public readonly forceGenerateCodeAndDocs : boolean ; Type: boolean Default: \"false\" Force to generate code and docs even if there were no changes in spec. generatedCodeDir Optional public readonly generatedCodeDir : string ; Type: string Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions Optional public readonly javaClientOptions : JavaProjectOptions ; Type: projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsedSpecFileName Optional public readonly parsedSpecFileName : string ; Type: string Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. pythonClientOptions Optional public readonly pythonClientOptions : PythonProjectOptions ; Type: projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. typescriptClientOptions Optional public readonly typescriptClientOptions : TypeScriptProjectOptions ; Type: projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. specFile Optional public readonly specFile : string ; Type: string Default: \"spec/spec.yaml\" The path to the OpenAPI specification file, relative to the project source directory (srcdir). OpenApiGatewayRestApiProps Configuration for the OpenApiGatewayRestApi construct. Initializer import { OpenApiGatewayRestApiProps } from '@aws-prototyping-sdk/open-api-gateway' const openApiGatewayRestApiProps : OpenApiGatewayRestApiProps = { ... } Properties Name Type Description cloudWatchRole boolean Automatically configure an AWS CloudWatch role for API Gateway. deploy boolean Indicates if a Deployment should be automatically created for this API, and recreated when the API model (resources, methods) changes. deployOptions aws-cdk-lib.aws_apigateway.StageOptions Options for the API Gateway stage that will always point to the latest deployment when deploy is enabled. description string A description of the RestApi construct. disableExecuteApiEndpoint boolean Specifies whether clients can invoke the API using the default execute-api endpoint. domainName aws-cdk-lib.aws_apigateway.DomainNameOptions Configure a custom domain name and map it to this API. endpointExportName string Export name for the CfnOutput containing the API endpoint. endpointTypes aws-cdk-lib.aws_apigateway.EndpointType[] A list of the endpoint types of the API. failOnWarnings boolean Indicates whether to roll back the resource if a warning occurs while API Gateway is creating the RestApi resource. parameters {[ key: string ]: string} Custom header parameters for the request. policy aws-cdk-lib.aws_iam.PolicyDocument A policy document that contains the permissions for this RestApi. restApiName string A name for the API Gateway RestApi resource. retainDeployments boolean Retains old deployment resources when the API changes. integrations {[ key: string ]: OpenApiIntegration } A mapping of API operation to its integration. operationLookup {[ key: string ]: MethodAndPath } Details about each operation. corsOptions aws-cdk-lib.aws_apigateway.CorsOptions Cross Origin Resource Sharing options for the API. defaultAuthorizer Authorizer The default authorizer to use for your api. spec any The parsed OpenAPI specification. specPath string Path to the JSON open api spec. webAclOptions OpenApiGatewayWebAclOptions Options for the AWS WAF v2 WebACL associated with the api. cloudWatchRole Optional public readonly cloudWatchRole : boolean ; Type: boolean Default: false if @aws-cdk/aws-apigateway:disableCloudWatchRole is enabled, true otherwise Automatically configure an AWS CloudWatch role for API Gateway. deploy Optional public readonly deploy : boolean ; Type: boolean Default: true Indicates if a Deployment should be automatically created for this API, and recreated when the API model (resources, methods) changes. Since API Gateway deployments are immutable, When this option is enabled (by default), an AWS::ApiGateway::Deployment resource will automatically created with a logical ID that hashes the API model (methods, resources and options). This means that when the model changes, the logical ID of this CloudFormation resource will change, and a new deployment will be created. If this is set, latestDeployment will refer to the Deployment object and deploymentStage will refer to a Stage that points to this deployment. To customize the stage options, use the deployOptions property. A CloudFormation Output will also be defined with the root URL endpoint of this REST API. deployOptions Optional public readonly deployOptions : StageOptions ; Type: aws-cdk-lib.aws_apigateway.StageOptions Default: Based on defaults of StageOptions . Options for the API Gateway stage that will always point to the latest deployment when deploy is enabled. If deploy is disabled, this value cannot be set. description Optional public readonly description : string ; Type: string Default: 'Automatically created by the RestApi construct' A description of the RestApi construct. disableExecuteApiEndpoint Optional public readonly disableExecuteApiEndpoint : boolean ; Type: boolean Default: false Specifies whether clients can invoke the API using the default execute-api endpoint. To require that clients use a custom domain name to invoke the API, disable the default endpoint. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-restapi.html domainName Optional public readonly domainName : DomainNameOptions ; Type: aws-cdk-lib.aws_apigateway.DomainNameOptions Default: no domain name is defined, use addDomainName or directly define a DomainName . Configure a custom domain name and map it to this API. endpointExportName Optional public readonly endpointExportName : string ; Type: string Default: when no export name is given, output will be created without export Export name for the CfnOutput containing the API endpoint. endpointTypes Optional public readonly endpointTypes : EndpointType []; Type: aws-cdk-lib.aws_apigateway.EndpointType[] Default: EndpointType.EDGE A list of the endpoint types of the API. Use this property when creating an API. failOnWarnings Optional public readonly failOnWarnings : boolean ; Type: boolean Default: false Indicates whether to roll back the resource if a warning occurs while API Gateway is creating the RestApi resource. parameters Optional public readonly parameters : {[ key : string ] : string }; Type: {[ key: string ]: string} Default: No parameters. Custom header parameters for the request. https://docs.aws.amazon.com/cli/latest/reference/apigateway/import-rest-api.html policy Optional public readonly policy : PolicyDocument ; Type: aws-cdk-lib.aws_iam.PolicyDocument Default: No policy. A policy document that contains the permissions for this RestApi. restApiName Optional public readonly restApiName : string ; Type: string Default: ID of the RestApi construct. A name for the API Gateway RestApi resource. retainDeployments Optional public readonly retainDeployments : boolean ; Type: boolean Default: false Retains old deployment resources when the API changes. This allows manually reverting stages to point to old deployments via the AWS Console. integrations Required public readonly integrations : {[ key : string ] : OpenApiIntegration }; Type: {[ key: string ]: OpenApiIntegration } A mapping of API operation to its integration. operationLookup Required public readonly operationLookup : {[ key : string ] : MethodAndPath }; Type: {[ key: string ]: MethodAndPath } Details about each operation. corsOptions Optional public readonly corsOptions : CorsOptions ; Type: aws-cdk-lib.aws_apigateway.CorsOptions Cross Origin Resource Sharing options for the API. defaultAuthorizer Optional public readonly defaultAuthorizer : Authorizer ; Type: Authorizer The default authorizer to use for your api. When omitted, no default authorizer is used. Authorizers specified at the integration level will override this for that operation. spec Required public readonly spec : any ; Type: any The parsed OpenAPI specification. specPath Required public readonly specPath : string ; Type: string Path to the JSON open api spec. webAclOptions Optional public readonly webAclOptions : OpenApiGatewayWebAclOptions ; Type: OpenApiGatewayWebAclOptions Options for the AWS WAF v2 WebACL associated with the api. By default, a Web ACL with the AWS default managed rule set will be associated with the API. These options may disable or override the defaults. OpenApiGatewayTsProjectOptions Configuration for the OpenApiGatewayTsProject. Initializer import { OpenApiGatewayTsProjectOptions } from '@aws-prototyping-sdk/open-api-gateway' const openApiGatewayTsProjectOptions : OpenApiGatewayTsProjectOptions = { ... } Properties Name Type Description name string This is the name of your project. commitGenerated boolean Whether to commit the managed files by default. gitOptions projen.GitOptions Configuration options for git. logging projen.LoggerOptions Configure logging options such as verbosity. outdir string The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projenCommand string The shell command to use in order to run the projen CLI. projenrcJson boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions projen.ProjenrcOptions Options for .projenrc.json. renovatebot boolean Use renovatebot to handle dependency upgrades. renovatebotOptions projen.RenovatebotOptions Options for renovatebot. autoApproveOptions projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge boolean Enable automatic merging on GitHub. autoMergeOptions projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber boolean Add a clobber task which resets the repo to origin. devContainer boolean Add a VSCode development environment (used for GitHub Codespaces). github boolean Enable GitHub integration. githubOptions projen.github.GitHubOptions Options for GitHub integration. gitpod boolean Add a Gitpod development environment. mergify boolean Whether mergify should be enabled on this repository or not. mergifyOptions projen.github.MergifyOptions Options for mergify. projectType projen.ProjectType Which type of project this is (library/app). projenCredentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret string The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale boolean Auto-close of stale issues and pull request. staleOptions projen.github.StaleOptions Auto-close stale issues and pull requests. vscode boolean Enable VSCode integration. allowLibraryDependencies boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail string Author's e-mail. authorName string Author's name. authorOrganization boolean Is the author an organization. authorUrl string Author's URL / Website. autoDetectBin boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin {[ key: string ]: string} Binary programs vended with your module. bugsEmail string The email address to which issues should be reported. bugsUrl string The url to your project's issue tracker. bundledDeps string[] List of dependencies to bundle into this module. codeArtifactOptions projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps string[] Runtime dependencies of this module. description string The description is just a string that helps people understand the purpose of the package. devDeps string[] Build dependencies for this module. entrypoint string Module entrypoint ( main in package.json ). homepage string Package's Homepage / Website. keywords string[] Keywords to include in package.json . license string License's SPDX identifier. licensed boolean Indicates if a license should be added. maxNodeVersion string Minimum node.js version to require via engines (inclusive). minNodeVersion string Minimum Node.js version to require via package.json engines (inclusive). npmAccess projen.javascript.NpmAccess Access level of the npm package. npmRegistry string The host name of the npm registry to publish to. npmRegistryUrl string The base URL of the npm package registry. npmTokenSecret string GitHub secret which contains the NPM token to use when publishing packages. packageManager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName string The \"name\" in package.json. peerDependencyOptions projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps string[] Peer dependencies for this module. pnpmVersion string The version of PNPM to use if using PNPM as a package manager. repository string The repository is the location where the actual code for your package lives. repositoryDirectory string If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions projen.javascript.ScopedPackagesOptions[] Options for privately hosted scoped packages. scripts {[ key: string ]: string} npm scripts to include. stability string Package's Stability. jsiiReleaseVersion string Version requirement of publib which is used to publish modules to npm. majorVersion number Major version to release from the default branch. minMajorVersion number Minimal Major version to release. npmDistTag string The npmDistTag to use when publishing from the default branch. postBuildSteps projen.github.workflows.JobStep[] Steps to execute after build as part of the release workflow. prerelease string Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches {[ key: string ]: projen.release.BranchOptions} Defines additional release branches. releaseEveryCommit boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel string The label to apply to issues indicating publish failures. releaseSchedule string CRON schedule to trigger new releases. releaseTagPrefix string Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName string The name of the default release workflow. releaseWorkflowSetupSteps projen.github.workflows.JobStep[] A set of workflow steps to execute in order to setup the workflow container. versionrcOptions {[ key: string ]: any} Custom configuration used when creating changelog with standard-version package. workflowContainerImage string Container image to use for GitHub workflows. workflowRunsOn string[] Github Runner selection labels. defaultReleaseBranch string The name of the main release branch. artifactsDirectory string A directory which will contain build artifacts. autoApproveUpgrades boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers projen.github.workflows.Triggers Build workflow triggers. bundlerOptions projen.javascript.BundlerOptions Options for Bundler . codeCov boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret string Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner string License copyright owner. copyrightPeriod string The copyright years to put in the LICENSE file. dependabot boolean Use dependabot to handle dependency upgrades. dependabotOptions projen.github.DependabotOptions Options for dependabot. depsUpgrade boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore string[] Additional entries to .gitignore. jest boolean Setup jest unit tests. jestOptions projen.javascript.JestOptions Jest options. mutableBuild boolean Automatically update files modified during builds to pull-request branches. npmignore string[] Additional entries to .npmignore. npmignoreEnabled boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier boolean Setup prettier. prettierOptions projen.javascript.PrettierOptions Prettier options. projenDevDependency boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions projen.javascript.ProjenrcOptions Options for .projenrc.js. projenVersion string Version of projen to install. pullRequestTemplate boolean Include a GitHub pull request template. pullRequestTemplateContents string[] The contents of the pull request template. release boolean Add release management to this project. releaseToNpm boolean Automatically release to npm when new versions are introduced. releaseWorkflow boolean DEPRECATED: renamed to release . workflowBootstrapSteps projen.github.workflows.JobStep[] Workflow steps to use in order to bootstrap this repo. workflowGitIdentity projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion string The node version to use in GitHub workflows. disableTsconfig boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen boolean Docgen by Typedoc. docsDirectory string Docs directory. entrypointTypes string The .d.ts file that includes the type declarations for this module. eslint boolean Setup eslint. eslintOptions projen.javascript.EslintOptions Eslint options. libdir string Typescript artifacts output directory. projenrcTs boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir string Typescript sources directory. testdir string Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile string The name of the development tsconfig.json file. typescriptVersion string TypeScript version to use. clientLanguages ClientLanguage [] The list of languages for which clients will be generated. apiSrcDir string The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats DocumentationFormat [] Formats to generate documentation in. forceGenerateCodeAndDocs boolean Force to generate code and docs even if there were no changes in spec. generatedCodeDir string The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsedSpecFileName string The name of the output parsed OpenAPI specification file. pythonClientOptions projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). typescriptClientOptions projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. specFile string The path to the OpenAPI specification file, relative to the project source directory (srcdir). name Required public readonly name : string ; Type: string Default: $BASEDIR This is the name of your project. commitGenerated Optional public readonly commitGenerated : boolean ; Type: boolean Default: true Whether to commit the managed files by default. gitOptions Optional public readonly gitOptions : GitOptions ; Type: projen.GitOptions Configuration options for git. logging Optional public readonly logging : LoggerOptions ; Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public readonly outdir : string ; Type: string Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public readonly parent : Project ; Type: projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public readonly projenCommand : string ; Type: string Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public readonly projenrcJson : boolean ; Type: boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public readonly projenrcJsonOptions : ProjenrcOptions ; Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional public readonly renovatebot : boolean ; Type: boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional public readonly renovatebotOptions : RenovatebotOptions ; Type: projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional public readonly autoApproveOptions : AutoApproveOptions ; Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional public readonly autoMerge : boolean ; Type: boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional public readonly autoMergeOptions : AutoMergeOptions ; Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional public readonly clobber : boolean ; Type: boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public readonly devContainer : boolean ; Type: boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public readonly github : boolean ; Type: boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public readonly githubOptions : GitHubOptions ; Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public readonly gitpod : boolean ; Type: boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public readonly mergify : boolean ; Type: boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public readonly mergifyOptions : MergifyOptions ; Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public readonly projectType : ProjectType ; Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional public readonly projenCredentials : GithubCredentials ; Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials public readonly projenTokenSecret : string ; Type: string Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public readonly readme : SampleReadmeProps ; Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional public readonly stale : boolean ; Type: boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public readonly staleOptions : StaleOptions ; Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public readonly vscode : boolean ; Type: boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allowLibraryDependencies Optional public readonly allowLibraryDependencies : boolean ; Type: boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. authorEmail Optional public readonly authorEmail : string ; Type: string Author's e-mail. authorName Optional public readonly authorName : string ; Type: string Author's name. authorOrganization Optional public readonly authorOrganization : boolean ; Type: boolean Is the author an organization. authorUrl Optional public readonly authorUrl : string ; Type: string Author's URL / Website. autoDetectBin Optional public readonly autoDetectBin : boolean ; Type: boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional public readonly bin : {[ key : string ] : string }; Type: {[ key: string ]: string} Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugsEmail Optional public readonly bugsEmail : string ; Type: string The email address to which issues should be reported. bugsUrl Optional public readonly bugsUrl : string ; Type: string The url to your project's issue tracker. bundledDeps Optional public readonly bundledDeps : string []; Type: string[] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. codeArtifactOptions Optional public readonly codeArtifactOptions : CodeArtifactOptions ; Type: projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional public readonly deps : string []; Type: string[] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'express' , 'lodash' , 'foo@^2' ] description Optional public readonly description : string ; Type: string The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description devDeps Optional public readonly devDeps : string []; Type: string[] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'typescript' , '@types/express' ] entrypoint Optional public readonly entrypoint : string ; Type: string Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional public readonly homepage : string ; Type: string Package's Homepage / Website. keywords Optional public readonly keywords : string []; Type: string[] Keywords to include in package.json . license Optional public readonly license : string ; Type: string Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional public readonly licensed : boolean ; Type: boolean Default: true Indicates if a license should be added. maxNodeVersion Optional public readonly maxNodeVersion : string ; Type: string Default: no max Minimum node.js version to require via engines (inclusive). minNodeVersion Optional public readonly minNodeVersion : string ; Type: string Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npmAccess Optional public readonly npmAccess : NpmAccess ; Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npmRegistry ~~ Optional Deprecated: use npmRegistryUrl instead public readonly npmRegistry : string ; Type: string The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npmRegistryUrl Optional public readonly npmRegistryUrl : string ; Type: string Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npmTokenSecret Optional public readonly npmTokenSecret : string ; Type: string Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. packageManager Optional public readonly packageManager : NodePackageManager ; Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. packageName Optional public readonly packageName : string ; Type: string Default: defaults to project name The \"name\" in package.json. peerDependencyOptions Optional public readonly peerDependencyOptions : PeerDependencyOptions ; Type: projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps Optional public readonly peerDeps : string []; Type: string[] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. pnpmVersion Optional public readonly pnpmVersion : string ; Type: string Default: \"7\" The version of PNPM to use if using PNPM as a package manager. repository Optional public readonly repository : string ; Type: string The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repositoryDirectory Optional public readonly repositoryDirectory : string ; Type: string If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions Optional public readonly scopedPackagesOptions : ScopedPackagesOptions []; Type: projen.javascript.ScopedPackagesOptions[] Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional public readonly scripts : {[ key : string ] : string }; Type: {[ key: string ]: string} Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional public readonly stability : string ; Type: string Package's Stability. jsiiReleaseVersion Optional public readonly jsiiReleaseVersion : string ; Type: string Default: \"latest\" Version requirement of publib which is used to publish modules to npm. majorVersion Optional public readonly majorVersion : number ; Type: number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. minMajorVersion Optional public readonly minMajorVersion : number ; Type: number Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npmDistTag Optional public readonly npmDistTag : string ; Type: string Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. postBuildSteps Optional public readonly postBuildSteps : JobStep []; Type: projen.github.workflows.JobStep[] Default: [] Steps to execute after build as part of the release workflow. prerelease Optional public readonly prerelease : string ; Type: string Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun Optional public readonly publishDryRun : boolean ; Type: boolean Default: false Instead of actually publishing to package managers, just print the publishing command. publishTasks Optional public readonly publishTasks : boolean ; Type: boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. releaseBranches Optional public readonly releaseBranches : {[ key : string ] : BranchOptions }; Type: {[ key: string ]: projen.release.BranchOptions} Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ releaseEveryCommit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead public readonly releaseEveryCommit : boolean ; Type: boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue Optional public readonly releaseFailureIssue : boolean ; Type: boolean Default: false Create a github issue on every failed publishing task. releaseFailureIssueLabel Optional public readonly releaseFailureIssueLabel : string ; Type: string Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ releaseSchedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead public readonly releaseSchedule : string ; Type: string Default: no scheduled releases CRON schedule to trigger new releases. releaseTagPrefix Optional public readonly releaseTagPrefix : string ; Type: string Default: \"v\" Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. releaseTrigger Optional public readonly releaseTrigger : ReleaseTrigger ; Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. releaseWorkflowName Optional public readonly releaseWorkflowName : string ; Type: string Default: \"Release\" The name of the default release workflow. releaseWorkflowSetupSteps Optional public readonly releaseWorkflowSetupSteps : JobStep []; Type: projen.github.workflows.JobStep[] A set of workflow steps to execute in order to setup the workflow container. versionrcOptions Optional public readonly versionrcOptions : {[ key : string ] : any }; Type: {[ key: string ]: any} Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflowContainerImage Optional public readonly workflowContainerImage : string ; Type: string Default: default image Container image to use for GitHub workflows. workflowRunsOn Optional public readonly workflowRunsOn : string []; Type: string[] Default: [\"ubuntu-latest\"] Github Runner selection labels. defaultReleaseBranch Required public readonly defaultReleaseBranch : string ; Type: string Default: \"main\" The name of the main release branch. artifactsDirectory Optional public readonly artifactsDirectory : string ; Type: string Default: \"dist\" A directory which will contain build artifacts. autoApproveUpgrades Optional public readonly autoApproveUpgrades : boolean ; Type: boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. buildWorkflow Optional public readonly buildWorkflow : boolean ; Type: boolean Default: true if not a subproject Define a GitHub workflow for building PRs. buildWorkflowTriggers Optional public readonly buildWorkflowTriggers : Triggers ; Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundlerOptions Optional public readonly bundlerOptions : BundlerOptions ; Type: projen.javascript.BundlerOptions Options for Bundler . codeCov Optional public readonly codeCov : boolean ; Type: boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret Optional public readonly codeCovTokenSecret : string ; Type: string Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner Optional public readonly copyrightOwner : string ; Type: string Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyrightPeriod Optional public readonly copyrightPeriod : string ; Type: string Default: current year The copyright years to put in the LICENSE file. dependabot Optional public readonly dependabot : boolean ; Type: boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabotOptions Optional public readonly dependabotOptions : DependabotOptions ; Type: projen.github.DependabotOptions Default: default options Options for dependabot. depsUpgrade Optional public readonly depsUpgrade : boolean ; Type: boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . depsUpgradeOptions Optional public readonly depsUpgradeOptions : UpgradeDependenciesOptions ; Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional public readonly gitignore : string []; Type: string[] Additional entries to .gitignore. jest Optional public readonly jest : boolean ; Type: boolean Default: true Setup jest unit tests. jestOptions Optional public readonly jestOptions : JestOptions ; Type: projen.javascript.JestOptions Default: default options Jest options. mutableBuild Optional public readonly mutableBuild : boolean ; Type: boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore public readonly npmignore : string []; Type: string[] Additional entries to .npmignore. npmignoreEnabled Optional public readonly npmignoreEnabled : boolean ; Type: boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional public readonly package : boolean ; Type: boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional public readonly prettier : boolean ; Type: boolean Default: false Setup prettier. prettierOptions Optional public readonly prettierOptions : PrettierOptions ; Type: projen.javascript.PrettierOptions Default: default options Prettier options. projenDevDependency Optional public readonly projenDevDependency : boolean ; Type: boolean Default: true Indicates of \"projen\" should be installed as a devDependency. projenrcJs Optional public readonly projenrcJs : boolean ; Type: boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions Optional public readonly projenrcJsOptions : ProjenrcOptions ; Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projenVersion Optional public readonly projenVersion : string ; Type: string Default: Defaults to the latest version. Version of projen to install. pullRequestTemplate Optional public readonly pullRequestTemplate : boolean ; Type: boolean Default: true Include a GitHub pull request template. pullRequestTemplateContents Optional public readonly pullRequestTemplateContents : string []; Type: string[] Default: default content The contents of the pull request template. release Optional public readonly release : boolean ; Type: boolean Default: true (false for subprojects) Add release management to this project. releaseToNpm Optional public readonly releaseToNpm : boolean ; Type: boolean Default: false Automatically release to npm when new versions are introduced. ~~ releaseWorkflow ~~ Optional Deprecated: see release . public readonly releaseWorkflow : boolean ; Type: boolean Default: true if not a subproject DEPRECATED: renamed to release . workflowBootstrapSteps Optional public readonly workflowBootstrapSteps : JobStep []; Type: projen.github.workflows.JobStep[] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflowGitIdentity Optional public readonly workflowGitIdentity : GitIdentity ; Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflowNodeVersion Optional public readonly workflowNodeVersion : string ; Type: string Default: same as minNodeVersion The node version to use in GitHub workflows. disableTsconfig Optional public readonly disableTsconfig : boolean ; Type: boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional public readonly docgen : boolean ; Type: boolean Default: false Docgen by Typedoc. docsDirectory Optional public readonly docsDirectory : string ; Type: string Default: \"docs\" Docs directory. entrypointTypes Optional public readonly entrypointTypes : string ; Type: string Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional public readonly eslint : boolean ; Type: boolean Default: true Setup eslint. eslintOptions Optional public readonly eslintOptions : EslintOptions ; Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional public readonly libdir : string ; Type: string Default: \"lib\" Typescript artifacts output directory. projenrcTs Optional public readonly projenrcTs : boolean ; Type: boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions Optional public readonly projenrcTsOptions : ProjenrcOptions ; Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode Optional public readonly sampleCode : boolean ; Type: boolean Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional public readonly srcdir : string ; Type: string Default: \"src\" Typescript sources directory. testdir Optional public readonly testdir : string ; Type: string Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional public readonly tsconfig : TypescriptConfigOptions ; Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfigDev Optional public readonly tsconfigDev : TypescriptConfigOptions ; Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile Optional public readonly tsconfigDevFile : string ; Type: string Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescriptVersion Optional public readonly typescriptVersion : string ; Type: string Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). clientLanguages Required public readonly clientLanguages : ClientLanguage []; Type: ClientLanguage [] The list of languages for which clients will be generated. A typescript client will always be generated. apiSrcDir Optional public readonly apiSrcDir : string ; Type: string The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats Optional public readonly documentationFormats : DocumentationFormat []; Type: DocumentationFormat [] Formats to generate documentation in. forceGenerateCodeAndDocs Optional public readonly forceGenerateCodeAndDocs : boolean ; Type: boolean Default: \"false\" Force to generate code and docs even if there were no changes in spec. generatedCodeDir Optional public readonly generatedCodeDir : string ; Type: string Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions Optional public readonly javaClientOptions : JavaProjectOptions ; Type: projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsedSpecFileName Optional public readonly parsedSpecFileName : string ; Type: string Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. pythonClientOptions Optional public readonly pythonClientOptions : PythonProjectOptions ; Type: projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. typescriptClientOptions Optional public readonly typescriptClientOptions : TypeScriptProjectOptions ; Type: projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. specFile Optional public readonly specFile : string ; Type: string Default: \"spec/spec.yaml\" The path to the OpenAPI specification file, relative to the project source directory (srcdir). OpenApiGatewayWebAclOptions Configuration for the Web ACL associated with the API. Initializer import { OpenApiGatewayWebAclOptions } from '@aws-prototyping-sdk/open-api-gateway' const openApiGatewayWebAclOptions : OpenApiGatewayWebAclOptions = { ... } Properties Name Type Description cidrAllowList CidrAllowList List of cidr ranges to allow. disable boolean If set to true, no WebACL will be associated with the API. managedRules ManagedRule [] List of managed rules to apply to the web acl. cidrAllowList Optional public readonly cidrAllowList : CidrAllowList ; Type: CidrAllowList Default: undefined List of cidr ranges to allow. disable Optional public readonly disable : boolean ; Type: boolean Default: false If set to true, no WebACL will be associated with the API. You can also use this option if you would like to create your own WebACL and associate it yourself. managedRules Optional public readonly managedRules : ManagedRule []; Type: ManagedRule [] Default: [{ vendor: \"AWS\", name: \"AWSManagedRulesCommonRuleSet\" }] List of managed rules to apply to the web acl. OpenApiIntegration Defines an integration for an individual API operation. Initializer import { OpenApiIntegration } from '@aws-prototyping-sdk/open-api-gateway' const openApiIntegration : OpenApiIntegration = { ... } Properties Name Type Description integration Integration The lambda function to service the api operation. authorizer Authorizer The authorizer to use for this api operation (overrides the default). integration Required public readonly integration : Integration ; Type: Integration The lambda function to service the api operation. authorizer Optional public readonly authorizer : Authorizer ; Type: Authorizer The authorizer to use for this api operation (overrides the default). OpenApiOptions Options required alongside an Open API specification to create API Gateway resources. Initializer import { OpenApiOptions } from '@aws-prototyping-sdk/open-api-gateway' const openApiOptions : OpenApiOptions = { ... } Properties Name Type Description integrations {[ key: string ]: OpenApiIntegration } A mapping of API operation to its integration. operationLookup {[ key: string ]: MethodAndPath } Details about each operation. corsOptions aws-cdk-lib.aws_apigateway.CorsOptions Cross Origin Resource Sharing options for the API. defaultAuthorizer Authorizer The default authorizer to use for your api. integrations Required public readonly integrations : {[ key : string ] : OpenApiIntegration }; Type: {[ key: string ]: OpenApiIntegration } A mapping of API operation to its integration. operationLookup Required public readonly operationLookup : {[ key : string ] : MethodAndPath }; Type: {[ key: string ]: MethodAndPath } Details about each operation. corsOptions Optional public readonly corsOptions : CorsOptions ; Type: aws-cdk-lib.aws_apigateway.CorsOptions Cross Origin Resource Sharing options for the API. defaultAuthorizer Optional public readonly defaultAuthorizer : Authorizer ; Type: Authorizer The default authorizer to use for your api. When omitted, no default authorizer is used. Authorizers specified at the integration level will override this for that operation. SmithyApiGatewayJavaProjectOptions Configuration for the SmithyApiGatewayJavaProject. Initializer import { SmithyApiGatewayJavaProjectOptions } from '@aws-prototyping-sdk/open-api-gateway' const smithyApiGatewayJavaProjectOptions : SmithyApiGatewayJavaProjectOptions = { ... } Properties Name Type Description name string This is the name of your project. commitGenerated boolean Whether to commit the managed files by default. gitOptions projen.GitOptions Configuration options for git. logging projen.LoggerOptions Configure logging options such as verbosity. outdir string The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projenCommand string The shell command to use in order to run the projen CLI. projenrcJson boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions projen.ProjenrcOptions Options for .projenrc.json. renovatebot boolean Use renovatebot to handle dependency upgrades. renovatebotOptions projen.RenovatebotOptions Options for renovatebot. autoApproveOptions projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge boolean Enable automatic merging on GitHub. autoMergeOptions projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber boolean Add a clobber task which resets the repo to origin. devContainer boolean Add a VSCode development environment (used for GitHub Codespaces). github boolean Enable GitHub integration. githubOptions projen.github.GitHubOptions Options for GitHub integration. gitpod boolean Add a Gitpod development environment. mergify boolean Whether mergify should be enabled on this repository or not. mergifyOptions projen.github.MergifyOptions Options for mergify. projectType projen.ProjectType Which type of project this is (library/app). projenCredentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret string The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale boolean Auto-close of stale issues and pull request. staleOptions projen.github.StaleOptions Auto-close stale issues and pull requests. vscode boolean Enable VSCode integration. artifactId string The artifactId is generally the name that the project is known by. groupId string This is generally unique amongst an organization or a project. version string This is the last piece of the naming puzzle. description string Description of a project is always good. packaging string Project packaging format. url string The URL, like the name, is not required. compileOptions projen.java.MavenCompileOptions Compile options. deps string[] List of runtime dependencies for this project. distdir string Final artifact output directory. junit boolean Include junit tests. junitOptions projen.java.JunitOptions junit options. packagingOptions projen.java.MavenPackagingOptions Packaging options. projenrcJava boolean Use projenrc in java. projenrcJavaOptions projen.java.ProjenrcOptions Options related to projenrc in java. testDeps string[] List of test dependencies for this project. sample boolean Include sample code and test if the relevant directories don't exist. sampleJavaPackage string The java package to use for the code sample. clientLanguages ClientLanguage [] The list of languages for which clients will be generated. apiSrcDir string The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats DocumentationFormat [] Formats to generate documentation in. forceGenerateCodeAndDocs boolean Force to generate code and docs even if there were no changes in spec. generatedCodeDir string The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsedSpecFileName string The name of the output parsed OpenAPI specification file. pythonClientOptions projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). typescriptClientOptions projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. serviceName SmithyServiceName The name of the Smithy service from your model which will be targeted for deployment and client generation. ignoreGradleWrapper boolean Set to false if you would like to check in your gradle wrapper. ignoreSmithyBuildOutput boolean Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. modelDir string The path to the Smithy model directory, relative to the project source directory (srcdir). smithyBuildOptions SmithyBuildOptions Any additional properties you'd like to add your smithy-build.json. The smithy-build.json will automatically include the \"openapi\" plugin, but you can add extra configuration for that via this option if you like. name Required public readonly name : string ; Type: string Default: $BASEDIR This is the name of your project. commitGenerated Optional public readonly commitGenerated : boolean ; Type: boolean Default: true Whether to commit the managed files by default. gitOptions Optional public readonly gitOptions : GitOptions ; Type: projen.GitOptions Configuration options for git. logging Optional public readonly logging : LoggerOptions ; Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public readonly outdir : string ; Type: string Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public readonly parent : Project ; Type: projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public readonly projenCommand : string ; Type: string Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public readonly projenrcJson : boolean ; Type: boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public readonly projenrcJsonOptions : ProjenrcOptions ; Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional public readonly renovatebot : boolean ; Type: boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional public readonly renovatebotOptions : RenovatebotOptions ; Type: projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional public readonly autoApproveOptions : AutoApproveOptions ; Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional public readonly autoMerge : boolean ; Type: boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional public readonly autoMergeOptions : AutoMergeOptions ; Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional public readonly clobber : boolean ; Type: boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public readonly devContainer : boolean ; Type: boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public readonly github : boolean ; Type: boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public readonly githubOptions : GitHubOptions ; Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public readonly gitpod : boolean ; Type: boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public readonly mergify : boolean ; Type: boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public readonly mergifyOptions : MergifyOptions ; Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public readonly projectType : ProjectType ; Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional public readonly projenCredentials : GithubCredentials ; Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials public readonly projenTokenSecret : string ; Type: string Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public readonly readme : SampleReadmeProps ; Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional public readonly stale : boolean ; Type: boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public readonly staleOptions : StaleOptions ; Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public readonly vscode : boolean ; Type: boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. artifactId Required public readonly artifactId : string ; Type: string Default: \"my-app\" The artifactId is generally the name that the project is known by. Although the groupId is important, people within the group will rarely mention the groupId in discussion (they are often all be the same ID, such as the MojoHaus project groupId: org.codehaus.mojo). It, along with the groupId, creates a key that separates this project from every other project in the world (at least, it should :) ). Along with the groupId, the artifactId fully defines the artifact's living quarters within the repository. In the case of the above project, my-project lives in $M2_REPO/org/codehaus/mojo/my-project. groupId Required public readonly groupId : string ; Type: string Default: \"org.acme\" This is generally unique amongst an organization or a project. For example, all core Maven artifacts do (well, should) live under the groupId org.apache.maven. Group ID's do not necessarily use the dot notation, for example, the junit project. Note that the dot-notated groupId does not have to correspond to the package structure that the project contains. It is, however, a good practice to follow. When stored within a repository, the group acts much like the Java packaging structure does in an operating system. The dots are replaced by OS specific directory separators (such as '/' in Unix) which becomes a relative directory structure from the base repository. In the example given, the org.codehaus.mojo group lives within the directory $M2_REPO/org/codehaus/mojo. version Required public readonly version : string ; Type: string Default: \"0.1.0\" This is the last piece of the naming puzzle. groupId:artifactId denotes a single project but they cannot delineate which incarnation of that project we are talking about. Do we want the junit:junit of 2018 (version 4.12), or of 2007 (version 3.8.2)? In short: code changes, those changes should be versioned, and this element keeps those versions in line. It is also used within an artifact's repository to separate versions from each other. my-project version 1.0 files live in the directory structure $M2_REPO/org/codehaus/mojo/my-project/1.0. description Optional public readonly description : string ; Type: string Default: undefined Description of a project is always good. Although this should not replace formal documentation, a quick comment to any readers of the POM is always helpful. packaging Optional public readonly packaging : string ; Type: string Default: \"jar\" Project packaging format. url Optional public readonly url : string ; Type: string Default: undefined The URL, like the name, is not required. This is a nice gesture for projects users, however, so that they know where the project lives. compileOptions Optional public readonly compileOptions : MavenCompileOptions ; Type: projen.java.MavenCompileOptions Default: defaults Compile options. deps Optional public readonly deps : string []; Type: string[] Default: [] List of runtime dependencies for this project. Dependencies use the format: <groupId>/<artifactId>@<semver> Additional dependencies can be added via project.addDependency() . distdir Optional public readonly distdir : string ; Type: string Default: \"dist/java\" Final artifact output directory. junit Optional public readonly junit : boolean ; Type: boolean Default: true Include junit tests. junitOptions Optional public readonly junitOptions : JunitOptions ; Type: projen.java.JunitOptions Default: defaults junit options. packagingOptions Optional public readonly packagingOptions : MavenPackagingOptions ; Type: projen.java.MavenPackagingOptions Default: defaults Packaging options. projenrcJava Optional public readonly projenrcJava : boolean ; Type: boolean Default: true Use projenrc in java. This will install projen as a java dependency and will add a synth task which will compile & execute main() from src/main/java/projenrc.java . projenrcJavaOptions Optional public readonly projenrcJavaOptions : ProjenrcOptions ; Type: projen.java.ProjenrcOptions Default: default options Options related to projenrc in java. testDeps Optional public readonly testDeps : string []; Type: string[] Default: [] List of test dependencies for this project. Dependencies use the format: <groupId>/<artifactId>@<semver> Additional dependencies can be added via project.addTestDependency() . sample Optional public readonly sample : boolean ; Type: boolean Default: true Include sample code and test if the relevant directories don't exist. sampleJavaPackage Optional public readonly sampleJavaPackage : string ; Type: string Default: \"org.acme\" The java package to use for the code sample. clientLanguages Required public readonly clientLanguages : ClientLanguage []; Type: ClientLanguage [] The list of languages for which clients will be generated. A typescript client will always be generated. apiSrcDir Optional public readonly apiSrcDir : string ; Type: string The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats Optional public readonly documentationFormats : DocumentationFormat []; Type: DocumentationFormat [] Formats to generate documentation in. forceGenerateCodeAndDocs Optional public readonly forceGenerateCodeAndDocs : boolean ; Type: boolean Default: \"false\" Force to generate code and docs even if there were no changes in spec. generatedCodeDir Optional public readonly generatedCodeDir : string ; Type: string Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions Optional public readonly javaClientOptions : JavaProjectOptions ; Type: projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsedSpecFileName Optional public readonly parsedSpecFileName : string ; Type: string Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. pythonClientOptions Optional public readonly pythonClientOptions : PythonProjectOptions ; Type: projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. typescriptClientOptions Optional public readonly typescriptClientOptions : TypeScriptProjectOptions ; Type: projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. serviceName Required public readonly serviceName : SmithyServiceName ; Type: SmithyServiceName Default: \"example.hello#Hello\" The name of the Smithy service from your model which will be targeted for deployment and client generation. On initial project synthesis this service name will be written to the sample \"hello world\" model. If you change this value after initial synthesis you will need to manually update your Smithy models to match, unless you delete the \"model\" directory. Likewise, if you change the namespace or service name in your Smithy models you will need to update this value to ensure your service can be found. ignoreGradleWrapper Optional public readonly ignoreGradleWrapper : boolean ; Type: boolean Default: true Set to false if you would like to check in your gradle wrapper. Do so if you would like to use a different version of gradle to the one provided by default ignoreSmithyBuildOutput Optional public readonly ignoreSmithyBuildOutput : boolean ; Type: boolean Default: true Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. modelDir Optional public readonly modelDir : string ; Type: string Default: \"model\" The path to the Smithy model directory, relative to the project source directory (srcdir). smithyBuildOptions Optional public readonly smithyBuildOptions : SmithyBuildOptions ; Type: SmithyBuildOptions Any additional properties you'd like to add your smithy-build.json. The smithy-build.json will automatically include the \"openapi\" plugin, but you can add extra configuration for that via this option if you like. https://awslabs.github.io/smithy/2.0/guides/converting-to-openapi.html#openapi-configuration-settings SmithyApiGatewayProjectOptions Options common to all smithy api gateway projects. Initializer import { SmithyApiGatewayProjectOptions } from '@aws-prototyping-sdk/open-api-gateway' const smithyApiGatewayProjectOptions : SmithyApiGatewayProjectOptions = { ... } Properties Name Type Description clientLanguages ClientLanguage [] The list of languages for which clients will be generated. apiSrcDir string The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats DocumentationFormat [] Formats to generate documentation in. forceGenerateCodeAndDocs boolean Force to generate code and docs even if there were no changes in spec. generatedCodeDir string The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsedSpecFileName string The name of the output parsed OpenAPI specification file. pythonClientOptions projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). typescriptClientOptions projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. serviceName SmithyServiceName The name of the Smithy service from your model which will be targeted for deployment and client generation. ignoreGradleWrapper boolean Set to false if you would like to check in your gradle wrapper. ignoreSmithyBuildOutput boolean Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. modelDir string The path to the Smithy model directory, relative to the project source directory (srcdir). smithyBuildOptions SmithyBuildOptions Any additional properties you'd like to add your smithy-build.json. The smithy-build.json will automatically include the \"openapi\" plugin, but you can add extra configuration for that via this option if you like. clientLanguages Required public readonly clientLanguages : ClientLanguage []; Type: ClientLanguage [] The list of languages for which clients will be generated. A typescript client will always be generated. apiSrcDir Optional public readonly apiSrcDir : string ; Type: string The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats Optional public readonly documentationFormats : DocumentationFormat []; Type: DocumentationFormat [] Formats to generate documentation in. forceGenerateCodeAndDocs Optional public readonly forceGenerateCodeAndDocs : boolean ; Type: boolean Default: \"false\" Force to generate code and docs even if there were no changes in spec. generatedCodeDir Optional public readonly generatedCodeDir : string ; Type: string Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions Optional public readonly javaClientOptions : JavaProjectOptions ; Type: projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsedSpecFileName Optional public readonly parsedSpecFileName : string ; Type: string Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. pythonClientOptions Optional public readonly pythonClientOptions : PythonProjectOptions ; Type: projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. typescriptClientOptions Optional public readonly typescriptClientOptions : TypeScriptProjectOptions ; Type: projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. serviceName Required public readonly serviceName : SmithyServiceName ; Type: SmithyServiceName Default: \"example.hello#Hello\" The name of the Smithy service from your model which will be targeted for deployment and client generation. On initial project synthesis this service name will be written to the sample \"hello world\" model. If you change this value after initial synthesis you will need to manually update your Smithy models to match, unless you delete the \"model\" directory. Likewise, if you change the namespace or service name in your Smithy models you will need to update this value to ensure your service can be found. ignoreGradleWrapper Optional public readonly ignoreGradleWrapper : boolean ; Type: boolean Default: true Set to false if you would like to check in your gradle wrapper. Do so if you would like to use a different version of gradle to the one provided by default ignoreSmithyBuildOutput Optional public readonly ignoreSmithyBuildOutput : boolean ; Type: boolean Default: true Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. modelDir Optional public readonly modelDir : string ; Type: string Default: \"model\" The path to the Smithy model directory, relative to the project source directory (srcdir). smithyBuildOptions Optional public readonly smithyBuildOptions : SmithyBuildOptions ; Type: SmithyBuildOptions Any additional properties you'd like to add your smithy-build.json. The smithy-build.json will automatically include the \"openapi\" plugin, but you can add extra configuration for that via this option if you like. https://awslabs.github.io/smithy/2.0/guides/converting-to-openapi.html#openapi-configuration-settings SmithyApiGatewayPythonProjectOptions Configuration for the SmithyApiGatewayPythonProject. Initializer import { SmithyApiGatewayPythonProjectOptions } from '@aws-prototyping-sdk/open-api-gateway' const smithyApiGatewayPythonProjectOptions : SmithyApiGatewayPythonProjectOptions = { ... } Properties Name Type Description name string This is the name of your project. commitGenerated boolean Whether to commit the managed files by default. gitOptions projen.GitOptions Configuration options for git. logging projen.LoggerOptions Configure logging options such as verbosity. outdir string The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projenCommand string The shell command to use in order to run the projen CLI. projenrcJson boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions projen.ProjenrcOptions Options for .projenrc.json. renovatebot boolean Use renovatebot to handle dependency upgrades. renovatebotOptions projen.RenovatebotOptions Options for renovatebot. autoApproveOptions projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge boolean Enable automatic merging on GitHub. autoMergeOptions projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber boolean Add a clobber task which resets the repo to origin. devContainer boolean Add a VSCode development environment (used for GitHub Codespaces). github boolean Enable GitHub integration. githubOptions projen.github.GitHubOptions Options for GitHub integration. gitpod boolean Add a Gitpod development environment. mergify boolean Whether mergify should be enabled on this repository or not. mergifyOptions projen.github.MergifyOptions Options for mergify. projectType projen.ProjectType Which type of project this is (library/app). projenCredentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret string The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale boolean Auto-close of stale issues and pull request. staleOptions projen.github.StaleOptions Auto-close stale issues and pull requests. vscode boolean Enable VSCode integration. authorEmail string Author's e-mail. authorName string Author's name. version string Version of the package. classifiers string[] A list of PyPI trove classifiers that describe the project. description string A short description of the package. homepage string A URL to the website of the project. license string License of this package as an SPDX identifier. packageName string Package name. poetryOptions projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setupConfig {[ key: string ]: any} Additional fields to pass in the setup() function if using setuptools. moduleName string Name of the python package as used in imports and filenames. deps string[] List of runtime dependencies for this project. devDeps string[] List of dev dependencies for this project. pip boolean Use pip with a requirements.txt file to track project dependencies. poetry boolean Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrcJs boolean Use projenrc in javascript. projenrcJsOptions projen.javascript.ProjenrcOptions Options related to projenrc in JavaScript. projenrcPython boolean Use projenrc in Python. projenrcPythonOptions projen.python.ProjenrcOptions Options related to projenrc in python. pytest boolean Include pytest tests. pytestOptions projen.python.PytestOptions pytest options. sample boolean Include sample code and test if the relevant directories don't exist. setuptools boolean Use setuptools with a setup.py script for packaging and publishing. venv boolean Use venv to manage a virtual environment for installing dependencies inside. venvOptions projen.python.VenvOptions Venv options. clientLanguages ClientLanguage [] The list of languages for which clients will be generated. apiSrcDir string The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats DocumentationFormat [] Formats to generate documentation in. forceGenerateCodeAndDocs boolean Force to generate code and docs even if there were no changes in spec. generatedCodeDir string The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsedSpecFileName string The name of the output parsed OpenAPI specification file. pythonClientOptions projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). typescriptClientOptions projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. serviceName SmithyServiceName The name of the Smithy service from your model which will be targeted for deployment and client generation. ignoreGradleWrapper boolean Set to false if you would like to check in your gradle wrapper. ignoreSmithyBuildOutput boolean Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. modelDir string The path to the Smithy model directory, relative to the project source directory (srcdir). smithyBuildOptions SmithyBuildOptions Any additional properties you'd like to add your smithy-build.json. The smithy-build.json will automatically include the \"openapi\" plugin, but you can add extra configuration for that via this option if you like. name Required public readonly name : string ; Type: string Default: $BASEDIR This is the name of your project. commitGenerated Optional public readonly commitGenerated : boolean ; Type: boolean Default: true Whether to commit the managed files by default. gitOptions Optional public readonly gitOptions : GitOptions ; Type: projen.GitOptions Configuration options for git. logging Optional public readonly logging : LoggerOptions ; Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public readonly outdir : string ; Type: string Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public readonly parent : Project ; Type: projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public readonly projenCommand : string ; Type: string Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public readonly projenrcJson : boolean ; Type: boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public readonly projenrcJsonOptions : ProjenrcOptions ; Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional public readonly renovatebot : boolean ; Type: boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional public readonly renovatebotOptions : RenovatebotOptions ; Type: projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional public readonly autoApproveOptions : AutoApproveOptions ; Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional public readonly autoMerge : boolean ; Type: boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional public readonly autoMergeOptions : AutoMergeOptions ; Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional public readonly clobber : boolean ; Type: boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public readonly devContainer : boolean ; Type: boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public readonly github : boolean ; Type: boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public readonly githubOptions : GitHubOptions ; Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public readonly gitpod : boolean ; Type: boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public readonly mergify : boolean ; Type: boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public readonly mergifyOptions : MergifyOptions ; Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public readonly projectType : ProjectType ; Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional public readonly projenCredentials : GithubCredentials ; Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials public readonly projenTokenSecret : string ; Type: string Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public readonly readme : SampleReadmeProps ; Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional public readonly stale : boolean ; Type: boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public readonly staleOptions : StaleOptions ; Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public readonly vscode : boolean ; Type: boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. authorEmail Required public readonly authorEmail : string ; Type: string Default: $GIT_USER_EMAIL Author's e-mail. authorName Required public readonly authorName : string ; Type: string Default: $GIT_USER_NAME Author's name. version Required public readonly version : string ; Type: string Default: \"0.1.0\" Version of the package. classifiers Optional public readonly classifiers : string []; Type: string[] A list of PyPI trove classifiers that describe the project. https://pypi.org/classifiers/ description Optional public readonly description : string ; Type: string A short description of the package. homepage Optional public readonly homepage : string ; Type: string A URL to the website of the project. license Optional public readonly license : string ; Type: string License of this package as an SPDX identifier. packageName Optional public readonly packageName : string ; Type: string Package name. poetryOptions Optional public readonly poetryOptions : PoetryPyprojectOptionsWithoutDeps ; Type: projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setupConfig Optional public readonly setupConfig : {[ key : string ] : any }; Type: {[ key: string ]: any} Additional fields to pass in the setup() function if using setuptools. moduleName Required public readonly module Name : string ; Type: string Default: $PYTHON_MODULE_NAME Name of the python package as used in imports and filenames. Must only consist of alphanumeric characters and underscores. deps Optional public readonly deps : string []; Type: string[] Default: [] List of runtime dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDependency() . devDeps Optional public readonly devDeps : string []; Type: string[] Default: [] List of dev dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDevDependency() . pip Optional public readonly pip : boolean ; Type: boolean Default: true, unless poetry is true, then false Use pip with a requirements.txt file to track project dependencies. poetry Optional public readonly poetry : boolean ; Type: boolean Default: false Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. This feature is incompatible with pip, setuptools, or venv. If you set this option to true , then pip, setuptools, and venv must be set to false . projenrcJs Optional public readonly projenrcJs : boolean ; Type: boolean Default: false Use projenrc in javascript. This will install projen as a JavaScript dependency and add a synth task which will run .projenrc.js . projenrcJsOptions Optional public readonly projenrcJsOptions : ProjenrcOptions ; Type: projen.javascript.ProjenrcOptions Default: default options Options related to projenrc in JavaScript. projenrcPython Optional public readonly projenrcPython : boolean ; Type: boolean Default: true Use projenrc in Python. This will install projen as a Python dependency and add a synth task which will run .projenrc.py . projenrcPythonOptions Optional public readonly projenrcPythonOptions : ProjenrcOptions ; Type: projen.python.ProjenrcOptions Default: default options Options related to projenrc in python. pytest Optional public readonly pytest : boolean ; Type: boolean Default: true Include pytest tests. pytestOptions Optional public readonly pytestOptions : PytestOptions ; Type: projen.python.PytestOptions Default: defaults pytest options. sample Optional public readonly sample : boolean ; Type: boolean Default: true Include sample code and test if the relevant directories don't exist. setuptools Optional public readonly setuptools : boolean ; Type: boolean Default: true, unless poetry is true, then false Use setuptools with a setup.py script for packaging and publishing. venv Optional public readonly venv : boolean ; Type: boolean Default: true, unless poetry is true, then false Use venv to manage a virtual environment for installing dependencies inside. venvOptions Optional public readonly venvOptions : VenvOptions ; Type: projen.python.VenvOptions Default: defaults Venv options. clientLanguages Required public readonly clientLanguages : ClientLanguage []; Type: ClientLanguage [] The list of languages for which clients will be generated. A typescript client will always be generated. apiSrcDir Optional public readonly apiSrcDir : string ; Type: string The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats Optional public readonly documentationFormats : DocumentationFormat []; Type: DocumentationFormat [] Formats to generate documentation in. forceGenerateCodeAndDocs Optional public readonly forceGenerateCodeAndDocs : boolean ; Type: boolean Default: \"false\" Force to generate code and docs even if there were no changes in spec. generatedCodeDir Optional public readonly generatedCodeDir : string ; Type: string Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions Optional public readonly javaClientOptions : JavaProjectOptions ; Type: projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsedSpecFileName Optional public readonly parsedSpecFileName : string ; Type: string Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. pythonClientOptions Optional public readonly pythonClientOptions : PythonProjectOptions ; Type: projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. typescriptClientOptions Optional public readonly typescriptClientOptions : TypeScriptProjectOptions ; Type: projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. serviceName Required public readonly serviceName : SmithyServiceName ; Type: SmithyServiceName Default: \"example.hello#Hello\" The name of the Smithy service from your model which will be targeted for deployment and client generation. On initial project synthesis this service name will be written to the sample \"hello world\" model. If you change this value after initial synthesis you will need to manually update your Smithy models to match, unless you delete the \"model\" directory. Likewise, if you change the namespace or service name in your Smithy models you will need to update this value to ensure your service can be found. ignoreGradleWrapper Optional public readonly ignoreGradleWrapper : boolean ; Type: boolean Default: true Set to false if you would like to check in your gradle wrapper. Do so if you would like to use a different version of gradle to the one provided by default ignoreSmithyBuildOutput Optional public readonly ignoreSmithyBuildOutput : boolean ; Type: boolean Default: true Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. modelDir Optional public readonly modelDir : string ; Type: string Default: \"model\" The path to the Smithy model directory, relative to the project source directory (srcdir). smithyBuildOptions Optional public readonly smithyBuildOptions : SmithyBuildOptions ; Type: SmithyBuildOptions Any additional properties you'd like to add your smithy-build.json. The smithy-build.json will automatically include the \"openapi\" plugin, but you can add extra configuration for that via this option if you like. https://awslabs.github.io/smithy/2.0/guides/converting-to-openapi.html#openapi-configuration-settings SmithyApiGatewayTsProjectOptions Configuration for the SmithyApiGatewayTsProject. Initializer import { SmithyApiGatewayTsProjectOptions } from '@aws-prototyping-sdk/open-api-gateway' const smithyApiGatewayTsProjectOptions : SmithyApiGatewayTsProjectOptions = { ... } Properties Name Type Description name string This is the name of your project. commitGenerated boolean Whether to commit the managed files by default. gitOptions projen.GitOptions Configuration options for git. logging projen.LoggerOptions Configure logging options such as verbosity. outdir string The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projenCommand string The shell command to use in order to run the projen CLI. projenrcJson boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions projen.ProjenrcOptions Options for .projenrc.json. renovatebot boolean Use renovatebot to handle dependency upgrades. renovatebotOptions projen.RenovatebotOptions Options for renovatebot. autoApproveOptions projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge boolean Enable automatic merging on GitHub. autoMergeOptions projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber boolean Add a clobber task which resets the repo to origin. devContainer boolean Add a VSCode development environment (used for GitHub Codespaces). github boolean Enable GitHub integration. githubOptions projen.github.GitHubOptions Options for GitHub integration. gitpod boolean Add a Gitpod development environment. mergify boolean Whether mergify should be enabled on this repository or not. mergifyOptions projen.github.MergifyOptions Options for mergify. projectType projen.ProjectType Which type of project this is (library/app). projenCredentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret string The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale boolean Auto-close of stale issues and pull request. staleOptions projen.github.StaleOptions Auto-close stale issues and pull requests. vscode boolean Enable VSCode integration. allowLibraryDependencies boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail string Author's e-mail. authorName string Author's name. authorOrganization boolean Is the author an organization. authorUrl string Author's URL / Website. autoDetectBin boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin {[ key: string ]: string} Binary programs vended with your module. bugsEmail string The email address to which issues should be reported. bugsUrl string The url to your project's issue tracker. bundledDeps string[] List of dependencies to bundle into this module. codeArtifactOptions projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps string[] Runtime dependencies of this module. description string The description is just a string that helps people understand the purpose of the package. devDeps string[] Build dependencies for this module. entrypoint string Module entrypoint ( main in package.json ). homepage string Package's Homepage / Website. keywords string[] Keywords to include in package.json . license string License's SPDX identifier. licensed boolean Indicates if a license should be added. maxNodeVersion string Minimum node.js version to require via engines (inclusive). minNodeVersion string Minimum Node.js version to require via package.json engines (inclusive). npmAccess projen.javascript.NpmAccess Access level of the npm package. npmRegistry string The host name of the npm registry to publish to. npmRegistryUrl string The base URL of the npm package registry. npmTokenSecret string GitHub secret which contains the NPM token to use when publishing packages. packageManager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName string The \"name\" in package.json. peerDependencyOptions projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps string[] Peer dependencies for this module. pnpmVersion string The version of PNPM to use if using PNPM as a package manager. repository string The repository is the location where the actual code for your package lives. repositoryDirectory string If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions projen.javascript.ScopedPackagesOptions[] Options for privately hosted scoped packages. scripts {[ key: string ]: string} npm scripts to include. stability string Package's Stability. jsiiReleaseVersion string Version requirement of publib which is used to publish modules to npm. majorVersion number Major version to release from the default branch. minMajorVersion number Minimal Major version to release. npmDistTag string The npmDistTag to use when publishing from the default branch. postBuildSteps projen.github.workflows.JobStep[] Steps to execute after build as part of the release workflow. prerelease string Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches {[ key: string ]: projen.release.BranchOptions} Defines additional release branches. releaseEveryCommit boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel string The label to apply to issues indicating publish failures. releaseSchedule string CRON schedule to trigger new releases. releaseTagPrefix string Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName string The name of the default release workflow. releaseWorkflowSetupSteps projen.github.workflows.JobStep[] A set of workflow steps to execute in order to setup the workflow container. versionrcOptions {[ key: string ]: any} Custom configuration used when creating changelog with standard-version package. workflowContainerImage string Container image to use for GitHub workflows. workflowRunsOn string[] Github Runner selection labels. defaultReleaseBranch string The name of the main release branch. artifactsDirectory string A directory which will contain build artifacts. autoApproveUpgrades boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers projen.github.workflows.Triggers Build workflow triggers. bundlerOptions projen.javascript.BundlerOptions Options for Bundler . codeCov boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret string Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner string License copyright owner. copyrightPeriod string The copyright years to put in the LICENSE file. dependabot boolean Use dependabot to handle dependency upgrades. dependabotOptions projen.github.DependabotOptions Options for dependabot. depsUpgrade boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore string[] Additional entries to .gitignore. jest boolean Setup jest unit tests. jestOptions projen.javascript.JestOptions Jest options. mutableBuild boolean Automatically update files modified during builds to pull-request branches. npmignore string[] Additional entries to .npmignore. npmignoreEnabled boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier boolean Setup prettier. prettierOptions projen.javascript.PrettierOptions Prettier options. projenDevDependency boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions projen.javascript.ProjenrcOptions Options for .projenrc.js. projenVersion string Version of projen to install. pullRequestTemplate boolean Include a GitHub pull request template. pullRequestTemplateContents string[] The contents of the pull request template. release boolean Add release management to this project. releaseToNpm boolean Automatically release to npm when new versions are introduced. releaseWorkflow boolean DEPRECATED: renamed to release . workflowBootstrapSteps projen.github.workflows.JobStep[] Workflow steps to use in order to bootstrap this repo. workflowGitIdentity projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion string The node version to use in GitHub workflows. disableTsconfig boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen boolean Docgen by Typedoc. docsDirectory string Docs directory. entrypointTypes string The .d.ts file that includes the type declarations for this module. eslint boolean Setup eslint. eslintOptions projen.javascript.EslintOptions Eslint options. libdir string Typescript artifacts output directory. projenrcTs boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir string Typescript sources directory. testdir string Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile string The name of the development tsconfig.json file. typescriptVersion string TypeScript version to use. clientLanguages ClientLanguage [] The list of languages for which clients will be generated. apiSrcDir string The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats DocumentationFormat [] Formats to generate documentation in. forceGenerateCodeAndDocs boolean Force to generate code and docs even if there were no changes in spec. generatedCodeDir string The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). parsedSpecFileName string The name of the output parsed OpenAPI specification file. pythonClientOptions projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). typescriptClientOptions projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. serviceName SmithyServiceName The name of the Smithy service from your model which will be targeted for deployment and client generation. ignoreGradleWrapper boolean Set to false if you would like to check in your gradle wrapper. ignoreSmithyBuildOutput boolean Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. modelDir string The path to the Smithy model directory, relative to the project source directory (srcdir). smithyBuildOptions SmithyBuildOptions Any additional properties you'd like to add your smithy-build.json. The smithy-build.json will automatically include the \"openapi\" plugin, but you can add extra configuration for that via this option if you like. name Required public readonly name : string ; Type: string Default: $BASEDIR This is the name of your project. commitGenerated Optional public readonly commitGenerated : boolean ; Type: boolean Default: true Whether to commit the managed files by default. gitOptions Optional public readonly gitOptions : GitOptions ; Type: projen.GitOptions Configuration options for git. logging Optional public readonly logging : LoggerOptions ; Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public readonly outdir : string ; Type: string Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public readonly parent : Project ; Type: projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public readonly projenCommand : string ; Type: string Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public readonly projenrcJson : boolean ; Type: boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public readonly projenrcJsonOptions : ProjenrcOptions ; Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional public readonly renovatebot : boolean ; Type: boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional public readonly renovatebotOptions : RenovatebotOptions ; Type: projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional public readonly autoApproveOptions : AutoApproveOptions ; Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional public readonly autoMerge : boolean ; Type: boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional public readonly autoMergeOptions : AutoMergeOptions ; Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional public readonly clobber : boolean ; Type: boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public readonly devContainer : boolean ; Type: boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public readonly github : boolean ; Type: boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public readonly githubOptions : GitHubOptions ; Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public readonly gitpod : boolean ; Type: boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public readonly mergify : boolean ; Type: boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public readonly mergifyOptions : MergifyOptions ; Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public readonly projectType : ProjectType ; Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional public readonly projenCredentials : GithubCredentials ; Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials public readonly projenTokenSecret : string ; Type: string Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public readonly readme : SampleReadmeProps ; Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional public readonly stale : boolean ; Type: boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public readonly staleOptions : StaleOptions ; Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public readonly vscode : boolean ; Type: boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allowLibraryDependencies Optional public readonly allowLibraryDependencies : boolean ; Type: boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. authorEmail Optional public readonly authorEmail : string ; Type: string Author's e-mail. authorName Optional public readonly authorName : string ; Type: string Author's name. authorOrganization Optional public readonly authorOrganization : boolean ; Type: boolean Is the author an organization. authorUrl Optional public readonly authorUrl : string ; Type: string Author's URL / Website. autoDetectBin Optional public readonly autoDetectBin : boolean ; Type: boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional public readonly bin : {[ key : string ] : string }; Type: {[ key: string ]: string} Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugsEmail Optional public readonly bugsEmail : string ; Type: string The email address to which issues should be reported. bugsUrl Optional public readonly bugsUrl : string ; Type: string The url to your project's issue tracker. bundledDeps Optional public readonly bundledDeps : string []; Type: string[] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. codeArtifactOptions Optional public readonly codeArtifactOptions : CodeArtifactOptions ; Type: projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional public readonly deps : string []; Type: string[] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'express' , 'lodash' , 'foo@^2' ] description Optional public readonly description : string ; Type: string The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description devDeps Optional public readonly devDeps : string []; Type: string[] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'typescript' , '@types/express' ] entrypoint Optional public readonly entrypoint : string ; Type: string Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional public readonly homepage : string ; Type: string Package's Homepage / Website. keywords Optional public readonly keywords : string []; Type: string[] Keywords to include in package.json . license Optional public readonly license : string ; Type: string Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional public readonly licensed : boolean ; Type: boolean Default: true Indicates if a license should be added. maxNodeVersion Optional public readonly maxNodeVersion : string ; Type: string Default: no max Minimum node.js version to require via engines (inclusive). minNodeVersion Optional public readonly minNodeVersion : string ; Type: string Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npmAccess Optional public readonly npmAccess : NpmAccess ; Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npmRegistry ~~ Optional Deprecated: use npmRegistryUrl instead public readonly npmRegistry : string ; Type: string The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npmRegistryUrl Optional public readonly npmRegistryUrl : string ; Type: string Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npmTokenSecret Optional public readonly npmTokenSecret : string ; Type: string Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. packageManager Optional public readonly packageManager : NodePackageManager ; Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. packageName Optional public readonly packageName : string ; Type: string Default: defaults to project name The \"name\" in package.json. peerDependencyOptions Optional public readonly peerDependencyOptions : PeerDependencyOptions ; Type: projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps Optional public readonly peerDeps : string []; Type: string[] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. pnpmVersion Optional public readonly pnpmVersion : string ; Type: string Default: \"7\" The version of PNPM to use if using PNPM as a package manager. repository Optional public readonly repository : string ; Type: string The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repositoryDirectory Optional public readonly repositoryDirectory : string ; Type: string If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions Optional public readonly scopedPackagesOptions : ScopedPackagesOptions []; Type: projen.javascript.ScopedPackagesOptions[] Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional public readonly scripts : {[ key : string ] : string }; Type: {[ key: string ]: string} Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional public readonly stability : string ; Type: string Package's Stability. jsiiReleaseVersion Optional public readonly jsiiReleaseVersion : string ; Type: string Default: \"latest\" Version requirement of publib which is used to publish modules to npm. majorVersion Optional public readonly majorVersion : number ; Type: number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. minMajorVersion Optional public readonly minMajorVersion : number ; Type: number Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npmDistTag Optional public readonly npmDistTag : string ; Type: string Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. postBuildSteps Optional public readonly postBuildSteps : JobStep []; Type: projen.github.workflows.JobStep[] Default: [] Steps to execute after build as part of the release workflow. prerelease Optional public readonly prerelease : string ; Type: string Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun Optional public readonly publishDryRun : boolean ; Type: boolean Default: false Instead of actually publishing to package managers, just print the publishing command. publishTasks Optional public readonly publishTasks : boolean ; Type: boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. releaseBranches Optional public readonly releaseBranches : {[ key : string ] : BranchOptions }; Type: {[ key: string ]: projen.release.BranchOptions} Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ releaseEveryCommit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead public readonly releaseEveryCommit : boolean ; Type: boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue Optional public readonly releaseFailureIssue : boolean ; Type: boolean Default: false Create a github issue on every failed publishing task. releaseFailureIssueLabel Optional public readonly releaseFailureIssueLabel : string ; Type: string Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ releaseSchedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead public readonly releaseSchedule : string ; Type: string Default: no scheduled releases CRON schedule to trigger new releases. releaseTagPrefix Optional public readonly releaseTagPrefix : string ; Type: string Default: \"v\" Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. releaseTrigger Optional public readonly releaseTrigger : ReleaseTrigger ; Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. releaseWorkflowName Optional public readonly releaseWorkflowName : string ; Type: string Default: \"Release\" The name of the default release workflow. releaseWorkflowSetupSteps Optional public readonly releaseWorkflowSetupSteps : JobStep []; Type: projen.github.workflows.JobStep[] A set of workflow steps to execute in order to setup the workflow container. versionrcOptions Optional public readonly versionrcOptions : {[ key : string ] : any }; Type: {[ key: string ]: any} Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflowContainerImage Optional public readonly workflowContainerImage : string ; Type: string Default: default image Container image to use for GitHub workflows. workflowRunsOn Optional public readonly workflowRunsOn : string []; Type: string[] Default: [\"ubuntu-latest\"] Github Runner selection labels. defaultReleaseBranch Required public readonly defaultReleaseBranch : string ; Type: string Default: \"main\" The name of the main release branch. artifactsDirectory Optional public readonly artifactsDirectory : string ; Type: string Default: \"dist\" A directory which will contain build artifacts. autoApproveUpgrades Optional public readonly autoApproveUpgrades : boolean ; Type: boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. buildWorkflow Optional public readonly buildWorkflow : boolean ; Type: boolean Default: true if not a subproject Define a GitHub workflow for building PRs. buildWorkflowTriggers Optional public readonly buildWorkflowTriggers : Triggers ; Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundlerOptions Optional public readonly bundlerOptions : BundlerOptions ; Type: projen.javascript.BundlerOptions Options for Bundler . codeCov Optional public readonly codeCov : boolean ; Type: boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret Optional public readonly codeCovTokenSecret : string ; Type: string Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner Optional public readonly copyrightOwner : string ; Type: string Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyrightPeriod Optional public readonly copyrightPeriod : string ; Type: string Default: current year The copyright years to put in the LICENSE file. dependabot Optional public readonly dependabot : boolean ; Type: boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabotOptions Optional public readonly dependabotOptions : DependabotOptions ; Type: projen.github.DependabotOptions Default: default options Options for dependabot. depsUpgrade Optional public readonly depsUpgrade : boolean ; Type: boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . depsUpgradeOptions Optional public readonly depsUpgradeOptions : UpgradeDependenciesOptions ; Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional public readonly gitignore : string []; Type: string[] Additional entries to .gitignore. jest Optional public readonly jest : boolean ; Type: boolean Default: true Setup jest unit tests. jestOptions Optional public readonly jestOptions : JestOptions ; Type: projen.javascript.JestOptions Default: default options Jest options. mutableBuild Optional public readonly mutableBuild : boolean ; Type: boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore public readonly npmignore : string []; Type: string[] Additional entries to .npmignore. npmignoreEnabled Optional public readonly npmignoreEnabled : boolean ; Type: boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional public readonly package : boolean ; Type: boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional public readonly prettier : boolean ; Type: boolean Default: false Setup prettier. prettierOptions Optional public readonly prettierOptions : PrettierOptions ; Type: projen.javascript.PrettierOptions Default: default options Prettier options. projenDevDependency Optional public readonly projenDevDependency : boolean ; Type: boolean Default: true Indicates of \"projen\" should be installed as a devDependency. projenrcJs Optional public readonly projenrcJs : boolean ; Type: boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions Optional public readonly projenrcJsOptions : ProjenrcOptions ; Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projenVersion Optional public readonly projenVersion : string ; Type: string Default: Defaults to the latest version. Version of projen to install. pullRequestTemplate Optional public readonly pullRequestTemplate : boolean ; Type: boolean Default: true Include a GitHub pull request template. pullRequestTemplateContents Optional public readonly pullRequestTemplateContents : string []; Type: string[] Default: default content The contents of the pull request template. release Optional public readonly release : boolean ; Type: boolean Default: true (false for subprojects) Add release management to this project. releaseToNpm Optional public readonly releaseToNpm : boolean ; Type: boolean Default: false Automatically release to npm when new versions are introduced. ~~ releaseWorkflow ~~ Optional Deprecated: see release . public readonly releaseWorkflow : boolean ; Type: boolean Default: true if not a subproject DEPRECATED: renamed to release . workflowBootstrapSteps Optional public readonly workflowBootstrapSteps : JobStep []; Type: projen.github.workflows.JobStep[] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflowGitIdentity Optional public readonly workflowGitIdentity : GitIdentity ; Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflowNodeVersion Optional public readonly workflowNodeVersion : string ; Type: string Default: same as minNodeVersion The node version to use in GitHub workflows. disableTsconfig Optional public readonly disableTsconfig : boolean ; Type: boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional public readonly docgen : boolean ; Type: boolean Default: false Docgen by Typedoc. docsDirectory Optional public readonly docsDirectory : string ; Type: string Default: \"docs\" Docs directory. entrypointTypes Optional public readonly entrypointTypes : string ; Type: string Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional public readonly eslint : boolean ; Type: boolean Default: true Setup eslint. eslintOptions Optional public readonly eslintOptions : EslintOptions ; Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional public readonly libdir : string ; Type: string Default: \"lib\" Typescript artifacts output directory. projenrcTs Optional public readonly projenrcTs : boolean ; Type: boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions Optional public readonly projenrcTsOptions : ProjenrcOptions ; Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode Optional public readonly sampleCode : boolean ; Type: boolean Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional public readonly srcdir : string ; Type: string Default: \"src\" Typescript sources directory. testdir Optional public readonly testdir : string ; Type: string Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional public readonly tsconfig : TypescriptConfigOptions ; Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfigDev Optional public readonly tsconfigDev : TypescriptConfigOptions ; Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile Optional public readonly tsconfigDevFile : string ; Type: string Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescriptVersion Optional public readonly typescriptVersion : string ; Type: string Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). clientLanguages Required public readonly clientLanguages : ClientLanguage []; Type: ClientLanguage [] The list of languages for which clients will be generated. A typescript client will always be generated. apiSrcDir Optional public readonly apiSrcDir : string ; Type: string The directory in which the api generated code will reside, relative to the project srcdir. documentationFormats Optional public readonly documentationFormats : DocumentationFormat []; Type: DocumentationFormat [] Formats to generate documentation in. forceGenerateCodeAndDocs Optional public readonly forceGenerateCodeAndDocs : boolean ; Type: boolean Default: \"false\" Force to generate code and docs even if there were no changes in spec. generatedCodeDir Optional public readonly generatedCodeDir : string ; Type: string Default: \"generated\" The directory in which generated client code will be generated, relative to the outdir of this project. javaClientOptions Optional public readonly javaClientOptions : JavaProjectOptions ; Type: projen.java.JavaProjectOptions Options for the generated java client (if specified in clientLanguages). These override the default inferred options. parsedSpecFileName Optional public readonly parsedSpecFileName : string ; Type: string Default: \".parsed-spec.json\" The name of the output parsed OpenAPI specification file. Must end with .json. pythonClientOptions Optional public readonly pythonClientOptions : PythonProjectOptions ; Type: projen.python.PythonProjectOptions Options for the generated python client (if specified in clientLanguages). These override the default inferred options. typescriptClientOptions Optional public readonly typescriptClientOptions : TypeScriptProjectOptions ; Type: projen.typescript.TypeScriptProjectOptions Options for the generated typescript client. These override the default inferred options. serviceName Required public readonly serviceName : SmithyServiceName ; Type: SmithyServiceName Default: \"example.hello#Hello\" The name of the Smithy service from your model which will be targeted for deployment and client generation. On initial project synthesis this service name will be written to the sample \"hello world\" model. If you change this value after initial synthesis you will need to manually update your Smithy models to match, unless you delete the \"model\" directory. Likewise, if you change the namespace or service name in your Smithy models you will need to update this value to ensure your service can be found. ignoreGradleWrapper Optional public readonly ignoreGradleWrapper : boolean ; Type: boolean Default: true Set to false if you would like to check in your gradle wrapper. Do so if you would like to use a different version of gradle to the one provided by default ignoreSmithyBuildOutput Optional public readonly ignoreSmithyBuildOutput : boolean ; Type: boolean Default: true Set to false if you would like to check in your smithy build output or have more fine-grained control over what is checked in, eg if you add other projections to the smithy-build.json file. modelDir Optional public readonly modelDir : string ; Type: string Default: \"model\" The path to the Smithy model directory, relative to the project source directory (srcdir). smithyBuildOptions Optional public readonly smithyBuildOptions : SmithyBuildOptions ; Type: SmithyBuildOptions Any additional properties you'd like to add your smithy-build.json. The smithy-build.json will automatically include the \"openapi\" plugin, but you can add extra configuration for that via this option if you like. https://awslabs.github.io/smithy/2.0/guides/converting-to-openapi.html#openapi-configuration-settings SmithyBuildOptions Options for the smithy build files. Initializer import { SmithyBuildOptions } from '@aws-prototyping-sdk/open-api-gateway' const smithyBuildOptions : SmithyBuildOptions = { ... } Properties Name Type Description imports string[] List of imports. plugins {[ key: string ]: SmithyPlugin } Plugins keyed by plugin id. ignoreMissingPlugins boolean If a plugin can't be found, Smithy will by default fail the build. maven SmithyMavenConfiguration Maven configuration for the Smithy build project, used to specify dependencies and repositories in the build.gradle and smithy-build.json files. projections {[ key: string ]: SmithyProjection } Map of projections name to projection configurations https://awslabs.github.io/smithy/2.0/guides/building-models/build-config.html#projections . imports Optional public readonly imports : string []; Type: string[] List of imports. plugins Optional public readonly plugins : {[ key : string ] : SmithyPlugin }; Type: {[ key: string ]: SmithyPlugin } Plugins keyed by plugin id. ignoreMissingPlugins Optional public readonly ignoreMissingPlugins : boolean ; Type: boolean Default: no ignoreMissingPlugins set in the smithy-build.json file If a plugin can't be found, Smithy will by default fail the build. This setting can be set to true to allow the build to progress even if a plugin can't be found on the classpath. maven Optional public readonly maven : SmithyMavenConfiguration ; Type: SmithyMavenConfiguration Default: the default configuration required for Smithy to OpenAPI conversion Maven configuration for the Smithy build project, used to specify dependencies and repositories in the build.gradle and smithy-build.json files. projections Optional public readonly projections : {[ key : string ] : SmithyProjection }; Type: {[ key: string ]: SmithyProjection } Default: no projections Map of projections name to projection configurations https://awslabs.github.io/smithy/2.0/guides/building-models/build-config.html#projections . SmithyCommon Properties common to smithy plugins and the root smithy build. Initializer import { SmithyCommon } from '@aws-prototyping-sdk/open-api-gateway' const smithyCommon : SmithyCommon = { ... } Properties Name Type Description imports string[] List of imports. plugins {[ key: string ]: SmithyPlugin } Plugins keyed by plugin id. imports Optional public readonly imports : string []; Type: string[] List of imports. plugins Optional public readonly plugins : {[ key : string ] : SmithyPlugin }; Type: {[ key: string ]: SmithyPlugin } Plugins keyed by plugin id. SmithyMavenConfiguration Configuration for smithy maven dependencies. Initializer import { SmithyMavenConfiguration } from '@aws-prototyping-sdk/open-api-gateway' const smithyMavenConfiguration : SmithyMavenConfiguration = { ... } Properties Name Type Description dependencies string[] The dependencies used in the build.gradle and smithy-build.json files eg. software.amazon.smithy:smithy-validation-model:1.27.2 The following required dependencies are always added: - software.amazon.smithy:smithy-cli:1.27.2 - software.amazon.smithy:smithy-model:1.27.2 - software.amazon.smithy:smithy-openapi:1.27.2 - software.amazon.smithy:smithy-aws-traits:1.27.2 You can however override the version of these dependencies if required. repositoryUrls string[] The repository urls used in the build.gradle and smithy-build.json files. dependencies Optional public readonly dependencies : string []; Type: string[] The dependencies used in the build.gradle and smithy-build.json files eg. software.amazon.smithy:smithy-validation-model:1.27.2 The following required dependencies are always added: - software.amazon.smithy:smithy-cli:1.27.2 - software.amazon.smithy:smithy-model:1.27.2 - software.amazon.smithy:smithy-openapi:1.27.2 - software.amazon.smithy:smithy-aws-traits:1.27.2 You can however override the version of these dependencies if required. repositoryUrls Optional public readonly repositoryUrls : string []; Type: string[] Default: maven central and maven local The repository urls used in the build.gradle and smithy-build.json files. SmithyPlugin A smithy plugin. Initializer import { SmithyPlugin } from '@aws-prototyping-sdk/open-api-gateway' const smithyPlugin : SmithyPlugin = { ... } Properties Name Type Description service string The service to which the plugin should apply. service Optional public readonly service : string ; Type: string The service to which the plugin should apply. SmithyProjection A smithy build projection. Initializer import { SmithyProjection } from '@aws-prototyping-sdk/open-api-gateway' const smithyProjection : SmithyProjection = { ... } Properties Name Type Description imports string[] List of imports. plugins {[ key: string ]: SmithyPlugin } Plugins keyed by plugin id. abstract boolean Whether or not the projection is abstract. transforms SmithyTransform [] Transforms to apply to the projection. imports Optional public readonly imports : string []; Type: string[] List of imports. plugins Optional public readonly plugins : {[ key : string ] : SmithyPlugin }; Type: {[ key: string ]: SmithyPlugin } Plugins keyed by plugin id. abstract Optional public readonly abstract : boolean ; Type: boolean Whether or not the projection is abstract. transforms Optional public readonly transforms : SmithyTransform []; Type: SmithyTransform [] Transforms to apply to the projection. SmithyServiceName Represents a fully qualified name of a Smithy service. https://awslabs.github.io/smithy/2.0/spec/service-types.html Initializer import { SmithyServiceName } from '@aws-prototyping-sdk/open-api-gateway' const smithyServiceName : SmithyServiceName = { ... } Properties Name Type Description namespace string The service namespace. serviceName string The service name. namespace Required public readonly namespace : string ; Type: string The service namespace. Nested namespaces are separated by '.', for example com.company https://awslabs.github.io/smithy/2.0/spec/model.html#shape-id serviceName Required public readonly serviceName : string ; Type: string The service name. Should be PascalCase, for example HelloService https://awslabs.github.io/smithy/2.0/spec/model.html#shape-id SmithyTransform A smithy build transform. Initializer import { SmithyTransform } from '@aws-prototyping-sdk/open-api-gateway' const smithyTransform : SmithyTransform = { ... } Properties Name Type Description args {[ key: string ]: any} Arguments for the transform. name string Name of the transform. args Required public readonly args : {[ key : string ] : any }; Type: {[ key: string ]: any} Arguments for the transform. name Required public readonly name : string ; Type: string Name of the transform. Classes Authorizer An authorizer for authorizing API requests. Initializers import { Authorizer } from '@aws-prototyping-sdk/open-api-gateway' new Authorizer ( props : AuthorizerProps ) Name Type Description props AuthorizerProps No description. props Required Type: AuthorizerProps Properties Name Type Description authorizationType aws-cdk-lib.aws_apigateway.AuthorizationType The type of the authorizer. authorizerId string The unique identifier for the authorizer. authorizationScopes string[] Scopes for the authorizer, if any. authorizationType Required public readonly authorizationType : AuthorizationType ; Type: aws-cdk-lib.aws_apigateway.AuthorizationType The type of the authorizer. authorizerId Required public readonly authorizerId : string ; Type: string The unique identifier for the authorizer. authorizationScopes Optional public readonly authorizationScopes : string []; Type: string[] Scopes for the authorizer, if any. Authorizers Class used to construct authorizers for use in the OpenApiGatewayLambdaApi construct. Initializers import { Authorizers } from '@aws-prototyping-sdk/open-api-gateway' new Authorizers () Name Type Description Static Functions Name Description cognito A Cognito User Pools authorizer. custom A custom authorizer. iam An IAM authorizer which uses AWS signature version 4 to authorize requests. none No authorizer. cognito import { Authorizers } from '@aws-prototyping-sdk/open-api-gateway' Authorizers . cognito ( props : CognitoAuthorizerProps ) A Cognito User Pools authorizer. props Required Type: CognitoAuthorizerProps custom import { Authorizers } from '@aws-prototyping-sdk/open-api-gateway' Authorizers . custom ( props : CustomAuthorizerProps ) A custom authorizer. props Required Type: CustomAuthorizerProps iam import { Authorizers } from '@aws-prototyping-sdk/open-api-gateway' Authorizers . iam () An IAM authorizer which uses AWS signature version 4 to authorize requests. none import { Authorizers } from '@aws-prototyping-sdk/open-api-gateway' Authorizers . none () No authorizer. CognitoAuthorizer An authorizer that uses Cognito identity or access tokens. Initializers import { CognitoAuthorizer } from '@aws-prototyping-sdk/open-api-gateway' new CognitoAuthorizer ( props : CognitoAuthorizerProps ) Name Type Description props CognitoAuthorizerProps No description. props Required Type: CognitoAuthorizerProps Methods Name Description withScopes Returns this authorizer with scopes applied, intended for usage in individual operations where scopes may differ on a per-operation basis. withScopes public withScopes ( authorizationScopes : string ) : CognitoAuthorizer Returns this authorizer with scopes applied, intended for usage in individual operations where scopes may differ on a per-operation basis. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-method.html#cfn-apigateway-method-authorizationscopes authorizationScopes Required Type: string the scopes to apply. Properties Name Type Description authorizationType aws-cdk-lib.aws_apigateway.AuthorizationType The type of the authorizer. authorizerId string The unique identifier for the authorizer. authorizationScopes string[] Scopes for the authorizer, if any. userPools aws-cdk-lib.aws_cognito.IUserPool[] The Cognito user pools associated with this authorizer. authorizationType Required public readonly authorizationType : AuthorizationType ; Type: aws-cdk-lib.aws_apigateway.AuthorizationType The type of the authorizer. authorizerId Required public readonly authorizerId : string ; Type: string The unique identifier for the authorizer. authorizationScopes Optional public readonly authorizationScopes : string []; Type: string[] Scopes for the authorizer, if any. userPools Required public readonly userPools : IUserPool []; Type: aws-cdk-lib.aws_cognito.IUserPool[] The Cognito user pools associated with this authorizer. CustomAuthorizer An authorizer that uses a lambda function to authorize requests. Initializers import { CustomAuthorizer } from '@aws-prototyping-sdk/open-api-gateway' new CustomAuthorizer ( props : CustomAuthorizerProps ) Name Type Description props CustomAuthorizerProps No description. props Required Type: CustomAuthorizerProps Properties Name Type Description authorizationType aws-cdk-lib.aws_apigateway.AuthorizationType The type of the authorizer. authorizerId string The unique identifier for the authorizer. authorizationScopes string[] Scopes for the authorizer, if any. authorizerResultTtlInSeconds number The number of seconds during which the authorizer result is cached. function aws-cdk-lib.aws_lambda.IFunction The lambda function used to authorize requests. identitySource string The source of the identity in an incoming request. type CustomAuthorizerType The type of custom authorizer. authorizationType Required public readonly authorizationType : AuthorizationType ; Type: aws-cdk-lib.aws_apigateway.AuthorizationType The type of the authorizer. authorizerId Required public readonly authorizerId : string ; Type: string The unique identifier for the authorizer. authorizationScopes Optional public readonly authorizationScopes : string []; Type: string[] Scopes for the authorizer, if any. authorizerResultTtlInSeconds Required public readonly authorizerResultTtlInSeconds : number ; Type: number The number of seconds during which the authorizer result is cached. function Required public readonly function : IFunction ; Type: aws-cdk-lib.aws_lambda.IFunction The lambda function used to authorize requests. identitySource Required public readonly identitySource : string ; Type: string The source of the identity in an incoming request. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-identitysource type Required public readonly type : CustomAuthorizerType ; Type: CustomAuthorizerType The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type IamAuthorizer An IAM authorizer. Initializers import { IamAuthorizer } from '@aws-prototyping-sdk/open-api-gateway' new IamAuthorizer () Name Type Description Properties Name Type Description authorizationType aws-cdk-lib.aws_apigateway.AuthorizationType The type of the authorizer. authorizerId string The unique identifier for the authorizer. authorizationScopes string[] Scopes for the authorizer, if any. authorizationType Required public readonly authorizationType : AuthorizationType ; Type: aws-cdk-lib.aws_apigateway.AuthorizationType The type of the authorizer. authorizerId Required public readonly authorizerId : string ; Type: string The unique identifier for the authorizer. authorizationScopes Optional public readonly authorizationScopes : string []; Type: string[] Scopes for the authorizer, if any. Integration An integration for an API operation. You can extend this to implement your own integration if you like. Initializers import { Integration } from '@aws-prototyping-sdk/open-api-gateway' new Integration () Name Type Description Methods Name Description grant Grant permissions for the API to invoke the integration. render Render the integration into an API Gateway OpenAPI extension. grant public grant ( _props : IntegrationGrantProps ) : void Grant permissions for the API to invoke the integration. _props Required Type: IntegrationGrantProps render public render ( props : IntegrationRenderProps ) : ApiGatewayIntegration Render the integration into an API Gateway OpenAPI extension. props Required Type: IntegrationRenderProps Integrations A collection of integrations to connect API operations with a backend to service requests. Initializers import { Integrations } from '@aws-prototyping-sdk/open-api-gateway' new Integrations () Name Type Description Static Functions Name Description lambda An integration that invokes a lambda function to service the request. lambda import { Integrations } from '@aws-prototyping-sdk/open-api-gateway' Integrations . lambda ( lambdaFunction : IFunction ) An integration that invokes a lambda function to service the request. lambdaFunction Required Type: aws-cdk-lib.aws_lambda.IFunction the function to invoke. LambdaIntegration A lambda integration. Initializers import { LambdaIntegration } from '@aws-prototyping-sdk/open-api-gateway' new LambdaIntegration ( lambdaFunction : IFunction ) Name Type Description lambdaFunction aws-cdk-lib.aws_lambda.IFunction No description. lambdaFunction Required Type: aws-cdk-lib.aws_lambda.IFunction Methods Name Description grant Grant API Gateway permissions to invoke the lambda. render Render the lambda integration as a snippet of OpenAPI. grant public grant ( __0 : IntegrationGrantProps ) : void Grant API Gateway permissions to invoke the lambda. __0 Required Type: IntegrationGrantProps render public render ( props : IntegrationRenderProps ) : ApiGatewayIntegration Render the lambda integration as a snippet of OpenAPI. props Required Type: IntegrationRenderProps NoneAuthorizer No authorizer. Initializers import { NoneAuthorizer } from '@aws-prototyping-sdk/open-api-gateway' new NoneAuthorizer () Name Type Description Properties Name Type Description authorizationType aws-cdk-lib.aws_apigateway.AuthorizationType The type of the authorizer. authorizerId string The unique identifier for the authorizer. authorizationScopes string[] Scopes for the authorizer, if any. authorizationType Required public readonly authorizationType : AuthorizationType ; Type: aws-cdk-lib.aws_apigateway.AuthorizationType The type of the authorizer. authorizerId Required public readonly authorizerId : string ; Type: string The unique identifier for the authorizer. authorizationScopes Optional public readonly authorizationScopes : string []; Type: string[] Scopes for the authorizer, if any. OpenApiGatewayJavaProject Synthesizes a Java Project with an OpenAPI spec, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests. Initializers import { OpenApiGatewayJavaProject } from '@aws-prototyping-sdk/open-api-gateway' new OpenApiGatewayJavaProject ( projectOptions : OpenApiGatewayJavaProjectOptions ) Name Type Description projectOptions OpenApiGatewayJavaProjectOptions No description. projectOptions Required Type: OpenApiGatewayJavaProjectOptions Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. tryRemoveFile Finds a file at the specified relative path within this project and removes it. addDependency Adds a runtime dependency. addPlugin Adds a build plugin to the pom. addTestDependency Adds a test dependency. addExcludeFromCleanup public addExcludeFromCleanup ( globs : string ) : void Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: string The glob patterns to match. addGitIgnore public addGitIgnore ( pattern : string ) : void Adds a .gitignore pattern. pattern Required Type: string The glob pattern to ignore. addPackageIgnore public addPackageIgnore ( _pattern : string ) : void Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . _pattern Required Type: string The glob pattern to exclude. addTask public addTask ( name : string , props? : TaskOptions ) : Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: string The task name to add. props Optional Type: projen.TaskOptions Task properties. ~~ addTip ~~ public addTip ( message : string ) : void Prints a \"tip\" message during synthesis. message Required Type: string The message. annotateGenerated public annotateGenerated ( glob : string ) : void Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: string the glob pattern to match (could be a file path). postSynthesize public postSynthesize () : void Called after all components are synthesized. Order is not guaranteed. preSynthesize public preSynthesize () : void Called before all components are synthesized. removeTask public removeTask ( name : string ) : Task Removes a task from a project. name Required Type: string The name of the task to remove. runTaskCommand public runTaskCommand ( task : Task ) : string Returns the shell command to execute in order to run a task. By default, this is npx projen@<version> <task> task Required Type: projen.Task The task for which the command is required. synth public synth () : void Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" tryFindFile public tryFindFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public tryFindJsonFile ( filePath : string ) : JsonFile Finds a json file by name. filePath Required Type: string The file path. tryFindObjectFile public tryFindObjectFile ( filePath : string ) : ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: string The file path. tryRemoveFile public tryRemoveFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and removes it. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. addDependency public addDependency ( spec : string ) : void Adds a runtime dependency. spec Required Type: string Format <groupId>/<artifactId>@<semver> . addPlugin public addPlugin ( spec : string , options? : PluginOptions ) : Dependency Adds a build plugin to the pom. The plug in is also added as a BUILD dep to the project. spec Required Type: string dependency spec ( group/artifact@version ). options Optional Type: projen.java.PluginOptions plugin options. addTestDependency public addTestDependency ( spec : string ) : void Adds a test dependency. spec Required Type: string Format <groupId>/<artifactId>@<semver> . Properties Name Type Description buildTask projen.Task No description. commitGenerated boolean Whether to commit the managed files by default. compileTask projen.Task No description. components projen.Component[] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected boolean Whether or not the project is being ejected. files projen.FileBase[] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name string Project name. outdir string Absolute output directory of this project. packageTask projen.Task No description. postCompileTask projen.Task No description. preCompileTask projen.Task No description. projectBuild projen.ProjectBuild Manages the build process of the project. projenCommand string The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. testTask projen.Task No description. defaultTask projen.Task This is the \"default\" task, the one that executes \"projen\". initProject projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. projectType projen.ProjectType No description. autoApprove projen.github.AutoApprove Auto approve set up for this project. devContainer projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. compile projen.java.MavenCompile Compile component. distdir string Maven artifact output directory. packaging projen.java.MavenPackaging Packaging component. pom projen.java.Pom API for managing pom.xml . junit projen.java.Junit JUnit component. projenrc projen.java.Projenrc Projenrc component. apiSrcDir string The directory in which the api generated code will reside, relative to the project srcdir. generatedClients {[ key: string ]: projen.Project} References to the client projects that were generated, keyed by language. generatedCodeDir string The directory in which generated client code will be generated, relative to the outdir of this project. generatedJavaClient projen.java.JavaProject A reference to the generated java client. specDir string The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. specFileName string The name of the spec file. forceGenerateCodeAndDocs boolean Force to generate code and docs even if there were no changes in spec. buildTask Required public readonly buildTask : Task ; Type: projen.Task commitGenerated Required public readonly commitGenerated : boolean ; Type: boolean Whether to commit the managed files by default. compileTask Required public readonly compileTask : Task ; Type: projen.Task components Required public readonly components : Component []; Type: projen.Component[] Returns all the components within this project. deps Required public readonly deps : Dependencies ; Type: projen.Dependencies Project dependencies. ejected Required public readonly ejected : boolean ; Type: boolean Whether or not the project is being ejected. files Required public readonly files : FileBase []; Type: projen.FileBase[] All files in this project. gitattributes Required public readonly gitattributes : GitAttributesFile ; Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public readonly gitignore : IgnoreFile ; Type: projen.IgnoreFile .gitignore. logger Required public readonly logger : Logger ; Type: projen.Logger Logging utilities. name Required public readonly name : string ; Type: string Project name. outdir Required public readonly outdir : string ; Type: string Absolute output directory of this project. packageTask Required public readonly packageTask : Task ; Type: projen.Task postCompileTask Required public readonly postCompileTask : Task ; Type: projen.Task preCompileTask Required public readonly preCompileTask : Task ; Type: projen.Task projectBuild Required public readonly projectBuild : ProjectBuild ; Type: projen.ProjectBuild Manages the build process of the project. projenCommand Required public readonly projenCommand : string ; Type: string The command to use in order to run the projen CLI. root Required public readonly root : Project ; Type: projen.Project The root project. tasks Required public readonly tasks : Tasks ; Type: projen.Tasks Project tasks. testTask Required public readonly testTask : Task ; Type: projen.Task defaultTask Optional public readonly defaultTask : Task ; Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public readonly initProject : InitProject ; Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public readonly parent : Project ; Type: projen.Project A parent project. If undefined, this is the root project. projectType Required public readonly projectType : ProjectType ; Type: projen.ProjectType autoApprove Optional public readonly autoApprove : AutoApprove ; Type: projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public readonly devContainer : DevContainer ; Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public readonly github : GitHub ; Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public readonly gitpod : Gitpod ; Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public readonly vscode : VsCode ; Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. compile Required public readonly compile : MavenCompile ; Type: projen.java.MavenCompile Compile component. distdir Required public readonly distdir : string ; Type: string Maven artifact output directory. packaging Required public readonly packaging : MavenPackaging ; Type: projen.java.MavenPackaging Packaging component. pom Required public readonly pom : Pom ; Type: projen.java.Pom API for managing pom.xml . junit Optional public readonly junit : Junit ; Type: projen.java.Junit JUnit component. projenrc Optional public readonly projenrc : Projenrc ; Type: projen.java.Projenrc Projenrc component. apiSrcDir Required public readonly apiSrcDir : string ; Type: string The directory in which the api generated code will reside, relative to the project srcdir. This will also be used as the package for the api project. generatedClients Required public readonly generatedClients : {[ key : string ] : Project }; Type: {[ key: string ]: projen.Project} References to the client projects that were generated, keyed by language. generatedCodeDir Required public readonly generatedCodeDir : string ; Type: string The directory in which generated client code will be generated, relative to the outdir of this project. generatedJavaClient Required public readonly generatedJavaClient : JavaProject ; Type: projen.java.JavaProject A reference to the generated java client. specDir Required public readonly specDir : string ; Type: string The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. specFileName Required public readonly specFileName : string ; Type: string The name of the spec file. forceGenerateCodeAndDocs Optional public readonly forceGenerateCodeAndDocs : boolean ; Type: boolean Force to generate code and docs even if there were no changes in spec. Constants Name Type Description DEFAULT_TASK string The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public readonly DEFAULT_TASK : string ; Type: string The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. OpenApiGatewayPythonProject Synthesizes a Python Project with an OpenAPI spec, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests. Initializers import { OpenApiGatewayPythonProject } from '@aws-prototyping-sdk/open-api-gateway' new OpenApiGatewayPythonProject ( projectOptions : OpenApiGatewayPythonProjectOptions ) Name Type Description projectOptions OpenApiGatewayPythonProjectOptions No description. projectOptions Required Type: OpenApiGatewayPythonProjectOptions Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. tryRemoveFile Finds a file at the specified relative path within this project and removes it. addDependency Adds a runtime dependency. addDevDependency Adds a dev dependency. addExcludeFromCleanup public addExcludeFromCleanup ( globs : string ) : void Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: string The glob patterns to match. addGitIgnore public addGitIgnore ( pattern : string ) : void Adds a .gitignore pattern. pattern Required Type: string The glob pattern to ignore. addPackageIgnore public addPackageIgnore ( _pattern : string ) : void Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . _pattern Required Type: string The glob pattern to exclude. addTask public addTask ( name : string , props? : TaskOptions ) : Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: string The task name to add. props Optional Type: projen.TaskOptions Task properties. ~~ addTip ~~ public addTip ( message : string ) : void Prints a \"tip\" message during synthesis. message Required Type: string The message. annotateGenerated public annotateGenerated ( glob : string ) : void Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: string the glob pattern to match (could be a file path). postSynthesize public postSynthesize () : void Called after all components are synthesized. Order is not guaranteed. preSynthesize public preSynthesize () : void Called before all components are synthesized. removeTask public removeTask ( name : string ) : Task Removes a task from a project. name Required Type: string The name of the task to remove. runTaskCommand public runTaskCommand ( task : Task ) : string Returns the shell command to execute in order to run a task. By default, this is npx projen@<version> <task> task Required Type: projen.Task The task for which the command is required. synth public synth () : void Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" tryFindFile public tryFindFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public tryFindJsonFile ( filePath : string ) : JsonFile Finds a json file by name. filePath Required Type: string The file path. tryFindObjectFile public tryFindObjectFile ( filePath : string ) : ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: string The file path. tryRemoveFile public tryRemoveFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and removes it. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. addDependency public addDependency ( spec : string ) : void Adds a runtime dependency. spec Required Type: string Format <module>@<semver> . addDevDependency public addDevDependency ( spec : string ) : void Adds a dev dependency. spec Required Type: string Format <module>@<semver> . Properties Name Type Description buildTask projen.Task No description. commitGenerated boolean Whether to commit the managed files by default. compileTask projen.Task No description. components projen.Component[] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected boolean Whether or not the project is being ejected. files projen.FileBase[] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name string Project name. outdir string Absolute output directory of this project. packageTask projen.Task No description. postCompileTask projen.Task No description. preCompileTask projen.Task No description. projectBuild projen.ProjectBuild Manages the build process of the project. projenCommand string The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. testTask projen.Task No description. defaultTask projen.Task This is the \"default\" task, the one that executes \"projen\". initProject projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. projectType projen.ProjectType No description. autoApprove projen.github.AutoApprove Auto approve set up for this project. devContainer projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. depsManager projen.python.IPythonDeps API for managing dependencies. envManager projen.python.IPythonEnv API for mangaging the Python runtime environment. moduleName string Python module name (the project name, with any hyphens or periods replaced with underscores). version string Version of the package for distribution (should follow semver). packagingManager projen.python.IPythonPackaging API for managing packaging the project as a library. pytest projen.python.Pytest Pytest component. apiSrcDir string The directory in which the api generated code will reside, relative to the project srcdir. generatedClients {[ key: string ]: projen.Project} References to the client projects that were generated, keyed by language. generatedCodeDir string The directory in which generated client code will be generated, relative to the outdir of this project. generatedPythonClient projen.python.PythonProject A reference to the generated python client. specDir string The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. specFileName string The name of the spec file. forceGenerateCodeAndDocs boolean Force to generate code and docs even if there were no changes in spec. buildTask Required public readonly buildTask : Task ; Type: projen.Task commitGenerated Required public readonly commitGenerated : boolean ; Type: boolean Whether to commit the managed files by default. compileTask Required public readonly compileTask : Task ; Type: projen.Task components Required public readonly components : Component []; Type: projen.Component[] Returns all the components within this project. deps Required public readonly deps : Dependencies ; Type: projen.Dependencies Project dependencies. ejected Required public readonly ejected : boolean ; Type: boolean Whether or not the project is being ejected. files Required public readonly files : FileBase []; Type: projen.FileBase[] All files in this project. gitattributes Required public readonly gitattributes : GitAttributesFile ; Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public readonly gitignore : IgnoreFile ; Type: projen.IgnoreFile .gitignore. logger Required public readonly logger : Logger ; Type: projen.Logger Logging utilities. name Required public readonly name : string ; Type: string Project name. outdir Required public readonly outdir : string ; Type: string Absolute output directory of this project. packageTask Required public readonly packageTask : Task ; Type: projen.Task postCompileTask Required public readonly postCompileTask : Task ; Type: projen.Task preCompileTask Required public readonly preCompileTask : Task ; Type: projen.Task projectBuild Required public readonly projectBuild : ProjectBuild ; Type: projen.ProjectBuild Manages the build process of the project. projenCommand Required public readonly projenCommand : string ; Type: string The command to use in order to run the projen CLI. root Required public readonly root : Project ; Type: projen.Project The root project. tasks Required public readonly tasks : Tasks ; Type: projen.Tasks Project tasks. testTask Required public readonly testTask : Task ; Type: projen.Task defaultTask Optional public readonly defaultTask : Task ; Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public readonly initProject : InitProject ; Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public readonly parent : Project ; Type: projen.Project A parent project. If undefined, this is the root project. projectType Required public readonly projectType : ProjectType ; Type: projen.ProjectType autoApprove Optional public readonly autoApprove : AutoApprove ; Type: projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public readonly devContainer : DevContainer ; Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public readonly github : GitHub ; Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public readonly gitpod : Gitpod ; Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public readonly vscode : VsCode ; Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. depsManager Required public readonly depsManager : IPythonDeps ; Type: projen.python.IPythonDeps API for managing dependencies. envManager Required public readonly envManager : IPythonEnv ; Type: projen.python.IPythonEnv API for mangaging the Python runtime environment. moduleName Required public readonly module Name : string ; Type: string Python module name (the project name, with any hyphens or periods replaced with underscores). version Required public readonly version : string ; Type: string Version of the package for distribution (should follow semver). packagingManager Optional public readonly packagingManager : IPythonPackaging ; Type: projen.python.IPythonPackaging API for managing packaging the project as a library. Only applies when the projectType is LIB. pytest Optional public readonly pytest : Pytest ; Type: projen.python.Pytest Pytest component. apiSrcDir Required public readonly apiSrcDir : string ; Type: string The directory in which the api generated code will reside, relative to the project srcdir. generatedClients Required public readonly generatedClients : {[ key : string ] : Project }; Type: {[ key: string ]: projen.Project} References to the client projects that were generated, keyed by language. generatedCodeDir Required public readonly generatedCodeDir : string ; Type: string The directory in which generated client code will be generated, relative to the outdir of this project. generatedPythonClient Required public readonly generatedPythonClient : PythonProject ; Type: projen.python.PythonProject A reference to the generated python client. specDir Required public readonly specDir : string ; Type: string The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. specFileName Required public readonly specFileName : string ; Type: string The name of the spec file. forceGenerateCodeAndDocs Optional public readonly forceGenerateCodeAndDocs : boolean ; Type: boolean Force to generate code and docs even if there were no changes in spec. Constants Name Type Description DEFAULT_TASK string The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public readonly DEFAULT_TASK : string ; Type: string The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. OpenApiGatewayTsProject Synthesizes a Typescript Project with an OpenAPI spec, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests. Initializers import { OpenApiGatewayTsProject } from '@aws-prototyping-sdk/open-api-gateway' new OpenApiGatewayTsProject ( projectOptions : OpenApiGatewayTsProjectOptions ) Name Type Description projectOptions OpenApiGatewayTsProjectOptions No description. projectOptions Required Type: OpenApiGatewayTsProjectOptions Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. tryRemoveFile Finds a file at the specified relative path within this project and removes it. addBins No description. addBundledDeps Defines bundled dependencies. addCompileCommand DEPRECATED. addDeps Defines normal dependencies. addDevDeps Defines development/test dependencies. addFields Directly set fields in package.json . addKeywords Adds keywords to package.json (deduplicated). addPeerDeps Defines peer dependencies. addTestCommand DEPRECATED. hasScript Indicates if a script by the name name is defined. removeScript Removes the npm script (always successful). renderWorkflowSetup Returns the set of workflow steps which should be executed to bootstrap a workflow. setScript Replaces the contents of an npm package.json script. addExcludeFromCleanup public addExcludeFromCleanup ( globs : string ) : void Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: string The glob patterns to match. addGitIgnore public addGitIgnore ( pattern : string ) : void Adds a .gitignore pattern. pattern Required Type: string The glob pattern to ignore. addPackageIgnore public addPackageIgnore ( pattern : string ) : void Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . pattern Required Type: string addTask public addTask ( name : string , props? : TaskOptions ) : Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: string The task name to add. props Optional Type: projen.TaskOptions Task properties. ~~ addTip ~~ public addTip ( message : string ) : void Prints a \"tip\" message during synthesis. message Required Type: string The message. annotateGenerated public annotateGenerated ( glob : string ) : void Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: string the glob pattern to match (could be a file path). postSynthesize public postSynthesize () : void Called after all components are synthesized. Order is not guaranteed. preSynthesize public preSynthesize () : void Called before all components are synthesized. removeTask public removeTask ( name : string ) : Task Removes a task from a project. name Required Type: string The name of the task to remove. runTaskCommand public runTaskCommand ( task : Task ) : string Returns the shell command to execute in order to run a task. This will typically be npx projen TASK . task Required Type: projen.Task The task for which the command is required. synth public synth () : void Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" tryFindFile public tryFindFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public tryFindJsonFile ( filePath : string ) : JsonFile Finds a json file by name. filePath Required Type: string The file path. tryFindObjectFile public tryFindObjectFile ( filePath : string ) : ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: string The file path. tryRemoveFile public tryRemoveFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and removes it. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. addBins public addBins ( bins : {[ key : string ] : string }) : void bins Required Type: {[ key: string ]: string} addBundledDeps public addBundledDeps ( deps : string ) : void Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json . deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addCompileCommand ~~ public addCompileCommand ( commands : string ) : void DEPRECATED. commands Required Type: string addDeps public addDeps ( deps : string ) : void Defines normal dependencies. deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addDevDeps public addDevDeps ( deps : string ) : void Defines development/test dependencies. deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addFields public addFields ( fields : {[ key : string ] : any }) : void Directly set fields in package.json . fields Required Type: {[ key: string ]: any} The fields to set. addKeywords public addKeywords ( keywords : string ) : void Adds keywords to package.json (deduplicated). keywords Required Type: string The keywords to add. addPeerDeps public addPeerDeps ( deps : string ) : void Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers. deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addTestCommand ~~ public addTestCommand ( commands : string ) : void DEPRECATED. commands Required Type: string hasScript public hasScript ( name : string ) : boolean Indicates if a script by the name name is defined. name Required Type: string The name of the script. removeScript public removeScript ( name : string ) : void Removes the npm script (always successful). name Required Type: string The name of the script. renderWorkflowSetup public renderWorkflowSetup ( options? : RenderWorkflowSetupOptions ) : JobStep [] Returns the set of workflow steps which should be executed to bootstrap a workflow. options Optional Type: projen.javascript.RenderWorkflowSetupOptions Options. setScript public setScript ( name : string , command : string ) : void Replaces the contents of an npm package.json script. name Required Type: string The script name. command Required Type: string The command to execute. Properties Name Type Description buildTask projen.Task No description. commitGenerated boolean Whether to commit the managed files by default. compileTask projen.Task No description. components projen.Component[] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected boolean Whether or not the project is being ejected. files projen.FileBase[] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name string Project name. outdir string Absolute output directory of this project. packageTask projen.Task No description. postCompileTask projen.Task No description. preCompileTask projen.Task No description. projectBuild projen.ProjectBuild Manages the build process of the project. projenCommand string The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. testTask projen.Task No description. defaultTask projen.Task This is the \"default\" task, the one that executes \"projen\". initProject projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. projectType projen.ProjectType No description. autoApprove projen.github.AutoApprove Auto approve set up for this project. devContainer projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. allowLibraryDependencies boolean No description. artifactsDirectory string The build output directory. artifactsJavascriptDirectory string The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler projen.javascript.Bundler No description. entrypoint string No description. manifest any No description. package projen.javascript.NodePackage API for managing the node package. packageManager projen.javascript.NodePackageManager The package manager to use. runScriptCommand string The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. buildWorkflow projen.build.BuildWorkflow The PR build GitHub workflow. buildWorkflowJobId string The job ID of the build workflow. jest projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion string Maximum node version required by this package. minNodeVersion string Minimum node.js version required by this package. npmignore projen.IgnoreFile The .npmignore file. prettier projen.javascript.Prettier No description. publisher projen.release.Publisher Package publisher. release projen.release.Release Release management. upgradeWorkflow projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory string No description. libdir string The directory in which compiled .js files reside. srcdir string The directory in which the .ts sources reside. testdir string The directory in which tests reside. tsconfigDev projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask projen.Task The \"watch\" task. docgen boolean No description. eslint projen.javascript.Eslint No description. tsconfig projen.javascript.TypescriptConfig No description. tsconfigEslint projen.javascript.TypescriptConfig No description. apiSrcDir string The directory in which the api generated code will reside, relative to the project srcdir. forceGenerateCodeAndDocs boolean Force to generate code and docs even if there were no changes in spec. generatedClients {[ key: string ]: projen.Project} References to the client projects that were generated, keyed by language. generatedCodeDir string The directory in which generated client code will be generated, relative to the outdir of this project. generatedTypescriptClient projen.typescript.TypeScriptProject A reference to the generated typescript client. specDir string The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. specFileName string The name of the spec file. pnpmWorkspace projen.YamlFile Reference to the PNPM workspace yaml file which adds the dependency between this project and the generated typescript client when this project is used in a monorepo, and the package manager is PNPM. buildTask Required public readonly buildTask : Task ; Type: projen.Task commitGenerated Required public readonly commitGenerated : boolean ; Type: boolean Whether to commit the managed files by default. compileTask Required public readonly compileTask : Task ; Type: projen.Task components Required public readonly components : Component []; Type: projen.Component[] Returns all the components within this project. deps Required public readonly deps : Dependencies ; Type: projen.Dependencies Project dependencies. ejected Required public readonly ejected : boolean ; Type: boolean Whether or not the project is being ejected. files Required public readonly files : FileBase []; Type: projen.FileBase[] All files in this project. gitattributes Required public readonly gitattributes : GitAttributesFile ; Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public readonly gitignore : IgnoreFile ; Type: projen.IgnoreFile .gitignore. logger Required public readonly logger : Logger ; Type: projen.Logger Logging utilities. name Required public readonly name : string ; Type: string Project name. outdir Required public readonly outdir : string ; Type: string Absolute output directory of this project. packageTask Required public readonly packageTask : Task ; Type: projen.Task postCompileTask Required public readonly postCompileTask : Task ; Type: projen.Task preCompileTask Required public readonly preCompileTask : Task ; Type: projen.Task projectBuild Required public readonly projectBuild : ProjectBuild ; Type: projen.ProjectBuild Manages the build process of the project. projenCommand Required public readonly projenCommand : string ; Type: string The command to use in order to run the projen CLI. root Required public readonly root : Project ; Type: projen.Project The root project. tasks Required public readonly tasks : Tasks ; Type: projen.Tasks Project tasks. testTask Required public readonly testTask : Task ; Type: projen.Task defaultTask Optional public readonly defaultTask : Task ; Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public readonly initProject : InitProject ; Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public readonly parent : Project ; Type: projen.Project A parent project. If undefined, this is the root project. projectType Required public readonly projectType : ProjectType ; Type: projen.ProjectType autoApprove Optional public readonly autoApprove : AutoApprove ; Type: projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public readonly devContainer : DevContainer ; Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public readonly github : GitHub ; Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public readonly gitpod : Gitpod ; Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public readonly vscode : VsCode ; Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. ~~ allowLibraryDependencies ~~ Required Deprecated: use package.allowLibraryDependencies public readonly allowLibraryDependencies : boolean ; Type: boolean artifactsDirectory Required public readonly artifactsDirectory : string ; Type: string The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg . artifactsJavascriptDirectory Required public readonly artifactsJavascriptDirectory : string ; Type: string The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler Required public readonly bundler : Bundler ; Type: projen.javascript.Bundler ~~ entrypoint ~~ Required Deprecated: use package.entrypoint public readonly entrypoint : string ; Type: string ~~ manifest ~~ Required Deprecated: use package.addField(x, y) public readonly manifest : any ; Type: any package Required public readonly package : NodePackage ; Type: projen.javascript.NodePackage API for managing the node package. ~~ packageManager ~~ Required Deprecated: use package.packageManager public readonly packageManager : NodePackageManager ; Type: projen.javascript.NodePackageManager The package manager to use. runScriptCommand Required public readonly runScriptCommand : string ; Type: string The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge Optional public readonly autoMerge : AutoMerge ; Type: projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. buildWorkflow Optional public readonly buildWorkflow : BuildWorkflow ; Type: projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled. buildWorkflowJobId Optional public readonly buildWorkflowJobId : string ; Type: string The job ID of the build workflow. jest Optional public readonly jest : Jest ; Type: projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion Optional public readonly maxNodeVersion : string ; Type: string Maximum node version required by this package. minNodeVersion Optional public readonly minNodeVersion : string ; Type: string Minimum node.js version required by this package. npmignore Optional public readonly npmignore : IgnoreFile ; Type: projen.IgnoreFile The .npmignore file. prettier Optional public readonly prettier : Prettier ; Type: projen.javascript.Prettier ~~ publisher ~~ Optional Deprecated: use release.publisher . public readonly publisher : Publisher ; Type: projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow. release Optional public readonly release : Release ; Type: projen.release.Release Release management. upgradeWorkflow Optional public readonly upgradeWorkflow : UpgradeDependencies ; Type: projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory Required public readonly docsDirectory : string ; Type: string libdir Required public readonly libdir : string ; Type: string The directory in which compiled .js files reside. srcdir Required public readonly srcdir : string ; Type: string The directory in which the .ts sources reside. testdir Required public readonly testdir : string ; Type: string The directory in which tests reside. tsconfigDev Required public readonly tsconfigDev : TypescriptConfig ; Type: projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask Required public readonly watchTask : Task ; Type: projen.Task The \"watch\" task. docgen Optional public readonly docgen : boolean ; Type: boolean eslint Optional public readonly eslint : Eslint ; Type: projen.javascript.Eslint tsconfig Optional public readonly tsconfig : TypescriptConfig ; Type: projen.javascript.TypescriptConfig tsconfigEslint Optional public readonly tsconfigEslint : TypescriptConfig ; Type: projen.javascript.TypescriptConfig apiSrcDir Required public readonly apiSrcDir : string ; Type: string The directory in which the api generated code will reside, relative to the project srcdir. forceGenerateCodeAndDocs Required public readonly forceGenerateCodeAndDocs : boolean ; Type: boolean Force to generate code and docs even if there were no changes in spec. generatedClients Required public readonly generatedClients : {[ key : string ] : Project }; Type: {[ key: string ]: projen.Project} References to the client projects that were generated, keyed by language. generatedCodeDir Required public readonly generatedCodeDir : string ; Type: string The directory in which generated client code will be generated, relative to the outdir of this project. generatedTypescriptClient Required public readonly generatedTypescriptClient : TypeScriptProject ; Type: projen.typescript.TypeScriptProject A reference to the generated typescript client. specDir Required public readonly specDir : string ; Type: string The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. specFileName Required public readonly specFileName : string ; Type: string The name of the spec file. pnpmWorkspace Optional public readonly pnpmWorkspace : YamlFile ; Type: projen.YamlFile Reference to the PNPM workspace yaml file which adds the dependency between this project and the generated typescript client when this project is used in a monorepo, and the package manager is PNPM. Constants Name Type Description DEFAULT_TASK string The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public readonly DEFAULT_TASK : string ; Type: string The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. SmithyApiGatewayJavaProject Synthesizes a Java Project with a Smithy model, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests. Initializers import { SmithyApiGatewayJavaProject } from '@aws-prototyping-sdk/open-api-gateway' new SmithyApiGatewayJavaProject ( options : SmithyApiGatewayJavaProjectOptions ) Name Type Description options SmithyApiGatewayJavaProjectOptions No description. options Required Type: SmithyApiGatewayJavaProjectOptions Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. tryRemoveFile Finds a file at the specified relative path within this project and removes it. addDependency Adds a runtime dependency. addPlugin Adds a build plugin to the pom. addTestDependency Adds a test dependency. addExcludeFromCleanup public addExcludeFromCleanup ( globs : string ) : void Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: string The glob patterns to match. addGitIgnore public addGitIgnore ( pattern : string ) : void Adds a .gitignore pattern. pattern Required Type: string The glob pattern to ignore. addPackageIgnore public addPackageIgnore ( _pattern : string ) : void Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . _pattern Required Type: string The glob pattern to exclude. addTask public addTask ( name : string , props? : TaskOptions ) : Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: string The task name to add. props Optional Type: projen.TaskOptions Task properties. ~~ addTip ~~ public addTip ( message : string ) : void Prints a \"tip\" message during synthesis. message Required Type: string The message. annotateGenerated public annotateGenerated ( glob : string ) : void Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: string the glob pattern to match (could be a file path). postSynthesize public postSynthesize () : void Called after all components are synthesized. Order is not guaranteed. preSynthesize public preSynthesize () : void Called before all components are synthesized. removeTask public removeTask ( name : string ) : Task Removes a task from a project. name Required Type: string The name of the task to remove. runTaskCommand public runTaskCommand ( task : Task ) : string Returns the shell command to execute in order to run a task. By default, this is npx projen@<version> <task> task Required Type: projen.Task The task for which the command is required. synth public synth () : void Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" tryFindFile public tryFindFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public tryFindJsonFile ( filePath : string ) : JsonFile Finds a json file by name. filePath Required Type: string The file path. tryFindObjectFile public tryFindObjectFile ( filePath : string ) : ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: string The file path. tryRemoveFile public tryRemoveFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and removes it. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. addDependency public addDependency ( spec : string ) : void Adds a runtime dependency. spec Required Type: string Format <groupId>/<artifactId>@<semver> . addPlugin public addPlugin ( spec : string , options? : PluginOptions ) : Dependency Adds a build plugin to the pom. The plug in is also added as a BUILD dep to the project. spec Required Type: string dependency spec ( group/artifact@version ). options Optional Type: projen.java.PluginOptions plugin options. addTestDependency public addTestDependency ( spec : string ) : void Adds a test dependency. spec Required Type: string Format <groupId>/<artifactId>@<semver> . Properties Name Type Description buildTask projen.Task No description. commitGenerated boolean Whether to commit the managed files by default. compileTask projen.Task No description. components projen.Component[] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected boolean Whether or not the project is being ejected. files projen.FileBase[] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name string Project name. outdir string Absolute output directory of this project. packageTask projen.Task No description. postCompileTask projen.Task No description. preCompileTask projen.Task No description. projectBuild projen.ProjectBuild Manages the build process of the project. projenCommand string The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. testTask projen.Task No description. defaultTask projen.Task This is the \"default\" task, the one that executes \"projen\". initProject projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. projectType projen.ProjectType No description. autoApprove projen.github.AutoApprove Auto approve set up for this project. devContainer projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. compile projen.java.MavenCompile Compile component. distdir string Maven artifact output directory. packaging projen.java.MavenPackaging Packaging component. pom projen.java.Pom API for managing pom.xml . junit projen.java.Junit JUnit component. projenrc projen.java.Projenrc Projenrc component. apiSrcDir string The directory in which the api generated code will reside, relative to the project srcdir. generatedClients {[ key: string ]: projen.Project} References to the client projects that were generated, keyed by language. generatedCodeDir string The directory in which generated client code will be generated, relative to the outdir of this project. generatedJavaClient projen.java.JavaProject A reference to the generated java client. specDir string The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. specFileName string The name of the spec file. forceGenerateCodeAndDocs boolean Force to generate code and docs even if there were no changes in spec. buildTask Required public readonly buildTask : Task ; Type: projen.Task commitGenerated Required public readonly commitGenerated : boolean ; Type: boolean Whether to commit the managed files by default. compileTask Required public readonly compileTask : Task ; Type: projen.Task components Required public readonly components : Component []; Type: projen.Component[] Returns all the components within this project. deps Required public readonly deps : Dependencies ; Type: projen.Dependencies Project dependencies. ejected Required public readonly ejected : boolean ; Type: boolean Whether or not the project is being ejected. files Required public readonly files : FileBase []; Type: projen.FileBase[] All files in this project. gitattributes Required public readonly gitattributes : GitAttributesFile ; Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public readonly gitignore : IgnoreFile ; Type: projen.IgnoreFile .gitignore. logger Required public readonly logger : Logger ; Type: projen.Logger Logging utilities. name Required public readonly name : string ; Type: string Project name. outdir Required public readonly outdir : string ; Type: string Absolute output directory of this project. packageTask Required public readonly packageTask : Task ; Type: projen.Task postCompileTask Required public readonly postCompileTask : Task ; Type: projen.Task preCompileTask Required public readonly preCompileTask : Task ; Type: projen.Task projectBuild Required public readonly projectBuild : ProjectBuild ; Type: projen.ProjectBuild Manages the build process of the project. projenCommand Required public readonly projenCommand : string ; Type: string The command to use in order to run the projen CLI. root Required public readonly root : Project ; Type: projen.Project The root project. tasks Required public readonly tasks : Tasks ; Type: projen.Tasks Project tasks. testTask Required public readonly testTask : Task ; Type: projen.Task defaultTask Optional public readonly defaultTask : Task ; Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public readonly initProject : InitProject ; Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public readonly parent : Project ; Type: projen.Project A parent project. If undefined, this is the root project. projectType Required public readonly projectType : ProjectType ; Type: projen.ProjectType autoApprove Optional public readonly autoApprove : AutoApprove ; Type: projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public readonly devContainer : DevContainer ; Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public readonly github : GitHub ; Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public readonly gitpod : Gitpod ; Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public readonly vscode : VsCode ; Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. compile Required public readonly compile : MavenCompile ; Type: projen.java.MavenCompile Compile component. distdir Required public readonly distdir : string ; Type: string Maven artifact output directory. packaging Required public readonly packaging : MavenPackaging ; Type: projen.java.MavenPackaging Packaging component. pom Required public readonly pom : Pom ; Type: projen.java.Pom API for managing pom.xml . junit Optional public readonly junit : Junit ; Type: projen.java.Junit JUnit component. projenrc Optional public readonly projenrc : Projenrc ; Type: projen.java.Projenrc Projenrc component. apiSrcDir Required public readonly apiSrcDir : string ; Type: string The directory in which the api generated code will reside, relative to the project srcdir. This will also be used as the package for the api project. generatedClients Required public readonly generatedClients : {[ key : string ] : Project }; Type: {[ key: string ]: projen.Project} References to the client projects that were generated, keyed by language. generatedCodeDir Required public readonly generatedCodeDir : string ; Type: string The directory in which generated client code will be generated, relative to the outdir of this project. generatedJavaClient Required public readonly generatedJavaClient : JavaProject ; Type: projen.java.JavaProject A reference to the generated java client. specDir Required public readonly specDir : string ; Type: string The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. specFileName Required public readonly specFileName : string ; Type: string The name of the spec file. forceGenerateCodeAndDocs Optional public readonly forceGenerateCodeAndDocs : boolean ; Type: boolean Force to generate code and docs even if there were no changes in spec. Constants Name Type Description DEFAULT_TASK string The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public readonly DEFAULT_TASK : string ; Type: string The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. SmithyApiGatewayPythonProject Synthesizes a Python Project with a Smithy model, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests. Initializers import { SmithyApiGatewayPythonProject } from '@aws-prototyping-sdk/open-api-gateway' new SmithyApiGatewayPythonProject ( options : SmithyApiGatewayPythonProjectOptions ) Name Type Description options SmithyApiGatewayPythonProjectOptions No description. options Required Type: SmithyApiGatewayPythonProjectOptions Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. tryRemoveFile Finds a file at the specified relative path within this project and removes it. addDependency Adds a runtime dependency. addDevDependency Adds a dev dependency. addExcludeFromCleanup public addExcludeFromCleanup ( globs : string ) : void Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: string The glob patterns to match. addGitIgnore public addGitIgnore ( pattern : string ) : void Adds a .gitignore pattern. pattern Required Type: string The glob pattern to ignore. addPackageIgnore public addPackageIgnore ( _pattern : string ) : void Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . _pattern Required Type: string The glob pattern to exclude. addTask public addTask ( name : string , props? : TaskOptions ) : Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: string The task name to add. props Optional Type: projen.TaskOptions Task properties. ~~ addTip ~~ public addTip ( message : string ) : void Prints a \"tip\" message during synthesis. message Required Type: string The message. annotateGenerated public annotateGenerated ( glob : string ) : void Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: string the glob pattern to match (could be a file path). postSynthesize public postSynthesize () : void Called after all components are synthesized. Order is not guaranteed. preSynthesize public preSynthesize () : void Called before all components are synthesized. removeTask public removeTask ( name : string ) : Task Removes a task from a project. name Required Type: string The name of the task to remove. runTaskCommand public runTaskCommand ( task : Task ) : string Returns the shell command to execute in order to run a task. By default, this is npx projen@<version> <task> task Required Type: projen.Task The task for which the command is required. synth public synth () : void Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" tryFindFile public tryFindFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public tryFindJsonFile ( filePath : string ) : JsonFile Finds a json file by name. filePath Required Type: string The file path. tryFindObjectFile public tryFindObjectFile ( filePath : string ) : ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: string The file path. tryRemoveFile public tryRemoveFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and removes it. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. addDependency public addDependency ( spec : string ) : void Adds a runtime dependency. spec Required Type: string Format <module>@<semver> . addDevDependency public addDevDependency ( spec : string ) : void Adds a dev dependency. spec Required Type: string Format <module>@<semver> . Properties Name Type Description buildTask projen.Task No description. commitGenerated boolean Whether to commit the managed files by default. compileTask projen.Task No description. components projen.Component[] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected boolean Whether or not the project is being ejected. files projen.FileBase[] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name string Project name. outdir string Absolute output directory of this project. packageTask projen.Task No description. postCompileTask projen.Task No description. preCompileTask projen.Task No description. projectBuild projen.ProjectBuild Manages the build process of the project. projenCommand string The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. testTask projen.Task No description. defaultTask projen.Task This is the \"default\" task, the one that executes \"projen\". initProject projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. projectType projen.ProjectType No description. autoApprove projen.github.AutoApprove Auto approve set up for this project. devContainer projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. depsManager projen.python.IPythonDeps API for managing dependencies. envManager projen.python.IPythonEnv API for mangaging the Python runtime environment. moduleName string Python module name (the project name, with any hyphens or periods replaced with underscores). version string Version of the package for distribution (should follow semver). packagingManager projen.python.IPythonPackaging API for managing packaging the project as a library. pytest projen.python.Pytest Pytest component. apiSrcDir string The directory in which the api generated code will reside, relative to the project srcdir. generatedClients {[ key: string ]: projen.Project} References to the client projects that were generated, keyed by language. generatedCodeDir string The directory in which generated client code will be generated, relative to the outdir of this project. generatedPythonClient projen.python.PythonProject A reference to the generated python client. specDir string The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. specFileName string The name of the spec file. forceGenerateCodeAndDocs boolean Force to generate code and docs even if there were no changes in spec. buildTask Required public readonly buildTask : Task ; Type: projen.Task commitGenerated Required public readonly commitGenerated : boolean ; Type: boolean Whether to commit the managed files by default. compileTask Required public readonly compileTask : Task ; Type: projen.Task components Required public readonly components : Component []; Type: projen.Component[] Returns all the components within this project. deps Required public readonly deps : Dependencies ; Type: projen.Dependencies Project dependencies. ejected Required public readonly ejected : boolean ; Type: boolean Whether or not the project is being ejected. files Required public readonly files : FileBase []; Type: projen.FileBase[] All files in this project. gitattributes Required public readonly gitattributes : GitAttributesFile ; Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public readonly gitignore : IgnoreFile ; Type: projen.IgnoreFile .gitignore. logger Required public readonly logger : Logger ; Type: projen.Logger Logging utilities. name Required public readonly name : string ; Type: string Project name. outdir Required public readonly outdir : string ; Type: string Absolute output directory of this project. packageTask Required public readonly packageTask : Task ; Type: projen.Task postCompileTask Required public readonly postCompileTask : Task ; Type: projen.Task preCompileTask Required public readonly preCompileTask : Task ; Type: projen.Task projectBuild Required public readonly projectBuild : ProjectBuild ; Type: projen.ProjectBuild Manages the build process of the project. projenCommand Required public readonly projenCommand : string ; Type: string The command to use in order to run the projen CLI. root Required public readonly root : Project ; Type: projen.Project The root project. tasks Required public readonly tasks : Tasks ; Type: projen.Tasks Project tasks. testTask Required public readonly testTask : Task ; Type: projen.Task defaultTask Optional public readonly defaultTask : Task ; Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public readonly initProject : InitProject ; Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public readonly parent : Project ; Type: projen.Project A parent project. If undefined, this is the root project. projectType Required public readonly projectType : ProjectType ; Type: projen.ProjectType autoApprove Optional public readonly autoApprove : AutoApprove ; Type: projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public readonly devContainer : DevContainer ; Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public readonly github : GitHub ; Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public readonly gitpod : Gitpod ; Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public readonly vscode : VsCode ; Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. depsManager Required public readonly depsManager : IPythonDeps ; Type: projen.python.IPythonDeps API for managing dependencies. envManager Required public readonly envManager : IPythonEnv ; Type: projen.python.IPythonEnv API for mangaging the Python runtime environment. moduleName Required public readonly module Name : string ; Type: string Python module name (the project name, with any hyphens or periods replaced with underscores). version Required public readonly version : string ; Type: string Version of the package for distribution (should follow semver). packagingManager Optional public readonly packagingManager : IPythonPackaging ; Type: projen.python.IPythonPackaging API for managing packaging the project as a library. Only applies when the projectType is LIB. pytest Optional public readonly pytest : Pytest ; Type: projen.python.Pytest Pytest component. apiSrcDir Required public readonly apiSrcDir : string ; Type: string The directory in which the api generated code will reside, relative to the project srcdir. generatedClients Required public readonly generatedClients : {[ key : string ] : Project }; Type: {[ key: string ]: projen.Project} References to the client projects that were generated, keyed by language. generatedCodeDir Required public readonly generatedCodeDir : string ; Type: string The directory in which generated client code will be generated, relative to the outdir of this project. generatedPythonClient Required public readonly generatedPythonClient : PythonProject ; Type: projen.python.PythonProject A reference to the generated python client. specDir Required public readonly specDir : string ; Type: string The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. specFileName Required public readonly specFileName : string ; Type: string The name of the spec file. forceGenerateCodeAndDocs Optional public readonly forceGenerateCodeAndDocs : boolean ; Type: boolean Force to generate code and docs even if there were no changes in spec. Constants Name Type Description DEFAULT_TASK string The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public readonly DEFAULT_TASK : string ; Type: string The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. SmithyApiGatewayTsProject Synthesizes a Typescript Project with a Smithy model, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests. Initializers import { SmithyApiGatewayTsProject } from '@aws-prototyping-sdk/open-api-gateway' new SmithyApiGatewayTsProject ( options : SmithyApiGatewayTsProjectOptions ) Name Type Description options SmithyApiGatewayTsProjectOptions No description. options Required Type: SmithyApiGatewayTsProjectOptions Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. tryRemoveFile Finds a file at the specified relative path within this project and removes it. addBins No description. addBundledDeps Defines bundled dependencies. addCompileCommand DEPRECATED. addDeps Defines normal dependencies. addDevDeps Defines development/test dependencies. addFields Directly set fields in package.json . addKeywords Adds keywords to package.json (deduplicated). addPeerDeps Defines peer dependencies. addTestCommand DEPRECATED. hasScript Indicates if a script by the name name is defined. removeScript Removes the npm script (always successful). renderWorkflowSetup Returns the set of workflow steps which should be executed to bootstrap a workflow. setScript Replaces the contents of an npm package.json script. addExcludeFromCleanup public addExcludeFromCleanup ( globs : string ) : void Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: string The glob patterns to match. addGitIgnore public addGitIgnore ( pattern : string ) : void Adds a .gitignore pattern. pattern Required Type: string The glob pattern to ignore. addPackageIgnore public addPackageIgnore ( pattern : string ) : void Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . pattern Required Type: string addTask public addTask ( name : string , props? : TaskOptions ) : Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: string The task name to add. props Optional Type: projen.TaskOptions Task properties. ~~ addTip ~~ public addTip ( message : string ) : void Prints a \"tip\" message during synthesis. message Required Type: string The message. annotateGenerated public annotateGenerated ( glob : string ) : void Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: string the glob pattern to match (could be a file path). postSynthesize public postSynthesize () : void Called after all components are synthesized. Order is not guaranteed. preSynthesize public preSynthesize () : void Called before all components are synthesized. removeTask public removeTask ( name : string ) : Task Removes a task from a project. name Required Type: string The name of the task to remove. runTaskCommand public runTaskCommand ( task : Task ) : string Returns the shell command to execute in order to run a task. This will typically be npx projen TASK . task Required Type: projen.Task The task for which the command is required. synth public synth () : void Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" tryFindFile public tryFindFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public tryFindJsonFile ( filePath : string ) : JsonFile Finds a json file by name. filePath Required Type: string The file path. tryFindObjectFile public tryFindObjectFile ( filePath : string ) : ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: string The file path. tryRemoveFile public tryRemoveFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and removes it. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. addBins public addBins ( bins : {[ key : string ] : string }) : void bins Required Type: {[ key: string ]: string} addBundledDeps public addBundledDeps ( deps : string ) : void Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json . deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addCompileCommand ~~ public addCompileCommand ( commands : string ) : void DEPRECATED. commands Required Type: string addDeps public addDeps ( deps : string ) : void Defines normal dependencies. deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addDevDeps public addDevDeps ( deps : string ) : void Defines development/test dependencies. deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addFields public addFields ( fields : {[ key : string ] : any }) : void Directly set fields in package.json . fields Required Type: {[ key: string ]: any} The fields to set. addKeywords public addKeywords ( keywords : string ) : void Adds keywords to package.json (deduplicated). keywords Required Type: string The keywords to add. addPeerDeps public addPeerDeps ( deps : string ) : void Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers. deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addTestCommand ~~ public addTestCommand ( commands : string ) : void DEPRECATED. commands Required Type: string hasScript public hasScript ( name : string ) : boolean Indicates if a script by the name name is defined. name Required Type: string The name of the script. removeScript public removeScript ( name : string ) : void Removes the npm script (always successful). name Required Type: string The name of the script. renderWorkflowSetup public renderWorkflowSetup ( options? : RenderWorkflowSetupOptions ) : JobStep [] Returns the set of workflow steps which should be executed to bootstrap a workflow. options Optional Type: projen.javascript.RenderWorkflowSetupOptions Options. setScript public setScript ( name : string , command : string ) : void Replaces the contents of an npm package.json script. name Required Type: string The script name. command Required Type: string The command to execute. Properties Name Type Description buildTask projen.Task No description. commitGenerated boolean Whether to commit the managed files by default. compileTask projen.Task No description. components projen.Component[] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected boolean Whether or not the project is being ejected. files projen.FileBase[] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name string Project name. outdir string Absolute output directory of this project. packageTask projen.Task No description. postCompileTask projen.Task No description. preCompileTask projen.Task No description. projectBuild projen.ProjectBuild Manages the build process of the project. projenCommand string The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. testTask projen.Task No description. defaultTask projen.Task This is the \"default\" task, the one that executes \"projen\". initProject projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. projectType projen.ProjectType No description. autoApprove projen.github.AutoApprove Auto approve set up for this project. devContainer projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. allowLibraryDependencies boolean No description. artifactsDirectory string The build output directory. artifactsJavascriptDirectory string The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler projen.javascript.Bundler No description. entrypoint string No description. manifest any No description. package projen.javascript.NodePackage API for managing the node package. packageManager projen.javascript.NodePackageManager The package manager to use. runScriptCommand string The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. buildWorkflow projen.build.BuildWorkflow The PR build GitHub workflow. buildWorkflowJobId string The job ID of the build workflow. jest projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion string Maximum node version required by this package. minNodeVersion string Minimum node.js version required by this package. npmignore projen.IgnoreFile The .npmignore file. prettier projen.javascript.Prettier No description. publisher projen.release.Publisher Package publisher. release projen.release.Release Release management. upgradeWorkflow projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory string No description. libdir string The directory in which compiled .js files reside. srcdir string The directory in which the .ts sources reside. testdir string The directory in which tests reside. tsconfigDev projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask projen.Task The \"watch\" task. docgen boolean No description. eslint projen.javascript.Eslint No description. tsconfig projen.javascript.TypescriptConfig No description. tsconfigEslint projen.javascript.TypescriptConfig No description. apiSrcDir string The directory in which the api generated code will reside, relative to the project srcdir. forceGenerateCodeAndDocs boolean Force to generate code and docs even if there were no changes in spec. generatedClients {[ key: string ]: projen.Project} References to the client projects that were generated, keyed by language. generatedCodeDir string The directory in which generated client code will be generated, relative to the outdir of this project. generatedTypescriptClient projen.typescript.TypeScriptProject A reference to the generated typescript client. specDir string The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. specFileName string The name of the spec file. pnpmWorkspace projen.YamlFile Reference to the PNPM workspace yaml file which adds the dependency between this project and the generated typescript client when this project is used in a monorepo, and the package manager is PNPM. buildTask Required public readonly buildTask : Task ; Type: projen.Task commitGenerated Required public readonly commitGenerated : boolean ; Type: boolean Whether to commit the managed files by default. compileTask Required public readonly compileTask : Task ; Type: projen.Task components Required public readonly components : Component []; Type: projen.Component[] Returns all the components within this project. deps Required public readonly deps : Dependencies ; Type: projen.Dependencies Project dependencies. ejected Required public readonly ejected : boolean ; Type: boolean Whether or not the project is being ejected. files Required public readonly files : FileBase []; Type: projen.FileBase[] All files in this project. gitattributes Required public readonly gitattributes : GitAttributesFile ; Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public readonly gitignore : IgnoreFile ; Type: projen.IgnoreFile .gitignore. logger Required public readonly logger : Logger ; Type: projen.Logger Logging utilities. name Required public readonly name : string ; Type: string Project name. outdir Required public readonly outdir : string ; Type: string Absolute output directory of this project. packageTask Required public readonly packageTask : Task ; Type: projen.Task postCompileTask Required public readonly postCompileTask : Task ; Type: projen.Task preCompileTask Required public readonly preCompileTask : Task ; Type: projen.Task projectBuild Required public readonly projectBuild : ProjectBuild ; Type: projen.ProjectBuild Manages the build process of the project. projenCommand Required public readonly projenCommand : string ; Type: string The command to use in order to run the projen CLI. root Required public readonly root : Project ; Type: projen.Project The root project. tasks Required public readonly tasks : Tasks ; Type: projen.Tasks Project tasks. testTask Required public readonly testTask : Task ; Type: projen.Task defaultTask Optional public readonly defaultTask : Task ; Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public readonly initProject : InitProject ; Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public readonly parent : Project ; Type: projen.Project A parent project. If undefined, this is the root project. projectType Required public readonly projectType : ProjectType ; Type: projen.ProjectType autoApprove Optional public readonly autoApprove : AutoApprove ; Type: projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public readonly devContainer : DevContainer ; Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public readonly github : GitHub ; Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public readonly gitpod : Gitpod ; Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public readonly vscode : VsCode ; Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. ~~ allowLibraryDependencies ~~ Required Deprecated: use package.allowLibraryDependencies public readonly allowLibraryDependencies : boolean ; Type: boolean artifactsDirectory Required public readonly artifactsDirectory : string ; Type: string The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg . artifactsJavascriptDirectory Required public readonly artifactsJavascriptDirectory : string ; Type: string The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler Required public readonly bundler : Bundler ; Type: projen.javascript.Bundler ~~ entrypoint ~~ Required Deprecated: use package.entrypoint public readonly entrypoint : string ; Type: string ~~ manifest ~~ Required Deprecated: use package.addField(x, y) public readonly manifest : any ; Type: any package Required public readonly package : NodePackage ; Type: projen.javascript.NodePackage API for managing the node package. ~~ packageManager ~~ Required Deprecated: use package.packageManager public readonly packageManager : NodePackageManager ; Type: projen.javascript.NodePackageManager The package manager to use. runScriptCommand Required public readonly runScriptCommand : string ; Type: string The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge Optional public readonly autoMerge : AutoMerge ; Type: projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. buildWorkflow Optional public readonly buildWorkflow : BuildWorkflow ; Type: projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled. buildWorkflowJobId Optional public readonly buildWorkflowJobId : string ; Type: string The job ID of the build workflow. jest Optional public readonly jest : Jest ; Type: projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion Optional public readonly maxNodeVersion : string ; Type: string Maximum node version required by this package. minNodeVersion Optional public readonly minNodeVersion : string ; Type: string Minimum node.js version required by this package. npmignore Optional public readonly npmignore : IgnoreFile ; Type: projen.IgnoreFile The .npmignore file. prettier Optional public readonly prettier : Prettier ; Type: projen.javascript.Prettier ~~ publisher ~~ Optional Deprecated: use release.publisher . public readonly publisher : Publisher ; Type: projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow. release Optional public readonly release : Release ; Type: projen.release.Release Release management. upgradeWorkflow Optional public readonly upgradeWorkflow : UpgradeDependencies ; Type: projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory Required public readonly docsDirectory : string ; Type: string libdir Required public readonly libdir : string ; Type: string The directory in which compiled .js files reside. srcdir Required public readonly srcdir : string ; Type: string The directory in which the .ts sources reside. testdir Required public readonly testdir : string ; Type: string The directory in which tests reside. tsconfigDev Required public readonly tsconfigDev : TypescriptConfig ; Type: projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask Required public readonly watchTask : Task ; Type: projen.Task The \"watch\" task. docgen Optional public readonly docgen : boolean ; Type: boolean eslint Optional public readonly eslint : Eslint ; Type: projen.javascript.Eslint tsconfig Optional public readonly tsconfig : TypescriptConfig ; Type: projen.javascript.TypescriptConfig tsconfigEslint Optional public readonly tsconfigEslint : TypescriptConfig ; Type: projen.javascript.TypescriptConfig apiSrcDir Required public readonly apiSrcDir : string ; Type: string The directory in which the api generated code will reside, relative to the project srcdir. forceGenerateCodeAndDocs Required public readonly forceGenerateCodeAndDocs : boolean ; Type: boolean Force to generate code and docs even if there were no changes in spec. generatedClients Required public readonly generatedClients : {[ key : string ] : Project }; Type: {[ key: string ]: projen.Project} References to the client projects that were generated, keyed by language. generatedCodeDir Required public readonly generatedCodeDir : string ; Type: string The directory in which generated client code will be generated, relative to the outdir of this project. generatedTypescriptClient Required public readonly generatedTypescriptClient : TypeScriptProject ; Type: projen.typescript.TypeScriptProject A reference to the generated typescript client. specDir Required public readonly specDir : string ; Type: string The directory in which the OpenAPI spec file(s) reside, relative to the project srcdir. specFileName Required public readonly specFileName : string ; Type: string The name of the spec file. pnpmWorkspace Optional public readonly pnpmWorkspace : YamlFile ; Type: projen.YamlFile Reference to the PNPM workspace yaml file which adds the dependency between this project and the generated typescript client when this project is used in a monorepo, and the package manager is PNPM. Constants Name Type Description DEFAULT_TASK string The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public readonly DEFAULT_TASK : string ; Type: string The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. Enums ClientLanguage Supported languages for client generation. Members Name Description TYPESCRIPT No description. PYTHON No description. JAVA No description. TYPESCRIPT PYTHON JAVA CustomAuthorizerType The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type Members Name Description TOKEN A custom authorizer that uses a Lambda function. REQUEST An authorizer that uses a Lambda function using incoming request parameters. TOKEN A custom authorizer that uses a Lambda function. REQUEST An authorizer that uses a Lambda function using incoming request parameters. DocumentationFormat Formats for documentation generation. Members Name Description HTML_REDOC HTML Documentation generated by redoc. HTML2 OpenAPI Generator 'html2' documentation. MARKDOWN OpenAPI Generator 'markdown' documentation. PLANTUML OpenAPI Generator 'plantuml' documentation. HTML_REDOC HTML Documentation generated by redoc. Redocly/redoc HTML2 OpenAPI Generator 'html2' documentation. https://github.com/OpenAPITools/openapi-generator/blob/master/docs/generators/html2.md MARKDOWN OpenAPI Generator 'markdown' documentation. https://github.com/OpenAPITools/openapi-generator/blob/master/docs/generators/markdown.md PLANTUML OpenAPI Generator 'plantuml' documentation. https://github.com/OpenAPITools/openapi-generator/blob/master/docs/generators/plantuml.md","title":"Index"},{"location":"typescript/open-api-gateway/index.html#openapi-gateway","text":"Define your APIs using Smithy or OpenAPI v3 , and leverage the power of generated clients and documentation, automatic input validation, and type safe client and server code! This package vends a projen project type which allows you to define an API using either Smithy or OpenAPI v3 , and a construct which manages deploying this API in API Gateway, given an integration (eg a lambda) for every operation. The project will generate models and clients from your api definition in your desired languages, and can be utilised both client side or server side in lambda handlers. The project type also generates a wrapper construct which adds type safety to ensure an integration is provided for every API operation. When you change your API specification, just run npx projen again to regenerate all of this!","title":"OpenAPI Gateway"},{"location":"typescript/open-api-gateway/index.html#project","text":"Use the provided projen project types to get started with your API quickly! There are options for TypeScript, Python and Java: Smithy SmithyApiGatewayTsProject SmithyApiGatewayPythonProject SmithyApiGatewayJavaProject OpenAPI OpenApiGatewayTsProject OpenApiGatewayPythonProject OpenApiGatewayJavaProject We recommend using the Smithy-based projects, given that Smithy has a less verbose and more powerful IDL (Interface Definition Language). Choose the project type based on the language you'd like to write your CDK infrastructure in . Whichever option above you choose, you can still write your server-side code in any language. It's recommended that these projects are used as part of an nx-monorepo project, as it makes setting up dependencies much easier, and you will not need to manage the build order of generated clients.","title":"Project"},{"location":"typescript/open-api-gateway/index.html#smithy-idl","text":"Please refer to the Smithy documentation for how to write models in Smithy. A basic example is provided below: $version : \"2\" namespace example.hello use aws.protocols#restJson1 @title ( \"A Sample Hello World API\" ) /// A sample smithy api @restJson1 service Hello { version: \"1.0\" operations: [ SayHello ] } @readonly @http ( method: \"GET\" , uri: \"/hello\" ) operation SayHello { input: SayHelloInput output: SayHelloOutput errors: [ ApiError ] } string Name string Message @input structure SayHelloInput { @httpQuery ( \"name\" ) @required name: Name } @output structure SayHelloOutput { @required message: Message } @error ( \"client\" ) structure ApiError { @required errorMessage: Message }","title":"Smithy IDL"},{"location":"typescript/open-api-gateway/index.html#openapi-specification","text":"Your spec.yaml file defines your api using OpenAPI Version 3.0.3 . An example spec might look like: openapi : 3.0.3 info : version : 1.0.0 title : Example API paths : /hello : get : operationId : sayHello parameters : - in : query name : name schema : type : string required : true responses : '200' : description : Successful response content : 'application/json' : schema : $ref : '#/components/schemas/HelloResponse' components : schemas : HelloResponse : type : object properties : message : type : string required : - message You can divide your specification into multiple files using $ref . For example, you might choose to structure your spec as follows: |_ spec/ |_ spec.yaml |_ paths/ |_ index.yaml |_ sayHello.yaml |_ schemas/ |_ index.yaml |_ helloResponse.yaml Where spec.yaml looks as follows: openapi : 3.0.3 info : version : 1.0.0 title : Example API paths : $ref : './paths/index.yaml' components : schemas : $ref : './schemas/index.yaml' paths/index.yaml : /hello : get : $ref : './sayHello.yaml' paths/sayHello.yaml : operationId : sayHello parameters : - in : query name : name schema : type : string required : true responses : '200' : description : Successful response content : 'application/json' : schema : $ref : '../schemas/helloResponse.yaml' schemas/index.yaml : HelloResponse : $ref : './helloResponse.yaml' schemas/helloResponse.yaml : type : object properties : message : type : string required : - message","title":"OpenAPI Specification"},{"location":"typescript/open-api-gateway/index.html#construct","text":"A sample construct is generated which provides a type-safe interface for creating an API Gateway API based on your OpenAPI specification. You'll get a type error if you forget to define an integration for an operation defined in your api. import { Authorizers , Integrations } from '@aws-prototyping-sdk/open-api-gateway' ; import { NodejsFunction } from 'aws-cdk-lib/aws-lambda-nodejs' ; import { Construct } from 'constructs' ; import { Api } from './api' ; /** * An example of how to wire lambda handler functions to the API */ export class SampleApi extends Api { constructor ( scope : Construct , id : string ) { super ( scope , id , { defaultAuthorizer : Authorizers.iam (), integrations : { // Every operation defined in your API must have an integration defined! sayHello : { integration : Integrations.lambda ( new NodejsFunction ( scope , 'say-hello' )), }, }, }); } }","title":"Construct"},{"location":"typescript/open-api-gateway/index.html#generated-client","text":"","title":"Generated Client"},{"location":"typescript/open-api-gateway/index.html#lambda-handler-wrappers","text":"Lambda handler wrappers are also importable from the generated client. These provide input/output type safety, ensuring that your API handlers return outputs that correspond to your specification.","title":"Lambda Handler Wrappers"},{"location":"typescript/open-api-gateway/index.html#interceptors","text":"The lambda handler wrappers allow you to pass in a chain of handler functions to handle the request. This allows you to implement middleware / interceptors for handling requests. Each handler function may choose whether or not to continue the handler chain by invoking chain.next .","title":"Interceptors"},{"location":"typescript/open-api-gateway/index.html#other-details","text":"","title":"Other Details"},{"location":"typescript/open-api-gateway/index.html#tagging-operations","text":"Operations can be grouped together into logical collections via tags. This can be achieved in Smithy with the @tags trait: @tags ([ \"pets\" , \"users\" ]) operation PurchasePet { ... } Or in OpenAPI using the tags property: paths : /pets/purchase : post : operationId : purchasePet tags : - pets - users ... When multiple tags are used, the \"first\" tag is considered to be the API that the operation belongs to, so in the generated client, the above example operation would be included in the PetsApi client but not the UsersApi client. Multiple tags are still useful for documentation generation, for example DocumentationFormat.HTML_REDOC will group operations by tag in the side navigation bar. If you would like to introduce tags without breaking existing clients, we recommend first adding a tag named default to all operations. \u26a0\ufe0f Important Note : Smithy versions below 1.28.0 sort tags in alphabetical order and so the \"first\" tag will be the earliest in the alphabet. Therefore, if using tags with older versions of Smithy, we recommend prefixing your desired first tag with an underscore (for example _default ). This is rectified in 1.28.0 , where tag order from the @tags trait is preserved.","title":"Tagging Operations"},{"location":"typescript/open-api-gateway/index.html#breaking-changes","text":"v0.14.0 - see aws-prototyping-sdk!280 Moved smithy model files from model directory to smithy/src/main/smithy - please move these manually as part of upgrading to 0.14.0 , and delete your model directory when done. Moved smithy gradle files from smithy-build directory to smithy - if you have added any dependencies to your smithy-build/build.gradle file you will need to copy them across into smithy/build.gradle (note dependencies in the new gradle file start with implementation rather than smithy ). Deprecated gradleWrapperPath option on SmithApiGateway projects in favour of ignoreGradleWrapper: false - the gradle wrapper in smithy directory is always used (and generated automatically if not found). If you used a custom gradle wrapper, copy it into the smithy directory, set ignoreGradleWrapper: false and check it in to your repository.","title":"Breaking Changes"},{"location":"typescript/open-api-gateway/index.html#api-reference","text":"","title":"API Reference "},{"location":"typescript/open-api-gateway/index.html#constructs","text":"","title":"Constructs "},{"location":"typescript/open-api-gateway/index.html#openapigatewayrestapi","text":"A construct for creating an api gateway rest api based on the definition in the OpenAPI spec.","title":"OpenApiGatewayRestApi "},{"location":"typescript/open-api-gateway/index.html#structs","text":"","title":"Structs "},{"location":"typescript/open-api-gateway/index.html#apigatewayintegration","text":"Represents an api gateway integration. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-integration.html","title":"ApiGatewayIntegration "},{"location":"typescript/open-api-gateway/index.html#apigatewayintegrationresponse","text":"API Gateway integration response. https://docs.aws.amazon.com/apigateway/latest/api/API_Integration.html","title":"ApiGatewayIntegrationResponse "},{"location":"typescript/open-api-gateway/index.html#apigatewayintegrationtlsconfig","text":"Specifies the TLS configuration for an integration. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-extensions-integration-tls-config.html","title":"ApiGatewayIntegrationTlsConfig "},{"location":"typescript/open-api-gateway/index.html#authorizerprops","text":"Properties for an authorizer.","title":"AuthorizerProps "},{"location":"typescript/open-api-gateway/index.html#cidrallowlist","text":"Representation of a CIDR range.","title":"CidrAllowList "},{"location":"typescript/open-api-gateway/index.html#cognitoauthorizerprops","text":"Properties used to configure a cognito authorizer.","title":"CognitoAuthorizerProps "},{"location":"typescript/open-api-gateway/index.html#commonapiprojectoptions","text":"","title":"CommonApiProjectOptions "},{"location":"typescript/open-api-gateway/index.html#customauthorizerprops","text":"Properties used to configure a custom authorizer.","title":"CustomAuthorizerProps "},{"location":"typescript/open-api-gateway/index.html#integrationgrantprops","text":"Properties for granting the API access to invoke the operation.","title":"IntegrationGrantProps "},{"location":"typescript/open-api-gateway/index.html#integrationrenderprops","text":"Properties for rendering an integration into an API Gateway OpenAPI extension.","title":"IntegrationRenderProps "},{"location":"typescript/open-api-gateway/index.html#managedrule","text":"","title":"ManagedRule "},{"location":"typescript/open-api-gateway/index.html#methodandpath","text":"Structure to contain an API operation's method and path.","title":"MethodAndPath "},{"location":"typescript/open-api-gateway/index.html#openapigatewayjavaprojectoptions","text":"Configuration for the OpenApiGatewayJavaProject.","title":"OpenApiGatewayJavaProjectOptions "},{"location":"typescript/open-api-gateway/index.html#openapigatewayprojectoptions","text":"Options common to all open api gateway projects.","title":"OpenApiGatewayProjectOptions "},{"location":"typescript/open-api-gateway/index.html#openapigatewaypythonprojectoptions","text":"Configuration for the OpenApiGatewayPythonProject.","title":"OpenApiGatewayPythonProjectOptions "},{"location":"typescript/open-api-gateway/index.html#openapigatewayrestapiprops","text":"Configuration for the OpenApiGatewayRestApi construct.","title":"OpenApiGatewayRestApiProps "},{"location":"typescript/open-api-gateway/index.html#openapigatewaytsprojectoptions","text":"Configuration for the OpenApiGatewayTsProject.","title":"OpenApiGatewayTsProjectOptions "},{"location":"typescript/open-api-gateway/index.html#openapigatewaywebacloptions","text":"Configuration for the Web ACL associated with the API.","title":"OpenApiGatewayWebAclOptions "},{"location":"typescript/open-api-gateway/index.html#openapiintegration","text":"Defines an integration for an individual API operation.","title":"OpenApiIntegration "},{"location":"typescript/open-api-gateway/index.html#openapioptions","text":"Options required alongside an Open API specification to create API Gateway resources.","title":"OpenApiOptions "},{"location":"typescript/open-api-gateway/index.html#smithyapigatewayjavaprojectoptions","text":"Configuration for the SmithyApiGatewayJavaProject.","title":"SmithyApiGatewayJavaProjectOptions "},{"location":"typescript/open-api-gateway/index.html#smithyapigatewayprojectoptions","text":"Options common to all smithy api gateway projects.","title":"SmithyApiGatewayProjectOptions "},{"location":"typescript/open-api-gateway/index.html#smithyapigatewaypythonprojectoptions","text":"Configuration for the SmithyApiGatewayPythonProject.","title":"SmithyApiGatewayPythonProjectOptions "},{"location":"typescript/open-api-gateway/index.html#smithyapigatewaytsprojectoptions","text":"Configuration for the SmithyApiGatewayTsProject.","title":"SmithyApiGatewayTsProjectOptions "},{"location":"typescript/open-api-gateway/index.html#smithybuildoptions","text":"Options for the smithy build files.","title":"SmithyBuildOptions "},{"location":"typescript/open-api-gateway/index.html#smithycommon","text":"Properties common to smithy plugins and the root smithy build.","title":"SmithyCommon "},{"location":"typescript/open-api-gateway/index.html#smithymavenconfiguration","text":"Configuration for smithy maven dependencies.","title":"SmithyMavenConfiguration "},{"location":"typescript/open-api-gateway/index.html#smithyplugin","text":"A smithy plugin.","title":"SmithyPlugin "},{"location":"typescript/open-api-gateway/index.html#smithyprojection","text":"A smithy build projection.","title":"SmithyProjection "},{"location":"typescript/open-api-gateway/index.html#smithyservicename","text":"Represents a fully qualified name of a Smithy service. https://awslabs.github.io/smithy/2.0/spec/service-types.html","title":"SmithyServiceName "},{"location":"typescript/open-api-gateway/index.html#smithytransform","text":"A smithy build transform.","title":"SmithyTransform "},{"location":"typescript/open-api-gateway/index.html#classes","text":"","title":"Classes "},{"location":"typescript/open-api-gateway/index.html#authorizer","text":"An authorizer for authorizing API requests.","title":"Authorizer "},{"location":"typescript/open-api-gateway/index.html#authorizers_2","text":"Class used to construct authorizers for use in the OpenApiGatewayLambdaApi construct.","title":"Authorizers "},{"location":"typescript/open-api-gateway/index.html#cognitoauthorizer","text":"An authorizer that uses Cognito identity or access tokens.","title":"CognitoAuthorizer "},{"location":"typescript/open-api-gateway/index.html#customauthorizer","text":"An authorizer that uses a lambda function to authorize requests.","title":"CustomAuthorizer "},{"location":"typescript/open-api-gateway/index.html#iamauthorizer","text":"An IAM authorizer.","title":"IamAuthorizer "},{"location":"typescript/open-api-gateway/index.html#integration","text":"An integration for an API operation. You can extend this to implement your own integration if you like.","title":"Integration "},{"location":"typescript/open-api-gateway/index.html#integrations_1","text":"A collection of integrations to connect API operations with a backend to service requests.","title":"Integrations "},{"location":"typescript/open-api-gateway/index.html#lambdaintegration","text":"A lambda integration.","title":"LambdaIntegration "},{"location":"typescript/open-api-gateway/index.html#noneauthorizer","text":"No authorizer.","title":"NoneAuthorizer "},{"location":"typescript/open-api-gateway/index.html#openapigatewayjavaproject","text":"Synthesizes a Java Project with an OpenAPI spec, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests.","title":"OpenApiGatewayJavaProject "},{"location":"typescript/open-api-gateway/index.html#openapigatewaypythonproject","text":"Synthesizes a Python Project with an OpenAPI spec, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests.","title":"OpenApiGatewayPythonProject "},{"location":"typescript/open-api-gateway/index.html#openapigatewaytsproject","text":"Synthesizes a Typescript Project with an OpenAPI spec, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests.","title":"OpenApiGatewayTsProject "},{"location":"typescript/open-api-gateway/index.html#smithyapigatewayjavaproject","text":"Synthesizes a Java Project with a Smithy model, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests.","title":"SmithyApiGatewayJavaProject "},{"location":"typescript/open-api-gateway/index.html#smithyapigatewaypythonproject","text":"Synthesizes a Python Project with a Smithy model, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests.","title":"SmithyApiGatewayPythonProject "},{"location":"typescript/open-api-gateway/index.html#smithyapigatewaytsproject","text":"Synthesizes a Typescript Project with a Smithy model, generated clients, a CDK construct for deploying the API with API Gateway, and generated lambda handler wrappers for type-safe handling of requests.","title":"SmithyApiGatewayTsProject "},{"location":"typescript/open-api-gateway/index.html#enums","text":"","title":"Enums "},{"location":"typescript/open-api-gateway/index.html#clientlanguage","text":"Supported languages for client generation.","title":"ClientLanguage "},{"location":"typescript/open-api-gateway/index.html#customauthorizertype","text":"The type of custom authorizer. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-type","title":"CustomAuthorizerType "},{"location":"typescript/open-api-gateway/index.html#documentationformat","text":"Formats for documentation generation.","title":"DocumentationFormat "},{"location":"typescript/pdk-nag/index.html","text":"PDK Nag PDKNag ships with a helper utility that automatically configures CDKNag within your application. const app = PDKNag . app (); const stack = new Stack ( app , 'MyStack' ); ... As shown above, this will configure your application to have CDKNag run on synthesis. By default, CDK will trigger a failure on synth if any errors are encountered. To relax these, run the following: cdk synth --ignore-errors Conversely, CDK will not fail on synth if warnings are detected. To enforce that all warnings are resolved, run the following command: cdk synth --strict Instrumenting custom NagPacks By default, when creating a PDKNag application the AwsSolutions NagPack is instrumented. In order to specify custom NagPacks to instrument, you can configure the PDKApp as follows: import { PDKNag , AwsPrototypingChecks } from \"@aws-prototyping-sdk/pdk-nag\" ; const app = PDKNag . app ({ nagPacks : [ new AwsPrototypingChecks ()] }); In this example, the AwsPrototypingChecks NagPack has been configured to run instead of the default. Multiple NagPacks can also be instrumented by adding NagPack instances to the nagPacks array; API Reference Constructs PDKNagApp Initializers import { pdk_nag } from 'aws-prototyping-sdk' new pdk_nag . PDKNagApp ( props? : PDKNagAppProps ) Name Type Description props PDKNagAppProps No description. props Optional Type: PDKNagAppProps Methods Name Description toString Returns a string representation of this construct. synth Synthesize this stage into a cloud assembly. addNagResult No description. nagResults Returns a list of NagResult. toString public toString () : string Returns a string representation of this construct. synth public synth ( options? : StageSynthesisOptions ) : CloudAssembly Synthesize this stage into a cloud assembly. Once an assembly has been synthesized, it cannot be modified. Subsequent calls will return the same assembly. options Optional Type: aws-cdk-lib.StageSynthesisOptions addNagResult public addNagResult ( result : NagResult ) : void result Required Type: NagResult nagResults public nagResults () : NagResult [] Returns a list of NagResult. Note: app.synth() must be called before this to retrieve results. Static Functions Name Description isConstruct Checks if x is a construct. isStage Test whether the given construct is a stage. of Return the stage this construct is contained with, if available. isApp Checks if an object is an instance of the App class. isConstruct import { pdk_nag } from 'aws-prototyping-sdk' pdk_nag . PDKNagApp . isConstruct ( x : any ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: any Any object. isStage import { pdk_nag } from 'aws-prototyping-sdk' pdk_nag . PDKNagApp . isStage ( x : any ) Test whether the given construct is a stage. x Required Type: any of import { pdk_nag } from 'aws-prototyping-sdk' pdk_nag . PDKNagApp . of ( construct : IConstruct ) Return the stage this construct is contained with, if available. If called on a nested stage, returns its parent. construct Required Type: constructs.IConstruct isApp import { pdk_nag } from 'aws-prototyping-sdk' pdk_nag . PDKNagApp . isApp ( obj : any ) Checks if an object is an instance of the App class. obj Required Type: any The object to evaluate. Properties Name Type Description node constructs.Node The tree node. artifactId string Artifact ID of the assembly if it is a nested stage. The root stage (app) will return an empty string. assetOutdir string The cloud assembly asset output directory. outdir string The cloud assembly output directory. stageName string The name of the stage. account string The default account for all resources defined within this stage. parentStage aws-cdk-lib.Stage The parent stage or undefined if this is the app. region string The default region for all resources defined within this stage. nagPacks cdk-nag.NagPack[] No description. node Required public readonly node : Node ; Type: constructs.Node The tree node. artifactId Required public readonly artifactId : string ; Type: string Artifact ID of the assembly if it is a nested stage. The root stage (app) will return an empty string. Derived from the construct path. assetOutdir Required public readonly assetOutdir : string ; Type: string The cloud assembly asset output directory. outdir Required public readonly outdir : string ; Type: string The cloud assembly output directory. stageName Required public readonly stageName : string ; Type: string The name of the stage. Based on names of the parent stages separated by hypens. account Optional public readonly account : string ; Type: string The default account for all resources defined within this stage. parentStage Optional public readonly parentStage : Stage ; Type: aws-cdk-lib.Stage The parent stage or undefined if this is the app. * region Optional public readonly region : string ; Type: string The default region for all resources defined within this stage. nagPacks Required public readonly nagPacks : NagPack []; Type: cdk-nag.NagPack[] Structs Message Message instance. Initializer import { pdk_nag } from 'aws-prototyping-sdk' const message : pdk_nag.Message = { ... } Properties Name Type Description messageDescription string Message description. messageType string Message type as returned from cdk-nag. messageDescription Required public readonly messageDescription : string ; Type: string Message description. messageType Required public readonly messageType : string ; Type: string Message type as returned from cdk-nag. NagResult Nag result. Initializer import { pdk_nag } from 'aws-prototyping-sdk' const nagResult : pdk_nag.NagResult = { ... } Properties Name Type Description messages Message [] List of messages. resource string Resource which triggered the message. messages Required public readonly messages : Message []; Type: Message [] List of messages. resource Required public readonly resource : string ; Type: string Resource which triggered the message. PDKNagAppProps Initializer import { pdk_nag } from 'aws-prototyping-sdk' const pDKNagAppProps : pdk_nag.PDKNagAppProps = { ... } Properties Name Type Description analyticsReporting boolean Include runtime versioning information in the Stacks of this app. autoSynth boolean Automatically call synth() before the program exits. context {[ key: string ]: any} Additional context values for the application. defaultStackSynthesizer aws-cdk-lib.IReusableStackSynthesizer The stack synthesizer to use by default for all Stacks in the App. outdir string The output directory into which to emit synthesized artifacts. postCliContext {[ key: string ]: any} Additional context values for the application. stackTraces boolean Include construct creation stack trace in the aws:cdk:trace metadata key of all constructs. treeMetadata boolean Include construct tree metadata as part of the Cloud Assembly. failOnError boolean Determines whether any errors encountered should trigger a test failure. failOnWarning boolean Determines whether any warnings encountered should trigger a test failure. nagPacks cdk-nag.NagPack[] Custom nag packs to execute. analyticsReporting Optional public readonly analyticsReporting : boolean ; Type: boolean Default: Value of 'aws:cdk:version-reporting' context key Include runtime versioning information in the Stacks of this app. autoSynth Optional public readonly autoSynth : boolean ; Type: boolean Default: true if running via CDK CLI ( CDK_OUTDIR is set), false otherwise Automatically call synth() before the program exits. If you set this, you don't have to call synth() explicitly. Note that this feature is only available for certain programming languages, and calling synth() is still recommended. context Optional public readonly context : {[ key : string ] : any }; Type: {[ key: string ]: any} Default: no additional context Additional context values for the application. Context set by the CLI or the context key in cdk.json has precedence. Context can be read from any construct using node.getContext(key) . defaultStackSynthesizer Optional public readonly defaultStackSynthesizer : IReusableStackSynthesizer ; Type: aws-cdk-lib.IReusableStackSynthesizer Default: A DefaultStackSynthesizer with default settings The stack synthesizer to use by default for all Stacks in the App. The Stack Synthesizer controls aspects of synthesis and deployment, like how assets are referenced and what IAM roles to use. For more information, see the README of the main CDK package. outdir Optional public readonly outdir : string ; Type: string Default: If this value is not set, considers the environment variable CDK_OUTDIR . If CDK_OUTDIR is not defined, uses a temp directory. The output directory into which to emit synthesized artifacts. You should never need to set this value. By default, the value you pass to the CLI's --output flag will be used, and if you change it to a different directory the CLI will fail to pick up the generated Cloud Assembly. This property is intended for internal and testing use. postCliContext Optional public readonly postCliContext : {[ key : string ] : any }; Type: {[ key: string ]: any} Default: no additional context Additional context values for the application. Context provided here has precedence over context set by: The CLI via --context The context key in cdk.json The AppProps.context property This property is recommended over the AppProps.context property since you can make final decision over which context value to take in your app. Context can be read from any construct using node.getContext(key) . Example // context from the CLI and from `cdk.json` are stored in the // CDK_CONTEXT env variable const cliContext = JSON . parse ( process . env . CDK_CONTEXT ! ); // determine whether to take the context passed in the CLI or not const determineValue = process . env . PROD ? cliContext . SOMEKEY : 'my-prod-value' ; new App ({ postCliContext : { SOMEKEY : determineValue , }, }); stackTraces Optional public readonly stackTraces : boolean ; Type: boolean Default: true stack traces are included unless aws:cdk:disable-stack-trace is set in the context. Include construct creation stack trace in the aws:cdk:trace metadata key of all constructs. treeMetadata Optional public readonly treeMetadata : boolean ; Type: boolean Default: true Include construct tree metadata as part of the Cloud Assembly. failOnError Optional public readonly failOnError : boolean ; Type: boolean Default: false Determines whether any errors encountered should trigger a test failure. failOnWarning Optional public readonly failOnWarning : boolean ; Type: boolean Default: false Determines whether any warnings encountered should trigger a test failure. nagPacks Optional public readonly nagPacks : NagPack []; Type: cdk-nag.NagPack[] Default: DEFAULT_NAG_PACKS Custom nag packs to execute. Classes AwsPrototypingChecks Check best practices for prototypes. Initializers import { pdk_nag } from 'aws-prototyping-sdk' new pdk_nag . AwsPrototypingChecks ( props? : NagPackProps ) Name Type Description props cdk-nag.NagPackProps No description. props Optional Type: cdk-nag.NagPackProps Methods Name Description visit Check if CfnResource and apply rules. visit public visit ( node : IConstruct ) : void Check if CfnResource and apply rules. node Required Type: constructs.IConstruct Properties Name Type Description readPackName string No description. readReportStacks string[] No description. readPackName Required public readonly readPackName : string ; Type: string readReportStacks Required public readonly readReportStacks : string []; Type: string[] PDKNag Helper for create a Nag Enabled App. Initializers import { pdk_nag } from 'aws-prototyping-sdk' new pdk_nag . PDKNag () Name Type Description Static Functions Name Description addResourceSuppressionsByPathNoThrow Wrapper around NagSuppressions which does not throw. app Returns an instance of an App with Nag enabled. getStackAccountRegex Returns a stack account regex. getStackPartitionRegex Returns a stack partition regex. getStackPrefix Returns a prefix comprising of a delimited set of Stack Ids. getStackRegionRegex Returns a stack region regex. addResourceSuppressionsByPathNoThrow import { pdk_nag } from 'aws-prototyping-sdk' pdk_nag . PDKNag . addResourceSuppressionsByPathNoThrow ( stack : Stack , path : string , suppressions : NagPackSuppression [], applyToChildren? : boolean ) Wrapper around NagSuppressions which does not throw. stack Required Type: aws-cdk-lib.Stack stack instance. path Required Type: string resource path. suppressions Required Type: cdk-nag.NagPackSuppression[] list of suppressions to apply. applyToChildren Optional Type: boolean whether to apply to children. app import { pdk_nag } from 'aws-prototyping-sdk' pdk_nag . PDKNag . app ( props? : PDKNagAppProps ) Returns an instance of an App with Nag enabled. props Optional Type: PDKNagAppProps props to initialize the app with. getStackAccountRegex import { pdk_nag } from 'aws-prototyping-sdk' pdk_nag . PDKNag . getStackAccountRegex ( stack : Stack ) Returns a stack account regex. stack Required Type: aws-cdk-lib.Stack stack instance. getStackPartitionRegex import { pdk_nag } from 'aws-prototyping-sdk' pdk_nag . PDKNag . getStackPartitionRegex ( stack : Stack ) Returns a stack partition regex. stack Required Type: aws-cdk-lib.Stack stack instance. getStackPrefix import { pdk_nag } from 'aws-prototyping-sdk' pdk_nag . PDKNag . getStackPrefix ( stack : Stack ) Returns a prefix comprising of a delimited set of Stack Ids. For example: StackA/NestedStackB/ stack Required Type: aws-cdk-lib.Stack stack instance. getStackRegionRegex import { pdk_nag } from 'aws-prototyping-sdk' pdk_nag . PDKNag . getStackRegionRegex ( stack : Stack ) Returns a stack region regex. stack Required Type: aws-cdk-lib.Stack stack instance.","title":"Index"},{"location":"typescript/pdk-nag/index.html#pdk-nag","text":"PDKNag ships with a helper utility that automatically configures CDKNag within your application. const app = PDKNag . app (); const stack = new Stack ( app , 'MyStack' ); ... As shown above, this will configure your application to have CDKNag run on synthesis. By default, CDK will trigger a failure on synth if any errors are encountered. To relax these, run the following: cdk synth --ignore-errors Conversely, CDK will not fail on synth if warnings are detected. To enforce that all warnings are resolved, run the following command: cdk synth --strict","title":"PDK Nag"},{"location":"typescript/pdk-nag/index.html#instrumenting-custom-nagpacks","text":"By default, when creating a PDKNag application the AwsSolutions NagPack is instrumented. In order to specify custom NagPacks to instrument, you can configure the PDKApp as follows: import { PDKNag , AwsPrototypingChecks } from \"@aws-prototyping-sdk/pdk-nag\" ; const app = PDKNag . app ({ nagPacks : [ new AwsPrototypingChecks ()] }); In this example, the AwsPrototypingChecks NagPack has been configured to run instead of the default. Multiple NagPacks can also be instrumented by adding NagPack instances to the nagPacks array;","title":"Instrumenting custom NagPacks"},{"location":"typescript/pdk-nag/index.html#api-reference","text":"","title":"API Reference "},{"location":"typescript/pdk-nag/index.html#constructs","text":"","title":"Constructs "},{"location":"typescript/pdk-nag/index.html#pdknagapp","text":"","title":"PDKNagApp "},{"location":"typescript/pdk-nag/index.html#structs","text":"","title":"Structs "},{"location":"typescript/pdk-nag/index.html#message","text":"Message instance.","title":"Message "},{"location":"typescript/pdk-nag/index.html#nagresult","text":"Nag result.","title":"NagResult "},{"location":"typescript/pdk-nag/index.html#pdknagappprops","text":"","title":"PDKNagAppProps "},{"location":"typescript/pdk-nag/index.html#classes","text":"","title":"Classes "},{"location":"typescript/pdk-nag/index.html#awsprototypingchecks","text":"Check best practices for prototypes.","title":"AwsPrototypingChecks "},{"location":"typescript/pdk-nag/index.html#pdknag","text":"Helper for create a Nag Enabled App.","title":"PDKNag "},{"location":"typescript/pipeline/index.html","text":"The pipeline module vends an extension to CDK's CodePipeline construct, named PDKPipeline. It additionally creates a CodeCommit repository and by default is configured to build the project assumming nx-monorepo is being used (although this can be changed). A Sonarqube Scanner can also be configured to trigger a scan whenever the synth build job completes successfully. This Scanner is non-blocking and as such is not instrumented as part of the pipeline. The architecture for the PDKPipeline is as follows: CodeCommit repository -> CodePipeline |-> EventBridge Rule (On Build Succeded) -> CodeBuild (Sonar Scan) |-> Secret (sonarqube token) This module additionally vends multiple Projen Projects, one for each of the supported languages. These projects aim to bootstrap your project by providing sample code which uses the PDKPipeline construct. For example, in .projenrc.ts: new PDKPipelineTsProject ({ cdkVersion : \"2.1.0\" , defaultReleaseBranch : \"mainline\" , devDeps : [ \"aws-prototyping-sdk\" ], name : \"my-pipeline\" , }); This will generate a package in typescript containing CDK boilerplate for a pipeline stack (which instantiates PDKPipeline), sets up a Dev stage with an Application Stage containing an empty ApplicationStack (to be implemented). Once this package is synthesized, you can run npx projen and projen will synthesize your cloudformation. Alternatively, you can initialize a project using the cli (in an empty directory) for each of the supported languages as follows: # Typescript npx projen new --from aws-prototyping-sdk pdk-pipeline-ts # Python npx projen new --from aws-prototyping-sdk pdk-pipeline-py # Java npx projen new --from aws-prototyping-sdk pdk-pipeline-java CDK Nag In order to keep CDK Nag happy, make sure you build the pipeline before synth as per aws-cdk#18440 . API Reference Constructs PDKPipeline An extension to CodePipeline which configures sane defaults for a NX Monorepo codebase. In addition to this, it also creates a CodeCommit repository with automated PR builds and approvals. Initializers import { pipeline } from 'aws-prototyping-sdk' new pipeline . PDKPipeline ( scope : Construct , id : string , props : PDKPipelineProps ) Name Type Description scope constructs.Construct No description. id string No description. props PDKPipelineProps No description. scope Required Type: constructs.Construct id Required Type: string props Required Type: PDKPipelineProps Methods Name Description toString Returns a string representation of this construct. addStage Deploy a single Stage by itself. addWave Add a Wave to the pipeline, for deploying multiple Stages in parallel. buildPipeline Send the current pipeline definition to the engine, and construct the pipeline. suppressCDKViolations No description. toString public toString () : string Returns a string representation of this construct. addStage public addStage ( stage : Stage , options? : AddStageOpts ) : StageDeployment Deploy a single Stage by itself. Add a Stage to the pipeline, to be deployed in sequence with other Stages added to the pipeline. All Stacks in the stage will be deployed in an order automatically determined by their relative dependencies. stage Required Type: aws-cdk-lib.Stage options Optional Type: aws-cdk-lib.pipelines.AddStageOpts addWave public addWave ( id : string , options? : WaveOptions ) : Wave Add a Wave to the pipeline, for deploying multiple Stages in parallel. Use the return object of this method to deploy multiple stages in parallel. Example: declare const pipeline : pipelines.CodePipeline ; const wave = pipeline . addWave ( 'MyWave' ); wave . addStage ( new MyApplicationStage ( this , 'Stage1' )); wave . addStage ( new MyApplicationStage ( this , 'Stage2' )); id Required Type: string options Optional Type: aws-cdk-lib.pipelines.WaveOptions buildPipeline public buildPipeline () : void Send the current pipeline definition to the engine, and construct the pipeline. It is not possible to modify the pipeline after calling this method. suppressCDKViolations public suppressCDKViolations () : void Static Functions Name Description isConstruct Checks if x is a construct. isPipeline Return whether the given object extends PipelineBase . isConstruct import { pipeline } from 'aws-prototyping-sdk' pipeline . PDKPipeline . isConstruct ( x : any ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: any Any object. isPipeline import { pipeline } from 'aws-prototyping-sdk' pipeline . PDKPipeline . isPipeline ( x : any ) Return whether the given object extends PipelineBase . We do attribute detection since we can't reliably use 'instanceof'. x Required Type: any Properties Name Type Description node constructs.Node The tree node. cloudAssemblyFileSet aws-cdk-lib.pipelines.FileSet The FileSet tha contains the cloud assembly. synth aws-cdk-lib.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. waves aws-cdk-lib.pipelines.Wave[] The waves in this pipeline. pipeline aws-cdk-lib.aws_codepipeline.Pipeline The CodePipeline pipeline that deploys the CDK app. selfMutationEnabled boolean Whether SelfMutation is enabled for this CDK Pipeline. selfMutationProject aws-cdk-lib.aws_codebuild.IProject The CodeBuild project that performs the SelfMutation. synthProject aws-cdk-lib.aws_codebuild.IProject The CodeBuild project that performs the Synth. codeRepository aws-cdk-lib.aws_codecommit.Repository No description. node Required public readonly node : Node ; Type: constructs.Node The tree node. cloudAssemblyFileSet Required public readonly cloudAssemblyFileSet : FileSet ; Type: aws-cdk-lib.pipelines.FileSet The FileSet tha contains the cloud assembly. This is the primary output of the synth step. synth Required public readonly synth : IFileSetProducer ; Type: aws-cdk-lib.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. waves Required public readonly waves : Wave []; Type: aws-cdk-lib.pipelines.Wave[] The waves in this pipeline. pipeline Required public readonly pipeline : Pipeline ; Type: aws-cdk-lib.aws_codepipeline.Pipeline The CodePipeline pipeline that deploys the CDK app. Only available after the pipeline has been built. selfMutationEnabled Required public readonly selfMutationEnabled : boolean ; Type: boolean Whether SelfMutation is enabled for this CDK Pipeline. selfMutationProject Required public readonly selfMutationProject : IProject ; Type: aws-cdk-lib.aws_codebuild.IProject The CodeBuild project that performs the SelfMutation. Will throw an error if this is accessed before buildPipeline() is called, or if selfMutation has been disabled. synthProject Required public readonly synthProject : IProject ; Type: aws-cdk-lib.aws_codebuild.IProject The CodeBuild project that performs the Synth. Only available after the pipeline has been built. codeRepository Required public readonly codeRepository : Repository ; Type: aws-cdk-lib.aws_codecommit.Repository SonarCodeScanner Initializers import { pipeline } from 'aws-prototyping-sdk' new pipeline . SonarCodeScanner ( scope : Construct , id : string , props : SonarCodeScannerProps ) Name Type Description scope constructs.Construct No description. id string No description. props SonarCodeScannerProps No description. scope Required Type: constructs.Construct id Required Type: string props Required Type: SonarCodeScannerProps Methods Name Description toString Returns a string representation of this construct. toString public toString () : string Returns a string representation of this construct. Static Functions Name Description isConstruct Checks if x is a construct. isConstruct import { pipeline } from 'aws-prototyping-sdk' pipeline . SonarCodeScanner . isConstruct ( x : any ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: any Any object. Properties Name Type Description node constructs.Node The tree node. node Required public readonly node : Node ; Type: constructs.Node The tree node. Structs PDKPipelineJavaProjectOptions Configuration options for the PDKPipelineJavaProject. Initializer import { pipeline } from 'aws-prototyping-sdk' const pDKPipelineJavaProjectOptions : pipeline.PDKPipelineJavaProjectOptions = { ... } Properties Name Type Description name string This is the name of your project. commitGenerated boolean Whether to commit the managed files by default. gitOptions projen.GitOptions Configuration options for git. logging projen.LoggerOptions Configure logging options such as verbosity. outdir string The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projenCommand string The shell command to use in order to run the projen CLI. projenrcJson boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions projen.ProjenrcOptions Options for .projenrc.json. renovatebot boolean Use renovatebot to handle dependency upgrades. renovatebotOptions projen.RenovatebotOptions Options for renovatebot. autoApproveOptions projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge boolean Enable automatic merging on GitHub. autoMergeOptions projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber boolean Add a clobber task which resets the repo to origin. devContainer boolean Add a VSCode development environment (used for GitHub Codespaces). github boolean Enable GitHub integration. githubOptions projen.github.GitHubOptions Options for GitHub integration. gitpod boolean Add a Gitpod development environment. mergify boolean Whether mergify should be enabled on this repository or not. mergifyOptions projen.github.MergifyOptions Options for mergify. projectType projen.ProjectType Which type of project this is (library/app). projenCredentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret string The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale boolean Auto-close of stale issues and pull request. staleOptions projen.github.StaleOptions Auto-close stale issues and pull requests. vscode boolean Enable VSCode integration. artifactId string The artifactId is generally the name that the project is known by. groupId string This is generally unique amongst an organization or a project. version string This is the last piece of the naming puzzle. description string Description of a project is always good. packaging string Project packaging format. url string The URL, like the name, is not required. compileOptions projen.java.MavenCompileOptions Compile options. deps string[] List of runtime dependencies for this project. distdir string Final artifact output directory. junit boolean Include junit tests. junitOptions projen.java.JunitOptions junit options. packagingOptions projen.java.MavenPackagingOptions Packaging options. projenrcJava boolean Use projenrc in java. projenrcJavaOptions projen.java.ProjenrcOptions Options related to projenrc in java. testDeps string[] List of test dependencies for this project. sample boolean Include sample code and test if the relevant directories don't exist. sampleJavaPackage string The java package to use for the code sample. buildCommand string A command to execute before synthesis. cdkout string cdk.out directory. context {[ key: string ]: any} Additional context to include in cdk.json . featureFlags boolean Include all feature flags in cdk.json. requireApproval projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes string[] Glob patterns to exclude from cdk watch . watchIncludes string[] Glob patterns to include in cdk watch . cdkVersion string Minimum version of the AWS CDK to depend on. cdkAssert boolean Warning: NodeJS only. cdkAssertions boolean Install the assertions library? cdkDependencies string[] Which AWS CDKv1 modules this project requires. cdkDependenciesAsDeps boolean If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdkTestDependencies string[] AWS CDK modules required for testing. cdkVersionPinning boolean Use pinned version instead of caret version for CDK. constructsVersion string Minimum version of the constructs library to depend on. mainClass string The name of the Java class with the static main() method. name Required public readonly name : string ; Type: string Default: $BASEDIR This is the name of your project. commitGenerated Optional public readonly commitGenerated : boolean ; Type: boolean Default: true Whether to commit the managed files by default. gitOptions Optional public readonly gitOptions : GitOptions ; Type: projen.GitOptions Configuration options for git. logging Optional public readonly logging : LoggerOptions ; Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public readonly outdir : string ; Type: string Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public readonly parent : Project ; Type: projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public readonly projenCommand : string ; Type: string Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public readonly projenrcJson : boolean ; Type: boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public readonly projenrcJsonOptions : ProjenrcOptions ; Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional public readonly renovatebot : boolean ; Type: boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional public readonly renovatebotOptions : RenovatebotOptions ; Type: projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional public readonly autoApproveOptions : AutoApproveOptions ; Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional public readonly autoMerge : boolean ; Type: boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional public readonly autoMergeOptions : AutoMergeOptions ; Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional public readonly clobber : boolean ; Type: boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public readonly devContainer : boolean ; Type: boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public readonly github : boolean ; Type: boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public readonly githubOptions : GitHubOptions ; Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public readonly gitpod : boolean ; Type: boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public readonly mergify : boolean ; Type: boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public readonly mergifyOptions : MergifyOptions ; Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public readonly projectType : ProjectType ; Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional public readonly projenCredentials : GithubCredentials ; Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials public readonly projenTokenSecret : string ; Type: string Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public readonly readme : SampleReadmeProps ; Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional public readonly stale : boolean ; Type: boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public readonly staleOptions : StaleOptions ; Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public readonly vscode : boolean ; Type: boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. artifactId Required public readonly artifactId : string ; Type: string Default: \"my-app\" The artifactId is generally the name that the project is known by. Although the groupId is important, people within the group will rarely mention the groupId in discussion (they are often all be the same ID, such as the MojoHaus project groupId: org.codehaus.mojo). It, along with the groupId, creates a key that separates this project from every other project in the world (at least, it should :) ). Along with the groupId, the artifactId fully defines the artifact's living quarters within the repository. In the case of the above project, my-project lives in $M2_REPO/org/codehaus/mojo/my-project. groupId Required public readonly groupId : string ; Type: string Default: \"org.acme\" This is generally unique amongst an organization or a project. For example, all core Maven artifacts do (well, should) live under the groupId org.apache.maven. Group ID's do not necessarily use the dot notation, for example, the junit project. Note that the dot-notated groupId does not have to correspond to the package structure that the project contains. It is, however, a good practice to follow. When stored within a repository, the group acts much like the Java packaging structure does in an operating system. The dots are replaced by OS specific directory separators (such as '/' in Unix) which becomes a relative directory structure from the base repository. In the example given, the org.codehaus.mojo group lives within the directory $M2_REPO/org/codehaus/mojo. version Required public readonly version : string ; Type: string Default: \"0.1.0\" This is the last piece of the naming puzzle. groupId:artifactId denotes a single project but they cannot delineate which incarnation of that project we are talking about. Do we want the junit:junit of 2018 (version 4.12), or of 2007 (version 3.8.2)? In short: code changes, those changes should be versioned, and this element keeps those versions in line. It is also used within an artifact's repository to separate versions from each other. my-project version 1.0 files live in the directory structure $M2_REPO/org/codehaus/mojo/my-project/1.0. description Optional public readonly description : string ; Type: string Default: undefined Description of a project is always good. Although this should not replace formal documentation, a quick comment to any readers of the POM is always helpful. packaging Optional public readonly packaging : string ; Type: string Default: \"jar\" Project packaging format. url Optional public readonly url : string ; Type: string Default: undefined The URL, like the name, is not required. This is a nice gesture for projects users, however, so that they know where the project lives. compileOptions Optional public readonly compileOptions : MavenCompileOptions ; Type: projen.java.MavenCompileOptions Default: defaults Compile options. deps Optional public readonly deps : string []; Type: string[] Default: [] List of runtime dependencies for this project. Dependencies use the format: <groupId>/<artifactId>@<semver> Additional dependencies can be added via project.addDependency() . distdir Optional public readonly distdir : string ; Type: string Default: \"dist/java\" Final artifact output directory. junit Optional public readonly junit : boolean ; Type: boolean Default: true Include junit tests. junitOptions Optional public readonly junitOptions : JunitOptions ; Type: projen.java.JunitOptions Default: defaults junit options. packagingOptions Optional public readonly packagingOptions : MavenPackagingOptions ; Type: projen.java.MavenPackagingOptions Default: defaults Packaging options. projenrcJava Optional public readonly projenrcJava : boolean ; Type: boolean Default: true Use projenrc in java. This will install projen as a java dependency and will add a synth task which will compile & execute main() from src/main/java/projenrc.java . projenrcJavaOptions Optional public readonly projenrcJavaOptions : ProjenrcOptions ; Type: projen.java.ProjenrcOptions Default: default options Options related to projenrc in java. testDeps Optional public readonly testDeps : string []; Type: string[] Default: [] List of test dependencies for this project. Dependencies use the format: <groupId>/<artifactId>@<semver> Additional dependencies can be added via project.addTestDependency() . sample Optional public readonly sample : boolean ; Type: boolean Default: true Include sample code and test if the relevant directories don't exist. sampleJavaPackage Optional public readonly sampleJavaPackage : string ; Type: string Default: \"org.acme\" The java package to use for the code sample. buildCommand Optional public readonly buildCommand : string ; Type: string Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment. cdkout Optional public readonly cdkout : string ; Type: string Default: \"cdk.out\" cdk.out directory. context Optional public readonly context : {[ key : string ] : any }; Type: {[ key: string ]: any} Default: no additional context Additional context to include in cdk.json . featureFlags Optional public readonly featureFlags : boolean ; Type: boolean Default: true Include all feature flags in cdk.json. requireApproval Optional public readonly requireApproval : ApprovalLevel ; Type: projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes Optional public readonly watchExcludes : string []; Type: string[] Default: [] Glob patterns to exclude from cdk watch . watchIncludes Optional public readonly watchIncludes : string []; Type: string[] Default: [] Glob patterns to include in cdk watch . cdkVersion Required public readonly cdkVersion : string ; Type: string Default: \"2.1.0\" Minimum version of the AWS CDK to depend on. ~~ cdkAssert ~~ Optional Deprecated: The public readonly cdkAssert : boolean ; Type: boolean Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library? cdkAssertions Optional public readonly cdkAssertions : boolean ; Type: boolean Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib' ~~ cdkDependencies ~~ Optional Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) public readonly cdkDependencies : string []; Type: string[] Which AWS CDKv1 modules this project requires. ~~ cdkDependenciesAsDeps ~~ Optional Deprecated: Not supported in CDK v2. public readonly cdkDependenciesAsDeps : boolean ; Type: boolean Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects ~~ cdkTestDependencies ~~ Optional Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead public readonly cdkTestDependencies : string []; Type: string[] AWS CDK modules required for testing. cdkVersionPinning Optional public readonly cdkVersionPinning : boolean ; Type: boolean Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes. constructsVersion Optional public readonly constructsVersion : string ; Type: string Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on. mainClass Required public readonly mainClass : string ; Type: string Default: \"org.acme.MyApp\" The name of the Java class with the static main() method. This method should call app.synth() on the CDK app. PDKPipelineProps Properties to configure the PDKPipeline. Note: Due to limitations with JSII and generic support it should be noted that the synth, synthShellStepPartialProps.input and synthShellStepPartialProps.primaryOutputDirectory properties will be ignored if passed in to this construct. synthShellStepPartialProps.commands is marked as a required field, however if you pass in [] the default commands of this construct will be retained. Initializer import { pipeline } from 'aws-prototyping-sdk' const pDKPipelineProps : pipeline.PDKPipelineProps = { ... } Properties Name Type Description synth aws-cdk-lib.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. assetPublishingCodeBuildDefaults aws-cdk-lib.pipelines.CodeBuildOptions Additional customizations to apply to the asset publishing CodeBuild projects. cliVersion string CDK CLI version to use in self-mutation and asset publishing steps. codeBuildDefaults aws-cdk-lib.pipelines.CodeBuildOptions Customize the CodeBuild projects created for this pipeline. codePipeline aws-cdk-lib.aws_codepipeline.Pipeline An existing Pipeline to be reused and built upon. crossAccountKeys boolean Create KMS keys for the artifact buckets, allowing cross-account deployments. dockerCredentials aws-cdk-lib.pipelines.DockerCredential[] A list of credentials used to authenticate to Docker registries. dockerEnabledForSelfMutation boolean Enable Docker for the self-mutate step. dockerEnabledForSynth boolean Enable Docker for the 'synth' step. enableKeyRotation boolean Enable KMS key rotation for the generated KMS keys. pipelineName string The name of the CodePipeline pipeline. publishAssetsInParallel boolean Publish assets in multiple CodeBuild projects. reuseCrossRegionSupportStacks boolean Reuse the same cross region support stack for all pipelines in the App. role aws-cdk-lib.aws_iam.IRole The IAM role to be assumed by this Pipeline. selfMutation boolean Whether the pipeline will update itself. selfMutationCodeBuildDefaults aws-cdk-lib.pipelines.CodeBuildOptions Additional customizations to apply to the self mutation CodeBuild projects. synthCodeBuildDefaults aws-cdk-lib.pipelines.CodeBuildOptions Additional customizations to apply to the synthesize CodeBuild projects. useChangeSets boolean Deploy every stack by creating a change set and executing it. primarySynthDirectory string Output directory for cdk synthesized artifacts i.e: packages/infra/cdk.out. repositoryName string Name of the CodeCommit repository to create. codeCommitRemovalPolicy aws-cdk-lib.RemovalPolicy Possible values for a resource's Removal Policy The removal policy controls what happens to the resource if it stops being managed by CloudFormation. defaultBranchName string Branch to trigger the pipeline execution. sonarCodeScannerConfig SonarCodeScannerConfig Configuration for enabling Sonarqube code scanning on a successful synth. synthShellStepPartialProps aws-cdk-lib.pipelines.ShellStepProps PDKPipeline by default assumes a NX Monorepo structure for it's codebase and uses sane defaults for the install and run commands. synth Required public readonly synth : IFileSetProducer ; Type: aws-cdk-lib.pipelines.IFileSetProducer The build step that produces the CDK Cloud Assembly. The primary output of this step needs to be the cdk.out directory generated by the cdk synth command. If you use a ShellStep here and you don't configure an output directory, the output directory will automatically be assumed to be cdk.out . assetPublishingCodeBuildDefaults Optional public readonly assetPublishingCodeBuildDefaults : CodeBuildOptions ; Type: aws-cdk-lib.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the asset publishing CodeBuild projects. cliVersion Optional public readonly cliVersion : string ; Type: string Default: Latest version CDK CLI version to use in self-mutation and asset publishing steps. If you want to lock the CDK CLI version used in the pipeline, by steps that are automatically generated for you, specify the version here. We recommend you do not specify this value, as not specifying it always uses the latest CLI version which is backwards compatible with old versions. If you do specify it, be aware that this version should always be equal to or higher than the version of the CDK framework used by the CDK app, when the CDK commands are run during your pipeline execution. When you change this version, the next time the SelfMutate step runs it will still be using the CLI of the the previous version that was in this property: it will only start using the new version after SelfMutate completes successfully. That means that if you want to update both framework and CLI version, you should update the CLI version first, commit, push and deploy, and only then update the framework version. codeBuildDefaults Optional public readonly codeBuildDefaults : CodeBuildOptions ; Type: aws-cdk-lib.pipelines.CodeBuildOptions Default: All projects run non-privileged build, SMALL instance, LinuxBuildImage.STANDARD_6_0 Customize the CodeBuild projects created for this pipeline. codePipeline Optional public readonly codePipeline : Pipeline ; Type: aws-cdk-lib.aws_codepipeline.Pipeline Default: a new underlying pipeline is created. An existing Pipeline to be reused and built upon. [disable-awslint:ref-via-interface] crossAccountKeys Optional public readonly crossAccountKeys : boolean ; Type: boolean Default: false Create KMS keys for the artifact buckets, allowing cross-account deployments. The artifact buckets have to be encrypted to support deploying CDK apps to another account, so if you want to do that or want to have your artifact buckets encrypted, be sure to set this value to true . Be aware there is a cost associated with maintaining the KMS keys. dockerCredentials Optional public readonly dockerCredentials : DockerCredential []; Type: aws-cdk-lib.pipelines.DockerCredential[] Default: [] A list of credentials used to authenticate to Docker registries. Specify any credentials necessary within the pipeline to build, synth, update, or publish assets. dockerEnabledForSelfMutation Optional public readonly dockerEnabledForSelfMutation : boolean ; Type: boolean Default: false Enable Docker for the self-mutate step. Set this to true if the pipeline itself uses Docker container assets (for example, if you use LinuxBuildImage.fromAsset() as the build image of a CodeBuild step in the pipeline). You do not need to set it if you build Docker image assets in the application Stages and Stacks that are deployed by this pipeline. Configures privileged mode for the self-mutation CodeBuild action. If you are about to turn this on in an already-deployed Pipeline, set the value to true first, commit and allow the pipeline to self-update, and only then use the Docker asset in the pipeline. dockerEnabledForSynth Optional public readonly dockerEnabledForSynth : boolean ; Type: boolean Default: false Enable Docker for the 'synth' step. Set this to true if you are using file assets that require \"bundling\" anywhere in your application (meaning an asset compilation step will be run with the tools provided by a Docker image), both for the Pipeline stack as well as the application stacks. A common way to use bundling assets in your application is by using the @aws-cdk/aws-lambda-nodejs library. Configures privileged mode for the synth CodeBuild action. If you are about to turn this on in an already-deployed Pipeline, set the value to true first, commit and allow the pipeline to self-update, and only then use the bundled asset. enableKeyRotation Optional public readonly enableKeyRotation : boolean ; Type: boolean Default: false (key rotation is disabled) Enable KMS key rotation for the generated KMS keys. By default KMS key rotation is disabled, but will add additional costs when enabled. pipelineName Optional public readonly pipelineName : string ; Type: string Default: Automatically generated The name of the CodePipeline pipeline. publishAssetsInParallel Optional public readonly publishAssetsInParallel : boolean ; Type: boolean Default: true Publish assets in multiple CodeBuild projects. If set to false, use one Project per type to publish all assets. Publishing in parallel improves concurrency and may reduce publishing latency, but may also increase overall provisioning time of the CodeBuild projects. Experiment and see what value works best for you. reuseCrossRegionSupportStacks Optional public readonly reuseCrossRegionSupportStacks : boolean ; Type: boolean Default: true (Use the same support stack for all pipelines in App) Reuse the same cross region support stack for all pipelines in the App. role Optional public readonly role : IRole ; Type: aws-cdk-lib.aws_iam.IRole Default: A new role is created The IAM role to be assumed by this Pipeline. selfMutation Optional public readonly selfMutation : boolean ; Type: boolean Default: true Whether the pipeline will update itself. This needs to be set to true to allow the pipeline to reconfigure itself when assets or stages are being added to it, and true is the recommended setting. You can temporarily set this to false while you are iterating on the pipeline itself and prefer to deploy changes using cdk deploy . selfMutationCodeBuildDefaults Optional public readonly selfMutationCodeBuildDefaults : CodeBuildOptions ; Type: aws-cdk-lib.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the self mutation CodeBuild projects. synthCodeBuildDefaults Optional public readonly synthCodeBuildDefaults : CodeBuildOptions ; Type: aws-cdk-lib.pipelines.CodeBuildOptions Default: Only codeBuildDefaults are applied Additional customizations to apply to the synthesize CodeBuild projects. useChangeSets Optional public readonly useChangeSets : boolean ; Type: boolean Default: true Deploy every stack by creating a change set and executing it. When enabled, creates a \"Prepare\" and \"Execute\" action for each stack. Disable to deploy the stack in one pipeline action. primarySynthDirectory Required public readonly primarySynthDirectory : string ; Type: string Output directory for cdk synthesized artifacts i.e: packages/infra/cdk.out. repositoryName Required public readonly repositoryName : string ; Type: string Name of the CodeCommit repository to create. codeCommitRemovalPolicy Optional public readonly codeCommitRemovalPolicy : RemovalPolicy ; Type: aws-cdk-lib.RemovalPolicy Possible values for a resource's Removal Policy The removal policy controls what happens to the resource if it stops being managed by CloudFormation. defaultBranchName Optional public readonly defaultBranchName : string ; Type: string Default: mainline Branch to trigger the pipeline execution. sonarCodeScannerConfig Optional public readonly sonarCodeScannerConfig : SonarCodeScannerConfig ; Type: SonarCodeScannerConfig Default: undefined Configuration for enabling Sonarqube code scanning on a successful synth. synthShellStepPartialProps Optional public readonly synthShellStepPartialProps : ShellStepProps ; Type: aws-cdk-lib.pipelines.ShellStepProps PDKPipeline by default assumes a NX Monorepo structure for it's codebase and uses sane defaults for the install and run commands. To override these defaults and/or provide additional inputs, specify env settings, etc you can provide a partial ShellStepProps. PDKPipelinePyProjectOptions Configuration options for the PDKPipelinePyProject. Initializer import { pipeline } from 'aws-prototyping-sdk' const pDKPipelinePyProjectOptions : pipeline.PDKPipelinePyProjectOptions = { ... } Properties Name Type Description name string This is the name of your project. commitGenerated boolean Whether to commit the managed files by default. gitOptions projen.GitOptions Configuration options for git. logging projen.LoggerOptions Configure logging options such as verbosity. outdir string The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projenCommand string The shell command to use in order to run the projen CLI. projenrcJson boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions projen.ProjenrcOptions Options for .projenrc.json. renovatebot boolean Use renovatebot to handle dependency upgrades. renovatebotOptions projen.RenovatebotOptions Options for renovatebot. autoApproveOptions projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge boolean Enable automatic merging on GitHub. autoMergeOptions projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber boolean Add a clobber task which resets the repo to origin. devContainer boolean Add a VSCode development environment (used for GitHub Codespaces). github boolean Enable GitHub integration. githubOptions projen.github.GitHubOptions Options for GitHub integration. gitpod boolean Add a Gitpod development environment. mergify boolean Whether mergify should be enabled on this repository or not. mergifyOptions projen.github.MergifyOptions Options for mergify. projectType projen.ProjectType Which type of project this is (library/app). projenCredentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret string The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale boolean Auto-close of stale issues and pull request. staleOptions projen.github.StaleOptions Auto-close stale issues and pull requests. vscode boolean Enable VSCode integration. authorEmail string Author's e-mail. authorName string Author's name. version string Version of the package. classifiers string[] A list of PyPI trove classifiers that describe the project. description string A short description of the package. homepage string A URL to the website of the project. license string License of this package as an SPDX identifier. packageName string Package name. poetryOptions projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setupConfig {[ key: string ]: any} Additional fields to pass in the setup() function if using setuptools. moduleName string Name of the python package as used in imports and filenames. deps string[] List of runtime dependencies for this project. devDeps string[] List of dev dependencies for this project. pip boolean Use pip with a requirements.txt file to track project dependencies. poetry boolean Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. projenrcJs boolean Use projenrc in javascript. projenrcJsOptions projen.javascript.ProjenrcOptions Options related to projenrc in JavaScript. projenrcPython boolean Use projenrc in Python. projenrcPythonOptions projen.python.ProjenrcOptions Options related to projenrc in python. pytest boolean Include pytest tests. pytestOptions projen.python.PytestOptions pytest options. sample boolean Include sample code and test if the relevant directories don't exist. setuptools boolean Use setuptools with a setup.py script for packaging and publishing. venv boolean Use venv to manage a virtual environment for installing dependencies inside. venvOptions projen.python.VenvOptions Venv options. buildCommand string A command to execute before synthesis. cdkout string cdk.out directory. context {[ key: string ]: any} Additional context to include in cdk.json . featureFlags boolean Include all feature flags in cdk.json. requireApproval projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes string[] Glob patterns to exclude from cdk watch . watchIncludes string[] Glob patterns to include in cdk watch . cdkVersion string Minimum version of the AWS CDK to depend on. cdkAssert boolean Warning: NodeJS only. cdkAssertions boolean Install the assertions library? cdkDependencies string[] Which AWS CDKv1 modules this project requires. cdkDependenciesAsDeps boolean If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdkTestDependencies string[] AWS CDK modules required for testing. cdkVersionPinning boolean Use pinned version instead of caret version for CDK. constructsVersion string Minimum version of the constructs library to depend on. appEntrypoint string The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). testdir string Python sources directory. name Required public readonly name : string ; Type: string Default: $BASEDIR This is the name of your project. commitGenerated Optional public readonly commitGenerated : boolean ; Type: boolean Default: true Whether to commit the managed files by default. gitOptions Optional public readonly gitOptions : GitOptions ; Type: projen.GitOptions Configuration options for git. logging Optional public readonly logging : LoggerOptions ; Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public readonly outdir : string ; Type: string Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public readonly parent : Project ; Type: projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public readonly projenCommand : string ; Type: string Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public readonly projenrcJson : boolean ; Type: boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public readonly projenrcJsonOptions : ProjenrcOptions ; Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional public readonly renovatebot : boolean ; Type: boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional public readonly renovatebotOptions : RenovatebotOptions ; Type: projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional public readonly autoApproveOptions : AutoApproveOptions ; Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional public readonly autoMerge : boolean ; Type: boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional public readonly autoMergeOptions : AutoMergeOptions ; Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional public readonly clobber : boolean ; Type: boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public readonly devContainer : boolean ; Type: boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public readonly github : boolean ; Type: boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public readonly githubOptions : GitHubOptions ; Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public readonly gitpod : boolean ; Type: boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public readonly mergify : boolean ; Type: boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public readonly mergifyOptions : MergifyOptions ; Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public readonly projectType : ProjectType ; Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional public readonly projenCredentials : GithubCredentials ; Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials public readonly projenTokenSecret : string ; Type: string Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public readonly readme : SampleReadmeProps ; Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional public readonly stale : boolean ; Type: boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public readonly staleOptions : StaleOptions ; Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public readonly vscode : boolean ; Type: boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. authorEmail Required public readonly authorEmail : string ; Type: string Default: $GIT_USER_EMAIL Author's e-mail. authorName Required public readonly authorName : string ; Type: string Default: $GIT_USER_NAME Author's name. version Required public readonly version : string ; Type: string Default: \"0.1.0\" Version of the package. classifiers Optional public readonly classifiers : string []; Type: string[] A list of PyPI trove classifiers that describe the project. https://pypi.org/classifiers/ description Optional public readonly description : string ; Type: string A short description of the package. homepage Optional public readonly homepage : string ; Type: string A URL to the website of the project. license Optional public readonly license : string ; Type: string License of this package as an SPDX identifier. packageName Optional public readonly packageName : string ; Type: string Package name. poetryOptions Optional public readonly poetryOptions : PoetryPyprojectOptionsWithoutDeps ; Type: projen.python.PoetryPyprojectOptionsWithoutDeps Additional options to set for poetry if using poetry. setupConfig Optional public readonly setupConfig : {[ key : string ] : any }; Type: {[ key: string ]: any} Additional fields to pass in the setup() function if using setuptools. moduleName Required public readonly module Name : string ; Type: string Default: $PYTHON_MODULE_NAME Name of the python package as used in imports and filenames. Must only consist of alphanumeric characters and underscores. deps Optional public readonly deps : string []; Type: string[] Default: [] List of runtime dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDependency() . devDeps Optional public readonly devDeps : string []; Type: string[] Default: [] List of dev dependencies for this project. Dependencies use the format: <module>@<semver> Additional dependencies can be added via project.addDevDependency() . pip Optional public readonly pip : boolean ; Type: boolean Default: true, unless poetry is true, then false Use pip with a requirements.txt file to track project dependencies. poetry Optional public readonly poetry : boolean ; Type: boolean Default: false Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing. This feature is incompatible with pip, setuptools, or venv. If you set this option to true , then pip, setuptools, and venv must be set to false . projenrcJs Optional public readonly projenrcJs : boolean ; Type: boolean Default: false Use projenrc in javascript. This will install projen as a JavaScript dependency and add a synth task which will run .projenrc.js . projenrcJsOptions Optional public readonly projenrcJsOptions : ProjenrcOptions ; Type: projen.javascript.ProjenrcOptions Default: default options Options related to projenrc in JavaScript. projenrcPython Optional public readonly projenrcPython : boolean ; Type: boolean Default: true Use projenrc in Python. This will install projen as a Python dependency and add a synth task which will run .projenrc.py . projenrcPythonOptions Optional public readonly projenrcPythonOptions : ProjenrcOptions ; Type: projen.python.ProjenrcOptions Default: default options Options related to projenrc in python. pytest Optional public readonly pytest : boolean ; Type: boolean Default: true Include pytest tests. pytestOptions Optional public readonly pytestOptions : PytestOptions ; Type: projen.python.PytestOptions Default: defaults pytest options. sample Optional public readonly sample : boolean ; Type: boolean Default: true Include sample code and test if the relevant directories don't exist. setuptools Optional public readonly setuptools : boolean ; Type: boolean Default: true, unless poetry is true, then false Use setuptools with a setup.py script for packaging and publishing. venv Optional public readonly venv : boolean ; Type: boolean Default: true, unless poetry is true, then false Use venv to manage a virtual environment for installing dependencies inside. venvOptions Optional public readonly venvOptions : VenvOptions ; Type: projen.python.VenvOptions Default: defaults Venv options. buildCommand Optional public readonly buildCommand : string ; Type: string Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment. cdkout Optional public readonly cdkout : string ; Type: string Default: \"cdk.out\" cdk.out directory. context Optional public readonly context : {[ key : string ] : any }; Type: {[ key: string ]: any} Default: no additional context Additional context to include in cdk.json . featureFlags Optional public readonly featureFlags : boolean ; Type: boolean Default: true Include all feature flags in cdk.json. requireApproval Optional public readonly requireApproval : ApprovalLevel ; Type: projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes Optional public readonly watchExcludes : string []; Type: string[] Default: [] Glob patterns to exclude from cdk watch . watchIncludes Optional public readonly watchIncludes : string []; Type: string[] Default: [] Glob patterns to include in cdk watch . cdkVersion Required public readonly cdkVersion : string ; Type: string Default: \"2.1.0\" Minimum version of the AWS CDK to depend on. ~~ cdkAssert ~~ Optional Deprecated: The public readonly cdkAssert : boolean ; Type: boolean Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library? cdkAssertions Optional public readonly cdkAssertions : boolean ; Type: boolean Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib' ~~ cdkDependencies ~~ Optional Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) public readonly cdkDependencies : string []; Type: string[] Which AWS CDKv1 modules this project requires. ~~ cdkDependenciesAsDeps ~~ Optional Deprecated: Not supported in CDK v2. public readonly cdkDependenciesAsDeps : boolean ; Type: boolean Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects ~~ cdkTestDependencies ~~ Optional Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead public readonly cdkTestDependencies : string []; Type: string[] AWS CDK modules required for testing. cdkVersionPinning Optional public readonly cdkVersionPinning : boolean ; Type: boolean Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes. constructsVersion Optional public readonly constructsVersion : string ; Type: string Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on. appEntrypoint Optional public readonly appEntrypoint : string ; Type: string Default: \"app.py\" The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). testdir Optional public readonly testdir : string ; Type: string Default: \"tests\" Python sources directory. PDKPipelineTsProjectOptions Configuration options for the PDKPipelineTsProject. Initializer import { pipeline } from 'aws-prototyping-sdk' const pDKPipelineTsProjectOptions : pipeline.PDKPipelineTsProjectOptions = { ... } Properties Name Type Description name string This is the name of your project. commitGenerated boolean Whether to commit the managed files by default. gitOptions projen.GitOptions Configuration options for git. logging projen.LoggerOptions Configure logging options such as verbosity. outdir string The root directory of the project. parent projen.Project The parent project, if this project is part of a bigger project. projenCommand string The shell command to use in order to run the projen CLI. projenrcJson boolean Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions projen.ProjenrcOptions Options for .projenrc.json. renovatebot boolean Use renovatebot to handle dependency upgrades. renovatebotOptions projen.RenovatebotOptions Options for renovatebot. autoApproveOptions projen.github.AutoApproveOptions Enable and configure the 'auto approve' workflow. autoMerge boolean Enable automatic merging on GitHub. autoMergeOptions projen.github.AutoMergeOptions Configure options for automatic merging on GitHub. clobber boolean Add a clobber task which resets the repo to origin. devContainer boolean Add a VSCode development environment (used for GitHub Codespaces). github boolean Enable GitHub integration. githubOptions projen.github.GitHubOptions Options for GitHub integration. gitpod boolean Add a Gitpod development environment. mergify boolean Whether mergify should be enabled on this repository or not. mergifyOptions projen.github.MergifyOptions Options for mergify. projectType projen.ProjectType Which type of project this is (library/app). projenCredentials projen.github.GithubCredentials Choose a method of providing GitHub API access for projen workflows. projenTokenSecret string The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. readme projen.SampleReadmeProps The README setup. stale boolean Auto-close of stale issues and pull request. staleOptions projen.github.StaleOptions Auto-close stale issues and pull requests. vscode boolean Enable VSCode integration. allowLibraryDependencies boolean Allow the project to include peerDependencies and bundledDependencies . authorEmail string Author's e-mail. authorName string Author's name. authorOrganization boolean Is the author an organization. authorUrl string Author's URL / Website. autoDetectBin boolean Automatically add all executables under the bin directory to your package.json file under the bin section. bin {[ key: string ]: string} Binary programs vended with your module. bugsEmail string The email address to which issues should be reported. bugsUrl string The url to your project's issue tracker. bundledDeps string[] List of dependencies to bundle into this module. codeArtifactOptions projen.javascript.CodeArtifactOptions Options for npm packages using AWS CodeArtifact. deps string[] Runtime dependencies of this module. description string The description is just a string that helps people understand the purpose of the package. devDeps string[] Build dependencies for this module. entrypoint string Module entrypoint ( main in package.json ). homepage string Package's Homepage / Website. keywords string[] Keywords to include in package.json . license string License's SPDX identifier. licensed boolean Indicates if a license should be added. maxNodeVersion string Minimum node.js version to require via engines (inclusive). minNodeVersion string Minimum Node.js version to require via package.json engines (inclusive). npmAccess projen.javascript.NpmAccess Access level of the npm package. npmRegistry string The host name of the npm registry to publish to. npmRegistryUrl string The base URL of the npm package registry. npmTokenSecret string GitHub secret which contains the NPM token to use when publishing packages. packageManager projen.javascript.NodePackageManager The Node Package Manager used to execute scripts. packageName string The \"name\" in package.json. peerDependencyOptions projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps string[] Peer dependencies for this module. pnpmVersion string The version of PNPM to use if using PNPM as a package manager. repository string The repository is the location where the actual code for your package lives. repositoryDirectory string If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions projen.javascript.ScopedPackagesOptions[] Options for privately hosted scoped packages. scripts {[ key: string ]: string} npm scripts to include. stability string Package's Stability. jsiiReleaseVersion string Version requirement of publib which is used to publish modules to npm. majorVersion number Major version to release from the default branch. minMajorVersion number Minimal Major version to release. npmDistTag string The npmDistTag to use when publishing from the default branch. postBuildSteps projen.github.workflows.JobStep[] Steps to execute after build as part of the release workflow. prerelease string Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun boolean Instead of actually publishing to package managers, just print the publishing command. publishTasks boolean Define publishing tasks that can be executed manually as well as workflows. releaseBranches {[ key: string ]: projen.release.BranchOptions} Defines additional release branches. releaseEveryCommit boolean Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue boolean Create a github issue on every failed publishing task. releaseFailureIssueLabel string The label to apply to issues indicating publish failures. releaseSchedule string CRON schedule to trigger new releases. releaseTagPrefix string Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. releaseTrigger projen.release.ReleaseTrigger The release trigger to use. releaseWorkflowName string The name of the default release workflow. releaseWorkflowSetupSteps projen.github.workflows.JobStep[] A set of workflow steps to execute in order to setup the workflow container. versionrcOptions {[ key: string ]: any} Custom configuration used when creating changelog with standard-version package. workflowContainerImage string Container image to use for GitHub workflows. workflowRunsOn string[] Github Runner selection labels. defaultReleaseBranch string The name of the main release branch. artifactsDirectory string A directory which will contain build artifacts. autoApproveUpgrades boolean Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). buildWorkflow boolean Define a GitHub workflow for building PRs. buildWorkflowTriggers projen.github.workflows.Triggers Build workflow triggers. bundlerOptions projen.javascript.BundlerOptions Options for Bundler . codeCov boolean Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret string Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner string License copyright owner. copyrightPeriod string The copyright years to put in the LICENSE file. dependabot boolean Use dependabot to handle dependency upgrades. dependabotOptions projen.github.DependabotOptions Options for dependabot. depsUpgrade boolean Use github workflows to handle dependency upgrades. depsUpgradeOptions projen.javascript.UpgradeDependenciesOptions Options for UpgradeDependencies . gitignore string[] Additional entries to .gitignore. jest boolean Setup jest unit tests. jestOptions projen.javascript.JestOptions Jest options. mutableBuild boolean Automatically update files modified during builds to pull-request branches. npmignore string[] Additional entries to .npmignore. npmignoreEnabled boolean Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package boolean Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier boolean Setup prettier. prettierOptions projen.javascript.PrettierOptions Prettier options. projenDevDependency boolean Indicates of \"projen\" should be installed as a devDependency. projenrcJs boolean Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions projen.javascript.ProjenrcOptions Options for .projenrc.js. projenVersion string Version of projen to install. pullRequestTemplate boolean Include a GitHub pull request template. pullRequestTemplateContents string[] The contents of the pull request template. release boolean Add release management to this project. releaseToNpm boolean Automatically release to npm when new versions are introduced. releaseWorkflow boolean DEPRECATED: renamed to release . workflowBootstrapSteps projen.github.workflows.JobStep[] Workflow steps to use in order to bootstrap this repo. workflowGitIdentity projen.github.GitIdentity The git identity to use in workflows. workflowNodeVersion string The node version to use in GitHub workflows. disableTsconfig boolean Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen boolean Docgen by Typedoc. docsDirectory string Docs directory. entrypointTypes string The .d.ts file that includes the type declarations for this module. eslint boolean Setup eslint. eslintOptions projen.javascript.EslintOptions Eslint options. libdir string Typescript artifacts output directory. projenrcTs boolean Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode boolean Generate one-time sample in src/ and test/ if there are no files there. srcdir string Typescript sources directory. testdir string Jest tests directory. Tests files should be named xxx.test.ts . tsconfig projen.javascript.TypescriptConfigOptions Custom TSConfig. tsconfigDev projen.javascript.TypescriptConfigOptions Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile string The name of the development tsconfig.json file. typescriptVersion string TypeScript version to use. buildCommand string A command to execute before synthesis. cdkout string cdk.out directory. context {[ key: string ]: any} Additional context to include in cdk.json . featureFlags boolean Include all feature flags in cdk.json. requireApproval projen.awscdk.ApprovalLevel To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes string[] Glob patterns to exclude from cdk watch . watchIncludes string[] Glob patterns to include in cdk watch . cdkVersion string Minimum version of the AWS CDK to depend on. cdkAssert boolean Warning: NodeJS only. cdkAssertions boolean Install the assertions library? cdkDependencies string[] Which AWS CDKv1 modules this project requires. cdkDependenciesAsDeps boolean If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). cdkTestDependencies string[] AWS CDK modules required for testing. cdkVersionPinning boolean Use pinned version instead of caret version for CDK. constructsVersion string Minimum version of the constructs library to depend on. appEntrypoint string The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). edgeLambdaAutoDiscover boolean Automatically adds an cloudfront.experimental.EdgeFunction for each .edge-lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. integrationTestAutoDiscover boolean Automatically discovers and creates integration tests for each .integ.ts file in under your test directory. lambdaAutoDiscover boolean Automatically adds an awscdk.LambdaFunction for each .lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambdaExtensionAutoDiscover boolean Automatically adds an awscdk.LambdaExtension for each .lambda-extension.ts entrypoint in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambdaOptions projen.awscdk.LambdaFunctionCommonOptions Common options for all AWS Lambda functions. name Required public readonly name : string ; Type: string Default: $BASEDIR This is the name of your project. commitGenerated Optional public readonly commitGenerated : boolean ; Type: boolean Default: true Whether to commit the managed files by default. gitOptions Optional public readonly gitOptions : GitOptions ; Type: projen.GitOptions Configuration options for git. logging Optional public readonly logging : LoggerOptions ; Type: projen.LoggerOptions Default: {} Configure logging options such as verbosity. outdir Optional public readonly outdir : string ; Type: string Default: \".\" The root directory of the project. Relative to this directory, all files are synthesized. If this project has a parent, this directory is relative to the parent directory and it cannot be the same as the parent or any of it's other sub-projects. parent Optional public readonly parent : Project ; Type: projen.Project The parent project, if this project is part of a bigger project. projenCommand Optional public readonly projenCommand : string ; Type: string Default: \"npx projen\" The shell command to use in order to run the projen CLI. Can be used to customize in special environments. projenrcJson Optional public readonly projenrcJson : boolean ; Type: boolean Default: false Generate (once) .projenrc.json (in JSON). Set to false in order to disable .projenrc.json generation. projenrcJsonOptions Optional public readonly projenrcJsonOptions : ProjenrcOptions ; Type: projen.ProjenrcOptions Default: default options Options for .projenrc.json. renovatebot Optional public readonly renovatebot : boolean ; Type: boolean Default: false Use renovatebot to handle dependency upgrades. renovatebotOptions Optional public readonly renovatebotOptions : RenovatebotOptions ; Type: projen.RenovatebotOptions Default: default options Options for renovatebot. autoApproveOptions Optional public readonly autoApproveOptions : AutoApproveOptions ; Type: projen.github.AutoApproveOptions Default: auto approve is disabled Enable and configure the 'auto approve' workflow. autoMerge Optional public readonly autoMerge : boolean ; Type: boolean Default: true Enable automatic merging on GitHub. Has no effect if github.mergify is set to false. autoMergeOptions Optional public readonly autoMergeOptions : AutoMergeOptions ; Type: projen.github.AutoMergeOptions Default: see defaults in AutoMergeOptions Configure options for automatic merging on GitHub. Has no effect if github.mergify or autoMerge is set to false. clobber Optional public readonly clobber : boolean ; Type: boolean Default: true Add a clobber task which resets the repo to origin. devContainer Optional public readonly devContainer : boolean ; Type: boolean Default: false Add a VSCode development environment (used for GitHub Codespaces). github Optional public readonly github : boolean ; Type: boolean Default: true Enable GitHub integration. Enabled by default for root projects. Disabled for non-root projects. githubOptions Optional public readonly githubOptions : GitHubOptions ; Type: projen.github.GitHubOptions Default: see GitHubOptions Options for GitHub integration. gitpod Optional public readonly gitpod : boolean ; Type: boolean Default: false Add a Gitpod development environment. ~~ mergify ~~ Optional Deprecated: use githubOptions.mergify instead public readonly mergify : boolean ; Type: boolean Default: true Whether mergify should be enabled on this repository or not. ~~ mergifyOptions ~~ Optional Deprecated: use githubOptions.mergifyOptions instead public readonly mergifyOptions : MergifyOptions ; Type: projen.github.MergifyOptions Default: default options Options for mergify. ~~ projectType ~~ Optional Deprecated: no longer supported at the base project level public readonly projectType : ProjectType ; Type: projen.ProjectType Default: ProjectType.UNKNOWN Which type of project this is (library/app). projenCredentials Optional public readonly projenCredentials : GithubCredentials ; Type: projen.github.GithubCredentials Default: use a personal access token named PROJEN_GITHUB_TOKEN Choose a method of providing GitHub API access for projen workflows. ~~ projenTokenSecret ~~ Optional Deprecated: use projenCredentials public readonly projenTokenSecret : string ; Type: string Default: \"PROJEN_GITHUB_TOKEN\" The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows. This token needs to have the repo , workflows and packages scope. readme Optional public readonly readme : SampleReadmeProps ; Type: projen.SampleReadmeProps Default: { filename: 'README.md', contents: '# replace this' } The README setup. Example \"{ filename: 'readme.md', contents: '# title' }\" stale Optional public readonly stale : boolean ; Type: boolean Default: false Auto-close of stale issues and pull request. See staleOptions for options. staleOptions Optional public readonly staleOptions : StaleOptions ; Type: projen.github.StaleOptions Default: see defaults in StaleOptions Auto-close stale issues and pull requests. To disable set stale to false . vscode Optional public readonly vscode : boolean ; Type: boolean Default: true Enable VSCode integration. Enabled by default for root projects. Disabled for non-root projects. allowLibraryDependencies Optional public readonly allowLibraryDependencies : boolean ; Type: boolean Default: true Allow the project to include peerDependencies and bundledDependencies . This is normally only allowed for libraries. For apps, there's no meaning for specifying these. authorEmail Optional public readonly authorEmail : string ; Type: string Author's e-mail. authorName Optional public readonly authorName : string ; Type: string Author's name. authorOrganization Optional public readonly authorOrganization : boolean ; Type: boolean Is the author an organization. authorUrl Optional public readonly authorUrl : string ; Type: string Author's URL / Website. autoDetectBin Optional public readonly autoDetectBin : boolean ; Type: boolean Default: true Automatically add all executables under the bin directory to your package.json file under the bin section. bin Optional public readonly bin : {[ key : string ] : string }; Type: {[ key: string ]: string} Binary programs vended with your module. You can use this option to add/customize how binaries are represented in your package.json , but unless autoDetectBin is false , every executable file under bin will automatically be added to this section. bugsEmail Optional public readonly bugsEmail : string ; Type: string The email address to which issues should be reported. bugsUrl Optional public readonly bugsUrl : string ; Type: string The url to your project's issue tracker. bundledDeps Optional public readonly bundledDeps : string []; Type: string[] List of dependencies to bundle into this module. These modules will be added both to the dependencies section and bundledDependencies section of your package.json . The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. codeArtifactOptions Optional public readonly codeArtifactOptions : CodeArtifactOptions ; Type: projen.javascript.CodeArtifactOptions Default: undefined Options for npm packages using AWS CodeArtifact. This is required if publishing packages to, or installing scoped packages from AWS CodeArtifact deps Optional public readonly deps : string []; Type: string[] Default: [] Runtime dependencies of this module. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'express' , 'lodash' , 'foo@^2' ] description Optional public readonly description : string ; Type: string The description is just a string that helps people understand the purpose of the package. It can be used when searching for packages in a package manager as well. See https://classic.yarnpkg.com/en/docs/package-json/#toc-description devDeps Optional public readonly devDeps : string []; Type: string[] Default: [] Build dependencies for this module. These dependencies will only be available in your build environment but will not be fetched when this module is consumed. The recommendation is to only specify the module name here (e.g. express ). This will behave similar to yarn add or npm install in the sense that it will add the module as a dependency to your package.json file with the latest version ( ^ ). You can specify semver requirements in the same syntax passed to npm i or yarn add (e.g. express@^2 ) and this will be what you package.json will eventually include. Example [ 'typescript' , '@types/express' ] entrypoint Optional public readonly entrypoint : string ; Type: string Default: \"lib/index.js\" Module entrypoint ( main in package.json ). Set to an empty string to not include main in your package.json homepage Optional public readonly homepage : string ; Type: string Package's Homepage / Website. keywords Optional public readonly keywords : string []; Type: string[] Keywords to include in package.json . license Optional public readonly license : string ; Type: string Default: \"Apache-2.0\" License's SPDX identifier. See https://github.com/projen/projen/tree/main/license-text for a list of supported licenses. Use the licensed option if you want to no license to be specified. licensed Optional public readonly licensed : boolean ; Type: boolean Default: true Indicates if a license should be added. maxNodeVersion Optional public readonly maxNodeVersion : string ; Type: string Default: no max Minimum node.js version to require via engines (inclusive). minNodeVersion Optional public readonly minNodeVersion : string ; Type: string Default: no \"engines\" specified Minimum Node.js version to require via package.json engines (inclusive). npmAccess Optional public readonly npmAccess : NpmAccess ; Type: projen.javascript.NpmAccess Default: for scoped packages (e.g. foo@bar ), the default is NpmAccess.RESTRICTED , for non-scoped packages, the default is NpmAccess.PUBLIC . Access level of the npm package. ~~ npmRegistry ~~ Optional Deprecated: use npmRegistryUrl instead public readonly npmRegistry : string ; Type: string The host name of the npm registry to publish to. Cannot be set together with npmRegistryUrl . npmRegistryUrl Optional public readonly npmRegistryUrl : string ; Type: string Default: \" https://registry.npmjs.org \" The base URL of the npm package registry. Must be a URL (e.g. start with \"https://\" or \"http://\") npmTokenSecret Optional public readonly npmTokenSecret : string ; Type: string Default: \"NPM_TOKEN\" GitHub secret which contains the NPM token to use when publishing packages. packageManager Optional public readonly packageManager : NodePackageManager ; Type: projen.javascript.NodePackageManager Default: NodePackageManager.YARN The Node Package Manager used to execute scripts. packageName Optional public readonly packageName : string ; Type: string Default: defaults to project name The \"name\" in package.json. peerDependencyOptions Optional public readonly peerDependencyOptions : PeerDependencyOptions ; Type: projen.javascript.PeerDependencyOptions Options for peerDeps . peerDeps Optional public readonly peerDeps : string []; Type: string[] Default: [] Peer dependencies for this module. Dependencies listed here are required to be installed (and satisfied) by the consumer of this library. Using peer dependencies allows you to ensure that only a single module of a certain library exists in the node_modules tree of your consumers. Note that prior to npm@7, peer dependencies are not automatically installed, which means that adding peer dependencies to a library will be a breaking change for your customers. Unless peerDependencyOptions.pinnedDevDependency is disabled (it is enabled by default), projen will automatically add a dev dependency with a pinned version for each peer dependency. This will ensure that you build & test your module against the lowest peer version required. pnpmVersion Optional public readonly pnpmVersion : string ; Type: string Default: \"7\" The version of PNPM to use if using PNPM as a package manager. repository Optional public readonly repository : string ; Type: string The repository is the location where the actual code for your package lives. See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository repositoryDirectory Optional public readonly repositoryDirectory : string ; Type: string If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives. scopedPackagesOptions Optional public readonly scopedPackagesOptions : ScopedPackagesOptions []; Type: projen.javascript.ScopedPackagesOptions[] Default: fetch all scoped packages from the public npm registry Options for privately hosted scoped packages. scripts Optional public readonly scripts : {[ key : string ] : string }; Type: {[ key: string ]: string} Default: {} npm scripts to include. If a script has the same name as a standard script, the standard script will be overwritten. stability Optional public readonly stability : string ; Type: string Package's Stability. jsiiReleaseVersion Optional public readonly jsiiReleaseVersion : string ; Type: string Default: \"latest\" Version requirement of publib which is used to publish modules to npm. majorVersion Optional public readonly majorVersion : number ; Type: number Default: Major version is not enforced. Major version to release from the default branch. If this is specified, we bump the latest version of this major version line. If not specified, we bump the global latest version. minMajorVersion Optional public readonly minMajorVersion : number ; Type: number Default: No minimum version is being enforced Minimal Major version to release. This can be useful to set to 1, as breaking changes before the 1.x major release are not incrementing the major version number. Can not be set together with majorVersion . npmDistTag Optional public readonly npmDistTag : string ; Type: string Default: \"latest\" The npmDistTag to use when publishing from the default branch. To set the npm dist-tag for release branches, set the npmDistTag property for each branch. postBuildSteps Optional public readonly postBuildSteps : JobStep []; Type: projen.github.workflows.JobStep[] Default: [] Steps to execute after build as part of the release workflow. prerelease Optional public readonly prerelease : string ; Type: string Default: normal semantic versions Bump versions from the default branch as pre-releases (e.g. \"beta\", \"alpha\", \"pre\"). publishDryRun Optional public readonly publishDryRun : boolean ; Type: boolean Default: false Instead of actually publishing to package managers, just print the publishing command. publishTasks Optional public readonly publishTasks : boolean ; Type: boolean Default: false Define publishing tasks that can be executed manually as well as workflows. Normally, publishing only happens within automated workflows. Enable this in order to create a publishing task for each publishing activity. releaseBranches Optional public readonly releaseBranches : {[ key : string ] : BranchOptions }; Type: {[ key: string ]: projen.release.BranchOptions} Default: no additional branches are used for release. you can use addBranch() to add additional branches. Defines additional release branches. A workflow will be created for each release branch which will publish releases from commits in this branch. Each release branch must be assigned a major version number which is used to enforce that versions published from that branch always use that major version. If multiple branches are used, the majorVersion field must also be provided for the default branch. ~~ releaseEveryCommit ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.continuous() instead public readonly releaseEveryCommit : boolean ; Type: boolean Default: true Automatically release new versions every commit to one of branches in releaseBranches . releaseFailureIssue Optional public readonly releaseFailureIssue : boolean ; Type: boolean Default: false Create a github issue on every failed publishing task. releaseFailureIssueLabel Optional public readonly releaseFailureIssueLabel : string ; Type: string Default: \"failed-release\" The label to apply to issues indicating publish failures. Only applies if releaseFailureIssue is true. ~~ releaseSchedule ~~ Optional Deprecated: Use releaseTrigger: ReleaseTrigger.scheduled() instead public readonly releaseSchedule : string ; Type: string Default: no scheduled releases CRON schedule to trigger new releases. releaseTagPrefix Optional public readonly releaseTagPrefix : string ; Type: string Default: \"v\" Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers. Note: this prefix is used to detect the latest tagged version when bumping, so if you change this on a project with an existing version history, you may need to manually tag your latest release with the new prefix. releaseTrigger Optional public readonly releaseTrigger : ReleaseTrigger ; Type: projen.release.ReleaseTrigger Default: Continuous releases ( ReleaseTrigger.continuous() ) The release trigger to use. releaseWorkflowName Optional public readonly releaseWorkflowName : string ; Type: string Default: \"Release\" The name of the default release workflow. releaseWorkflowSetupSteps Optional public readonly releaseWorkflowSetupSteps : JobStep []; Type: projen.github.workflows.JobStep[] A set of workflow steps to execute in order to setup the workflow container. versionrcOptions Optional public readonly versionrcOptions : {[ key : string ] : any }; Type: {[ key: string ]: any} Default: standard configuration applicable for GitHub repositories Custom configuration used when creating changelog with standard-version package. Given values either append to default configuration or overwrite values in it. workflowContainerImage Optional public readonly workflowContainerImage : string ; Type: string Default: default image Container image to use for GitHub workflows. workflowRunsOn Optional public readonly workflowRunsOn : string []; Type: string[] Default: [\"ubuntu-latest\"] Github Runner selection labels. defaultReleaseBranch Required public readonly defaultReleaseBranch : string ; Type: string Default: \"main\" The name of the main release branch. artifactsDirectory Optional public readonly artifactsDirectory : string ; Type: string Default: \"dist\" A directory which will contain build artifacts. autoApproveUpgrades Optional public readonly autoApproveUpgrades : boolean ; Type: boolean Default: true Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued). Throw if set to true but autoApproveOptions are not defined. buildWorkflow Optional public readonly buildWorkflow : boolean ; Type: boolean Default: true if not a subproject Define a GitHub workflow for building PRs. buildWorkflowTriggers Optional public readonly buildWorkflowTriggers : Triggers ; Type: projen.github.workflows.Triggers Default: \"{ pullRequest: {}, workflowDispatch: {} }\" Build workflow triggers. bundlerOptions Optional public readonly bundlerOptions : BundlerOptions ; Type: projen.javascript.BundlerOptions Options for Bundler . codeCov Optional public readonly codeCov : boolean ; Type: boolean Default: false Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v3 A secret is required for private repos. Configured with @codeCovTokenSecret . codeCovTokenSecret Optional public readonly codeCovTokenSecret : string ; Type: string Default: if this option is not specified, only public repositories are supported Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories. copyrightOwner Optional public readonly copyrightOwner : string ; Type: string Default: defaults to the value of authorName or \"\" if authorName is undefined. License copyright owner. copyrightPeriod Optional public readonly copyrightPeriod : string ; Type: string Default: current year The copyright years to put in the LICENSE file. dependabot Optional public readonly dependabot : boolean ; Type: boolean Default: false Use dependabot to handle dependency upgrades. Cannot be used in conjunction with depsUpgrade . dependabotOptions Optional public readonly dependabotOptions : DependabotOptions ; Type: projen.github.DependabotOptions Default: default options Options for dependabot. depsUpgrade Optional public readonly depsUpgrade : boolean ; Type: boolean Default: true Use github workflows to handle dependency upgrades. Cannot be used in conjunction with dependabot . depsUpgradeOptions Optional public readonly depsUpgradeOptions : UpgradeDependenciesOptions ; Type: projen.javascript.UpgradeDependenciesOptions Default: default options Options for UpgradeDependencies . gitignore Optional public readonly gitignore : string []; Type: string[] Additional entries to .gitignore. jest Optional public readonly jest : boolean ; Type: boolean Default: true Setup jest unit tests. jestOptions Optional public readonly jestOptions : JestOptions ; Type: projen.javascript.JestOptions Default: default options Jest options. mutableBuild Optional public readonly mutableBuild : boolean ; Type: boolean Default: true Automatically update files modified during builds to pull-request branches. This means that any files synthesized by projen or e.g. test snapshots will always be up-to-date before a PR is merged. Implies that PR builds do not have anti-tamper checks. ~~ npmignore ~~ Optional Deprecated: - use project.addPackageIgnore public readonly npmignore : string []; Type: string[] Additional entries to .npmignore. npmignoreEnabled Optional public readonly npmignoreEnabled : boolean ; Type: boolean Default: true Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs. package Optional public readonly package : boolean ; Type: boolean Default: true Defines a package task that will produce an npm tarball under the artifacts directory (e.g. dist ). prettier Optional public readonly prettier : boolean ; Type: boolean Default: false Setup prettier. prettierOptions Optional public readonly prettierOptions : PrettierOptions ; Type: projen.javascript.PrettierOptions Default: default options Prettier options. projenDevDependency Optional public readonly projenDevDependency : boolean ; Type: boolean Default: true Indicates of \"projen\" should be installed as a devDependency. projenrcJs Optional public readonly projenrcJs : boolean ; Type: boolean Default: true if projenrcJson is false Generate (once) .projenrc.js (in JavaScript). Set to false in order to disable .projenrc.js generation. projenrcJsOptions Optional public readonly projenrcJsOptions : ProjenrcOptions ; Type: projen.javascript.ProjenrcOptions Default: default options Options for .projenrc.js. projenVersion Optional public readonly projenVersion : string ; Type: string Default: Defaults to the latest version. Version of projen to install. pullRequestTemplate Optional public readonly pullRequestTemplate : boolean ; Type: boolean Default: true Include a GitHub pull request template. pullRequestTemplateContents Optional public readonly pullRequestTemplateContents : string []; Type: string[] Default: default content The contents of the pull request template. release Optional public readonly release : boolean ; Type: boolean Default: true (false for subprojects) Add release management to this project. releaseToNpm Optional public readonly releaseToNpm : boolean ; Type: boolean Default: false Automatically release to npm when new versions are introduced. ~~ releaseWorkflow ~~ Optional Deprecated: see release . public readonly releaseWorkflow : boolean ; Type: boolean Default: true if not a subproject DEPRECATED: renamed to release . workflowBootstrapSteps Optional public readonly workflowBootstrapSteps : JobStep []; Type: projen.github.workflows.JobStep[] Default: \"yarn install --frozen-lockfile && yarn projen\" Workflow steps to use in order to bootstrap this repo. workflowGitIdentity Optional public readonly workflowGitIdentity : GitIdentity ; Type: projen.github.GitIdentity Default: GitHub Actions The git identity to use in workflows. workflowNodeVersion Optional public readonly workflowNodeVersion : string ; Type: string Default: same as minNodeVersion The node version to use in GitHub workflows. disableTsconfig Optional public readonly disableTsconfig : boolean ; Type: boolean Default: false Do not generate a tsconfig.json file (used by jsii projects since tsconfig.json is generated by the jsii compiler). docgen Optional public readonly docgen : boolean ; Type: boolean Default: false Docgen by Typedoc. docsDirectory Optional public readonly docsDirectory : string ; Type: string Default: \"docs\" Docs directory. entrypointTypes Optional public readonly entrypointTypes : string ; Type: string Default: .d.ts file derived from the project's entrypoint (usually lib/index.d.ts) The .d.ts file that includes the type declarations for this module. eslint Optional public readonly eslint : boolean ; Type: boolean Default: true Setup eslint. eslintOptions Optional public readonly eslintOptions : EslintOptions ; Type: projen.javascript.EslintOptions Default: opinionated default options Eslint options. libdir Optional public readonly libdir : string ; Type: string Default: \"lib\" Typescript artifacts output directory. projenrcTs Optional public readonly projenrcTs : boolean ; Type: boolean Default: false Use TypeScript for your projenrc file ( .projenrc.ts ). projenrcTsOptions Optional public readonly projenrcTsOptions : ProjenrcOptions ; Type: projen.typescript.ProjenrcOptions Options for .projenrc.ts. sampleCode Optional public readonly sampleCode : boolean ; Type: boolean Default: true Generate one-time sample in src/ and test/ if there are no files there. srcdir Optional public readonly srcdir : string ; Type: string Default: \"src\" Typescript sources directory. testdir Optional public readonly testdir : string ; Type: string Default: \"test\" Jest tests directory. Tests files should be named xxx.test.ts . If this directory is under srcdir (e.g. src/test , src/__tests__ ), then tests are going to be compiled into lib/ and executed as javascript. If the test directory is outside of src , then we configure jest to compile the code in-memory. tsconfig Optional public readonly tsconfig : TypescriptConfigOptions ; Type: projen.javascript.TypescriptConfigOptions Default: default options Custom TSConfig. tsconfigDev Optional public readonly tsconfigDev : TypescriptConfigOptions ; Type: projen.javascript.TypescriptConfigOptions Default: use the production tsconfig options Custom tsconfig options for the development tsconfig.json file (used for testing). tsconfigDevFile Optional public readonly tsconfigDevFile : string ; Type: string Default: \"tsconfig.dev.json\" The name of the development tsconfig.json file. typescriptVersion Optional public readonly typescriptVersion : string ; Type: string Default: \"latest\" TypeScript version to use. NOTE: Typescript is not semantically versioned and should remain on the same minor, so we recommend using a ~ dependency (e.g. ~1.2.3 ). buildCommand Optional public readonly buildCommand : string ; Type: string Default: no build command A command to execute before synthesis. This command will be called when running cdk synth or when cdk watch identifies a change in your source code before redeployment. cdkout Optional public readonly cdkout : string ; Type: string Default: \"cdk.out\" cdk.out directory. context Optional public readonly context : {[ key : string ] : any }; Type: {[ key: string ]: any} Default: no additional context Additional context to include in cdk.json . featureFlags Optional public readonly featureFlags : boolean ; Type: boolean Default: true Include all feature flags in cdk.json. requireApproval Optional public readonly requireApproval : ApprovalLevel ; Type: projen.awscdk.ApprovalLevel Default: ApprovalLevel.BROADENING To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them. watchExcludes Optional public readonly watchExcludes : string []; Type: string[] Default: [] Glob patterns to exclude from cdk watch . watchIncludes Optional public readonly watchIncludes : string []; Type: string[] Default: [] Glob patterns to include in cdk watch . cdkVersion Required public readonly cdkVersion : string ; Type: string Default: \"2.1.0\" Minimum version of the AWS CDK to depend on. ~~ cdkAssert ~~ Optional Deprecated: The public readonly cdkAssert : boolean ; Type: boolean Default: will be included by default for AWS CDK >= 1.0.0 < 2.0.0 Warning: NodeJS only. Install the aws-cdk/assert library? cdkAssertions Optional public readonly cdkAssertions : boolean ; Type: boolean Default: will be included by default for AWS CDK >= 1.111.0 < 2.0.0 Install the assertions library? Only needed for CDK 1.x. If using CDK 2.x then assertions is already included in 'aws-cdk-lib' ~~ cdkDependencies ~~ Optional Deprecated: For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library) public readonly cdkDependencies : string []; Type: string[] Which AWS CDKv1 modules this project requires. ~~ cdkDependenciesAsDeps ~~ Optional Deprecated: Not supported in CDK v2. public readonly cdkDependenciesAsDeps : boolean ; Type: boolean Default: true If this is enabled (default), all modules declared in cdkDependencies will be also added as normal dependencies (as well as peerDependencies ). This is to ensure that downstream consumers actually have your CDK dependencies installed when using npm < 7 or yarn, where peer dependencies are not automatically installed. If this is disabled, cdkDependencies will be added to devDependencies to ensure they are present during development. Note: this setting only applies to construct library projects ~~ cdkTestDependencies ~~ Optional Deprecated: For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead public readonly cdkTestDependencies : string []; Type: string[] AWS CDK modules required for testing. cdkVersionPinning Optional public readonly cdkVersionPinning : boolean ; Type: boolean Use pinned version instead of caret version for CDK. You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates. If you use experimental features this will let you define the moment you include breaking changes. constructsVersion Optional public readonly constructsVersion : string ; Type: string Default: for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is \"10.0.5\". Minimum version of the constructs library to depend on. appEntrypoint Optional public readonly appEntrypoint : string ; Type: string Default: \"main.ts\" The CDK app's entrypoint (relative to the source directory, which is \"src\" by default). edgeLambdaAutoDiscover Optional public readonly edgeLambdaAutoDiscover : boolean ; Type: boolean Default: true Automatically adds an cloudfront.experimental.EdgeFunction for each .edge-lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. integrationTestAutoDiscover Optional public readonly integrationTestAutoDiscover : boolean ; Type: boolean Default: true Automatically discovers and creates integration tests for each .integ.ts file in under your test directory. lambdaAutoDiscover Optional public readonly lambdaAutoDiscover : boolean ; Type: boolean Default: true Automatically adds an awscdk.LambdaFunction for each .lambda.ts handler in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambdaExtensionAutoDiscover Optional public readonly lambdaExtensionAutoDiscover : boolean ; Type: boolean Default: true Automatically adds an awscdk.LambdaExtension for each .lambda-extension.ts entrypoint in your source tree. If this is disabled, you can manually add an awscdk.AutoDiscover component to your project. lambdaOptions Optional public readonly lambdaOptions : LambdaFunctionCommonOptions ; Type: projen.awscdk.LambdaFunctionCommonOptions Default: default options Common options for all AWS Lambda functions. SonarCodeScannerConfig Initializer import { pipeline } from 'aws-prototyping-sdk' const sonarCodeScannerConfig : pipeline.SonarCodeScannerConfig = { ... } Properties Name Type Description sonarqubeAuthorizedGroup string Group name in Sonarqube with access to administer this project. sonarqubeDefaultProfileOrGateName string Default profile/gate name i.e: your org profile. sonarqubeEndpoint string endpoint of the sonarqube instance i.e: https:// . sonarqubeProjectName string Name of the project to create in Sonarqube. cdkOutDir string directory containing the synthesized cdk resources. cfnNagIgnorePath string path to a file containing the cfn nag suppression rules. excludeGlobsForScan string[] glob patterns to exclude from sonar scan. includeGlobsForScan string[] glob patterns to include from sonar scan. preArchiveCommands string[] Hook which allows custom commands to be executed before the process commences the archival process. sonarqubeSpecificProfileOrGateName string Specific profile/gate name i.e: language specific. sonarqubeTags string[] Tags to associate with this project. sonarqubeAuthorizedGroup Required public readonly sonarqubeAuthorizedGroup : string ; Type: string Group name in Sonarqube with access to administer this project. sonarqubeDefaultProfileOrGateName Required public readonly sonarqubeDefaultProfileOrGateName : string ; Type: string Default profile/gate name i.e: your org profile. Note: These need to be set up in Sonarqube manually. sonarqubeEndpoint Required public readonly sonarqubeEndpoint : string ; Type: string endpoint of the sonarqube instance i.e: https:// . Note: Ensure a trailing '/' is not included. sonarqubeProjectName Required public readonly sonarqubeProjectName : string ; Type: string Name of the project to create in Sonarqube. cdkOutDir Optional public readonly cdkOutDir : string ; Type: string directory containing the synthesized cdk resources. cfnNagIgnorePath Optional public readonly cfnNagIgnorePath : string ; Type: string path to a file containing the cfn nag suppression rules. excludeGlobsForScan Optional public readonly excludeGlobsForScan : string []; Type: string[] glob patterns to exclude from sonar scan. includeGlobsForScan Optional public readonly includeGlobsForScan : string []; Type: string[] glob patterns to include from sonar scan. preArchiveCommands Optional public readonly preArchiveCommands : string []; Type: string[] Hook which allows custom commands to be executed before the process commences the archival process. sonarqubeSpecificProfileOrGateName Optional public readonly sonarqubeSpecificProfileOrGateName : string ; Type: string Specific profile/gate name i.e: language specific. Note: These need to be set up in Sonarqube manually. sonarqubeTags Optional public readonly sonarqubeTags : string []; Type: string[] Tags to associate with this project. SonarCodeScannerProps SonarCodeScanners properties. Initializer import { pipeline } from 'aws-prototyping-sdk' const sonarCodeScannerProps : pipeline.SonarCodeScannerProps = { ... } Properties Name Type Description sonarqubeAuthorizedGroup string Group name in Sonarqube with access to administer this project. sonarqubeDefaultProfileOrGateName string Default profile/gate name i.e: your org profile. sonarqubeEndpoint string endpoint of the sonarqube instance i.e: https:// . sonarqubeProjectName string Name of the project to create in Sonarqube. cdkOutDir string directory containing the synthesized cdk resources. cfnNagIgnorePath string path to a file containing the cfn nag suppression rules. excludeGlobsForScan string[] glob patterns to exclude from sonar scan. includeGlobsForScan string[] glob patterns to include from sonar scan. preArchiveCommands string[] Hook which allows custom commands to be executed before the process commences the archival process. sonarqubeSpecificProfileOrGateName string Specific profile/gate name i.e: language specific. sonarqubeTags string[] Tags to associate with this project. artifactBucketArn string S3 bucket ARN containing the built artifacts from the synth build. synthBuildArn string ARN for the CodeBuild task responsible for executing the synth command. artifactBucketKeyArn string Artifact bucket key ARN used to encrypt the artifacts. sonarqubeAuthorizedGroup Required public readonly sonarqubeAuthorizedGroup : string ; Type: string Group name in Sonarqube with access to administer this project. sonarqubeDefaultProfileOrGateName Required public readonly sonarqubeDefaultProfileOrGateName : string ; Type: string Default profile/gate name i.e: your org profile. Note: These need to be set up in Sonarqube manually. sonarqubeEndpoint Required public readonly sonarqubeEndpoint : string ; Type: string endpoint of the sonarqube instance i.e: https:// . Note: Ensure a trailing '/' is not included. sonarqubeProjectName Required public readonly sonarqubeProjectName : string ; Type: string Name of the project to create in Sonarqube. cdkOutDir Optional public readonly cdkOutDir : string ; Type: string directory containing the synthesized cdk resources. cfnNagIgnorePath Optional public readonly cfnNagIgnorePath : string ; Type: string path to a file containing the cfn nag suppression rules. excludeGlobsForScan Optional public readonly excludeGlobsForScan : string []; Type: string[] glob patterns to exclude from sonar scan. includeGlobsForScan Optional public readonly includeGlobsForScan : string []; Type: string[] glob patterns to include from sonar scan. preArchiveCommands Optional public readonly preArchiveCommands : string []; Type: string[] Hook which allows custom commands to be executed before the process commences the archival process. sonarqubeSpecificProfileOrGateName Optional public readonly sonarqubeSpecificProfileOrGateName : string ; Type: string Specific profile/gate name i.e: language specific. Note: These need to be set up in Sonarqube manually. sonarqubeTags Optional public readonly sonarqubeTags : string []; Type: string[] Tags to associate with this project. artifactBucketArn Required public readonly artifactBucketArn : string ; Type: string S3 bucket ARN containing the built artifacts from the synth build. synthBuildArn Required public readonly synthBuildArn : string ; Type: string ARN for the CodeBuild task responsible for executing the synth command. artifactBucketKeyArn Optional public readonly artifactBucketKeyArn : string ; Type: string Artifact bucket key ARN used to encrypt the artifacts. Classes PDKPipelineJavaProject Synthesizes a Java Project with a CI/CD pipeline. Initializers import { pipeline } from 'aws-prototyping-sdk' new pipeline . PDKPipelineJavaProject ( options : PDKPipelineJavaProjectOptions ) Name Type Description options PDKPipelineJavaProjectOptions No description. options Required Type: PDKPipelineJavaProjectOptions Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. tryRemoveFile Finds a file at the specified relative path within this project and removes it. addDependency Adds a runtime dependency. addPlugin Adds a build plugin to the pom. addTestDependency Adds a test dependency. addCdkDependency Adds an AWS CDK module dependencies. addExcludeFromCleanup public addExcludeFromCleanup ( globs : string ) : void Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: string The glob patterns to match. addGitIgnore public addGitIgnore ( pattern : string ) : void Adds a .gitignore pattern. pattern Required Type: string The glob pattern to ignore. addPackageIgnore public addPackageIgnore ( _pattern : string ) : void Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . _pattern Required Type: string The glob pattern to exclude. addTask public addTask ( name : string , props? : TaskOptions ) : Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: string The task name to add. props Optional Type: projen.TaskOptions Task properties. ~~ addTip ~~ public addTip ( message : string ) : void Prints a \"tip\" message during synthesis. message Required Type: string The message. annotateGenerated public annotateGenerated ( glob : string ) : void Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: string the glob pattern to match (could be a file path). postSynthesize public postSynthesize () : void Called after all components are synthesized. Order is not guaranteed. preSynthesize public preSynthesize () : void Called before all components are synthesized. removeTask public removeTask ( name : string ) : Task Removes a task from a project. name Required Type: string The name of the task to remove. runTaskCommand public runTaskCommand ( task : Task ) : string Returns the shell command to execute in order to run a task. By default, this is npx projen@<version> <task> task Required Type: projen.Task The task for which the command is required. synth public synth () : void Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" tryFindFile public tryFindFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public tryFindJsonFile ( filePath : string ) : JsonFile Finds a json file by name. filePath Required Type: string The file path. tryFindObjectFile public tryFindObjectFile ( filePath : string ) : ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: string The file path. tryRemoveFile public tryRemoveFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and removes it. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. addDependency public addDependency ( spec : string ) : void Adds a runtime dependency. spec Required Type: string Format <groupId>/<artifactId>@<semver> . addPlugin public addPlugin ( spec : string , options? : PluginOptions ) : Dependency Adds a build plugin to the pom. The plug in is also added as a BUILD dep to the project. spec Required Type: string dependency spec ( group/artifact@version ). options Optional Type: projen.java.PluginOptions plugin options. addTestDependency public addTestDependency ( spec : string ) : void Adds a test dependency. spec Required Type: string Format <groupId>/<artifactId>@<semver> . ~~ addCdkDependency ~~ public addCdkDependency ( module s : string ) : void Adds an AWS CDK module dependencies. modules Required Type: string The list of modules to depend on (e.g. \"software.amazon.awscdk/aws-lambda\", \"software.amazon.awscdk/aws-iam\", etc). Properties Name Type Description buildTask projen.Task No description. commitGenerated boolean Whether to commit the managed files by default. compileTask projen.Task No description. components projen.Component[] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected boolean Whether or not the project is being ejected. files projen.FileBase[] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name string Project name. outdir string Absolute output directory of this project. packageTask projen.Task No description. postCompileTask projen.Task No description. preCompileTask projen.Task No description. projectBuild projen.ProjectBuild Manages the build process of the project. projenCommand string The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. testTask projen.Task No description. defaultTask projen.Task This is the \"default\" task, the one that executes \"projen\". initProject projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. projectType projen.ProjectType No description. autoApprove projen.github.AutoApprove Auto approve set up for this project. devContainer projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. compile projen.java.MavenCompile Compile component. distdir string Maven artifact output directory. packaging projen.java.MavenPackaging Packaging component. pom projen.java.Pom API for managing pom.xml . junit projen.java.Junit JUnit component. projenrc projen.java.Projenrc Projenrc component. cdkConfig projen.awscdk.CdkConfig The cdk.json file. cdkDeps projen.awscdk.AwsCdkDeps CDK dependency management helper class. cdkTasks projen.awscdk.CdkTasks CDK tasks. mainClass string The full name of the main class of the java app (package.Class). mainClassName string The name of the Java class with the static main() method. mainPackage string The name of the Java package that includes the main class. buildTask Required public readonly buildTask : Task ; Type: projen.Task commitGenerated Required public readonly commitGenerated : boolean ; Type: boolean Whether to commit the managed files by default. compileTask Required public readonly compileTask : Task ; Type: projen.Task components Required public readonly components : Component []; Type: projen.Component[] Returns all the components within this project. deps Required public readonly deps : Dependencies ; Type: projen.Dependencies Project dependencies. ejected Required public readonly ejected : boolean ; Type: boolean Whether or not the project is being ejected. files Required public readonly files : FileBase []; Type: projen.FileBase[] All files in this project. gitattributes Required public readonly gitattributes : GitAttributesFile ; Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public readonly gitignore : IgnoreFile ; Type: projen.IgnoreFile .gitignore. logger Required public readonly logger : Logger ; Type: projen.Logger Logging utilities. name Required public readonly name : string ; Type: string Project name. outdir Required public readonly outdir : string ; Type: string Absolute output directory of this project. packageTask Required public readonly packageTask : Task ; Type: projen.Task postCompileTask Required public readonly postCompileTask : Task ; Type: projen.Task preCompileTask Required public readonly preCompileTask : Task ; Type: projen.Task projectBuild Required public readonly projectBuild : ProjectBuild ; Type: projen.ProjectBuild Manages the build process of the project. projenCommand Required public readonly projenCommand : string ; Type: string The command to use in order to run the projen CLI. root Required public readonly root : Project ; Type: projen.Project The root project. tasks Required public readonly tasks : Tasks ; Type: projen.Tasks Project tasks. testTask Required public readonly testTask : Task ; Type: projen.Task defaultTask Optional public readonly defaultTask : Task ; Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public readonly initProject : InitProject ; Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public readonly parent : Project ; Type: projen.Project A parent project. If undefined, this is the root project. projectType Required public readonly projectType : ProjectType ; Type: projen.ProjectType autoApprove Optional public readonly autoApprove : AutoApprove ; Type: projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public readonly devContainer : DevContainer ; Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public readonly github : GitHub ; Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public readonly gitpod : Gitpod ; Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public readonly vscode : VsCode ; Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. compile Required public readonly compile : MavenCompile ; Type: projen.java.MavenCompile Compile component. distdir Required public readonly distdir : string ; Type: string Maven artifact output directory. packaging Required public readonly packaging : MavenPackaging ; Type: projen.java.MavenPackaging Packaging component. pom Required public readonly pom : Pom ; Type: projen.java.Pom API for managing pom.xml . junit Optional public readonly junit : Junit ; Type: projen.java.Junit JUnit component. projenrc Optional public readonly projenrc : Projenrc ; Type: projen.java.Projenrc Projenrc component. cdkConfig Required public readonly cdkConfig : CdkConfig ; Type: projen.awscdk.CdkConfig The cdk.json file. cdkDeps Required public readonly cdkDeps : AwsCdkDeps ; Type: projen.awscdk.AwsCdkDeps CDK dependency management helper class. cdkTasks Required public readonly cdkTasks : CdkTasks ; Type: projen.awscdk.CdkTasks CDK tasks. mainClass Required public readonly mainClass : string ; Type: string The full name of the main class of the java app (package.Class). mainClassName Required public readonly mainClassName : string ; Type: string The name of the Java class with the static main() method. mainPackage Required public readonly mainPackage : string ; Type: string The name of the Java package that includes the main class. Constants Name Type Description DEFAULT_TASK string The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public readonly DEFAULT_TASK : string ; Type: string The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. PDKPipelinePyProject Synthesizes a Python Project with a CI/CD pipeline. Initializers import { pipeline } from 'aws-prototyping-sdk' new pipeline . PDKPipelinePyProject ( options : PDKPipelinePyProjectOptions ) Name Type Description options PDKPipelinePyProjectOptions No description. options Required Type: PDKPipelinePyProjectOptions Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. tryRemoveFile Finds a file at the specified relative path within this project and removes it. addDependency Adds a runtime dependency. addDevDependency Adds a dev dependency. addExcludeFromCleanup public addExcludeFromCleanup ( globs : string ) : void Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: string The glob patterns to match. addGitIgnore public addGitIgnore ( pattern : string ) : void Adds a .gitignore pattern. pattern Required Type: string The glob pattern to ignore. addPackageIgnore public addPackageIgnore ( _pattern : string ) : void Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . _pattern Required Type: string The glob pattern to exclude. addTask public addTask ( name : string , props? : TaskOptions ) : Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: string The task name to add. props Optional Type: projen.TaskOptions Task properties. ~~ addTip ~~ public addTip ( message : string ) : void Prints a \"tip\" message during synthesis. message Required Type: string The message. annotateGenerated public annotateGenerated ( glob : string ) : void Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: string the glob pattern to match (could be a file path). postSynthesize public postSynthesize () : void Called after all components are synthesized. Order is not guaranteed. preSynthesize public preSynthesize () : void Called before all components are synthesized. removeTask public removeTask ( name : string ) : Task Removes a task from a project. name Required Type: string The name of the task to remove. runTaskCommand public runTaskCommand ( task : Task ) : string Returns the shell command to execute in order to run a task. By default, this is npx projen@<version> <task> task Required Type: projen.Task The task for which the command is required. synth public synth () : void Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" tryFindFile public tryFindFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public tryFindJsonFile ( filePath : string ) : JsonFile Finds a json file by name. filePath Required Type: string The file path. tryFindObjectFile public tryFindObjectFile ( filePath : string ) : ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: string The file path. tryRemoveFile public tryRemoveFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and removes it. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. addDependency public addDependency ( spec : string ) : void Adds a runtime dependency. spec Required Type: string Format <module>@<semver> . addDevDependency public addDevDependency ( spec : string ) : void Adds a dev dependency. spec Required Type: string Format <module>@<semver> . Properties Name Type Description buildTask projen.Task No description. commitGenerated boolean Whether to commit the managed files by default. compileTask projen.Task No description. components projen.Component[] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected boolean Whether or not the project is being ejected. files projen.FileBase[] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name string Project name. outdir string Absolute output directory of this project. packageTask projen.Task No description. postCompileTask projen.Task No description. preCompileTask projen.Task No description. projectBuild projen.ProjectBuild Manages the build process of the project. projenCommand string The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. testTask projen.Task No description. defaultTask projen.Task This is the \"default\" task, the one that executes \"projen\". initProject projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. projectType projen.ProjectType No description. autoApprove projen.github.AutoApprove Auto approve set up for this project. devContainer projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. depsManager projen.python.IPythonDeps API for managing dependencies. envManager projen.python.IPythonEnv API for mangaging the Python runtime environment. moduleName string Python module name (the project name, with any hyphens or periods replaced with underscores). version string Version of the package for distribution (should follow semver). packagingManager projen.python.IPythonPackaging API for managing packaging the project as a library. pytest projen.python.Pytest Pytest component. appEntrypoint string The CDK app entrypoint. cdkConfig projen.awscdk.CdkConfig cdk.json configuration. cdkDeps projen.awscdk.AwsCdkDeps No description. cdkTasks projen.awscdk.CdkTasks Common CDK tasks. cdkVersion string The CDK version this app is using. testdir string The directory in which the python tests reside. buildTask Required public readonly buildTask : Task ; Type: projen.Task commitGenerated Required public readonly commitGenerated : boolean ; Type: boolean Whether to commit the managed files by default. compileTask Required public readonly compileTask : Task ; Type: projen.Task components Required public readonly components : Component []; Type: projen.Component[] Returns all the components within this project. deps Required public readonly deps : Dependencies ; Type: projen.Dependencies Project dependencies. ejected Required public readonly ejected : boolean ; Type: boolean Whether or not the project is being ejected. files Required public readonly files : FileBase []; Type: projen.FileBase[] All files in this project. gitattributes Required public readonly gitattributes : GitAttributesFile ; Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public readonly gitignore : IgnoreFile ; Type: projen.IgnoreFile .gitignore. logger Required public readonly logger : Logger ; Type: projen.Logger Logging utilities. name Required public readonly name : string ; Type: string Project name. outdir Required public readonly outdir : string ; Type: string Absolute output directory of this project. packageTask Required public readonly packageTask : Task ; Type: projen.Task postCompileTask Required public readonly postCompileTask : Task ; Type: projen.Task preCompileTask Required public readonly preCompileTask : Task ; Type: projen.Task projectBuild Required public readonly projectBuild : ProjectBuild ; Type: projen.ProjectBuild Manages the build process of the project. projenCommand Required public readonly projenCommand : string ; Type: string The command to use in order to run the projen CLI. root Required public readonly root : Project ; Type: projen.Project The root project. tasks Required public readonly tasks : Tasks ; Type: projen.Tasks Project tasks. testTask Required public readonly testTask : Task ; Type: projen.Task defaultTask Optional public readonly defaultTask : Task ; Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public readonly initProject : InitProject ; Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public readonly parent : Project ; Type: projen.Project A parent project. If undefined, this is the root project. projectType Required public readonly projectType : ProjectType ; Type: projen.ProjectType autoApprove Optional public readonly autoApprove : AutoApprove ; Type: projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public readonly devContainer : DevContainer ; Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public readonly github : GitHub ; Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public readonly gitpod : Gitpod ; Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public readonly vscode : VsCode ; Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. depsManager Required public readonly depsManager : IPythonDeps ; Type: projen.python.IPythonDeps API for managing dependencies. envManager Required public readonly envManager : IPythonEnv ; Type: projen.python.IPythonEnv API for mangaging the Python runtime environment. moduleName Required public readonly module Name : string ; Type: string Python module name (the project name, with any hyphens or periods replaced with underscores). version Required public readonly version : string ; Type: string Version of the package for distribution (should follow semver). packagingManager Optional public readonly packagingManager : IPythonPackaging ; Type: projen.python.IPythonPackaging API for managing packaging the project as a library. Only applies when the projectType is LIB. pytest Optional public readonly pytest : Pytest ; Type: projen.python.Pytest Pytest component. appEntrypoint Required public readonly appEntrypoint : string ; Type: string The CDK app entrypoint. cdkConfig Required public readonly cdkConfig : CdkConfig ; Type: projen.awscdk.CdkConfig cdk.json configuration. cdkDeps Required public readonly cdkDeps : AwsCdkDeps ; Type: projen.awscdk.AwsCdkDeps cdkTasks Required public readonly cdkTasks : CdkTasks ; Type: projen.awscdk.CdkTasks Common CDK tasks. cdkVersion Required public readonly cdkVersion : string ; Type: string The CDK version this app is using. testdir Required public readonly testdir : string ; Type: string The directory in which the python tests reside. Constants Name Type Description DEFAULT_TASK string The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public readonly DEFAULT_TASK : string ; Type: string The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files. PDKPipelineTsProject Synthesizes a Typescript Project with a CI/CD pipeline. Initializers import { pipeline } from 'aws-prototyping-sdk' new pipeline . PDKPipelineTsProject ( options : PDKPipelineTsProjectOptions ) Name Type Description options PDKPipelineTsProjectOptions No description. options Required Type: PDKPipelineTsProjectOptions Methods Name Description addExcludeFromCleanup Exclude the matching files from pre-synth cleanup. addGitIgnore Adds a .gitignore pattern. addPackageIgnore Exclude these files from the bundled package. addTask Adds a new task to this project. addTip Prints a \"tip\" message during synthesis. annotateGenerated Marks the provided file(s) as being generated. postSynthesize Called after all components are synthesized. preSynthesize Called before all components are synthesized. removeTask Removes a task from a project. runTaskCommand Returns the shell command to execute in order to run a task. synth Synthesize all project files into outdir . tryFindFile Finds a file at the specified relative path within this project and all its subprojects. tryFindJsonFile Finds a json file by name. tryFindObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. tryRemoveFile Finds a file at the specified relative path within this project and removes it. addBins No description. addBundledDeps Defines bundled dependencies. addCompileCommand DEPRECATED. addDeps Defines normal dependencies. addDevDeps Defines development/test dependencies. addFields Directly set fields in package.json . addKeywords Adds keywords to package.json (deduplicated). addPeerDeps Defines peer dependencies. addTestCommand DEPRECATED. hasScript Indicates if a script by the name name is defined. removeScript Removes the npm script (always successful). renderWorkflowSetup Returns the set of workflow steps which should be executed to bootstrap a workflow. setScript Replaces the contents of an npm package.json script. addCdkDependency Adds an AWS CDK module dependencies. addExcludeFromCleanup public addExcludeFromCleanup ( globs : string ) : void Exclude the matching files from pre-synth cleanup. Can be used when, for example, some source files include the projen marker and we don't want them to be erased during synth. globs Required Type: string The glob patterns to match. addGitIgnore public addGitIgnore ( pattern : string ) : void Adds a .gitignore pattern. pattern Required Type: string The glob pattern to ignore. addPackageIgnore public addPackageIgnore ( pattern : string ) : void Exclude these files from the bundled package. Implemented by project types based on the packaging mechanism. For example, NodeProject delegates this to .npmignore . pattern Required Type: string addTask public addTask ( name : string , props? : TaskOptions ) : Task Adds a new task to this project. This will fail if the project already has a task with this name. name Required Type: string The task name to add. props Optional Type: projen.TaskOptions Task properties. ~~ addTip ~~ public addTip ( message : string ) : void Prints a \"tip\" message during synthesis. message Required Type: string The message. annotateGenerated public annotateGenerated ( glob : string ) : void Marks the provided file(s) as being generated. This is achieved using the github-linguist attributes. Generated files do not count against the repository statistics and language breakdown. https://github.com/github/linguist/blob/master/docs/overrides.md glob Required Type: string the glob pattern to match (could be a file path). postSynthesize public postSynthesize () : void Called after all components are synthesized. Order is not guaranteed. preSynthesize public preSynthesize () : void Called before all components are synthesized. removeTask public removeTask ( name : string ) : Task Removes a task from a project. name Required Type: string The name of the task to remove. runTaskCommand public runTaskCommand ( task : Task ) : string Returns the shell command to execute in order to run a task. This will typically be npx projen TASK . task Required Type: projen.Task The task for which the command is required. synth public synth () : void Synthesize all project files into outdir . Call \"this.preSynthesize()\" Delete all generated files Synthesize all sub-projects Synthesize all components of this project Call \"postSynthesize()\" for all components of this project Call \"this.postSynthesize()\" tryFindFile public tryFindFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and all its subprojects. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. ~~ tryFindJsonFile ~~ public tryFindJsonFile ( filePath : string ) : JsonFile Finds a json file by name. filePath Required Type: string The file path. tryFindObjectFile public tryFindObjectFile ( filePath : string ) : ObjectFile Finds an object file (like JsonFile, YamlFile, etc.) by name. filePath Required Type: string The file path. tryRemoveFile public tryRemoveFile ( filePath : string ) : FileBase Finds a file at the specified relative path within this project and removes it. filePath Required Type: string The file path. If this path is relative, it will be resolved from the root of this project. addBins public addBins ( bins : {[ key : string ] : string }) : void bins Required Type: {[ key: string ]: string} addBundledDeps public addBundledDeps ( deps : string ) : void Defines bundled dependencies. Bundled dependencies will be added as normal dependencies as well as to the bundledDependencies section of your package.json . deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addCompileCommand ~~ public addCompileCommand ( commands : string ) : void DEPRECATED. commands Required Type: string addDeps public addDeps ( deps : string ) : void Defines normal dependencies. deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addDevDeps public addDevDeps ( deps : string ) : void Defines development/test dependencies. deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . addFields public addFields ( fields : {[ key : string ] : any }) : void Directly set fields in package.json . fields Required Type: {[ key: string ]: any} The fields to set. addKeywords public addKeywords ( keywords : string ) : void Adds keywords to package.json (deduplicated). keywords Required Type: string The keywords to add. addPeerDeps public addPeerDeps ( deps : string ) : void Defines peer dependencies. When adding peer dependencies, a devDependency will also be added on the pinned version of the declared peer. This will ensure that you are testing your code against the minimum version required from your consumers. deps Required Type: string Names modules to install. By default, the the dependency will be installed in the next npx projen run and the version will be recorded in your package.json file. You can upgrade manually or using yarn add/upgrade . If you wish to specify a version range use this syntax: module@^7 . ~~ addTestCommand ~~ public addTestCommand ( commands : string ) : void DEPRECATED. commands Required Type: string hasScript public hasScript ( name : string ) : boolean Indicates if a script by the name name is defined. name Required Type: string The name of the script. removeScript public removeScript ( name : string ) : void Removes the npm script (always successful). name Required Type: string The name of the script. renderWorkflowSetup public renderWorkflowSetup ( options? : RenderWorkflowSetupOptions ) : JobStep [] Returns the set of workflow steps which should be executed to bootstrap a workflow. options Optional Type: projen.javascript.RenderWorkflowSetupOptions Options. setScript public setScript ( name : string , command : string ) : void Replaces the contents of an npm package.json script. name Required Type: string The script name. command Required Type: string The command to execute. addCdkDependency public addCdkDependency ( module s : string ) : void Adds an AWS CDK module dependencies. modules Required Type: string The list of modules to depend on. Properties Name Type Description buildTask projen.Task No description. commitGenerated boolean Whether to commit the managed files by default. compileTask projen.Task No description. components projen.Component[] Returns all the components within this project. deps projen.Dependencies Project dependencies. ejected boolean Whether or not the project is being ejected. files projen.FileBase[] All files in this project. gitattributes projen.GitAttributesFile The .gitattributes file for this repository. gitignore projen.IgnoreFile .gitignore. logger projen.Logger Logging utilities. name string Project name. outdir string Absolute output directory of this project. packageTask projen.Task No description. postCompileTask projen.Task No description. preCompileTask projen.Task No description. projectBuild projen.ProjectBuild Manages the build process of the project. projenCommand string The command to use in order to run the projen CLI. root projen.Project The root project. tasks projen.Tasks Project tasks. testTask projen.Task No description. defaultTask projen.Task This is the \"default\" task, the one that executes \"projen\". initProject projen.InitProject The options used when this project is bootstrapped via projen new . parent projen.Project A parent project. projectType projen.ProjectType No description. autoApprove projen.github.AutoApprove Auto approve set up for this project. devContainer projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). github projen.github.GitHub Access all github components. gitpod projen.Gitpod Access for Gitpod. vscode projen.vscode.VsCode Access all VSCode components. allowLibraryDependencies boolean No description. artifactsDirectory string The build output directory. artifactsJavascriptDirectory string The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler projen.javascript.Bundler No description. entrypoint string No description. manifest any No description. package projen.javascript.NodePackage API for managing the node package. packageManager projen.javascript.NodePackageManager The package manager to use. runScriptCommand string The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. buildWorkflow projen.build.BuildWorkflow The PR build GitHub workflow. buildWorkflowJobId string The job ID of the build workflow. jest projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion string Maximum node version required by this package. minNodeVersion string Minimum node.js version required by this package. npmignore projen.IgnoreFile The .npmignore file. prettier projen.javascript.Prettier No description. publisher projen.release.Publisher Package publisher. release projen.release.Release Release management. upgradeWorkflow projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory string No description. libdir string The directory in which compiled .js files reside. srcdir string The directory in which the .ts sources reside. testdir string The directory in which tests reside. tsconfigDev projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask projen.Task The \"watch\" task. docgen boolean No description. eslint projen.javascript.Eslint No description. tsconfig projen.javascript.TypescriptConfig No description. tsconfigEslint projen.javascript.TypescriptConfig No description. appEntrypoint string The CDK app entrypoint. cdkConfig projen.awscdk.CdkConfig cdk.json configuration. cdkDeps projen.awscdk.AwsCdkDeps No description. cdkTasks projen.awscdk.CdkTasks Common CDK tasks. cdkVersion string The CDK version this app is using. buildTask Required public readonly buildTask : Task ; Type: projen.Task commitGenerated Required public readonly commitGenerated : boolean ; Type: boolean Whether to commit the managed files by default. compileTask Required public readonly compileTask : Task ; Type: projen.Task components Required public readonly components : Component []; Type: projen.Component[] Returns all the components within this project. deps Required public readonly deps : Dependencies ; Type: projen.Dependencies Project dependencies. ejected Required public readonly ejected : boolean ; Type: boolean Whether or not the project is being ejected. files Required public readonly files : FileBase []; Type: projen.FileBase[] All files in this project. gitattributes Required public readonly gitattributes : GitAttributesFile ; Type: projen.GitAttributesFile The .gitattributes file for this repository. gitignore Required public readonly gitignore : IgnoreFile ; Type: projen.IgnoreFile .gitignore. logger Required public readonly logger : Logger ; Type: projen.Logger Logging utilities. name Required public readonly name : string ; Type: string Project name. outdir Required public readonly outdir : string ; Type: string Absolute output directory of this project. packageTask Required public readonly packageTask : Task ; Type: projen.Task postCompileTask Required public readonly postCompileTask : Task ; Type: projen.Task preCompileTask Required public readonly preCompileTask : Task ; Type: projen.Task projectBuild Required public readonly projectBuild : ProjectBuild ; Type: projen.ProjectBuild Manages the build process of the project. projenCommand Required public readonly projenCommand : string ; Type: string The command to use in order to run the projen CLI. root Required public readonly root : Project ; Type: projen.Project The root project. tasks Required public readonly tasks : Tasks ; Type: projen.Tasks Project tasks. testTask Required public readonly testTask : Task ; Type: projen.Task defaultTask Optional public readonly defaultTask : Task ; Type: projen.Task This is the \"default\" task, the one that executes \"projen\". Undefined if the project is being ejected. initProject Optional public readonly initProject : InitProject ; Type: projen.InitProject The options used when this project is bootstrapped via projen new . It includes the original set of options passed to the CLI and also the JSII FQN of the project type. parent Optional public readonly parent : Project ; Type: projen.Project A parent project. If undefined, this is the root project. projectType Required public readonly projectType : ProjectType ; Type: projen.ProjectType autoApprove Optional public readonly autoApprove : AutoApprove ; Type: projen.github.AutoApprove Auto approve set up for this project. devContainer Optional public readonly devContainer : DevContainer ; Type: projen.vscode.DevContainer Access for .devcontainer.json (used for GitHub Codespaces). This will be undefined if devContainer boolean is false github Optional public readonly github : GitHub ; Type: projen.github.GitHub Access all github components. This will be undefined for subprojects. gitpod Optional public readonly gitpod : Gitpod ; Type: projen.Gitpod Access for Gitpod. This will be undefined if gitpod boolean is false vscode Optional public readonly vscode : VsCode ; Type: projen.vscode.VsCode Access all VSCode components. This will be undefined for subprojects. ~~ allowLibraryDependencies ~~ Required Deprecated: use package.allowLibraryDependencies public readonly allowLibraryDependencies : boolean ; Type: boolean artifactsDirectory Required public readonly artifactsDirectory : string ; Type: string The build output directory. An npm tarball will be created under the js subdirectory. For example, if this is set to dist (the default), the npm tarball will be placed under dist/js/boom-boom-1.2.3.tg . artifactsJavascriptDirectory Required public readonly artifactsJavascriptDirectory : string ; Type: string The location of the npm tarball after build ( ${artifactsDirectory}/js ). bundler Required public readonly bundler : Bundler ; Type: projen.javascript.Bundler ~~ entrypoint ~~ Required Deprecated: use package.entrypoint public readonly entrypoint : string ; Type: string ~~ manifest ~~ Required Deprecated: use package.addField(x, y) public readonly manifest : any ; Type: any package Required public readonly package : NodePackage ; Type: projen.javascript.NodePackage API for managing the node package. ~~ packageManager ~~ Required Deprecated: use package.packageManager public readonly packageManager : NodePackageManager ; Type: projen.javascript.NodePackageManager The package manager to use. runScriptCommand Required public readonly runScriptCommand : string ; Type: string The command to use to run scripts (e.g. yarn run or npm run depends on the package manager). autoMerge Optional public readonly autoMerge : AutoMerge ; Type: projen.github.AutoMerge Component that sets up mergify for merging approved pull requests. buildWorkflow Optional public readonly buildWorkflow : BuildWorkflow ; Type: projen.build.BuildWorkflow The PR build GitHub workflow. undefined if buildWorkflow is disabled. buildWorkflowJobId Optional public readonly buildWorkflowJobId : string ; Type: string The job ID of the build workflow. jest Optional public readonly jest : Jest ; Type: projen.javascript.Jest The Jest configuration (if enabled). maxNodeVersion Optional public readonly maxNodeVersion : string ; Type: string Maximum node version required by this package. minNodeVersion Optional public readonly minNodeVersion : string ; Type: string Minimum node.js version required by this package. npmignore Optional public readonly npmignore : IgnoreFile ; Type: projen.IgnoreFile The .npmignore file. prettier Optional public readonly prettier : Prettier ; Type: projen.javascript.Prettier ~~ publisher ~~ Optional Deprecated: use release.publisher . public readonly publisher : Publisher ; Type: projen.release.Publisher Package publisher. This will be undefined if the project does not have a release workflow. release Optional public readonly release : Release ; Type: projen.release.Release Release management. upgradeWorkflow Optional public readonly upgradeWorkflow : UpgradeDependencies ; Type: projen.javascript.UpgradeDependencies The upgrade workflow. docsDirectory Required public readonly docsDirectory : string ; Type: string libdir Required public readonly libdir : string ; Type: string The directory in which compiled .js files reside. srcdir Required public readonly srcdir : string ; Type: string The directory in which the .ts sources reside. testdir Required public readonly testdir : string ; Type: string The directory in which tests reside. tsconfigDev Required public readonly tsconfigDev : TypescriptConfig ; Type: projen.javascript.TypescriptConfig A typescript configuration file which covers all files (sources, tests, projen). watchTask Required public readonly watchTask : Task ; Type: projen.Task The \"watch\" task. docgen Optional public readonly docgen : boolean ; Type: boolean eslint Optional public readonly eslint : Eslint ; Type: projen.javascript.Eslint tsconfig Optional public readonly tsconfig : TypescriptConfig ; Type: projen.javascript.TypescriptConfig tsconfigEslint Optional public readonly tsconfigEslint : TypescriptConfig ; Type: projen.javascript.TypescriptConfig appEntrypoint Required public readonly appEntrypoint : string ; Type: string The CDK app entrypoint. cdkConfig Required public readonly cdkConfig : CdkConfig ; Type: projen.awscdk.CdkConfig cdk.json configuration. cdkDeps Required public readonly cdkDeps : AwsCdkDeps ; Type: projen.awscdk.AwsCdkDeps cdkTasks Required public readonly cdkTasks : CdkTasks ; Type: projen.awscdk.CdkTasks Common CDK tasks. cdkVersion Required public readonly cdkVersion : string ; Type: string The CDK version this app is using. Constants Name Type Description DEFAULT_TASK string The name of the default task (the task executed when projen is run without arguments). DEFAULT_TASK Required public readonly DEFAULT_TASK : string ; Type: string The name of the default task (the task executed when projen is run without arguments). Normally this task should synthesize the project files.","title":"Index"},{"location":"typescript/pipeline/index.html#cdk-nag","text":"In order to keep CDK Nag happy, make sure you build the pipeline before synth as per aws-cdk#18440 .","title":"CDK Nag"},{"location":"typescript/pipeline/index.html#api-reference","text":"","title":"API Reference "},{"location":"typescript/pipeline/index.html#constructs","text":"","title":"Constructs "},{"location":"typescript/pipeline/index.html#pdkpipeline","text":"An extension to CodePipeline which configures sane defaults for a NX Monorepo codebase. In addition to this, it also creates a CodeCommit repository with automated PR builds and approvals.","title":"PDKPipeline "},{"location":"typescript/pipeline/index.html#sonarcodescanner","text":"","title":"SonarCodeScanner "},{"location":"typescript/pipeline/index.html#structs","text":"","title":"Structs "},{"location":"typescript/pipeline/index.html#pdkpipelinejavaprojectoptions","text":"Configuration options for the PDKPipelineJavaProject.","title":"PDKPipelineJavaProjectOptions "},{"location":"typescript/pipeline/index.html#pdkpipelineprops","text":"Properties to configure the PDKPipeline. Note: Due to limitations with JSII and generic support it should be noted that the synth, synthShellStepPartialProps.input and synthShellStepPartialProps.primaryOutputDirectory properties will be ignored if passed in to this construct. synthShellStepPartialProps.commands is marked as a required field, however if you pass in [] the default commands of this construct will be retained.","title":"PDKPipelineProps "},{"location":"typescript/pipeline/index.html#pdkpipelinepyprojectoptions","text":"Configuration options for the PDKPipelinePyProject.","title":"PDKPipelinePyProjectOptions "},{"location":"typescript/pipeline/index.html#pdkpipelinetsprojectoptions","text":"Configuration options for the PDKPipelineTsProject.","title":"PDKPipelineTsProjectOptions "},{"location":"typescript/pipeline/index.html#sonarcodescannerconfig","text":"","title":"SonarCodeScannerConfig "},{"location":"typescript/pipeline/index.html#sonarcodescannerprops","text":"SonarCodeScanners properties.","title":"SonarCodeScannerProps "},{"location":"typescript/pipeline/index.html#classes","text":"","title":"Classes "},{"location":"typescript/pipeline/index.html#pdkpipelinejavaproject","text":"Synthesizes a Java Project with a CI/CD pipeline.","title":"PDKPipelineJavaProject "},{"location":"typescript/pipeline/index.html#pdkpipelinepyproject","text":"Synthesizes a Python Project with a CI/CD pipeline.","title":"PDKPipelinePyProject "},{"location":"typescript/pipeline/index.html#pdkpipelinetsproject","text":"Synthesizes a Typescript Project with a CI/CD pipeline.","title":"PDKPipelineTsProject "},{"location":"typescript/static-website/index.html","text":"Experimental Warning This is packaged in a separate module while the API is being stabilized. This package is subject to non-backward compatible changes or removal in any future version. Breaking changes will be announced in the release notes. Whilst you may use this package, you may need to update your source code when upgrading to a newer version. Once we stabilize the module, it will be included into the stable aws-prototyping-sdk library. Experimental Usage To use this package, add a dependency on: @aws-prototyping-sdk/static-website The static-website module is able to deploy your pre-packaged static website content into an S3 Bucket, fronted by Cloudfront. This module uses an Origin Access Identity to ensure your Bucket can only be accessed via Cloudfront and is configured to only allow HTTPS requests by default. Custom runtime configurations can also be specified which will emit a runtime-config.json file along with your website content. Typically this includes resource Arns, Id's etc which may need to be referenced from your website. This package uses sane defaults and at a minimum only requires the path to your website assets. Below is a conceptual view of the default architecture this module creates: Cloudfront Distribution (HTTPS only) -> S3 Bucket (Private via OAI) |_ WAF V2 ACL |_ index.html (+ other website files and assets) |_ runtime-config.json A typical use case is to create a static website with AuthN. To accomplish this, we can leverage the UserIdentity to create the User Pool (Cognito by default) and Identity Pool. We can then pipe the respective pool id's as runtimeOptions into the StaticWebsite. After the website is deployed, these values can be interrogated from the runtime-config.json deployed alongside the website in order to perform authentication within the app using something like the Amplify Auth API . const userIdentity = new UserIdentity ( this , 'UserIdentity' ); new StaticWebsite ( this , 'StaticWebsite' , { websiteContentPath : '<relative>/<path>/<to>/<built>/<website>' , runtimeOptions : { jsonPayload : { region : Stack.of ( this ). region , identityPoolId : userIdentity.identityPool.identityPoolId , userPoolId : userIdentity.userPool?.userPoolId , userPoolWebClientId : userIdentity.userPoolClient?.userPoolClientId , } }, }); API Reference Constructs CloudfrontWebAcl This construct creates a WAFv2 Web ACL for cloudfront in the us-east-1 region (required for cloudfront) no matter the region of the parent cdk stack. Initializers import { CloudfrontWebAcl } from '@aws-prototyping-sdk/static-website' new CloudfrontWebAcl ( scope : Construct , id : string , props? : CloudFrontWebAclProps ) Name Type Description scope constructs.Construct No description. id string No description. props CloudFrontWebAclProps No description. scope Required Type: constructs.Construct id Required Type: string props Optional Type: CloudFrontWebAclProps Methods Name Description toString Returns a string representation of this construct. toString public toString () : string Returns a string representation of this construct. Static Functions Name Description isConstruct Checks if x is a construct. isConstruct import { CloudfrontWebAcl } from '@aws-prototyping-sdk/static-website' CloudfrontWebAcl . isConstruct ( x : any ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: any Any object. Properties Name Type Description node constructs.Node The tree node. webAclArn string No description. webAclId string No description. node Required public readonly node : Node ; Type: constructs.Node The tree node. webAclArn Required public readonly webAclArn : string ; Type: string webAclId Required public readonly webAclId : string ; Type: string StaticWebsite Deploys a Static Website using by default a private S3 bucket as an origin and Cloudfront as the entrypoint. This construct configures a webAcl containing rules that are generally applicable to web applications. This provides protection against exploitation of a wide range of vulnerabilities, including some of the high risk and commonly occurring vulnerabilities described in OWASP publications such as OWASP Top 10. Initializers import { StaticWebsite } from '@aws-prototyping-sdk/static-website' new StaticWebsite ( scope : Construct , id : string , props : StaticWebsiteProps ) Name Type Description scope constructs.Construct No description. id string No description. props StaticWebsiteProps No description. scope Required Type: constructs.Construct id Required Type: string props Required Type: StaticWebsiteProps Methods Name Description toString Returns a string representation of this construct. toString public toString () : string Returns a string representation of this construct. Static Functions Name Description isConstruct Checks if x is a construct. isConstruct import { StaticWebsite } from '@aws-prototyping-sdk/static-website' StaticWebsite . isConstruct ( x : any ) Checks if x is a construct. Use this method instead of instanceof to properly detect Construct instances, even when the construct library is symlinked. Explanation: in JavaScript, multiple copies of the constructs library on disk are seen as independent, completely different libraries. As a consequence, the class Construct in each copy of the constructs library is seen as a different class, and an instance of one class will not test as instanceof the other class. npm install will not create installations like this, but users may manually symlink construct libraries together or use a monorepo tool: in those cases, multiple copies of the constructs library can be accidentally installed, and instanceof will behave unpredictably. It is safest to avoid using instanceof , and using this type-testing method instead. x Required Type: any Any object. Properties Name Type Description node constructs.Node The tree node. bucketDeployment aws-cdk-lib.aws_s3_deployment.BucketDeployment No description. cloudFrontDistribution aws-cdk-lib.aws_cloudfront.Distribution No description. websiteBucket aws-cdk-lib.aws_s3.IBucket No description. node Required public readonly node : Node ; Type: constructs.Node The tree node. bucketDeployment Required public readonly bucketDeployment : BucketDeployment ; Type: aws-cdk-lib.aws_s3_deployment.BucketDeployment cloudFrontDistribution Required public readonly cloudFrontDistribution : Distribution ; Type: aws-cdk-lib.aws_cloudfront.Distribution websiteBucket Required public readonly websiteBucket : IBucket ; Type: aws-cdk-lib.aws_s3.IBucket Structs CidrAllowList Representation of a CIDR range. Initializer import { CidrAllowList } from '@aws-prototyping-sdk/static-website' const cidrAllowList : CidrAllowList = { ... } Properties Name Type Description cidrRanges string[] Specify an IPv4 address by using CIDR notation. cidrType string Type of CIDR range. cidrRanges Required public readonly cidrRanges : string []; Type: string[] Specify an IPv4 address by using CIDR notation. For example: To configure AWS WAF to allow, block, or count requests that originated from the IP address 192.0.2.44, specify 192.0.2.44/32 . To configure AWS WAF to allow, block, or count requests that originated from IP addresses from 192.0.2.0 to 192.0.2.255, specify 192.0.2.0/24 . For more information about CIDR notation, see the Wikipedia entry Classless Inter-Domain Routing . Specify an IPv6 address by using CIDR notation. For example: To configure AWS WAF to allow, block, or count requests that originated from the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify 1111:0000:0000:0000:0000:0000:0000:0111/128 . To configure AWS WAF to allow, block, or count requests that originated from IP addresses 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify 1111:0000:0000:0000:0000:0000:0000:0000/64 . cidrType Required public readonly cidrType : string ; Type: string Type of CIDR range. CloudFrontWebAclProps Properties to configure the web acl. Initializer import { CloudFrontWebAclProps } from '@aws-prototyping-sdk/static-website' const cloudFrontWebAclProps : CloudFrontWebAclProps = { ... } Properties Name Type Description cidrAllowList CidrAllowList List of cidr ranges to allow. managedRules ManagedRule [] List of managed rules to apply to the web acl. cidrAllowList Optional public readonly cidrAllowList : CidrAllowList ; Type: CidrAllowList Default: undefined List of cidr ranges to allow. managedRules Optional public readonly managedRules : ManagedRule []; Type: ManagedRule [] Default: [{ vendor: \"AWS\", name: \"AWSManagedRulesCommonRuleSet\" }] List of managed rules to apply to the web acl. ManagedRule Represents a WAF V2 managed rule. Initializer import { ManagedRule } from '@aws-prototyping-sdk/static-website' const managedRule : ManagedRule = { ... } Properties Name Type Description name string The name of the managed rule group. vendor string The name of the managed rule group vendor. name Required public readonly name : string ; Type: string The name of the managed rule group. You use this, along with the vendor name, to identify the rule group. vendor Required public readonly vendor : string ; Type: string The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group. RuntimeOptions Dynamic configuration which gets resolved only during deployment. Example // Will store a JSON file called runtime-config.json in the root of the StaticWebsite S3 bucket containing any // and all resolved values. const runtimeConfig = { jsonPayload : { bucketArn : s3Bucket.bucketArn }}; new StaticWebsite ( scope , 'StaticWebsite' , { websiteContentPath : 'path/to/website' , runtimeConfig }); Initializer import { RuntimeOptions } from '@aws-prototyping-sdk/static-website' const runtimeOptions : RuntimeOptions = { ... } Properties Name Type Description jsonPayload any Arbitrary JSON payload containing runtime values to deploy. jsonFileName string File name to store runtime configuration (jsonPayload). jsonPayload Required public readonly jsonPayload : any ; Type: any Arbitrary JSON payload containing runtime values to deploy. Typically this contains resourceArns, etc which are only known at deploy time. Example { userPoolId : some.userPool.userPoolId , someResourceArn : some.resource.Arn } jsonFileName Optional public readonly jsonFileName : string ; Type: string Default: \"runtime-config.json\" File name to store runtime configuration (jsonPayload). Must follow pattern: '*.json' StaticWebsiteProps Properties for configuring the StaticWebsite. Initializer import { StaticWebsiteProps } from '@aws-prototyping-sdk/static-website' const staticWebsiteProps : StaticWebsiteProps = { ... } Properties Name Type Description websiteContentPath string Path to the directory containing the static website files and assets. defaultWebsiteBucketEncryption aws-cdk-lib.aws_s3.BucketEncryption Bucket encryption to use for the default bucket. defaultWebsiteBucketEncryptionKey aws-cdk-lib.aws_kms.Key A predefined KMS customer encryption key to use for the default bucket that gets created. distributionProps aws-cdk-lib.aws_cloudfront.DistributionProps Custom distribution properties. runtimeOptions RuntimeOptions Dynamic configuration which gets resolved only during deployment. webAclProps CloudFrontWebAclProps Limited configuration settings for the generated webAcl. websiteBucket aws-cdk-lib.aws_s3.IBucket Predefined bucket to deploy the website into. websiteContentPath Required public readonly websiteContentPath : string ; Type: string Path to the directory containing the static website files and assets. This directory must contain an index.html file. defaultWebsiteBucketEncryption Optional public readonly defaultWebsiteBucketEncryption : BucketEncryption ; Type: aws-cdk-lib.aws_s3.BucketEncryption Default: \"S3MANAGED\" Bucket encryption to use for the default bucket. Supported options are KMS or S3MANAGED. Note: If planning to use KMS, ensure you associate a Lambda Edge function to sign requests to S3 as OAI does not currently support KMS encryption. Refer to { @link https://aws.amazon.com/blogs/networking-and-content-delivery/serving-sse-kms-encrypted-content-from-s3-using-cloudfront/ } defaultWebsiteBucketEncryptionKey Optional public readonly defaultWebsiteBucketEncryptionKey : Key ; Type: aws-cdk-lib.aws_kms.Key A predefined KMS customer encryption key to use for the default bucket that gets created. Note: This is only used if the websiteBucket is left undefined, otherwise all settings from the provided websiteBucket will be used. distributionProps Optional public readonly distributionProps : DistributionProps ; Type: aws-cdk-lib.aws_cloudfront.DistributionProps Custom distribution properties. Note: defaultBehaviour.origin is a required parameter, however it will not be used as this construct will wire it on your behalf. You will need to pass in an instance of StaticWebsiteOrigin (NoOp) to keep the compiler happy. runtimeOptions Optional public readonly runtimeOptions : RuntimeOptions ; Type: RuntimeOptions Dynamic configuration which gets resolved only during deployment. webAclProps Optional public readonly webAclProps : CloudFrontWebAclProps ; Type: CloudFrontWebAclProps Limited configuration settings for the generated webAcl. For more advanced settings, create your own ACL and pass in the webAclId as a param to distributionProps. Note: If pass in your own ACL, make sure the SCOPE is CLOUDFRONT and it is created in us-east-1. websiteBucket Optional public readonly websiteBucket : IBucket ; Type: aws-cdk-lib.aws_s3.IBucket Predefined bucket to deploy the website into. Classes StaticWebsiteOrigin Implements: aws-cdk-lib.aws_cloudfront.IOrigin If passing in distributionProps, the default behaviour.origin is a required parameter. An instance of this class can be passed in to make the compiler happy. Initializers import { StaticWebsiteOrigin } from '@aws-prototyping-sdk/static-website' new StaticWebsiteOrigin () Name Type Description Methods Name Description bind The method called when a given Origin is added (for the first time) to a Distribution. bind public bind ( _scope : Construct , _options : OriginBindOptions ) : OriginBindConfig The method called when a given Origin is added (for the first time) to a Distribution. _scope Required Type: constructs.Construct _options Required Type: aws-cdk-lib.aws_cloudfront.OriginBindOptions","title":"Index"},{"location":"typescript/static-website/index.html#api-reference","text":"","title":"API Reference "},{"location":"typescript/static-website/index.html#constructs","text":"","title":"Constructs "},{"location":"typescript/static-website/index.html#cloudfrontwebacl","text":"This construct creates a WAFv2 Web ACL for cloudfront in the us-east-1 region (required for cloudfront) no matter the region of the parent cdk stack.","title":"CloudfrontWebAcl "},{"location":"typescript/static-website/index.html#staticwebsite","text":"Deploys a Static Website using by default a private S3 bucket as an origin and Cloudfront as the entrypoint. This construct configures a webAcl containing rules that are generally applicable to web applications. This provides protection against exploitation of a wide range of vulnerabilities, including some of the high risk and commonly occurring vulnerabilities described in OWASP publications such as OWASP Top 10.","title":"StaticWebsite "},{"location":"typescript/static-website/index.html#structs","text":"","title":"Structs "},{"location":"typescript/static-website/index.html#cidrallowlist","text":"Representation of a CIDR range.","title":"CidrAllowList "},{"location":"typescript/static-website/index.html#cloudfrontwebaclprops","text":"Properties to configure the web acl.","title":"CloudFrontWebAclProps "},{"location":"typescript/static-website/index.html#managedrule","text":"Represents a WAF V2 managed rule.","title":"ManagedRule "},{"location":"typescript/static-website/index.html#runtimeoptions","text":"Dynamic configuration which gets resolved only during deployment. Example // Will store a JSON file called runtime-config.json in the root of the StaticWebsite S3 bucket containing any // and all resolved values. const runtimeConfig = { jsonPayload : { bucketArn : s3Bucket.bucketArn }}; new StaticWebsite ( scope , 'StaticWebsite' , { websiteContentPath : 'path/to/website' , runtimeConfig });","title":"RuntimeOptions "},{"location":"typescript/static-website/index.html#staticwebsiteprops","text":"Properties for configuring the StaticWebsite.","title":"StaticWebsiteProps "},{"location":"typescript/static-website/index.html#classes","text":"","title":"Classes "},{"location":"typescript/static-website/index.html#staticwebsiteorigin","text":"Implements: aws-cdk-lib.aws_cloudfront.IOrigin If passing in distributionProps, the default behaviour.origin is a required parameter. An instance of this class can be passed in to make the compiler happy.","title":"StaticWebsiteOrigin "}]}